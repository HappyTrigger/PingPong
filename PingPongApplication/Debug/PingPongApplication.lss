
PingPongApplication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  00000f50  00000fe4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080016a  0080016a  0000104e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000104e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000300  00000000  00000000  000010aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003d7c  00000000  00000000  000013aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000113e  00000000  00000000  00005126  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000011c6  00000000  00000000  00006264  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000964  00000000  00000000  0000742c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008f0  00000000  00000000  00007d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000024d6  00000000  00000000  00008680  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000280  00000000  00000000  0000ab56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 e5       	ldi	r30, 0x50	; 80
  84:	ff e0       	ldi	r31, 0x0F	; 15
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	aa 36       	cpi	r26, 0x6A	; 106
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	aa e6       	ldi	r26, 0x6A	; 106
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a4 37       	cpi	r26, 0x74	; 116
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 80 02 	call	0x500	; 0x500 <main>
  a6:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <read_adc>:
****************************************************************************/
int read_adc(char channel)
{
	volatile char *ext_adc = (char *) ADC_BASE_ADDR;
	
	*ext_adc = channel;
  ae:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	89 ef       	ldi	r24, 0xF9	; 249
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <read_adc+0x8>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <read_adc+0xe>
  bc:	00 00       	nop
	_delay_ms(1);
	return *ext_adc;
  be:	80 91 00 14 	lds	r24, 0x1400
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	08 95       	ret

000000c6 <CAN_init>:
//#include <avr/interrupt.h>
//#include <avr/delay.h>

void CAN_init()
{
	mcp_init();
  c6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <mcp_init>
	/* Turn off mask/filters, receive any message, rollover enabled */
	mcp_modify_bit(MCP_RXB0CTRL, 0b01100100, 0xFF);
  ca:	4f ef       	ldi	r20, 0xFF	; 255
  cc:	64 e6       	ldi	r22, 0x64	; 100
  ce:	80 e6       	ldi	r24, 0x60	; 96
  d0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <mcp_modify_bit>
	/* Loopback mode enabled */
	mcp_modify_bit(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	60 ee       	ldi	r22, 0xE0	; 224
  d8:	8f e0       	ldi	r24, 0x0F	; 15
  da:	0e 94 f6 01 	call	0x3ec	; 0x3ec <mcp_modify_bit>
  de:	08 95       	ret

000000e0 <CAN_send_message>:
	*/
}


uint8_t CAN_send_message(CANMessage message)
{
  e0:	bf 92       	push	r11
  e2:	cf 92       	push	r12
  e4:	df 92       	push	r13
  e6:	ef 92       	push	r14
  e8:	ff 92       	push	r15
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	2a 97       	sbiw	r28, 0x0a	; 10
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	f8 94       	cli
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	0f be       	out	0x3f, r0	; 63
 100:	cd bf       	out	0x3d, r28	; 61
 102:	09 83       	std	Y+1, r16	; 0x01
 104:	c1 2e       	mov	r12, r17
 106:	1a 83       	std	Y+2, r17	; 0x02
 108:	2b 83       	std	Y+3, r18	; 0x03
 10a:	3c 83       	std	Y+4, r19	; 0x04
 10c:	4d 83       	std	Y+5, r20	; 0x05
 10e:	5e 83       	std	Y+6, r21	; 0x06
 110:	6f 83       	std	Y+7, r22	; 0x07
 112:	78 87       	std	Y+8, r23	; 0x08
 114:	89 87       	std	Y+9, r24	; 0x09
 116:	9a 87       	std	Y+10, r25	; 0x0a
 118:	10 2f       	mov	r17, r16
	uint8_t ctrl = mcp_read(MCP_TXB0CTRL);
 11a:	80 e3       	ldi	r24, 0x30	; 48
 11c:	0e 94 b6 01 	call	0x36c	; 0x36c <mcp_read>
	
	if (test_bit(ctrl, TXREQ))
 120:	98 2f       	mov	r25, r24
 122:	98 70       	andi	r25, 0x08	; 8
 124:	b9 2e       	mov	r11, r25
 126:	83 fd       	sbrc	r24, 3
 128:	2d c0       	rjmp	.+90     	; 0x184 <CAN_send_message+0xa4>
	{
		return MESSAGE_PENDING;
	}
	/* Use lower 8bits of ID */
	mcp_write_byte(MCP_TXB0SIDL, (uint8_t)(message.ID << 5));
 12a:	61 2f       	mov	r22, r17
 12c:	62 95       	swap	r22
 12e:	66 0f       	add	r22, r22
 130:	60 7e       	andi	r22, 0xE0	; 224
 132:	82 e3       	ldi	r24, 0x32	; 50
 134:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <mcp_write_byte>
	mcp_write_byte(MCP_TXB0SIDH, (uint8_t)(message.ID >> 3));
 138:	61 2f       	mov	r22, r17
 13a:	66 95       	lsr	r22
 13c:	66 95       	lsr	r22
 13e:	66 95       	lsr	r22
 140:	81 e3       	ldi	r24, 0x31	; 49
 142:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <mcp_write_byte>
	
	mcp_write_byte(MCP_TXB0DLC, (message.length) & 0x0F);
 146:	6c 2d       	mov	r22, r12
 148:	6f 70       	andi	r22, 0x0F	; 15
 14a:	85 e3       	ldi	r24, 0x35	; 53
 14c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <mcp_write_byte>
	
	for (int i = 0; i < message.length; i++)
 150:	d1 2c       	mov	r13, r1
 152:	1c 14       	cp	r1, r12
 154:	1d 04       	cpc	r1, r13
 156:	94 f4       	brge	.+36     	; 0x17c <CAN_send_message+0x9c>
 158:	7e 01       	movw	r14, r28
 15a:	e3 e0       	ldi	r30, 0x03	; 3
 15c:	ee 0e       	add	r14, r30
 15e:	f1 1c       	adc	r15, r1
 160:	00 e0       	ldi	r16, 0x00	; 0
 162:	10 e0       	ldi	r17, 0x00	; 0
	{
		mcp_write_byte(MCP_TXB0D0 + i, message.data_array[i]);
 164:	f7 01       	movw	r30, r14
 166:	61 91       	ld	r22, Z+
 168:	7f 01       	movw	r14, r30
 16a:	86 e3       	ldi	r24, 0x36	; 54
 16c:	80 0f       	add	r24, r16
 16e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <mcp_write_byte>
	mcp_write_byte(MCP_TXB0SIDL, (uint8_t)(message.ID << 5));
	mcp_write_byte(MCP_TXB0SIDH, (uint8_t)(message.ID >> 3));
	
	mcp_write_byte(MCP_TXB0DLC, (message.length) & 0x0F);
	
	for (int i = 0; i < message.length; i++)
 172:	0f 5f       	subi	r16, 0xFF	; 255
 174:	1f 4f       	sbci	r17, 0xFF	; 255
 176:	0c 15       	cp	r16, r12
 178:	1d 05       	cpc	r17, r13
 17a:	a4 f3       	brlt	.-24     	; 0x164 <CAN_send_message+0x84>
	{
		mcp_write_byte(MCP_TXB0D0 + i, message.data_array[i]);
	}
	
	mcp_request_to_send(1);
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 10 02 	call	0x420	; 0x420 <mcp_request_to_send>

	return SUCCESS;
 182:	02 c0       	rjmp	.+4      	; 0x188 <CAN_send_message+0xa8>
{
	uint8_t ctrl = mcp_read(MCP_TXB0CTRL);
	
	if (test_bit(ctrl, TXREQ))
	{
		return MESSAGE_PENDING;
 184:	bb 24       	eor	r11, r11
 186:	b3 94       	inc	r11
	}
	
	mcp_request_to_send(1);

	return SUCCESS;
}
 188:	8b 2d       	mov	r24, r11
 18a:	2a 96       	adiw	r28, 0x0a	; 10
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	f8 94       	cli
 190:	de bf       	out	0x3e, r29	; 62
 192:	0f be       	out	0x3f, r0	; 63
 194:	cd bf       	out	0x3d, r28	; 61
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	ff 90       	pop	r15
 1a0:	ef 90       	pop	r14
 1a2:	df 90       	pop	r13
 1a4:	cf 90       	pop	r12
 1a6:	bf 90       	pop	r11
 1a8:	08 95       	ret

000001aa <CAN_receive_message>:

uint8_t CAN_receive_message(CANMessage* message)
{
 1aa:	ef 92       	push	r14
 1ac:	ff 92       	push	r15
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	8c 01       	movw	r16, r24
	int i = 0;
	uint8_t received = mcp_read(MCP_CANINTF) & (0x01);
 1b8:	8c e2       	ldi	r24, 0x2C	; 44
 1ba:	0e 94 b6 01 	call	0x36c	; 0x36c <mcp_read>
	if (received)
 1be:	80 ff       	sbrs	r24, 0
 1c0:	34 c0       	rjmp	.+104    	; 0x22a <CAN_receive_message+0x80>
	{
		mcp_modify_bit(MCP_CANINTF, 0x01, 0);
 1c2:	40 e0       	ldi	r20, 0x00	; 0
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	8c e2       	ldi	r24, 0x2C	; 44
 1c8:	0e 94 f6 01 	call	0x3ec	; 0x3ec <mcp_modify_bit>
		message->ID = (mcp_read(MCP_RXB0SIDH) << 3);
 1cc:	81 e6       	ldi	r24, 0x61	; 97
 1ce:	0e 94 b6 01 	call	0x36c	; 0x36c <mcp_read>
 1d2:	c8 2f       	mov	r28, r24
 1d4:	cc 0f       	add	r28, r28
 1d6:	cc 0f       	add	r28, r28
 1d8:	cc 0f       	add	r28, r28
 1da:	f8 01       	movw	r30, r16
 1dc:	c0 83       	st	Z, r28
		message->ID |= (mcp_read(MCP_RXB0SIDL) >> 5);
 1de:	82 e6       	ldi	r24, 0x62	; 98
 1e0:	0e 94 b6 01 	call	0x36c	; 0x36c <mcp_read>
 1e4:	82 95       	swap	r24
 1e6:	86 95       	lsr	r24
 1e8:	87 70       	andi	r24, 0x07	; 7
 1ea:	c8 2b       	or	r28, r24
 1ec:	f8 01       	movw	r30, r16
 1ee:	c0 83       	st	Z, r28
		
		message->length = mcp_read(MCP_RXB0DLC) & (0x0F);
 1f0:	85 e6       	ldi	r24, 0x65	; 101
 1f2:	0e 94 b6 01 	call	0x36c	; 0x36c <mcp_read>
 1f6:	8f 70       	andi	r24, 0x0F	; 15
 1f8:	f8 01       	movw	r30, r16
 1fa:	81 83       	std	Z+1, r24	; 0x01
		
		for (i = 0; i < message->length; i++)
 1fc:	88 23       	and	r24, r24
 1fe:	b9 f0       	breq	.+46     	; 0x22e <CAN_receive_message+0x84>
 200:	78 01       	movw	r14, r16
 202:	f2 e0       	ldi	r31, 0x02	; 2
 204:	ef 0e       	add	r14, r31
 206:	f1 1c       	adc	r15, r1
 208:	c0 e0       	ldi	r28, 0x00	; 0
 20a:	d0 e0       	ldi	r29, 0x00	; 0
		{
			message->data_array[i] = mcp_read(MCP_RXB0D0 + i);
 20c:	8c 2f       	mov	r24, r28
 20e:	8a 59       	subi	r24, 0x9A	; 154
 210:	0e 94 b6 01 	call	0x36c	; 0x36c <mcp_read>
 214:	f7 01       	movw	r30, r14
 216:	81 93       	st	Z+, r24
 218:	7f 01       	movw	r14, r30
		message->ID = (mcp_read(MCP_RXB0SIDH) << 3);
		message->ID |= (mcp_read(MCP_RXB0SIDL) >> 5);
		
		message->length = mcp_read(MCP_RXB0DLC) & (0x0F);
		
		for (i = 0; i < message->length; i++)
 21a:	21 96       	adiw	r28, 0x01	; 1
 21c:	f8 01       	movw	r30, r16
 21e:	81 81       	ldd	r24, Z+1	; 0x01
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	c8 17       	cp	r28, r24
 224:	d9 07       	cpc	r29, r25
 226:	94 f3       	brlt	.-28     	; 0x20c <CAN_receive_message+0x62>
 228:	04 c0       	rjmp	.+8      	; 0x232 <CAN_receive_message+0x88>
			message->data_array[i] = mcp_read(MCP_RXB0D0 + i);
		}
	}
	else
	{
		return NO_NEW_MESSAGE;
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	03 c0       	rjmp	.+6      	; 0x234 <CAN_receive_message+0x8a>
	}
	
	return SUCCESS;
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	01 c0       	rjmp	.+2      	; 0x234 <CAN_receive_message+0x8a>
 232:	80 e0       	ldi	r24, 0x00	; 0
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
 240:	08 95       	ret

00000242 <send_joystick_possition>:
#include "CAN_DRIVER.h"
#include "JOYSTICK_DRIVER.h"


uint8_t send_joystick_possition(JoystickPosition joystick_position)
{
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
 24e:	2a 97       	sbiw	r28, 0x0a	; 10
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	f8 94       	cli
 254:	de bf       	out	0x3e, r29	; 62
 256:	0f be       	out	0x3f, r0	; 63
 258:	cd bf       	out	0x3d, r28	; 61
 25a:	26 2f       	mov	r18, r22
	message.data_array[4] = (uint8_t) (joystick_position.yaxis & 0xFF);
	message.data_array[5] = (uint8_t) (joystick_position.yaxis & 0xFF00);
	message.data_array[6] = (uint8_t) (joystick_position.yaxis & 0xFF0000);
	message.data_array[7] = (uint8_t) (joystick_position.yaxis & 0xFF000000);
	*/
	return CAN_send_message(message);
 25c:	01 e0       	ldi	r16, 0x01	; 1
 25e:	18 e0       	ldi	r17, 0x08	; 8
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	40 e0       	ldi	r20, 0x00	; 0
 264:	50 e0       	ldi	r21, 0x00	; 0
 266:	68 2f       	mov	r22, r24
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 70 00 	call	0xe0	; 0xe0 <CAN_send_message>
}
 272:	2a 96       	adiw	r28, 0x0a	; 10
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	f8 94       	cli
 278:	de bf       	out	0x3e, r29	; 62
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	cd bf       	out	0x3d, r28	; 61
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	08 95       	ret

00000288 <read_joystick_position>:
*
* \param in calibration data
* \return Joystick position
****************************************************************************/
JoystickPosition read_joystick_position(JoystickPosition calibration)
{
 288:	cf 92       	push	r12
 28a:	df 92       	push	r13
 28c:	ef 92       	push	r14
 28e:	ff 92       	push	r15
	JoystickPosition position;

	position.xaxis = read_adc(ADC_CH2);
 290:	85 e0       	ldi	r24, 0x05	; 5
 292:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
 296:	6c 01       	movw	r12, r24
	//position.xaxis = ((((position.xaxis - calibration.xaxis)*100)/255)-50)*2;

	position.yaxis = read_adc(ADC_CH1);
 298:	84 e0       	ldi	r24, 0x04	; 4
 29a:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
 29e:	7c 01       	movw	r14, r24
//	position.yaxis = ((((position.yaxis - calibration.yaxis)*100)/255)-50)*2;
	
	return position;
}
 2a0:	c7 01       	movw	r24, r14
 2a2:	b6 01       	movw	r22, r12
 2a4:	ff 90       	pop	r15
 2a6:	ef 90       	pop	r14
 2a8:	df 90       	pop	r13
 2aa:	cf 90       	pop	r12
 2ac:	08 95       	ret

000002ae <joystick_calibration>:
* \brief Calibrate joystick
*
* \return Joystick calibration data
****************************************************************************/
JoystickPosition joystick_calibration()
{
 2ae:	cf 92       	push	r12
 2b0:	df 92       	push	r13
 2b2:	ef 92       	push	r14
 2b4:	ff 92       	push	r15
	
	JoystickPosition position;
	position.xaxis = read_adc(ADC_CH2);
 2b6:	85 e0       	ldi	r24, 0x05	; 5
 2b8:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
 2bc:	6c 01       	movw	r12, r24
	position.yaxis = read_adc(ADC_CH1);
 2be:	84 e0       	ldi	r24, 0x04	; 4
 2c0:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
 2c4:	7c 01       	movw	r14, r24
	position.xaxis -= 127;
 2c6:	8f e7       	ldi	r24, 0x7F	; 127
 2c8:	c8 1a       	sub	r12, r24
 2ca:	d1 08       	sbc	r13, r1
	position.yaxis -= 127;
 2cc:	8f e7       	ldi	r24, 0x7F	; 127
 2ce:	e8 1a       	sub	r14, r24
 2d0:	f1 08       	sbc	r15, r1

	return position;	
}
 2d2:	c7 01       	movw	r24, r14
 2d4:	b6 01       	movw	r22, r12
 2d6:	ff 90       	pop	r15
 2d8:	ef 90       	pop	r14
 2da:	df 90       	pop	r13
 2dc:	cf 90       	pop	r12
 2de:	08 95       	ret

000002e0 <read_touchpad_data>:
* \brief Read Touchpad data
*
* \return Touchpad data
****************************************************************************/
TouchpadData read_touchpad_data()
{
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	cd b7       	in	r28, 0x3d	; 61
 2e6:	de b7       	in	r29, 0x3e	; 62
 2e8:	2c 97       	sbiw	r28, 0x0c	; 12
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	f8 94       	cli
 2ee:	de bf       	out	0x3e, r29	; 62
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	cd bf       	out	0x3d, r28	; 61
	TouchpadData touchpad;
	touchpad.rightTouchPad = read_adc(ADC_CH3);
 2f4:	86 e0       	ldi	r24, 0x06	; 6
 2f6:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
 2fa:	98 87       	std	Y+8, r25	; 0x08
 2fc:	8f 83       	std	Y+7, r24	; 0x07
	touchpad.leftTouchPad = read_adc(ADC_CH4);
 2fe:	87 e0       	ldi	r24, 0x07	; 7
 300:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
 304:	9a 87       	std	Y+10, r25	; 0x0a
 306:	89 87       	std	Y+9, r24	; 0x09
	
	if(test_bit(BUTTON_PORT, LEFT_BUTTON_PIN))
 308:	85 9b       	sbis	0x10, 5	; 16
 30a:	03 c0       	rjmp	.+6      	; 0x312 <read_touchpad_data+0x32>
	{
		touchpad.leftButton = 1;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	8c 87       	std	Y+12, r24	; 0x0c
 310:	01 c0       	rjmp	.+2      	; 0x314 <read_touchpad_data+0x34>
	}
	else
	{
		touchpad.leftButton = 0;
 312:	1c 86       	std	Y+12, r1	; 0x0c
	}
	if(test_bit(BUTTON_PORT, RIGHT_BUTTON_PIN))
 314:	84 9b       	sbis	0x10, 4	; 16
 316:	03 c0       	rjmp	.+6      	; 0x31e <read_touchpad_data+0x3e>
	{
		touchpad.rightButton = 1;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	8b 87       	std	Y+11, r24	; 0x0b
 31c:	01 c0       	rjmp	.+2      	; 0x320 <read_touchpad_data+0x40>
	}
	else
	{
		touchpad.rightButton = 0;	
 31e:	1b 86       	std	Y+11, r1	; 0x0b
	}
	return touchpad;
 320:	86 e0       	ldi	r24, 0x06	; 6
 322:	fe 01       	movw	r30, r28
 324:	37 96       	adiw	r30, 0x07	; 7
 326:	de 01       	movw	r26, r28
 328:	11 96       	adiw	r26, 0x01	; 1
 32a:	01 90       	ld	r0, Z+
 32c:	0d 92       	st	X+, r0
 32e:	8a 95       	dec	r24
 330:	e1 f7       	brne	.-8      	; 0x32a <read_touchpad_data+0x4a>
 332:	29 81       	ldd	r18, Y+1	; 0x01
 334:	3a 81       	ldd	r19, Y+2	; 0x02
 336:	4b 81       	ldd	r20, Y+3	; 0x03
 338:	5c 81       	ldd	r21, Y+4	; 0x04
 33a:	6d 81       	ldd	r22, Y+5	; 0x05
 33c:	7e 81       	ldd	r23, Y+6	; 0x06
}
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	2c 96       	adiw	r28, 0x0c	; 12
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	f8 94       	cli
 348:	de bf       	out	0x3e, r29	; 62
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	cd bf       	out	0x3d, r28	; 61
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	08 95       	ret

00000354 <mcp_turn_on>:
* \brief Enable communication with CAN controller 
*
****************************************************************************/
void mcp_turn_on()
{
	PORTB &= ~(1 << DD_CS);
 354:	c4 98       	cbi	0x18, 4	; 24
 356:	08 95       	ret

00000358 <mcp_turn_off>:
* \brief Disable communication with CAN controller
*
****************************************************************************/
void mcp_turn_off()
{
	PORTB |= (1 << DD_CS);
 358:	c4 9a       	sbi	0x18, 4	; 24
 35a:	08 95       	ret

0000035c <mcp_reset>:
* \brief Reset the CAN controller
*
****************************************************************************/
void mcp_reset()
{
	mcp_turn_on();
 35c:	0e 94 aa 01 	call	0x354	; 0x354 <mcp_turn_on>
	
	SPI_write(MCP_RESET);
 360:	80 ec       	ldi	r24, 0xC0	; 192
 362:	0e 94 ef 02 	call	0x5de	; 0x5de <SPI_write>
	
	mcp_turn_off();
 366:	0e 94 ac 01 	call	0x358	; 0x358 <mcp_turn_off>
 36a:	08 95       	ret

0000036c <mcp_read>:
*
* \param in address from which shall be read
* \return data
****************************************************************************/
uint8_t mcp_read(uint8_t address)
{
 36c:	1f 93       	push	r17
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	1f 92       	push	r1
 374:	cd b7       	in	r28, 0x3d	; 61
 376:	de b7       	in	r29, 0x3e	; 62
 378:	18 2f       	mov	r17, r24
	volatile uint8_t retVal;
	
	mcp_turn_on();
 37a:	0e 94 aa 01 	call	0x354	; 0x354 <mcp_turn_on>
	
	SPI_write(MCP_READ);
 37e:	83 e0       	ldi	r24, 0x03	; 3
 380:	0e 94 ef 02 	call	0x5de	; 0x5de <SPI_write>
	SPI_write(address);
 384:	81 2f       	mov	r24, r17
 386:	0e 94 ef 02 	call	0x5de	; 0x5de <SPI_write>
	
	retVal = SPI_read();
 38a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <SPI_read>
 38e:	89 83       	std	Y+1, r24	; 0x01
	
	mcp_turn_off();
 390:	0e 94 ac 01 	call	0x358	; 0x358 <mcp_turn_off>
	
	return retVal;
 394:	89 81       	ldd	r24, Y+1	; 0x01
}
 396:	0f 90       	pop	r0
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	08 95       	ret

000003a0 <mcp_init>:
****************************************************************************/
uint8_t mcp_init()
{
	uint8_t tmp;
	
	SPI_init();
 3a0:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <SPI_init>
	mcp_reset();
 3a4:	0e 94 ae 01 	call	0x35c	; 0x35c <mcp_reset>
	
	tmp = mcp_read(MCP_CANSTAT);
 3a8:	8e e0       	ldi	r24, 0x0E	; 14
 3aa:	0e 94 b6 01 	call	0x36c	; 0x36c <mcp_read>
	
	if ((tmp & MODE_MASK) != MODE_CONFIG)
 3ae:	80 7e       	andi	r24, 0xE0	; 224
 3b0:	80 38       	cpi	r24, 0x80	; 128
 3b2:	31 f0       	breq	.+12     	; 0x3c0 <mcp_init+0x20>
	{
		printf("MCP2515 NOT configured properly\n");
 3b4:	86 e0       	ldi	r24, 0x06	; 6
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	0e 94 80 03 	call	0x700	; 0x700 <puts>
		return 1;
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	08 95       	ret
	}
	
	return 0;
 3c0:	80 e0       	ldi	r24, 0x00	; 0
}
 3c2:	08 95       	ret

000003c4 <mcp_write_byte>:
*
* \param in address to which shall be write
* \return data
****************************************************************************/
void mcp_write_byte(uint8_t address, uint8_t byte)
{
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	d8 2f       	mov	r29, r24
 3ca:	c6 2f       	mov	r28, r22
	mcp_turn_on();
 3cc:	0e 94 aa 01 	call	0x354	; 0x354 <mcp_turn_on>
	SPI_write(MCP_WRITE);
 3d0:	82 e0       	ldi	r24, 0x02	; 2
 3d2:	0e 94 ef 02 	call	0x5de	; 0x5de <SPI_write>
	SPI_write(address);
 3d6:	8d 2f       	mov	r24, r29
 3d8:	0e 94 ef 02 	call	0x5de	; 0x5de <SPI_write>
	SPI_write(byte);
 3dc:	8c 2f       	mov	r24, r28
 3de:	0e 94 ef 02 	call	0x5de	; 0x5de <SPI_write>
	mcp_turn_off();
 3e2:	0e 94 ac 01 	call	0x358	; 0x358 <mcp_turn_off>
}
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <mcp_modify_bit>:
* \param in address of the register
* \param in bit mask
* \param in new value of the register
****************************************************************************/
void mcp_modify_bit(uint8_t address, uint8_t mask, uint8_t byte)
{
 3ec:	1f 93       	push	r17
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	18 2f       	mov	r17, r24
 3f4:	d6 2f       	mov	r29, r22
 3f6:	c4 2f       	mov	r28, r20
	mcp_turn_on();
 3f8:	0e 94 aa 01 	call	0x354	; 0x354 <mcp_turn_on>
	SPI_write(MCP_BITMOD);
 3fc:	85 e0       	ldi	r24, 0x05	; 5
 3fe:	0e 94 ef 02 	call	0x5de	; 0x5de <SPI_write>
	SPI_write(address);
 402:	81 2f       	mov	r24, r17
 404:	0e 94 ef 02 	call	0x5de	; 0x5de <SPI_write>
	SPI_write(mask);
 408:	8d 2f       	mov	r24, r29
 40a:	0e 94 ef 02 	call	0x5de	; 0x5de <SPI_write>
	SPI_write(byte);
 40e:	8c 2f       	mov	r24, r28
 410:	0e 94 ef 02 	call	0x5de	; 0x5de <SPI_write>
	mcp_turn_off();
 414:	0e 94 ac 01 	call	0x358	; 0x358 <mcp_turn_off>
}
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	1f 91       	pop	r17
 41e:	08 95       	ret

00000420 <mcp_request_to_send>:
* \brief Request to send particular buffer
*
* \param in address of the buffer
****************************************************************************/
void mcp_request_to_send(uint8_t bits)
{
 420:	cf 93       	push	r28
 422:	c8 2f       	mov	r28, r24
	mcp_turn_on();
 424:	0e 94 aa 01 	call	0x354	; 0x354 <mcp_turn_on>
	SPI_write(MCP_RTS | (bits & 0b00000111));
 428:	8c 2f       	mov	r24, r28
 42a:	87 70       	andi	r24, 0x07	; 7
 42c:	80 68       	ori	r24, 0x80	; 128
 42e:	0e 94 ef 02 	call	0x5de	; 0x5de <SPI_write>
	mcp_turn_off();
 432:	0e 94 ac 01 	call	0x358	; 0x358 <mcp_turn_off>
}
 436:	cf 91       	pop	r28
 438:	08 95       	ret

0000043a <init_oled>:
*
****************************************************************************/
void write_c(char command)
{
	volatile char *ext_oled = (char *) OLED_COMMAND_BASE_ADDR;
	ext_oled[0] = command;
 43a:	e0 e0       	ldi	r30, 0x00	; 0
 43c:	f0 e1       	ldi	r31, 0x10	; 16
 43e:	8e ea       	ldi	r24, 0xAE	; 174
 440:	80 83       	st	Z, r24
 442:	81 ea       	ldi	r24, 0xA1	; 161
 444:	80 83       	st	Z, r24
 446:	8a ed       	ldi	r24, 0xDA	; 218
 448:	80 83       	st	Z, r24
 44a:	82 e1       	ldi	r24, 0x12	; 18
 44c:	80 83       	st	Z, r24
 44e:	88 ec       	ldi	r24, 0xC8	; 200
 450:	80 83       	st	Z, r24
 452:	88 ea       	ldi	r24, 0xA8	; 168
 454:	80 83       	st	Z, r24
 456:	8f e3       	ldi	r24, 0x3F	; 63
 458:	80 83       	st	Z, r24
 45a:	85 ed       	ldi	r24, 0xD5	; 213
 45c:	80 83       	st	Z, r24
 45e:	80 e8       	ldi	r24, 0x80	; 128
 460:	80 83       	st	Z, r24
 462:	81 e8       	ldi	r24, 0x81	; 129
 464:	80 83       	st	Z, r24
 466:	80 e5       	ldi	r24, 0x50	; 80
 468:	80 83       	st	Z, r24
 46a:	89 ed       	ldi	r24, 0xD9	; 217
 46c:	80 83       	st	Z, r24
 46e:	81 e2       	ldi	r24, 0x21	; 33
 470:	80 83       	st	Z, r24
 472:	80 e2       	ldi	r24, 0x20	; 32
 474:	80 83       	st	Z, r24
 476:	10 82       	st	Z, r1
 478:	8b ed       	ldi	r24, 0xDB	; 219
 47a:	80 83       	st	Z, r24
 47c:	80 e3       	ldi	r24, 0x30	; 48
 47e:	80 83       	st	Z, r24
 480:	8d ea       	ldi	r24, 0xAD	; 173
 482:	80 83       	st	Z, r24
 484:	10 82       	st	Z, r1
 486:	84 ea       	ldi	r24, 0xA4	; 164
 488:	80 83       	st	Z, r24
 48a:	86 ea       	ldi	r24, 0xA6	; 166
 48c:	80 83       	st	Z, r24
 48e:	8f ea       	ldi	r24, 0xAF	; 175
 490:	80 83       	st	Z, r24
 492:	08 95       	ret

00000494 <reset_position>:
 494:	e0 e0       	ldi	r30, 0x00	; 0
 496:	f0 e1       	ldi	r31, 0x10	; 16
 498:	81 e2       	ldi	r24, 0x21	; 33
 49a:	80 83       	st	Z, r24
 49c:	10 82       	st	Z, r1
 49e:	8f e7       	ldi	r24, 0x7F	; 127
 4a0:	80 83       	st	Z, r24
 4a2:	82 e2       	ldi	r24, 0x22	; 34
 4a4:	80 83       	st	Z, r24
 4a6:	10 82       	st	Z, r1
 4a8:	87 e0       	ldi	r24, 0x07	; 7
 4aa:	80 83       	st	Z, r24
 4ac:	08 95       	ret

000004ae <refresh_oled>:
* \brief Refresh OLED by rewriting all data from SRAM to OLED
*
****************************************************************************/
void refresh_oled()
{
	reset_position();
 4ae:	0e 94 4a 02 	call	0x494	; 0x494 <reset_position>
 4b2:	e0 e0       	ldi	r30, 0x00	; 0
 4b4:	f8 e1       	ldi	r31, 0x18	; 24
*
****************************************************************************/
void write_d(char data)
{
	volatile char *ext_oled = (char *) OLED_DATA_BASE_ADDR;
	ext_oled[0] = data;
 4b6:	a0 e0       	ldi	r26, 0x00	; 0
 4b8:	b2 e1       	ldi	r27, 0x12	; 18
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	unsigned char oled_value;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
	{
		oled_value = ext_ram[i];
 4ba:	81 91       	ld	r24, Z+
*
****************************************************************************/
void write_d(char data)
{
	volatile char *ext_oled = (char *) OLED_DATA_BASE_ADDR;
	ext_oled[0] = data;
 4bc:	8c 93       	st	X, r24
{
	reset_position();
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	unsigned char oled_value;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
 4be:	e1 15       	cp	r30, r1
 4c0:	8c e1       	ldi	r24, 0x1C	; 28
 4c2:	f8 07       	cpc	r31, r24
 4c4:	d1 f7       	brne	.-12     	; 0x4ba <refresh_oled+0xc>
	{
		oled_value = ext_ram[i];
		write_d(oled_value);
	}
}
 4c6:	08 95       	ret

000004c8 <clear_oled>:
/****************************************************************************
* \brief Clear OLED display
*
****************************************************************************/
void clear_oled()
{
 4c8:	e0 e0       	ldi	r30, 0x00	; 0
 4ca:	f8 e1       	ldi	r31, 0x18	; 24
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
	{
		ext_ram[i] = 0x00;
 4cc:	11 92       	st	Z+, r1
****************************************************************************/
void clear_oled()
{
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
 4ce:	e1 15       	cp	r30, r1
 4d0:	8c e1       	ldi	r24, 0x1C	; 28
 4d2:	f8 07       	cpc	r31, r24
 4d4:	d9 f7       	brne	.-10     	; 0x4cc <clear_oled+0x4>
	{
		ext_ram[i] = 0x00;
	}
}
 4d6:	08 95       	ret

000004d8 <init>:
* \brief Initialize all important peripherals and pins
*
****************************************************************************/
void init()
{
	USART_init(MYUBBR);
 4d8:	8f e1       	ldi	r24, 0x1F	; 31
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	0e 94 03 03 	call	0x606	; 0x606 <USART_init>
	/* Enables standard IO functions */	
	fdevopen(USART_putchar, USART_getchar);
 4e0:	60 e1       	ldi	r22, 0x10	; 16
 4e2:	73 e0       	ldi	r23, 0x03	; 3
 4e4:	8a e0       	ldi	r24, 0x0A	; 10
 4e6:	93 e0       	ldi	r25, 0x03	; 3
 4e8:	0e 94 21 03 	call	0x642	; 0x642 <fdevopen>
	/* Enables external memory*/
	set_bit(MCUCR, SRE);
 4ec:	85 b7       	in	r24, 0x35	; 53
 4ee:	80 68       	ori	r24, 0x80	; 128
 4f0:	85 bf       	out	0x35, r24	; 53
	/* Pin 1 is set to output for the LED*/
	set_bit(DDRB, PB0);
 4f2:	b8 9a       	sbi	0x17, 0	; 23
	/* Pin is now driven LOW*/
	clear_bit(PORTB, PB0);
 4f4:	c0 98       	cbi	0x18, 0	; 24
	/* Initialize OLED display */
	init_oled();
 4f6:	0e 94 1d 02 	call	0x43a	; 0x43a <init_oled>
	interface_init();
 4fa:	0e 94 15 03 	call	0x62a	; 0x62a <interface_init>
 4fe:	08 95       	ret

00000500 <main>:




int main(void)
{	
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	cd b7       	in	r28, 0x3d	; 61
 506:	de b7       	in	r29, 0x3e	; 62
 508:	61 97       	sbiw	r28, 0x11	; 17
 50a:	0f b6       	in	r0, 0x3f	; 63
 50c:	f8 94       	cli
 50e:	de bf       	out	0x3e, r29	; 62
 510:	0f be       	out	0x3f, r0	; 63
 512:	cd bf       	out	0x3d, r28	; 61

	clear_bit(DDRD, PD3);
 514:	8b 98       	cbi	0x11, 3	; 17
	clear_bit(DDRD, PD2);
 516:	8a 98       	cbi	0x11, 2	; 17
	
	init();
 518:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <init>
	volatile char SPIdata = 0;
 51c:	19 82       	std	Y+1, r1	; 0x01
	JoystickPosition position;
	JoystickPosition calibration;
	JoystickDirection direction;
	JoystickDirection change_y, change_x;
	ScreenName screen_name = 0;
	calibration = joystick_calibration();
 51e:	0e 94 57 01 	call	0x2ae	; 0x2ae <joystick_calibration>
 522:	6b 01       	movw	r12, r22
 524:	7c 01       	movw	r14, r24
	CANMessage canMessage, canMessage2;
	
	//SRAM_test();
	
	CAN_init();
 526:	0e 94 63 00 	call	0xc6	; 0xc6 <CAN_init>
	
	clear_oled();
 52a:	0e 94 64 02 	call	0x4c8	; 0x4c8 <clear_oled>
	reset_position();
 52e:	0e 94 4a 02 	call	0x494	; 0x494 <reset_position>
	
	clear_oled();
 532:	0e 94 64 02 	call	0x4c8	; 0x4c8 <clear_oled>
	refresh_oled();
 536:	0e 94 57 02 	call	0x4ae	; 0x4ae <refresh_oled>
	
	canMessage.ID = 0xAA;
	canMessage.length = 1;
	canMessage.data_array[0] = 0x10;
	
	canMessage2.ID = 0;
 53a:	18 86       	std	Y+8, r1	; 0x08
	canMessage2.length = 0;
 53c:	19 86       	std	Y+9, r1	; 0x09
	
	printf("start\n");
 53e:	86 e2       	ldi	r24, 0x26	; 38
 540:	91 e0       	ldi	r25, 0x01	; 1
 542:	0e 94 80 03 	call	0x700	; 0x700 <puts>
		
		//interface_state_machine(calibration);
	
		position = read_joystick_position(calibration);
		
		printf("The x-axis is: %d  ", position.xaxis);
 546:	0f 2e       	mov	r0, r31
 548:	ff e3       	ldi	r31, 0x3F	; 63
 54a:	af 2e       	mov	r10, r31
 54c:	f1 e0       	ldi	r31, 0x01	; 1
 54e:	bf 2e       	mov	r11, r31
 550:	f0 2d       	mov	r31, r0
		printf("  The y-axis is: %d \n ", position.yaxis);
 552:	03 e5       	ldi	r16, 0x53	; 83
 554:	11 e0       	ldi	r17, 0x01	; 1
 556:	2f ef       	ldi	r18, 0xFF	; 255
 558:	8f ef       	ldi	r24, 0xFF	; 255
 55a:	92 e0       	ldi	r25, 0x02	; 2
 55c:	21 50       	subi	r18, 0x01	; 1
 55e:	80 40       	sbci	r24, 0x00	; 0
 560:	90 40       	sbci	r25, 0x00	; 0
 562:	e1 f7       	brne	.-8      	; 0x55c <main+0x5c>
 564:	00 c0       	rjmp	.+0      	; 0x566 <main+0x66>
 566:	00 c0       	rjmp	.+0      	; 0x568 <main+0x68>
	while(1)
	{
		//CAN_send_message(canMessage);
		_delay_ms(200);
		//cli();
		i = CAN_receive_message(&canMessage2);
 568:	ce 01       	movw	r24, r28
 56a:	08 96       	adiw	r24, 0x08	; 8
 56c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <CAN_receive_message>
		
		if (i == SUCCESS)
 570:	81 11       	cpse	r24, r1
 572:	03 c0       	rjmp	.+6      	; 0x57a <main+0x7a>
		{
			//printf("%d, length = %d, message %d\n", canMessage2.ID, canMessage2.length, canMessage2.data_array[0]);
			canMessage2.ID = 0;
 574:	18 86       	std	Y+8, r1	; 0x08
			canMessage2.length = 0;
 576:	19 86       	std	Y+9, r1	; 0x09
 578:	04 c0       	rjmp	.+8      	; 0x582 <main+0x82>
		}
		else
		{
			printf("Nothing to receive\n");
 57a:	8c e2       	ldi	r24, 0x2C	; 44
 57c:	91 e0       	ldi	r25, 0x01	; 1
 57e:	0e 94 80 03 	call	0x700	; 0x700 <puts>
		
		//_delay_ms(200);
		
		//interface_state_machine(calibration);
	
		position = read_joystick_position(calibration);
 582:	c7 01       	movw	r24, r14
 584:	b6 01       	movw	r22, r12
 586:	0e 94 44 01 	call	0x288	; 0x288 <read_joystick_position>
 58a:	66 2e       	mov	r6, r22
 58c:	77 2e       	mov	r7, r23
 58e:	88 2e       	mov	r8, r24
 590:	99 2e       	mov	r9, r25
		
		printf("The x-axis is: %d  ", position.xaxis);
 592:	7f 93       	push	r23
 594:	6f 93       	push	r22
 596:	bf 92       	push	r11
 598:	af 92       	push	r10
 59a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <printf>
		printf("  The y-axis is: %d \n ", position.yaxis);
 59e:	9f 92       	push	r9
 5a0:	8f 92       	push	r8
 5a2:	1f 93       	push	r17
 5a4:	0f 93       	push	r16
 5a6:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <printf>
		
		send_joystick_possition(position);
 5aa:	66 2d       	mov	r22, r6
 5ac:	77 2d       	mov	r23, r7
 5ae:	88 2d       	mov	r24, r8
 5b0:	99 2d       	mov	r25, r9
 5b2:	0e 94 21 01 	call	0x242	; 0x242 <send_joystick_possition>
		
		data = read_touchpad_data();
 5b6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <read_touchpad_data>
 5ba:	2a 83       	std	Y+2, r18	; 0x02
 5bc:	3b 83       	std	Y+3, r19	; 0x03
 5be:	4c 83       	std	Y+4, r20	; 0x04
 5c0:	5d 83       	std	Y+5, r21	; 0x05
 5c2:	6e 83       	std	Y+6, r22	; 0x06
 5c4:	7f 83       	std	Y+7, r23	; 0x07

		
		//SRAM_test();
		//led_toggle();
		//printf(" The value is: %d \n ", 2);
	}
 5c6:	0f b6       	in	r0, 0x3f	; 63
 5c8:	f8 94       	cli
 5ca:	de bf       	out	0x3e, r29	; 62
 5cc:	0f be       	out	0x3f, r0	; 63
 5ce:	cd bf       	out	0x3d, r28	; 61
 5d0:	c2 cf       	rjmp	.-124    	; 0x556 <main+0x56>

000005d2 <SPI_init>:
*
****************************************************************************/
void SPI_init()
{
	/* Drive MOSI, SCK and CS HIGH*/
	DDR_SPI |= (1 << DD_MOSI) | (1 << DD_SCK) | (1 << DD_CS);
 5d2:	87 b3       	in	r24, 0x17	; 23
 5d4:	80 6b       	ori	r24, 0xB0	; 176
 5d6:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master mode, clock rate fck/16*/
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 5d8:	81 e5       	ldi	r24, 0x51	; 81
 5da:	8d b9       	out	0x0d, r24	; 13
 5dc:	08 95       	ret

000005de <SPI_write>:
*
* \param in byte to be written
****************************************************************************/
void SPI_write(uint8_t data)
{
	SPDR = data;
 5de:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1 << SPIF)));
 5e0:	77 9b       	sbis	0x0e, 7	; 14
 5e2:	fe cf       	rjmp	.-4      	; 0x5e0 <SPI_write+0x2>
}
 5e4:	08 95       	ret

000005e6 <SPI_read>:
* \brief Read data from slave unit
*
* \return Read data
****************************************************************************/
uint8_t SPI_read()
{
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
 5ea:	1f 92       	push	r1
 5ec:	cd b7       	in	r28, 0x3d	; 61
 5ee:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t retVal;
	SPDR = 0xFF;
 5f0:	8f ef       	ldi	r24, 0xFF	; 255
 5f2:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1 << SPIF)));
 5f4:	77 9b       	sbis	0x0e, 7	; 14
 5f6:	fe cf       	rjmp	.-4      	; 0x5f4 <SPI_read+0xe>
	
	retVal = SPDR;
 5f8:	8f b1       	in	r24, 0x0f	; 15
 5fa:	89 83       	std	Y+1, r24	; 0x01
	
	return retVal;
 5fc:	89 81       	ldd	r24, Y+1	; 0x01
 5fe:	0f 90       	pop	r0
 600:	df 91       	pop	r29
 602:	cf 91       	pop	r28
 604:	08 95       	ret

00000606 <USART_init>:
 * \param ubrr Desired baud rate.
 ****************************************************************************/
void USART_init(unsigned int ubrr)
{
	//Set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
 606:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
 608:	89 b9       	out	0x09, r24	; 9
	// Enable receiver and transmitter
	UCSR0B = (1<< RXEN0) | (1<<TXEN0) | (1<<RXCIE0) | (1<<TXCIE0);
 60a:	88 ed       	ldi	r24, 0xD8	; 216
 60c:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 2 stop bit
	UCSR0C = (1<<URSEL0) | (3<<UCSZ00) ;
 60e:	86 e8       	ldi	r24, 0x86	; 134
 610:	80 bd       	out	0x20, r24	; 32
 612:	08 95       	ret

00000614 <USART_putchar>:
 * \param c Char to be sent.
 * \return Always 0.
 ****************************************************************************/
int USART_putchar(char c)
{
	loop_until_bit_is_set(UCSR0A, UDRE0);
 614:	5d 9b       	sbis	0x0b, 5	; 11
 616:	fe cf       	rjmp	.-4      	; 0x614 <USART_putchar>
	UDR0 = c;
 618:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	08 95       	ret

00000620 <USART_getchar>:
 * \return Received char.
 ****************************************************************************/
int USART_getchar()
{
	char c;
	loop_until_bit_is_set(UCSR0A, RXC0);
 620:	5f 9b       	sbis	0x0b, 7	; 11
 622:	fe cf       	rjmp	.-4      	; 0x620 <USART_getchar>
	c = UDR0;
 624:	8c b1       	in	r24, 0x0c	; 12
	return c;
}
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	08 95       	ret

0000062a <interface_init>:
	volatile char *ext_ram = (char *) SRAM_USERNAME_ADDR;
	volatile char *eeprom = (char *) EEPROM_HIGH_SCORES_BASE_ADDR;

	for(int i = 0; i < SRAM_USERNAME_ADDR_LENGTH; i++)
	{
		ext_ram[i] = 'A';
 62a:	81 e4       	ldi	r24, 0x41	; 65
 62c:	80 93 00 1c 	sts	0x1C00, r24
 630:	80 93 01 1c 	sts	0x1C01, r24
 634:	80 93 02 1c 	sts	0x1C02, r24
 638:	80 93 03 1c 	sts	0x1C03, r24
 63c:	80 93 04 1c 	sts	0x1C04, r24
 640:	08 95       	ret

00000642 <fdevopen>:
 642:	0f 93       	push	r16
 644:	1f 93       	push	r17
 646:	cf 93       	push	r28
 648:	df 93       	push	r29
 64a:	ec 01       	movw	r28, r24
 64c:	8b 01       	movw	r16, r22
 64e:	00 97       	sbiw	r24, 0x00	; 0
 650:	31 f4       	brne	.+12     	; 0x65e <fdevopen+0x1c>
 652:	61 15       	cp	r22, r1
 654:	71 05       	cpc	r23, r1
 656:	19 f4       	brne	.+6      	; 0x65e <fdevopen+0x1c>
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	38 c0       	rjmp	.+112    	; 0x6ce <fdevopen+0x8c>
 65e:	6e e0       	ldi	r22, 0x0E	; 14
 660:	70 e0       	ldi	r23, 0x00	; 0
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	0e 94 7f 05 	call	0xafe	; 0xafe <calloc>
 66a:	fc 01       	movw	r30, r24
 66c:	00 97       	sbiw	r24, 0x00	; 0
 66e:	a1 f3       	breq	.-24     	; 0x658 <fdevopen+0x16>
 670:	80 e8       	ldi	r24, 0x80	; 128
 672:	83 83       	std	Z+3, r24	; 0x03
 674:	01 15       	cp	r16, r1
 676:	11 05       	cpc	r17, r1
 678:	71 f0       	breq	.+28     	; 0x696 <fdevopen+0x54>
 67a:	13 87       	std	Z+11, r17	; 0x0b
 67c:	02 87       	std	Z+10, r16	; 0x0a
 67e:	81 e8       	ldi	r24, 0x81	; 129
 680:	83 83       	std	Z+3, r24	; 0x03
 682:	80 91 6a 01 	lds	r24, 0x016A
 686:	90 91 6b 01 	lds	r25, 0x016B
 68a:	89 2b       	or	r24, r25
 68c:	21 f4       	brne	.+8      	; 0x696 <fdevopen+0x54>
 68e:	f0 93 6b 01 	sts	0x016B, r31
 692:	e0 93 6a 01 	sts	0x016A, r30
 696:	20 97       	sbiw	r28, 0x00	; 0
 698:	c9 f0       	breq	.+50     	; 0x6cc <fdevopen+0x8a>
 69a:	d1 87       	std	Z+9, r29	; 0x09
 69c:	c0 87       	std	Z+8, r28	; 0x08
 69e:	83 81       	ldd	r24, Z+3	; 0x03
 6a0:	82 60       	ori	r24, 0x02	; 2
 6a2:	83 83       	std	Z+3, r24	; 0x03
 6a4:	80 91 6c 01 	lds	r24, 0x016C
 6a8:	90 91 6d 01 	lds	r25, 0x016D
 6ac:	89 2b       	or	r24, r25
 6ae:	71 f4       	brne	.+28     	; 0x6cc <fdevopen+0x8a>
 6b0:	f0 93 6d 01 	sts	0x016D, r31
 6b4:	e0 93 6c 01 	sts	0x016C, r30
 6b8:	80 91 6e 01 	lds	r24, 0x016E
 6bc:	90 91 6f 01 	lds	r25, 0x016F
 6c0:	89 2b       	or	r24, r25
 6c2:	21 f4       	brne	.+8      	; 0x6cc <fdevopen+0x8a>
 6c4:	f0 93 6f 01 	sts	0x016F, r31
 6c8:	e0 93 6e 01 	sts	0x016E, r30
 6cc:	cf 01       	movw	r24, r30
 6ce:	df 91       	pop	r29
 6d0:	cf 91       	pop	r28
 6d2:	1f 91       	pop	r17
 6d4:	0f 91       	pop	r16
 6d6:	08 95       	ret

000006d8 <printf>:
 6d8:	a0 e0       	ldi	r26, 0x00	; 0
 6da:	b0 e0       	ldi	r27, 0x00	; 0
 6dc:	e2 e7       	ldi	r30, 0x72	; 114
 6de:	f3 e0       	ldi	r31, 0x03	; 3
 6e0:	0c 94 7f 07 	jmp	0xefe	; 0xefe <__prologue_saves__+0x20>
 6e4:	fe 01       	movw	r30, r28
 6e6:	35 96       	adiw	r30, 0x05	; 5
 6e8:	61 91       	ld	r22, Z+
 6ea:	71 91       	ld	r23, Z+
 6ec:	af 01       	movw	r20, r30
 6ee:	80 91 6c 01 	lds	r24, 0x016C
 6f2:	90 91 6d 01 	lds	r25, 0x016D
 6f6:	0e 94 ad 03 	call	0x75a	; 0x75a <vfprintf>
 6fa:	e2 e0       	ldi	r30, 0x02	; 2
 6fc:	0c 94 9b 07 	jmp	0xf36	; 0xf36 <__epilogue_restores__+0x20>

00000700 <puts>:
 700:	0f 93       	push	r16
 702:	1f 93       	push	r17
 704:	cf 93       	push	r28
 706:	df 93       	push	r29
 708:	e0 91 6c 01 	lds	r30, 0x016C
 70c:	f0 91 6d 01 	lds	r31, 0x016D
 710:	23 81       	ldd	r18, Z+3	; 0x03
 712:	21 ff       	sbrs	r18, 1
 714:	1b c0       	rjmp	.+54     	; 0x74c <puts+0x4c>
 716:	ec 01       	movw	r28, r24
 718:	00 e0       	ldi	r16, 0x00	; 0
 71a:	10 e0       	ldi	r17, 0x00	; 0
 71c:	89 91       	ld	r24, Y+
 71e:	60 91 6c 01 	lds	r22, 0x016C
 722:	70 91 6d 01 	lds	r23, 0x016D
 726:	db 01       	movw	r26, r22
 728:	18 96       	adiw	r26, 0x08	; 8
 72a:	ed 91       	ld	r30, X+
 72c:	fc 91       	ld	r31, X
 72e:	19 97       	sbiw	r26, 0x09	; 9
 730:	88 23       	and	r24, r24
 732:	31 f0       	breq	.+12     	; 0x740 <puts+0x40>
 734:	09 95       	icall
 736:	89 2b       	or	r24, r25
 738:	89 f3       	breq	.-30     	; 0x71c <puts+0x1c>
 73a:	0f ef       	ldi	r16, 0xFF	; 255
 73c:	1f ef       	ldi	r17, 0xFF	; 255
 73e:	ee cf       	rjmp	.-36     	; 0x71c <puts+0x1c>
 740:	8a e0       	ldi	r24, 0x0A	; 10
 742:	09 95       	icall
 744:	89 2b       	or	r24, r25
 746:	11 f4       	brne	.+4      	; 0x74c <puts+0x4c>
 748:	c8 01       	movw	r24, r16
 74a:	02 c0       	rjmp	.+4      	; 0x750 <puts+0x50>
 74c:	8f ef       	ldi	r24, 0xFF	; 255
 74e:	9f ef       	ldi	r25, 0xFF	; 255
 750:	df 91       	pop	r29
 752:	cf 91       	pop	r28
 754:	1f 91       	pop	r17
 756:	0f 91       	pop	r16
 758:	08 95       	ret

0000075a <vfprintf>:
 75a:	ac e0       	ldi	r26, 0x0C	; 12
 75c:	b0 e0       	ldi	r27, 0x00	; 0
 75e:	e3 eb       	ldi	r30, 0xB3	; 179
 760:	f3 e0       	ldi	r31, 0x03	; 3
 762:	0c 94 6f 07 	jmp	0xede	; 0xede <__prologue_saves__>
 766:	7c 01       	movw	r14, r24
 768:	6b 01       	movw	r12, r22
 76a:	8a 01       	movw	r16, r20
 76c:	fc 01       	movw	r30, r24
 76e:	17 82       	std	Z+7, r1	; 0x07
 770:	16 82       	std	Z+6, r1	; 0x06
 772:	83 81       	ldd	r24, Z+3	; 0x03
 774:	81 ff       	sbrs	r24, 1
 776:	bd c1       	rjmp	.+890    	; 0xaf2 <vfprintf+0x398>
 778:	ce 01       	movw	r24, r28
 77a:	01 96       	adiw	r24, 0x01	; 1
 77c:	4c 01       	movw	r8, r24
 77e:	f7 01       	movw	r30, r14
 780:	93 81       	ldd	r25, Z+3	; 0x03
 782:	f6 01       	movw	r30, r12
 784:	93 fd       	sbrc	r25, 3
 786:	85 91       	lpm	r24, Z+
 788:	93 ff       	sbrs	r25, 3
 78a:	81 91       	ld	r24, Z+
 78c:	6f 01       	movw	r12, r30
 78e:	88 23       	and	r24, r24
 790:	09 f4       	brne	.+2      	; 0x794 <vfprintf+0x3a>
 792:	ab c1       	rjmp	.+854    	; 0xaea <vfprintf+0x390>
 794:	85 32       	cpi	r24, 0x25	; 37
 796:	39 f4       	brne	.+14     	; 0x7a6 <vfprintf+0x4c>
 798:	93 fd       	sbrc	r25, 3
 79a:	85 91       	lpm	r24, Z+
 79c:	93 ff       	sbrs	r25, 3
 79e:	81 91       	ld	r24, Z+
 7a0:	6f 01       	movw	r12, r30
 7a2:	85 32       	cpi	r24, 0x25	; 37
 7a4:	29 f4       	brne	.+10     	; 0x7b0 <vfprintf+0x56>
 7a6:	b7 01       	movw	r22, r14
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	0e 94 df 06 	call	0xdbe	; 0xdbe <fputc>
 7ae:	e7 cf       	rjmp	.-50     	; 0x77e <vfprintf+0x24>
 7b0:	51 2c       	mov	r5, r1
 7b2:	31 2c       	mov	r3, r1
 7b4:	20 e0       	ldi	r18, 0x00	; 0
 7b6:	20 32       	cpi	r18, 0x20	; 32
 7b8:	a0 f4       	brcc	.+40     	; 0x7e2 <vfprintf+0x88>
 7ba:	8b 32       	cpi	r24, 0x2B	; 43
 7bc:	69 f0       	breq	.+26     	; 0x7d8 <vfprintf+0x7e>
 7be:	30 f4       	brcc	.+12     	; 0x7cc <vfprintf+0x72>
 7c0:	80 32       	cpi	r24, 0x20	; 32
 7c2:	59 f0       	breq	.+22     	; 0x7da <vfprintf+0x80>
 7c4:	83 32       	cpi	r24, 0x23	; 35
 7c6:	69 f4       	brne	.+26     	; 0x7e2 <vfprintf+0x88>
 7c8:	20 61       	ori	r18, 0x10	; 16
 7ca:	2c c0       	rjmp	.+88     	; 0x824 <vfprintf+0xca>
 7cc:	8d 32       	cpi	r24, 0x2D	; 45
 7ce:	39 f0       	breq	.+14     	; 0x7de <vfprintf+0x84>
 7d0:	80 33       	cpi	r24, 0x30	; 48
 7d2:	39 f4       	brne	.+14     	; 0x7e2 <vfprintf+0x88>
 7d4:	21 60       	ori	r18, 0x01	; 1
 7d6:	26 c0       	rjmp	.+76     	; 0x824 <vfprintf+0xca>
 7d8:	22 60       	ori	r18, 0x02	; 2
 7da:	24 60       	ori	r18, 0x04	; 4
 7dc:	23 c0       	rjmp	.+70     	; 0x824 <vfprintf+0xca>
 7de:	28 60       	ori	r18, 0x08	; 8
 7e0:	21 c0       	rjmp	.+66     	; 0x824 <vfprintf+0xca>
 7e2:	27 fd       	sbrc	r18, 7
 7e4:	27 c0       	rjmp	.+78     	; 0x834 <vfprintf+0xda>
 7e6:	30 ed       	ldi	r19, 0xD0	; 208
 7e8:	38 0f       	add	r19, r24
 7ea:	3a 30       	cpi	r19, 0x0A	; 10
 7ec:	78 f4       	brcc	.+30     	; 0x80c <vfprintf+0xb2>
 7ee:	26 ff       	sbrs	r18, 6
 7f0:	06 c0       	rjmp	.+12     	; 0x7fe <vfprintf+0xa4>
 7f2:	fa e0       	ldi	r31, 0x0A	; 10
 7f4:	5f 9e       	mul	r5, r31
 7f6:	30 0d       	add	r19, r0
 7f8:	11 24       	eor	r1, r1
 7fa:	53 2e       	mov	r5, r19
 7fc:	13 c0       	rjmp	.+38     	; 0x824 <vfprintf+0xca>
 7fe:	8a e0       	ldi	r24, 0x0A	; 10
 800:	38 9e       	mul	r3, r24
 802:	30 0d       	add	r19, r0
 804:	11 24       	eor	r1, r1
 806:	33 2e       	mov	r3, r19
 808:	20 62       	ori	r18, 0x20	; 32
 80a:	0c c0       	rjmp	.+24     	; 0x824 <vfprintf+0xca>
 80c:	8e 32       	cpi	r24, 0x2E	; 46
 80e:	21 f4       	brne	.+8      	; 0x818 <vfprintf+0xbe>
 810:	26 fd       	sbrc	r18, 6
 812:	6b c1       	rjmp	.+726    	; 0xaea <vfprintf+0x390>
 814:	20 64       	ori	r18, 0x40	; 64
 816:	06 c0       	rjmp	.+12     	; 0x824 <vfprintf+0xca>
 818:	8c 36       	cpi	r24, 0x6C	; 108
 81a:	11 f4       	brne	.+4      	; 0x820 <vfprintf+0xc6>
 81c:	20 68       	ori	r18, 0x80	; 128
 81e:	02 c0       	rjmp	.+4      	; 0x824 <vfprintf+0xca>
 820:	88 36       	cpi	r24, 0x68	; 104
 822:	41 f4       	brne	.+16     	; 0x834 <vfprintf+0xda>
 824:	f6 01       	movw	r30, r12
 826:	93 fd       	sbrc	r25, 3
 828:	85 91       	lpm	r24, Z+
 82a:	93 ff       	sbrs	r25, 3
 82c:	81 91       	ld	r24, Z+
 82e:	6f 01       	movw	r12, r30
 830:	81 11       	cpse	r24, r1
 832:	c1 cf       	rjmp	.-126    	; 0x7b6 <vfprintf+0x5c>
 834:	98 2f       	mov	r25, r24
 836:	9f 7d       	andi	r25, 0xDF	; 223
 838:	95 54       	subi	r25, 0x45	; 69
 83a:	93 30       	cpi	r25, 0x03	; 3
 83c:	28 f4       	brcc	.+10     	; 0x848 <vfprintf+0xee>
 83e:	0c 5f       	subi	r16, 0xFC	; 252
 840:	1f 4f       	sbci	r17, 0xFF	; 255
 842:	ff e3       	ldi	r31, 0x3F	; 63
 844:	f9 83       	std	Y+1, r31	; 0x01
 846:	0d c0       	rjmp	.+26     	; 0x862 <vfprintf+0x108>
 848:	83 36       	cpi	r24, 0x63	; 99
 84a:	31 f0       	breq	.+12     	; 0x858 <vfprintf+0xfe>
 84c:	83 37       	cpi	r24, 0x73	; 115
 84e:	71 f0       	breq	.+28     	; 0x86c <vfprintf+0x112>
 850:	83 35       	cpi	r24, 0x53	; 83
 852:	09 f0       	breq	.+2      	; 0x856 <vfprintf+0xfc>
 854:	5b c0       	rjmp	.+182    	; 0x90c <vfprintf+0x1b2>
 856:	22 c0       	rjmp	.+68     	; 0x89c <vfprintf+0x142>
 858:	f8 01       	movw	r30, r16
 85a:	80 81       	ld	r24, Z
 85c:	89 83       	std	Y+1, r24	; 0x01
 85e:	0e 5f       	subi	r16, 0xFE	; 254
 860:	1f 4f       	sbci	r17, 0xFF	; 255
 862:	44 24       	eor	r4, r4
 864:	43 94       	inc	r4
 866:	51 2c       	mov	r5, r1
 868:	54 01       	movw	r10, r8
 86a:	15 c0       	rjmp	.+42     	; 0x896 <vfprintf+0x13c>
 86c:	38 01       	movw	r6, r16
 86e:	f2 e0       	ldi	r31, 0x02	; 2
 870:	6f 0e       	add	r6, r31
 872:	71 1c       	adc	r7, r1
 874:	f8 01       	movw	r30, r16
 876:	a0 80       	ld	r10, Z
 878:	b1 80       	ldd	r11, Z+1	; 0x01
 87a:	26 ff       	sbrs	r18, 6
 87c:	03 c0       	rjmp	.+6      	; 0x884 <vfprintf+0x12a>
 87e:	65 2d       	mov	r22, r5
 880:	70 e0       	ldi	r23, 0x00	; 0
 882:	02 c0       	rjmp	.+4      	; 0x888 <vfprintf+0x12e>
 884:	6f ef       	ldi	r22, 0xFF	; 255
 886:	7f ef       	ldi	r23, 0xFF	; 255
 888:	c5 01       	movw	r24, r10
 88a:	2c 87       	std	Y+12, r18	; 0x0c
 88c:	0e 94 d4 06 	call	0xda8	; 0xda8 <strnlen>
 890:	2c 01       	movw	r4, r24
 892:	83 01       	movw	r16, r6
 894:	2c 85       	ldd	r18, Y+12	; 0x0c
 896:	2f 77       	andi	r18, 0x7F	; 127
 898:	22 2e       	mov	r2, r18
 89a:	17 c0       	rjmp	.+46     	; 0x8ca <vfprintf+0x170>
 89c:	38 01       	movw	r6, r16
 89e:	f2 e0       	ldi	r31, 0x02	; 2
 8a0:	6f 0e       	add	r6, r31
 8a2:	71 1c       	adc	r7, r1
 8a4:	f8 01       	movw	r30, r16
 8a6:	a0 80       	ld	r10, Z
 8a8:	b1 80       	ldd	r11, Z+1	; 0x01
 8aa:	26 ff       	sbrs	r18, 6
 8ac:	03 c0       	rjmp	.+6      	; 0x8b4 <vfprintf+0x15a>
 8ae:	65 2d       	mov	r22, r5
 8b0:	70 e0       	ldi	r23, 0x00	; 0
 8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <vfprintf+0x15e>
 8b4:	6f ef       	ldi	r22, 0xFF	; 255
 8b6:	7f ef       	ldi	r23, 0xFF	; 255
 8b8:	c5 01       	movw	r24, r10
 8ba:	2c 87       	std	Y+12, r18	; 0x0c
 8bc:	0e 94 c2 06 	call	0xd84	; 0xd84 <strnlen_P>
 8c0:	2c 01       	movw	r4, r24
 8c2:	2c 85       	ldd	r18, Y+12	; 0x0c
 8c4:	20 68       	ori	r18, 0x80	; 128
 8c6:	22 2e       	mov	r2, r18
 8c8:	83 01       	movw	r16, r6
 8ca:	23 fc       	sbrc	r2, 3
 8cc:	1b c0       	rjmp	.+54     	; 0x904 <vfprintf+0x1aa>
 8ce:	83 2d       	mov	r24, r3
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	48 16       	cp	r4, r24
 8d4:	59 06       	cpc	r5, r25
 8d6:	b0 f4       	brcc	.+44     	; 0x904 <vfprintf+0x1aa>
 8d8:	b7 01       	movw	r22, r14
 8da:	80 e2       	ldi	r24, 0x20	; 32
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	0e 94 df 06 	call	0xdbe	; 0xdbe <fputc>
 8e2:	3a 94       	dec	r3
 8e4:	f4 cf       	rjmp	.-24     	; 0x8ce <vfprintf+0x174>
 8e6:	f5 01       	movw	r30, r10
 8e8:	27 fc       	sbrc	r2, 7
 8ea:	85 91       	lpm	r24, Z+
 8ec:	27 fe       	sbrs	r2, 7
 8ee:	81 91       	ld	r24, Z+
 8f0:	5f 01       	movw	r10, r30
 8f2:	b7 01       	movw	r22, r14
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	0e 94 df 06 	call	0xdbe	; 0xdbe <fputc>
 8fa:	31 10       	cpse	r3, r1
 8fc:	3a 94       	dec	r3
 8fe:	f1 e0       	ldi	r31, 0x01	; 1
 900:	4f 1a       	sub	r4, r31
 902:	51 08       	sbc	r5, r1
 904:	41 14       	cp	r4, r1
 906:	51 04       	cpc	r5, r1
 908:	71 f7       	brne	.-36     	; 0x8e6 <vfprintf+0x18c>
 90a:	e5 c0       	rjmp	.+458    	; 0xad6 <vfprintf+0x37c>
 90c:	84 36       	cpi	r24, 0x64	; 100
 90e:	11 f0       	breq	.+4      	; 0x914 <vfprintf+0x1ba>
 910:	89 36       	cpi	r24, 0x69	; 105
 912:	39 f5       	brne	.+78     	; 0x962 <vfprintf+0x208>
 914:	f8 01       	movw	r30, r16
 916:	27 ff       	sbrs	r18, 7
 918:	07 c0       	rjmp	.+14     	; 0x928 <vfprintf+0x1ce>
 91a:	60 81       	ld	r22, Z
 91c:	71 81       	ldd	r23, Z+1	; 0x01
 91e:	82 81       	ldd	r24, Z+2	; 0x02
 920:	93 81       	ldd	r25, Z+3	; 0x03
 922:	0c 5f       	subi	r16, 0xFC	; 252
 924:	1f 4f       	sbci	r17, 0xFF	; 255
 926:	08 c0       	rjmp	.+16     	; 0x938 <vfprintf+0x1de>
 928:	60 81       	ld	r22, Z
 92a:	71 81       	ldd	r23, Z+1	; 0x01
 92c:	88 27       	eor	r24, r24
 92e:	77 fd       	sbrc	r23, 7
 930:	80 95       	com	r24
 932:	98 2f       	mov	r25, r24
 934:	0e 5f       	subi	r16, 0xFE	; 254
 936:	1f 4f       	sbci	r17, 0xFF	; 255
 938:	2f 76       	andi	r18, 0x6F	; 111
 93a:	b2 2e       	mov	r11, r18
 93c:	97 ff       	sbrs	r25, 7
 93e:	09 c0       	rjmp	.+18     	; 0x952 <vfprintf+0x1f8>
 940:	90 95       	com	r25
 942:	80 95       	com	r24
 944:	70 95       	com	r23
 946:	61 95       	neg	r22
 948:	7f 4f       	sbci	r23, 0xFF	; 255
 94a:	8f 4f       	sbci	r24, 0xFF	; 255
 94c:	9f 4f       	sbci	r25, 0xFF	; 255
 94e:	20 68       	ori	r18, 0x80	; 128
 950:	b2 2e       	mov	r11, r18
 952:	2a e0       	ldi	r18, 0x0A	; 10
 954:	30 e0       	ldi	r19, 0x00	; 0
 956:	a4 01       	movw	r20, r8
 958:	0e 94 11 07 	call	0xe22	; 0xe22 <__ultoa_invert>
 95c:	a8 2e       	mov	r10, r24
 95e:	a8 18       	sub	r10, r8
 960:	44 c0       	rjmp	.+136    	; 0x9ea <vfprintf+0x290>
 962:	85 37       	cpi	r24, 0x75	; 117
 964:	29 f4       	brne	.+10     	; 0x970 <vfprintf+0x216>
 966:	2f 7e       	andi	r18, 0xEF	; 239
 968:	b2 2e       	mov	r11, r18
 96a:	2a e0       	ldi	r18, 0x0A	; 10
 96c:	30 e0       	ldi	r19, 0x00	; 0
 96e:	25 c0       	rjmp	.+74     	; 0x9ba <vfprintf+0x260>
 970:	f2 2f       	mov	r31, r18
 972:	f9 7f       	andi	r31, 0xF9	; 249
 974:	bf 2e       	mov	r11, r31
 976:	8f 36       	cpi	r24, 0x6F	; 111
 978:	c1 f0       	breq	.+48     	; 0x9aa <vfprintf+0x250>
 97a:	18 f4       	brcc	.+6      	; 0x982 <vfprintf+0x228>
 97c:	88 35       	cpi	r24, 0x58	; 88
 97e:	79 f0       	breq	.+30     	; 0x99e <vfprintf+0x244>
 980:	b4 c0       	rjmp	.+360    	; 0xaea <vfprintf+0x390>
 982:	80 37       	cpi	r24, 0x70	; 112
 984:	19 f0       	breq	.+6      	; 0x98c <vfprintf+0x232>
 986:	88 37       	cpi	r24, 0x78	; 120
 988:	21 f0       	breq	.+8      	; 0x992 <vfprintf+0x238>
 98a:	af c0       	rjmp	.+350    	; 0xaea <vfprintf+0x390>
 98c:	2f 2f       	mov	r18, r31
 98e:	20 61       	ori	r18, 0x10	; 16
 990:	b2 2e       	mov	r11, r18
 992:	b4 fe       	sbrs	r11, 4
 994:	0d c0       	rjmp	.+26     	; 0x9b0 <vfprintf+0x256>
 996:	8b 2d       	mov	r24, r11
 998:	84 60       	ori	r24, 0x04	; 4
 99a:	b8 2e       	mov	r11, r24
 99c:	09 c0       	rjmp	.+18     	; 0x9b0 <vfprintf+0x256>
 99e:	24 ff       	sbrs	r18, 4
 9a0:	0a c0       	rjmp	.+20     	; 0x9b6 <vfprintf+0x25c>
 9a2:	9f 2f       	mov	r25, r31
 9a4:	96 60       	ori	r25, 0x06	; 6
 9a6:	b9 2e       	mov	r11, r25
 9a8:	06 c0       	rjmp	.+12     	; 0x9b6 <vfprintf+0x25c>
 9aa:	28 e0       	ldi	r18, 0x08	; 8
 9ac:	30 e0       	ldi	r19, 0x00	; 0
 9ae:	05 c0       	rjmp	.+10     	; 0x9ba <vfprintf+0x260>
 9b0:	20 e1       	ldi	r18, 0x10	; 16
 9b2:	30 e0       	ldi	r19, 0x00	; 0
 9b4:	02 c0       	rjmp	.+4      	; 0x9ba <vfprintf+0x260>
 9b6:	20 e1       	ldi	r18, 0x10	; 16
 9b8:	32 e0       	ldi	r19, 0x02	; 2
 9ba:	f8 01       	movw	r30, r16
 9bc:	b7 fe       	sbrs	r11, 7
 9be:	07 c0       	rjmp	.+14     	; 0x9ce <vfprintf+0x274>
 9c0:	60 81       	ld	r22, Z
 9c2:	71 81       	ldd	r23, Z+1	; 0x01
 9c4:	82 81       	ldd	r24, Z+2	; 0x02
 9c6:	93 81       	ldd	r25, Z+3	; 0x03
 9c8:	0c 5f       	subi	r16, 0xFC	; 252
 9ca:	1f 4f       	sbci	r17, 0xFF	; 255
 9cc:	06 c0       	rjmp	.+12     	; 0x9da <vfprintf+0x280>
 9ce:	60 81       	ld	r22, Z
 9d0:	71 81       	ldd	r23, Z+1	; 0x01
 9d2:	80 e0       	ldi	r24, 0x00	; 0
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	0e 5f       	subi	r16, 0xFE	; 254
 9d8:	1f 4f       	sbci	r17, 0xFF	; 255
 9da:	a4 01       	movw	r20, r8
 9dc:	0e 94 11 07 	call	0xe22	; 0xe22 <__ultoa_invert>
 9e0:	a8 2e       	mov	r10, r24
 9e2:	a8 18       	sub	r10, r8
 9e4:	fb 2d       	mov	r31, r11
 9e6:	ff 77       	andi	r31, 0x7F	; 127
 9e8:	bf 2e       	mov	r11, r31
 9ea:	b6 fe       	sbrs	r11, 6
 9ec:	0b c0       	rjmp	.+22     	; 0xa04 <vfprintf+0x2aa>
 9ee:	2b 2d       	mov	r18, r11
 9f0:	2e 7f       	andi	r18, 0xFE	; 254
 9f2:	a5 14       	cp	r10, r5
 9f4:	50 f4       	brcc	.+20     	; 0xa0a <vfprintf+0x2b0>
 9f6:	b4 fe       	sbrs	r11, 4
 9f8:	0a c0       	rjmp	.+20     	; 0xa0e <vfprintf+0x2b4>
 9fa:	b2 fc       	sbrc	r11, 2
 9fc:	08 c0       	rjmp	.+16     	; 0xa0e <vfprintf+0x2b4>
 9fe:	2b 2d       	mov	r18, r11
 a00:	2e 7e       	andi	r18, 0xEE	; 238
 a02:	05 c0       	rjmp	.+10     	; 0xa0e <vfprintf+0x2b4>
 a04:	7a 2c       	mov	r7, r10
 a06:	2b 2d       	mov	r18, r11
 a08:	03 c0       	rjmp	.+6      	; 0xa10 <vfprintf+0x2b6>
 a0a:	7a 2c       	mov	r7, r10
 a0c:	01 c0       	rjmp	.+2      	; 0xa10 <vfprintf+0x2b6>
 a0e:	75 2c       	mov	r7, r5
 a10:	24 ff       	sbrs	r18, 4
 a12:	0d c0       	rjmp	.+26     	; 0xa2e <vfprintf+0x2d4>
 a14:	fe 01       	movw	r30, r28
 a16:	ea 0d       	add	r30, r10
 a18:	f1 1d       	adc	r31, r1
 a1a:	80 81       	ld	r24, Z
 a1c:	80 33       	cpi	r24, 0x30	; 48
 a1e:	11 f4       	brne	.+4      	; 0xa24 <vfprintf+0x2ca>
 a20:	29 7e       	andi	r18, 0xE9	; 233
 a22:	09 c0       	rjmp	.+18     	; 0xa36 <vfprintf+0x2dc>
 a24:	22 ff       	sbrs	r18, 2
 a26:	06 c0       	rjmp	.+12     	; 0xa34 <vfprintf+0x2da>
 a28:	73 94       	inc	r7
 a2a:	73 94       	inc	r7
 a2c:	04 c0       	rjmp	.+8      	; 0xa36 <vfprintf+0x2dc>
 a2e:	82 2f       	mov	r24, r18
 a30:	86 78       	andi	r24, 0x86	; 134
 a32:	09 f0       	breq	.+2      	; 0xa36 <vfprintf+0x2dc>
 a34:	73 94       	inc	r7
 a36:	23 fd       	sbrc	r18, 3
 a38:	13 c0       	rjmp	.+38     	; 0xa60 <vfprintf+0x306>
 a3a:	20 ff       	sbrs	r18, 0
 a3c:	06 c0       	rjmp	.+12     	; 0xa4a <vfprintf+0x2f0>
 a3e:	5a 2c       	mov	r5, r10
 a40:	73 14       	cp	r7, r3
 a42:	18 f4       	brcc	.+6      	; 0xa4a <vfprintf+0x2f0>
 a44:	53 0c       	add	r5, r3
 a46:	57 18       	sub	r5, r7
 a48:	73 2c       	mov	r7, r3
 a4a:	73 14       	cp	r7, r3
 a4c:	68 f4       	brcc	.+26     	; 0xa68 <vfprintf+0x30e>
 a4e:	b7 01       	movw	r22, r14
 a50:	80 e2       	ldi	r24, 0x20	; 32
 a52:	90 e0       	ldi	r25, 0x00	; 0
 a54:	2c 87       	std	Y+12, r18	; 0x0c
 a56:	0e 94 df 06 	call	0xdbe	; 0xdbe <fputc>
 a5a:	73 94       	inc	r7
 a5c:	2c 85       	ldd	r18, Y+12	; 0x0c
 a5e:	f5 cf       	rjmp	.-22     	; 0xa4a <vfprintf+0x2f0>
 a60:	73 14       	cp	r7, r3
 a62:	10 f4       	brcc	.+4      	; 0xa68 <vfprintf+0x30e>
 a64:	37 18       	sub	r3, r7
 a66:	01 c0       	rjmp	.+2      	; 0xa6a <vfprintf+0x310>
 a68:	31 2c       	mov	r3, r1
 a6a:	24 ff       	sbrs	r18, 4
 a6c:	12 c0       	rjmp	.+36     	; 0xa92 <vfprintf+0x338>
 a6e:	b7 01       	movw	r22, r14
 a70:	80 e3       	ldi	r24, 0x30	; 48
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	2c 87       	std	Y+12, r18	; 0x0c
 a76:	0e 94 df 06 	call	0xdbe	; 0xdbe <fputc>
 a7a:	2c 85       	ldd	r18, Y+12	; 0x0c
 a7c:	22 ff       	sbrs	r18, 2
 a7e:	17 c0       	rjmp	.+46     	; 0xaae <vfprintf+0x354>
 a80:	21 ff       	sbrs	r18, 1
 a82:	03 c0       	rjmp	.+6      	; 0xa8a <vfprintf+0x330>
 a84:	88 e5       	ldi	r24, 0x58	; 88
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	02 c0       	rjmp	.+4      	; 0xa8e <vfprintf+0x334>
 a8a:	88 e7       	ldi	r24, 0x78	; 120
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	b7 01       	movw	r22, r14
 a90:	0c c0       	rjmp	.+24     	; 0xaaa <vfprintf+0x350>
 a92:	82 2f       	mov	r24, r18
 a94:	86 78       	andi	r24, 0x86	; 134
 a96:	59 f0       	breq	.+22     	; 0xaae <vfprintf+0x354>
 a98:	21 fd       	sbrc	r18, 1
 a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <vfprintf+0x346>
 a9c:	80 e2       	ldi	r24, 0x20	; 32
 a9e:	01 c0       	rjmp	.+2      	; 0xaa2 <vfprintf+0x348>
 aa0:	8b e2       	ldi	r24, 0x2B	; 43
 aa2:	27 fd       	sbrc	r18, 7
 aa4:	8d e2       	ldi	r24, 0x2D	; 45
 aa6:	b7 01       	movw	r22, r14
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	0e 94 df 06 	call	0xdbe	; 0xdbe <fputc>
 aae:	a5 14       	cp	r10, r5
 ab0:	38 f4       	brcc	.+14     	; 0xac0 <vfprintf+0x366>
 ab2:	b7 01       	movw	r22, r14
 ab4:	80 e3       	ldi	r24, 0x30	; 48
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	0e 94 df 06 	call	0xdbe	; 0xdbe <fputc>
 abc:	5a 94       	dec	r5
 abe:	f7 cf       	rjmp	.-18     	; 0xaae <vfprintf+0x354>
 ac0:	aa 94       	dec	r10
 ac2:	f4 01       	movw	r30, r8
 ac4:	ea 0d       	add	r30, r10
 ac6:	f1 1d       	adc	r31, r1
 ac8:	80 81       	ld	r24, Z
 aca:	b7 01       	movw	r22, r14
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	0e 94 df 06 	call	0xdbe	; 0xdbe <fputc>
 ad2:	a1 10       	cpse	r10, r1
 ad4:	f5 cf       	rjmp	.-22     	; 0xac0 <vfprintf+0x366>
 ad6:	33 20       	and	r3, r3
 ad8:	09 f4       	brne	.+2      	; 0xadc <vfprintf+0x382>
 ada:	51 ce       	rjmp	.-862    	; 0x77e <vfprintf+0x24>
 adc:	b7 01       	movw	r22, r14
 ade:	80 e2       	ldi	r24, 0x20	; 32
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	0e 94 df 06 	call	0xdbe	; 0xdbe <fputc>
 ae6:	3a 94       	dec	r3
 ae8:	f6 cf       	rjmp	.-20     	; 0xad6 <vfprintf+0x37c>
 aea:	f7 01       	movw	r30, r14
 aec:	86 81       	ldd	r24, Z+6	; 0x06
 aee:	97 81       	ldd	r25, Z+7	; 0x07
 af0:	02 c0       	rjmp	.+4      	; 0xaf6 <vfprintf+0x39c>
 af2:	8f ef       	ldi	r24, 0xFF	; 255
 af4:	9f ef       	ldi	r25, 0xFF	; 255
 af6:	2c 96       	adiw	r28, 0x0c	; 12
 af8:	e2 e1       	ldi	r30, 0x12	; 18
 afa:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__epilogue_restores__>

00000afe <calloc>:
 afe:	0f 93       	push	r16
 b00:	1f 93       	push	r17
 b02:	cf 93       	push	r28
 b04:	df 93       	push	r29
 b06:	86 9f       	mul	r24, r22
 b08:	80 01       	movw	r16, r0
 b0a:	87 9f       	mul	r24, r23
 b0c:	10 0d       	add	r17, r0
 b0e:	96 9f       	mul	r25, r22
 b10:	10 0d       	add	r17, r0
 b12:	11 24       	eor	r1, r1
 b14:	c8 01       	movw	r24, r16
 b16:	0e 94 9b 05 	call	0xb36	; 0xb36 <malloc>
 b1a:	ec 01       	movw	r28, r24
 b1c:	00 97       	sbiw	r24, 0x00	; 0
 b1e:	29 f0       	breq	.+10     	; 0xb2a <calloc+0x2c>
 b20:	a8 01       	movw	r20, r16
 b22:	60 e0       	ldi	r22, 0x00	; 0
 b24:	70 e0       	ldi	r23, 0x00	; 0
 b26:	0e 94 cd 06 	call	0xd9a	; 0xd9a <memset>
 b2a:	ce 01       	movw	r24, r28
 b2c:	df 91       	pop	r29
 b2e:	cf 91       	pop	r28
 b30:	1f 91       	pop	r17
 b32:	0f 91       	pop	r16
 b34:	08 95       	ret

00000b36 <malloc>:
 b36:	cf 93       	push	r28
 b38:	df 93       	push	r29
 b3a:	82 30       	cpi	r24, 0x02	; 2
 b3c:	91 05       	cpc	r25, r1
 b3e:	10 f4       	brcc	.+4      	; 0xb44 <malloc+0xe>
 b40:	82 e0       	ldi	r24, 0x02	; 2
 b42:	90 e0       	ldi	r25, 0x00	; 0
 b44:	e0 91 72 01 	lds	r30, 0x0172
 b48:	f0 91 73 01 	lds	r31, 0x0173
 b4c:	20 e0       	ldi	r18, 0x00	; 0
 b4e:	30 e0       	ldi	r19, 0x00	; 0
 b50:	a0 e0       	ldi	r26, 0x00	; 0
 b52:	b0 e0       	ldi	r27, 0x00	; 0
 b54:	30 97       	sbiw	r30, 0x00	; 0
 b56:	39 f1       	breq	.+78     	; 0xba6 <malloc+0x70>
 b58:	40 81       	ld	r20, Z
 b5a:	51 81       	ldd	r21, Z+1	; 0x01
 b5c:	48 17       	cp	r20, r24
 b5e:	59 07       	cpc	r21, r25
 b60:	b8 f0       	brcs	.+46     	; 0xb90 <malloc+0x5a>
 b62:	48 17       	cp	r20, r24
 b64:	59 07       	cpc	r21, r25
 b66:	71 f4       	brne	.+28     	; 0xb84 <malloc+0x4e>
 b68:	82 81       	ldd	r24, Z+2	; 0x02
 b6a:	93 81       	ldd	r25, Z+3	; 0x03
 b6c:	10 97       	sbiw	r26, 0x00	; 0
 b6e:	29 f0       	breq	.+10     	; 0xb7a <malloc+0x44>
 b70:	13 96       	adiw	r26, 0x03	; 3
 b72:	9c 93       	st	X, r25
 b74:	8e 93       	st	-X, r24
 b76:	12 97       	sbiw	r26, 0x02	; 2
 b78:	2c c0       	rjmp	.+88     	; 0xbd2 <malloc+0x9c>
 b7a:	90 93 73 01 	sts	0x0173, r25
 b7e:	80 93 72 01 	sts	0x0172, r24
 b82:	27 c0       	rjmp	.+78     	; 0xbd2 <malloc+0x9c>
 b84:	21 15       	cp	r18, r1
 b86:	31 05       	cpc	r19, r1
 b88:	31 f0       	breq	.+12     	; 0xb96 <malloc+0x60>
 b8a:	42 17       	cp	r20, r18
 b8c:	53 07       	cpc	r21, r19
 b8e:	18 f0       	brcs	.+6      	; 0xb96 <malloc+0x60>
 b90:	a9 01       	movw	r20, r18
 b92:	db 01       	movw	r26, r22
 b94:	01 c0       	rjmp	.+2      	; 0xb98 <malloc+0x62>
 b96:	ef 01       	movw	r28, r30
 b98:	9a 01       	movw	r18, r20
 b9a:	bd 01       	movw	r22, r26
 b9c:	df 01       	movw	r26, r30
 b9e:	02 80       	ldd	r0, Z+2	; 0x02
 ba0:	f3 81       	ldd	r31, Z+3	; 0x03
 ba2:	e0 2d       	mov	r30, r0
 ba4:	d7 cf       	rjmp	.-82     	; 0xb54 <malloc+0x1e>
 ba6:	21 15       	cp	r18, r1
 ba8:	31 05       	cpc	r19, r1
 baa:	f9 f0       	breq	.+62     	; 0xbea <malloc+0xb4>
 bac:	28 1b       	sub	r18, r24
 bae:	39 0b       	sbc	r19, r25
 bb0:	24 30       	cpi	r18, 0x04	; 4
 bb2:	31 05       	cpc	r19, r1
 bb4:	80 f4       	brcc	.+32     	; 0xbd6 <malloc+0xa0>
 bb6:	8a 81       	ldd	r24, Y+2	; 0x02
 bb8:	9b 81       	ldd	r25, Y+3	; 0x03
 bba:	61 15       	cp	r22, r1
 bbc:	71 05       	cpc	r23, r1
 bbe:	21 f0       	breq	.+8      	; 0xbc8 <malloc+0x92>
 bc0:	fb 01       	movw	r30, r22
 bc2:	93 83       	std	Z+3, r25	; 0x03
 bc4:	82 83       	std	Z+2, r24	; 0x02
 bc6:	04 c0       	rjmp	.+8      	; 0xbd0 <malloc+0x9a>
 bc8:	90 93 73 01 	sts	0x0173, r25
 bcc:	80 93 72 01 	sts	0x0172, r24
 bd0:	fe 01       	movw	r30, r28
 bd2:	32 96       	adiw	r30, 0x02	; 2
 bd4:	44 c0       	rjmp	.+136    	; 0xc5e <malloc+0x128>
 bd6:	fe 01       	movw	r30, r28
 bd8:	e2 0f       	add	r30, r18
 bda:	f3 1f       	adc	r31, r19
 bdc:	81 93       	st	Z+, r24
 bde:	91 93       	st	Z+, r25
 be0:	22 50       	subi	r18, 0x02	; 2
 be2:	31 09       	sbc	r19, r1
 be4:	39 83       	std	Y+1, r19	; 0x01
 be6:	28 83       	st	Y, r18
 be8:	3a c0       	rjmp	.+116    	; 0xc5e <malloc+0x128>
 bea:	20 91 70 01 	lds	r18, 0x0170
 bee:	30 91 71 01 	lds	r19, 0x0171
 bf2:	23 2b       	or	r18, r19
 bf4:	41 f4       	brne	.+16     	; 0xc06 <malloc+0xd0>
 bf6:	20 91 02 01 	lds	r18, 0x0102
 bfa:	30 91 03 01 	lds	r19, 0x0103
 bfe:	30 93 71 01 	sts	0x0171, r19
 c02:	20 93 70 01 	sts	0x0170, r18
 c06:	20 91 00 01 	lds	r18, 0x0100
 c0a:	30 91 01 01 	lds	r19, 0x0101
 c0e:	21 15       	cp	r18, r1
 c10:	31 05       	cpc	r19, r1
 c12:	41 f4       	brne	.+16     	; 0xc24 <malloc+0xee>
 c14:	2d b7       	in	r18, 0x3d	; 61
 c16:	3e b7       	in	r19, 0x3e	; 62
 c18:	40 91 04 01 	lds	r20, 0x0104
 c1c:	50 91 05 01 	lds	r21, 0x0105
 c20:	24 1b       	sub	r18, r20
 c22:	35 0b       	sbc	r19, r21
 c24:	e0 91 70 01 	lds	r30, 0x0170
 c28:	f0 91 71 01 	lds	r31, 0x0171
 c2c:	e2 17       	cp	r30, r18
 c2e:	f3 07       	cpc	r31, r19
 c30:	a0 f4       	brcc	.+40     	; 0xc5a <malloc+0x124>
 c32:	2e 1b       	sub	r18, r30
 c34:	3f 0b       	sbc	r19, r31
 c36:	28 17       	cp	r18, r24
 c38:	39 07       	cpc	r19, r25
 c3a:	78 f0       	brcs	.+30     	; 0xc5a <malloc+0x124>
 c3c:	ac 01       	movw	r20, r24
 c3e:	4e 5f       	subi	r20, 0xFE	; 254
 c40:	5f 4f       	sbci	r21, 0xFF	; 255
 c42:	24 17       	cp	r18, r20
 c44:	35 07       	cpc	r19, r21
 c46:	48 f0       	brcs	.+18     	; 0xc5a <malloc+0x124>
 c48:	4e 0f       	add	r20, r30
 c4a:	5f 1f       	adc	r21, r31
 c4c:	50 93 71 01 	sts	0x0171, r21
 c50:	40 93 70 01 	sts	0x0170, r20
 c54:	81 93       	st	Z+, r24
 c56:	91 93       	st	Z+, r25
 c58:	02 c0       	rjmp	.+4      	; 0xc5e <malloc+0x128>
 c5a:	e0 e0       	ldi	r30, 0x00	; 0
 c5c:	f0 e0       	ldi	r31, 0x00	; 0
 c5e:	cf 01       	movw	r24, r30
 c60:	df 91       	pop	r29
 c62:	cf 91       	pop	r28
 c64:	08 95       	ret

00000c66 <free>:
 c66:	cf 93       	push	r28
 c68:	df 93       	push	r29
 c6a:	00 97       	sbiw	r24, 0x00	; 0
 c6c:	09 f4       	brne	.+2      	; 0xc70 <free+0xa>
 c6e:	87 c0       	rjmp	.+270    	; 0xd7e <free+0x118>
 c70:	fc 01       	movw	r30, r24
 c72:	32 97       	sbiw	r30, 0x02	; 2
 c74:	13 82       	std	Z+3, r1	; 0x03
 c76:	12 82       	std	Z+2, r1	; 0x02
 c78:	c0 91 72 01 	lds	r28, 0x0172
 c7c:	d0 91 73 01 	lds	r29, 0x0173
 c80:	20 97       	sbiw	r28, 0x00	; 0
 c82:	81 f4       	brne	.+32     	; 0xca4 <free+0x3e>
 c84:	20 81       	ld	r18, Z
 c86:	31 81       	ldd	r19, Z+1	; 0x01
 c88:	28 0f       	add	r18, r24
 c8a:	39 1f       	adc	r19, r25
 c8c:	80 91 70 01 	lds	r24, 0x0170
 c90:	90 91 71 01 	lds	r25, 0x0171
 c94:	82 17       	cp	r24, r18
 c96:	93 07       	cpc	r25, r19
 c98:	79 f5       	brne	.+94     	; 0xcf8 <free+0x92>
 c9a:	f0 93 71 01 	sts	0x0171, r31
 c9e:	e0 93 70 01 	sts	0x0170, r30
 ca2:	6d c0       	rjmp	.+218    	; 0xd7e <free+0x118>
 ca4:	de 01       	movw	r26, r28
 ca6:	20 e0       	ldi	r18, 0x00	; 0
 ca8:	30 e0       	ldi	r19, 0x00	; 0
 caa:	ae 17       	cp	r26, r30
 cac:	bf 07       	cpc	r27, r31
 cae:	50 f4       	brcc	.+20     	; 0xcc4 <free+0x5e>
 cb0:	12 96       	adiw	r26, 0x02	; 2
 cb2:	4d 91       	ld	r20, X+
 cb4:	5c 91       	ld	r21, X
 cb6:	13 97       	sbiw	r26, 0x03	; 3
 cb8:	9d 01       	movw	r18, r26
 cba:	41 15       	cp	r20, r1
 cbc:	51 05       	cpc	r21, r1
 cbe:	09 f1       	breq	.+66     	; 0xd02 <free+0x9c>
 cc0:	da 01       	movw	r26, r20
 cc2:	f3 cf       	rjmp	.-26     	; 0xcaa <free+0x44>
 cc4:	b3 83       	std	Z+3, r27	; 0x03
 cc6:	a2 83       	std	Z+2, r26	; 0x02
 cc8:	40 81       	ld	r20, Z
 cca:	51 81       	ldd	r21, Z+1	; 0x01
 ccc:	84 0f       	add	r24, r20
 cce:	95 1f       	adc	r25, r21
 cd0:	8a 17       	cp	r24, r26
 cd2:	9b 07       	cpc	r25, r27
 cd4:	71 f4       	brne	.+28     	; 0xcf2 <free+0x8c>
 cd6:	8d 91       	ld	r24, X+
 cd8:	9c 91       	ld	r25, X
 cda:	11 97       	sbiw	r26, 0x01	; 1
 cdc:	84 0f       	add	r24, r20
 cde:	95 1f       	adc	r25, r21
 ce0:	02 96       	adiw	r24, 0x02	; 2
 ce2:	91 83       	std	Z+1, r25	; 0x01
 ce4:	80 83       	st	Z, r24
 ce6:	12 96       	adiw	r26, 0x02	; 2
 ce8:	8d 91       	ld	r24, X+
 cea:	9c 91       	ld	r25, X
 cec:	13 97       	sbiw	r26, 0x03	; 3
 cee:	93 83       	std	Z+3, r25	; 0x03
 cf0:	82 83       	std	Z+2, r24	; 0x02
 cf2:	21 15       	cp	r18, r1
 cf4:	31 05       	cpc	r19, r1
 cf6:	29 f4       	brne	.+10     	; 0xd02 <free+0x9c>
 cf8:	f0 93 73 01 	sts	0x0173, r31
 cfc:	e0 93 72 01 	sts	0x0172, r30
 d00:	3e c0       	rjmp	.+124    	; 0xd7e <free+0x118>
 d02:	d9 01       	movw	r26, r18
 d04:	13 96       	adiw	r26, 0x03	; 3
 d06:	fc 93       	st	X, r31
 d08:	ee 93       	st	-X, r30
 d0a:	12 97       	sbiw	r26, 0x02	; 2
 d0c:	4d 91       	ld	r20, X+
 d0e:	5d 91       	ld	r21, X+
 d10:	a4 0f       	add	r26, r20
 d12:	b5 1f       	adc	r27, r21
 d14:	ea 17       	cp	r30, r26
 d16:	fb 07       	cpc	r31, r27
 d18:	79 f4       	brne	.+30     	; 0xd38 <free+0xd2>
 d1a:	80 81       	ld	r24, Z
 d1c:	91 81       	ldd	r25, Z+1	; 0x01
 d1e:	84 0f       	add	r24, r20
 d20:	95 1f       	adc	r25, r21
 d22:	02 96       	adiw	r24, 0x02	; 2
 d24:	d9 01       	movw	r26, r18
 d26:	11 96       	adiw	r26, 0x01	; 1
 d28:	9c 93       	st	X, r25
 d2a:	8e 93       	st	-X, r24
 d2c:	82 81       	ldd	r24, Z+2	; 0x02
 d2e:	93 81       	ldd	r25, Z+3	; 0x03
 d30:	13 96       	adiw	r26, 0x03	; 3
 d32:	9c 93       	st	X, r25
 d34:	8e 93       	st	-X, r24
 d36:	12 97       	sbiw	r26, 0x02	; 2
 d38:	e0 e0       	ldi	r30, 0x00	; 0
 d3a:	f0 e0       	ldi	r31, 0x00	; 0
 d3c:	8a 81       	ldd	r24, Y+2	; 0x02
 d3e:	9b 81       	ldd	r25, Y+3	; 0x03
 d40:	00 97       	sbiw	r24, 0x00	; 0
 d42:	19 f0       	breq	.+6      	; 0xd4a <free+0xe4>
 d44:	fe 01       	movw	r30, r28
 d46:	ec 01       	movw	r28, r24
 d48:	f9 cf       	rjmp	.-14     	; 0xd3c <free+0xd6>
 d4a:	ce 01       	movw	r24, r28
 d4c:	02 96       	adiw	r24, 0x02	; 2
 d4e:	28 81       	ld	r18, Y
 d50:	39 81       	ldd	r19, Y+1	; 0x01
 d52:	82 0f       	add	r24, r18
 d54:	93 1f       	adc	r25, r19
 d56:	20 91 70 01 	lds	r18, 0x0170
 d5a:	30 91 71 01 	lds	r19, 0x0171
 d5e:	28 17       	cp	r18, r24
 d60:	39 07       	cpc	r19, r25
 d62:	69 f4       	brne	.+26     	; 0xd7e <free+0x118>
 d64:	30 97       	sbiw	r30, 0x00	; 0
 d66:	29 f4       	brne	.+10     	; 0xd72 <free+0x10c>
 d68:	10 92 73 01 	sts	0x0173, r1
 d6c:	10 92 72 01 	sts	0x0172, r1
 d70:	02 c0       	rjmp	.+4      	; 0xd76 <free+0x110>
 d72:	13 82       	std	Z+3, r1	; 0x03
 d74:	12 82       	std	Z+2, r1	; 0x02
 d76:	d0 93 71 01 	sts	0x0171, r29
 d7a:	c0 93 70 01 	sts	0x0170, r28
 d7e:	df 91       	pop	r29
 d80:	cf 91       	pop	r28
 d82:	08 95       	ret

00000d84 <strnlen_P>:
 d84:	fc 01       	movw	r30, r24
 d86:	05 90       	lpm	r0, Z+
 d88:	61 50       	subi	r22, 0x01	; 1
 d8a:	70 40       	sbci	r23, 0x00	; 0
 d8c:	01 10       	cpse	r0, r1
 d8e:	d8 f7       	brcc	.-10     	; 0xd86 <strnlen_P+0x2>
 d90:	80 95       	com	r24
 d92:	90 95       	com	r25
 d94:	8e 0f       	add	r24, r30
 d96:	9f 1f       	adc	r25, r31
 d98:	08 95       	ret

00000d9a <memset>:
 d9a:	dc 01       	movw	r26, r24
 d9c:	01 c0       	rjmp	.+2      	; 0xda0 <memset+0x6>
 d9e:	6d 93       	st	X+, r22
 da0:	41 50       	subi	r20, 0x01	; 1
 da2:	50 40       	sbci	r21, 0x00	; 0
 da4:	e0 f7       	brcc	.-8      	; 0xd9e <memset+0x4>
 da6:	08 95       	ret

00000da8 <strnlen>:
 da8:	fc 01       	movw	r30, r24
 daa:	61 50       	subi	r22, 0x01	; 1
 dac:	70 40       	sbci	r23, 0x00	; 0
 dae:	01 90       	ld	r0, Z+
 db0:	01 10       	cpse	r0, r1
 db2:	d8 f7       	brcc	.-10     	; 0xdaa <strnlen+0x2>
 db4:	80 95       	com	r24
 db6:	90 95       	com	r25
 db8:	8e 0f       	add	r24, r30
 dba:	9f 1f       	adc	r25, r31
 dbc:	08 95       	ret

00000dbe <fputc>:
 dbe:	0f 93       	push	r16
 dc0:	1f 93       	push	r17
 dc2:	cf 93       	push	r28
 dc4:	df 93       	push	r29
 dc6:	18 2f       	mov	r17, r24
 dc8:	09 2f       	mov	r16, r25
 dca:	eb 01       	movw	r28, r22
 dcc:	8b 81       	ldd	r24, Y+3	; 0x03
 dce:	81 fd       	sbrc	r24, 1
 dd0:	03 c0       	rjmp	.+6      	; 0xdd8 <fputc+0x1a>
 dd2:	8f ef       	ldi	r24, 0xFF	; 255
 dd4:	9f ef       	ldi	r25, 0xFF	; 255
 dd6:	20 c0       	rjmp	.+64     	; 0xe18 <fputc+0x5a>
 dd8:	82 ff       	sbrs	r24, 2
 dda:	10 c0       	rjmp	.+32     	; 0xdfc <fputc+0x3e>
 ddc:	4e 81       	ldd	r20, Y+6	; 0x06
 dde:	5f 81       	ldd	r21, Y+7	; 0x07
 de0:	2c 81       	ldd	r18, Y+4	; 0x04
 de2:	3d 81       	ldd	r19, Y+5	; 0x05
 de4:	42 17       	cp	r20, r18
 de6:	53 07       	cpc	r21, r19
 de8:	7c f4       	brge	.+30     	; 0xe08 <fputc+0x4a>
 dea:	e8 81       	ld	r30, Y
 dec:	f9 81       	ldd	r31, Y+1	; 0x01
 dee:	9f 01       	movw	r18, r30
 df0:	2f 5f       	subi	r18, 0xFF	; 255
 df2:	3f 4f       	sbci	r19, 0xFF	; 255
 df4:	39 83       	std	Y+1, r19	; 0x01
 df6:	28 83       	st	Y, r18
 df8:	10 83       	st	Z, r17
 dfa:	06 c0       	rjmp	.+12     	; 0xe08 <fputc+0x4a>
 dfc:	e8 85       	ldd	r30, Y+8	; 0x08
 dfe:	f9 85       	ldd	r31, Y+9	; 0x09
 e00:	81 2f       	mov	r24, r17
 e02:	09 95       	icall
 e04:	89 2b       	or	r24, r25
 e06:	29 f7       	brne	.-54     	; 0xdd2 <fputc+0x14>
 e08:	2e 81       	ldd	r18, Y+6	; 0x06
 e0a:	3f 81       	ldd	r19, Y+7	; 0x07
 e0c:	2f 5f       	subi	r18, 0xFF	; 255
 e0e:	3f 4f       	sbci	r19, 0xFF	; 255
 e10:	3f 83       	std	Y+7, r19	; 0x07
 e12:	2e 83       	std	Y+6, r18	; 0x06
 e14:	81 2f       	mov	r24, r17
 e16:	90 2f       	mov	r25, r16
 e18:	df 91       	pop	r29
 e1a:	cf 91       	pop	r28
 e1c:	1f 91       	pop	r17
 e1e:	0f 91       	pop	r16
 e20:	08 95       	ret

00000e22 <__ultoa_invert>:
 e22:	fa 01       	movw	r30, r20
 e24:	aa 27       	eor	r26, r26
 e26:	28 30       	cpi	r18, 0x08	; 8
 e28:	51 f1       	breq	.+84     	; 0xe7e <__ultoa_invert+0x5c>
 e2a:	20 31       	cpi	r18, 0x10	; 16
 e2c:	81 f1       	breq	.+96     	; 0xe8e <__ultoa_invert+0x6c>
 e2e:	e8 94       	clt
 e30:	6f 93       	push	r22
 e32:	6e 7f       	andi	r22, 0xFE	; 254
 e34:	6e 5f       	subi	r22, 0xFE	; 254
 e36:	7f 4f       	sbci	r23, 0xFF	; 255
 e38:	8f 4f       	sbci	r24, 0xFF	; 255
 e3a:	9f 4f       	sbci	r25, 0xFF	; 255
 e3c:	af 4f       	sbci	r26, 0xFF	; 255
 e3e:	b1 e0       	ldi	r27, 0x01	; 1
 e40:	3e d0       	rcall	.+124    	; 0xebe <__ultoa_invert+0x9c>
 e42:	b4 e0       	ldi	r27, 0x04	; 4
 e44:	3c d0       	rcall	.+120    	; 0xebe <__ultoa_invert+0x9c>
 e46:	67 0f       	add	r22, r23
 e48:	78 1f       	adc	r23, r24
 e4a:	89 1f       	adc	r24, r25
 e4c:	9a 1f       	adc	r25, r26
 e4e:	a1 1d       	adc	r26, r1
 e50:	68 0f       	add	r22, r24
 e52:	79 1f       	adc	r23, r25
 e54:	8a 1f       	adc	r24, r26
 e56:	91 1d       	adc	r25, r1
 e58:	a1 1d       	adc	r26, r1
 e5a:	6a 0f       	add	r22, r26
 e5c:	71 1d       	adc	r23, r1
 e5e:	81 1d       	adc	r24, r1
 e60:	91 1d       	adc	r25, r1
 e62:	a1 1d       	adc	r26, r1
 e64:	20 d0       	rcall	.+64     	; 0xea6 <__ultoa_invert+0x84>
 e66:	09 f4       	brne	.+2      	; 0xe6a <__ultoa_invert+0x48>
 e68:	68 94       	set
 e6a:	3f 91       	pop	r19
 e6c:	2a e0       	ldi	r18, 0x0A	; 10
 e6e:	26 9f       	mul	r18, r22
 e70:	11 24       	eor	r1, r1
 e72:	30 19       	sub	r19, r0
 e74:	30 5d       	subi	r19, 0xD0	; 208
 e76:	31 93       	st	Z+, r19
 e78:	de f6       	brtc	.-74     	; 0xe30 <__ultoa_invert+0xe>
 e7a:	cf 01       	movw	r24, r30
 e7c:	08 95       	ret
 e7e:	46 2f       	mov	r20, r22
 e80:	47 70       	andi	r20, 0x07	; 7
 e82:	40 5d       	subi	r20, 0xD0	; 208
 e84:	41 93       	st	Z+, r20
 e86:	b3 e0       	ldi	r27, 0x03	; 3
 e88:	0f d0       	rcall	.+30     	; 0xea8 <__ultoa_invert+0x86>
 e8a:	c9 f7       	brne	.-14     	; 0xe7e <__ultoa_invert+0x5c>
 e8c:	f6 cf       	rjmp	.-20     	; 0xe7a <__ultoa_invert+0x58>
 e8e:	46 2f       	mov	r20, r22
 e90:	4f 70       	andi	r20, 0x0F	; 15
 e92:	40 5d       	subi	r20, 0xD0	; 208
 e94:	4a 33       	cpi	r20, 0x3A	; 58
 e96:	18 f0       	brcs	.+6      	; 0xe9e <__ultoa_invert+0x7c>
 e98:	49 5d       	subi	r20, 0xD9	; 217
 e9a:	31 fd       	sbrc	r19, 1
 e9c:	40 52       	subi	r20, 0x20	; 32
 e9e:	41 93       	st	Z+, r20
 ea0:	02 d0       	rcall	.+4      	; 0xea6 <__ultoa_invert+0x84>
 ea2:	a9 f7       	brne	.-22     	; 0xe8e <__ultoa_invert+0x6c>
 ea4:	ea cf       	rjmp	.-44     	; 0xe7a <__ultoa_invert+0x58>
 ea6:	b4 e0       	ldi	r27, 0x04	; 4
 ea8:	a6 95       	lsr	r26
 eaa:	97 95       	ror	r25
 eac:	87 95       	ror	r24
 eae:	77 95       	ror	r23
 eb0:	67 95       	ror	r22
 eb2:	ba 95       	dec	r27
 eb4:	c9 f7       	brne	.-14     	; 0xea8 <__ultoa_invert+0x86>
 eb6:	00 97       	sbiw	r24, 0x00	; 0
 eb8:	61 05       	cpc	r22, r1
 eba:	71 05       	cpc	r23, r1
 ebc:	08 95       	ret
 ebe:	9b 01       	movw	r18, r22
 ec0:	ac 01       	movw	r20, r24
 ec2:	0a 2e       	mov	r0, r26
 ec4:	06 94       	lsr	r0
 ec6:	57 95       	ror	r21
 ec8:	47 95       	ror	r20
 eca:	37 95       	ror	r19
 ecc:	27 95       	ror	r18
 ece:	ba 95       	dec	r27
 ed0:	c9 f7       	brne	.-14     	; 0xec4 <__ultoa_invert+0xa2>
 ed2:	62 0f       	add	r22, r18
 ed4:	73 1f       	adc	r23, r19
 ed6:	84 1f       	adc	r24, r20
 ed8:	95 1f       	adc	r25, r21
 eda:	a0 1d       	adc	r26, r0
 edc:	08 95       	ret

00000ede <__prologue_saves__>:
 ede:	2f 92       	push	r2
 ee0:	3f 92       	push	r3
 ee2:	4f 92       	push	r4
 ee4:	5f 92       	push	r5
 ee6:	6f 92       	push	r6
 ee8:	7f 92       	push	r7
 eea:	8f 92       	push	r8
 eec:	9f 92       	push	r9
 eee:	af 92       	push	r10
 ef0:	bf 92       	push	r11
 ef2:	cf 92       	push	r12
 ef4:	df 92       	push	r13
 ef6:	ef 92       	push	r14
 ef8:	ff 92       	push	r15
 efa:	0f 93       	push	r16
 efc:	1f 93       	push	r17
 efe:	cf 93       	push	r28
 f00:	df 93       	push	r29
 f02:	cd b7       	in	r28, 0x3d	; 61
 f04:	de b7       	in	r29, 0x3e	; 62
 f06:	ca 1b       	sub	r28, r26
 f08:	db 0b       	sbc	r29, r27
 f0a:	0f b6       	in	r0, 0x3f	; 63
 f0c:	f8 94       	cli
 f0e:	de bf       	out	0x3e, r29	; 62
 f10:	0f be       	out	0x3f, r0	; 63
 f12:	cd bf       	out	0x3d, r28	; 61
 f14:	09 94       	ijmp

00000f16 <__epilogue_restores__>:
 f16:	2a 88       	ldd	r2, Y+18	; 0x12
 f18:	39 88       	ldd	r3, Y+17	; 0x11
 f1a:	48 88       	ldd	r4, Y+16	; 0x10
 f1c:	5f 84       	ldd	r5, Y+15	; 0x0f
 f1e:	6e 84       	ldd	r6, Y+14	; 0x0e
 f20:	7d 84       	ldd	r7, Y+13	; 0x0d
 f22:	8c 84       	ldd	r8, Y+12	; 0x0c
 f24:	9b 84       	ldd	r9, Y+11	; 0x0b
 f26:	aa 84       	ldd	r10, Y+10	; 0x0a
 f28:	b9 84       	ldd	r11, Y+9	; 0x09
 f2a:	c8 84       	ldd	r12, Y+8	; 0x08
 f2c:	df 80       	ldd	r13, Y+7	; 0x07
 f2e:	ee 80       	ldd	r14, Y+6	; 0x06
 f30:	fd 80       	ldd	r15, Y+5	; 0x05
 f32:	0c 81       	ldd	r16, Y+4	; 0x04
 f34:	1b 81       	ldd	r17, Y+3	; 0x03
 f36:	aa 81       	ldd	r26, Y+2	; 0x02
 f38:	b9 81       	ldd	r27, Y+1	; 0x01
 f3a:	ce 0f       	add	r28, r30
 f3c:	d1 1d       	adc	r29, r1
 f3e:	0f b6       	in	r0, 0x3f	; 63
 f40:	f8 94       	cli
 f42:	de bf       	out	0x3e, r29	; 62
 f44:	0f be       	out	0x3f, r0	; 63
 f46:	cd bf       	out	0x3d, r28	; 61
 f48:	ed 01       	movw	r28, r26
 f4a:	08 95       	ret

00000f4c <_exit>:
 f4c:	f8 94       	cli

00000f4e <__stop_program>:
 f4e:	ff cf       	rjmp	.-2      	; 0xf4e <__stop_program>
