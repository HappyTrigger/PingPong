
PingPongApplication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  0000091e  000009b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000091e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800130  00800130  000009e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009e2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000150  00000000  00000000  00000a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001459  00000000  00000000  00000b62  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a6  00000000  00000000  00001fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000084d  00000000  00000000  00002861  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000300  00000000  00000000  000030b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000482  00000000  00000000  000033b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000097e  00000000  00000000  00003832  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  000041b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__ctors_end>
   4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
   8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
   c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  10:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  14:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  18:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  1c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  20:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  24:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  28:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  30:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  34:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  38:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  3c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  40:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  44:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  48:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  4c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  50:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  54:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  58:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  5c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  60:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  64:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  68:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  6c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>

00000070 <__trampolines_end>:
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 5e       	subi	r16, 0xE0	; 224
  78:	00 00       	nop
  7a:	00 0e       	add	r0, r16
  7c:	00 0e       	add	r0, r16
  7e:	00 28       	or	r0, r0
  80:	7c 28       	or	r7, r12
  82:	7c 28       	or	r7, r12
  84:	08 54       	subi	r16, 0x48	; 72
  86:	7c 54       	subi	r23, 0x4C	; 76
  88:	20 26       	eor	r2, r16
  8a:	10 08       	sbc	r1, r0
  8c:	64 00       	.word	0x0064	; ????
  8e:	28 54       	subi	r18, 0x48	; 72
  90:	28 40       	sbci	r18, 0x08	; 8
  92:	00 00       	nop
  94:	00 0e       	add	r0, r16
  96:	00 00       	nop
  98:	00 3c       	cpi	r16, 0xC0	; 192
  9a:	42 00       	.word	0x0042	; ????
  9c:	00 00       	nop
  9e:	42 3c       	cpi	r20, 0xC2	; 194
  a0:	00 00       	nop
  a2:	00 54       	subi	r16, 0x40	; 64
  a4:	38 54       	subi	r19, 0x48	; 72
  a6:	00 10       	cpse	r0, r0
  a8:	10 7c       	andi	r17, 0xC0	; 192
  aa:	10 10       	cpse	r1, r0
  ac:	00 80       	ld	r0, Z
  ae:	60 20       	and	r6, r0
  b0:	00 10       	cpse	r0, r0
  b2:	10 10       	cpse	r1, r0
  b4:	10 00       	.word	0x0010	; ????
  b6:	00 60       	ori	r16, 0x00	; 0
  b8:	60 00       	.word	0x0060	; ????
  ba:	00 20       	and	r0, r0
  bc:	10 08       	sbc	r1, r0
  be:	04 00       	.word	0x0004	; ????
  c0:	00 3c       	cpi	r16, 0xC0	; 192
  c2:	42 3c       	cpi	r20, 0xC2	; 194
  c4:	00 00       	nop
  c6:	44 7e       	andi	r20, 0xE4	; 228
  c8:	40 00       	.word	0x0040	; ????
  ca:	44 62       	ori	r20, 0x24	; 36
  cc:	52 4c       	sbci	r21, 0xC2	; 194
  ce:	00 22       	and	r0, r16
  d0:	4a 4a       	sbci	r20, 0xAA	; 170
  d2:	36 00       	.word	0x0036	; ????
  d4:	18 14       	cp	r1, r8
  d6:	7e 10       	cpse	r7, r14
  d8:	00 2e       	mov	r0, r16
  da:	4a 4a       	sbci	r20, 0xAA	; 170
  dc:	32 00       	.word	0x0032	; ????
  de:	3c 4a       	sbci	r19, 0xAC	; 172
  e0:	4a 30       	cpi	r20, 0x0A	; 10
  e2:	00 02       	muls	r16, r16
  e4:	62 1a       	sub	r6, r18
  e6:	06 00       	.word	0x0006	; ????
  e8:	34 4a       	sbci	r19, 0xA4	; 164
  ea:	4a 34       	cpi	r20, 0x4A	; 74
  ec:	00 0c       	add	r0, r0
  ee:	52 52       	subi	r21, 0x22	; 34
  f0:	3c 00       	.word	0x003c	; ????
  f2:	00 6c       	ori	r16, 0xC0	; 192
  f4:	6c 00       	.word	0x006c	; ????
  f6:	00 80       	ld	r0, Z
  f8:	6c 2c       	mov	r6, r12
  fa:	00 00       	nop
  fc:	00 10       	cpse	r0, r0
  fe:	28 44       	sbci	r18, 0x48	; 72
 100:	00 28       	or	r0, r0
 102:	28 28       	or	r2, r8
 104:	28 00       	.word	0x0028	; ????
 106:	00 44       	sbci	r16, 0x40	; 64
 108:	28 10       	cpse	r2, r8
 10a:	00 00       	nop
 10c:	04 52       	subi	r16, 0x24	; 36
 10e:	0c 00       	.word	0x000c	; ????
 110:	3c 42       	sbci	r19, 0x2C	; 44
 112:	5a 1c       	adc	r5, r10
 114:	00 7c       	andi	r16, 0xC0	; 192
 116:	12 12       	cpse	r1, r18
 118:	7c 00       	.word	0x007c	; ????
 11a:	7e 4a       	sbci	r23, 0xAE	; 174
 11c:	4a 34       	cpi	r20, 0x4A	; 74
 11e:	00 3c       	cpi	r16, 0xC0	; 192
 120:	42 42       	sbci	r20, 0x22	; 34
 122:	24 00       	.word	0x0024	; ????
 124:	7e 42       	sbci	r23, 0x2E	; 46
 126:	42 3c       	cpi	r20, 0xC2	; 194
 128:	00 7e       	andi	r16, 0xE0	; 224
 12a:	4a 4a       	sbci	r20, 0xAA	; 170
 12c:	42 00       	.word	0x0042	; ????
 12e:	7e 0a       	sbc	r7, r30
 130:	0a 02       	muls	r16, r26
 132:	00 3c       	cpi	r16, 0xC0	; 192
 134:	42 52       	subi	r20, 0x22	; 34
 136:	74 00       	.word	0x0074	; ????
 138:	7e 08       	sbc	r7, r14
 13a:	08 7e       	andi	r16, 0xE8	; 232
 13c:	00 00       	nop
 13e:	42 7e       	andi	r20, 0xE2	; 226
 140:	42 00       	.word	0x0042	; ????
 142:	20 40       	sbci	r18, 0x00	; 0
 144:	40 3e       	cpi	r20, 0xE0	; 224
 146:	00 7e       	andi	r16, 0xE0	; 224
 148:	18 24       	eor	r1, r8
 14a:	42 00       	.word	0x0042	; ????
 14c:	7e 40       	sbci	r23, 0x0E	; 14
 14e:	40 40       	sbci	r20, 0x00	; 0
 150:	00 7e       	andi	r16, 0xE0	; 224
 152:	0c 0c       	add	r0, r12
 154:	7e 00       	.word	0x007e	; ????
 156:	7e 0c       	add	r7, r14
 158:	30 7e       	andi	r19, 0xE0	; 224
 15a:	00 3c       	cpi	r16, 0xC0	; 192
 15c:	42 42       	sbci	r20, 0x22	; 34
 15e:	3c 00       	.word	0x003c	; ????
 160:	7e 12       	cpse	r7, r30
 162:	12 0c       	add	r1, r2
 164:	00 3c       	cpi	r16, 0xC0	; 192
 166:	62 42       	sbci	r22, 0x22	; 34
 168:	bc 00       	.word	0x00bc	; ????
 16a:	7e 12       	cpse	r7, r30
 16c:	32 4c       	sbci	r19, 0xC2	; 194
 16e:	00 24       	eor	r0, r0
 170:	4a 52       	subi	r20, 0x2A	; 42
 172:	24 00       	.word	0x0024	; ????
 174:	00 02       	muls	r16, r16
 176:	7e 02       	muls	r23, r30
 178:	00 3e       	cpi	r16, 0xE0	; 224
 17a:	40 40       	sbci	r20, 0x00	; 0
 17c:	3e 00       	.word	0x003e	; ????
 17e:	1e 60       	ori	r17, 0x0E	; 14
 180:	60 1e       	adc	r6, r16
 182:	00 7e       	andi	r16, 0xE0	; 224
 184:	30 30       	cpi	r19, 0x00	; 0
 186:	7e 00       	.word	0x007e	; ????
 188:	66 18       	sub	r6, r6
 18a:	18 66       	ori	r17, 0x68	; 104
 18c:	00 00       	nop
 18e:	0e 70       	andi	r16, 0x0E	; 14
 190:	0e 00       	.word	0x000e	; ????
 192:	62 52       	subi	r22, 0x22	; 34
 194:	4a 46       	sbci	r20, 0x6A	; 106
 196:	00 00       	nop
 198:	7e 42       	sbci	r23, 0x2E	; 46
 19a:	42 00       	.word	0x0042	; ????
 19c:	04 08       	sbc	r0, r4
 19e:	10 20       	and	r1, r0
 1a0:	00 00       	nop
 1a2:	42 42       	sbci	r20, 0x22	; 34
 1a4:	7e 00       	.word	0x007e	; ????
 1a6:	00 04       	cpc	r0, r0
 1a8:	02 04       	cpc	r0, r2
 1aa:	00 40       	sbci	r16, 0x00	; 0
 1ac:	40 40       	sbci	r20, 0x00	; 0
 1ae:	40 00       	.word	0x0040	; ????
 1b0:	00 02       	muls	r16, r16
 1b2:	04 00       	.word	0x0004	; ????
 1b4:	00 30       	cpi	r16, 0x00	; 0
 1b6:	48 28       	or	r4, r8
 1b8:	78 00       	.word	0x0078	; ????
 1ba:	7e 48       	sbci	r23, 0x8E	; 142
 1bc:	48 30       	cpi	r20, 0x08	; 8
 1be:	00 30       	cpi	r16, 0x00	; 0
 1c0:	48 48       	sbci	r20, 0x88	; 136
 1c2:	00 00       	nop
 1c4:	30 48       	sbci	r19, 0x80	; 128
 1c6:	48 7e       	andi	r20, 0xE8	; 232
 1c8:	00 30       	cpi	r16, 0x00	; 0
 1ca:	68 58       	subi	r22, 0x88	; 136
 1cc:	10 00       	.word	0x0010	; ????
 1ce:	10 7c       	andi	r17, 0xC0	; 192
 1d0:	12 04       	cpc	r1, r2
 1d2:	00 50       	subi	r16, 0x00	; 0
 1d4:	a8 a8       	ldd	r10, Y+48	; 0x30
 1d6:	98 00       	.word	0x0098	; ????
 1d8:	7e 08       	sbc	r7, r14
 1da:	08 70       	andi	r16, 0x08	; 8
 1dc:	00 00       	nop
 1de:	48 7a       	andi	r20, 0xA8	; 168
 1e0:	40 00       	.word	0x0040	; ????
 1e2:	00 40       	sbci	r16, 0x00	; 0
 1e4:	80 7a       	andi	r24, 0xA0	; 160
 1e6:	00 7e       	andi	r16, 0xE0	; 224
 1e8:	10 28       	or	r1, r0
 1ea:	40 00       	.word	0x0040	; ????
 1ec:	00 42       	sbci	r16, 0x20	; 32
 1ee:	7e 40       	sbci	r23, 0x0E	; 14
 1f0:	00 78       	andi	r16, 0x80	; 128
 1f2:	10 18       	sub	r1, r0
 1f4:	70 00       	.word	0x0070	; ????
 1f6:	78 08       	sbc	r7, r8
 1f8:	08 70       	andi	r16, 0x08	; 8
 1fa:	00 30       	cpi	r16, 0x00	; 0
 1fc:	48 48       	sbci	r20, 0x88	; 136
 1fe:	30 00       	.word	0x0030	; ????
 200:	f8 48       	sbci	r31, 0x88	; 136
 202:	48 30       	cpi	r20, 0x08	; 8
 204:	00 30       	cpi	r16, 0x00	; 0
 206:	48 48       	sbci	r20, 0x88	; 136
 208:	f8 00       	.word	0x00f8	; ????
 20a:	78 08       	sbc	r7, r8
 20c:	08 10       	cpse	r0, r8
 20e:	00 50       	subi	r16, 0x00	; 0
 210:	58 68       	ori	r21, 0x88	; 136
 212:	28 00       	.word	0x0028	; ????
 214:	08 3e       	cpi	r16, 0xE8	; 232
 216:	48 40       	sbci	r20, 0x08	; 8
 218:	00 38       	cpi	r16, 0x80	; 128
 21a:	40 40       	sbci	r20, 0x00	; 0
 21c:	78 00       	.word	0x0078	; ????
 21e:	00 38       	cpi	r16, 0x80	; 128
 220:	40 38       	cpi	r20, 0x80	; 128
 222:	00 78       	andi	r16, 0x80	; 128
 224:	60 60       	ori	r22, 0x00	; 0
 226:	78 00       	.word	0x0078	; ????
 228:	48 30       	cpi	r20, 0x08	; 8
 22a:	30 48       	sbci	r19, 0x80	; 128
 22c:	00 18       	sub	r0, r0
 22e:	a0 40       	sbci	r26, 0x00	; 0
 230:	38 00       	.word	0x0038	; ????
 232:	48 68       	ori	r20, 0x88	; 136
 234:	58 48       	sbci	r21, 0x88	; 136
 236:	00 00       	nop
 238:	08 3c       	cpi	r16, 0xC8	; 200
 23a:	42 00       	.word	0x0042	; ????
 23c:	00 00       	nop
 23e:	7e 00       	.word	0x007e	; ????
 240:	00 00       	nop
 242:	42 3c       	cpi	r20, 0xC2	; 194
 244:	08 00       	.word	0x0008	; ????
 246:	04 02       	muls	r16, r20
 248:	04 02       	muls	r16, r20
	...

0000024c <__ctors_end>:
 24c:	11 24       	eor	r1, r1
 24e:	1f be       	out	0x3f, r1	; 63
 250:	cf ef       	ldi	r28, 0xFF	; 255
 252:	d4 e0       	ldi	r29, 0x04	; 4
 254:	de bf       	out	0x3e, r29	; 62
 256:	cd bf       	out	0x3d, r28	; 61

00000258 <__do_copy_data>:
 258:	11 e0       	ldi	r17, 0x01	; 1
 25a:	a0 e0       	ldi	r26, 0x00	; 0
 25c:	b1 e0       	ldi	r27, 0x01	; 1
 25e:	ee e1       	ldi	r30, 0x1E	; 30
 260:	f9 e0       	ldi	r31, 0x09	; 9
 262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x10>
 264:	05 90       	lpm	r0, Z+
 266:	0d 92       	st	X+, r0
 268:	a0 33       	cpi	r26, 0x30	; 48
 26a:	b1 07       	cpc	r27, r17
 26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0xc>

0000026e <__do_clear_bss>:
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	a0 e3       	ldi	r26, 0x30	; 48
 272:	b1 e0       	ldi	r27, 0x01	; 1
 274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
 276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
 278:	ae 33       	cpi	r26, 0x3E	; 62
 27a:	b2 07       	cpc	r27, r18
 27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
 27e:	0e 94 c9 02 	call	0x592	; 0x592 <main>
 282:	0c 94 8d 04 	jmp	0x91a	; 0x91a <_exit>

00000286 <__bad_interrupt>:
 286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028a <read_adc>:

int read_adc(char channel)
{
	volatile char *ext_adc = (char *) ADC_BASE_ADDR;
	
	*ext_adc = channel;
 28a:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28e:	89 ef       	ldi	r24, 0xF9	; 249
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <read_adc+0x8>
 296:	00 c0       	rjmp	.+0      	; 0x298 <read_adc+0xe>
 298:	00 00       	nop
	_delay_ms(1);
	return *ext_adc;
 29a:	80 91 00 14 	lds	r24, 0x1400
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	08 95       	ret

000002a2 <joystick_calibration>:
	return retVal;
}



JoystickPosition joystick_calibration(){
 2a2:	cf 92       	push	r12
 2a4:	df 92       	push	r13
 2a6:	ef 92       	push	r14
 2a8:	ff 92       	push	r15
	
	JoystickPosition position;
	int i = 0;
	position.xaxis = read_adc(ADC_CH2);
 2aa:	85 e0       	ldi	r24, 0x05	; 5
 2ac:	0e 94 45 01 	call	0x28a	; 0x28a <read_adc>
 2b0:	6c 01       	movw	r12, r24
	position.yaxis = read_adc(ADC_CH1);
 2b2:	84 e0       	ldi	r24, 0x04	; 4
 2b4:	0e 94 45 01 	call	0x28a	; 0x28a <read_adc>
 2b8:	7c 01       	movw	r14, r24
	position.xaxis -= 127;
 2ba:	8f e7       	ldi	r24, 0x7F	; 127
 2bc:	c8 1a       	sub	r12, r24
 2be:	d1 08       	sbc	r13, r1
	position.yaxis -= 127;
 2c0:	8f e7       	ldi	r24, 0x7F	; 127
 2c2:	e8 1a       	sub	r14, r24
 2c4:	f1 08       	sbc	r15, r1
	//position.yaxis -= 127;
	//
	return position;
	
	
}
 2c6:	c7 01       	movw	r24, r14
 2c8:	b6 01       	movw	r22, r12
 2ca:	ff 90       	pop	r15
 2cc:	ef 90       	pop	r14
 2ce:	df 90       	pop	r13
 2d0:	cf 90       	pop	r12
 2d2:	08 95       	ret

000002d4 <init_oled>:
}

void write_c(char command)
{
	volatile char *ext_oled = (char *) OLED_COMMAND_BASE_ADDR;
	ext_oled[0] = command;
 2d4:	e0 e0       	ldi	r30, 0x00	; 0
 2d6:	f0 e1       	ldi	r31, 0x10	; 16
 2d8:	8e ea       	ldi	r24, 0xAE	; 174
 2da:	80 83       	st	Z, r24
 2dc:	81 ea       	ldi	r24, 0xA1	; 161
 2de:	80 83       	st	Z, r24
 2e0:	8a ed       	ldi	r24, 0xDA	; 218
 2e2:	80 83       	st	Z, r24
 2e4:	82 e1       	ldi	r24, 0x12	; 18
 2e6:	80 83       	st	Z, r24
 2e8:	88 ec       	ldi	r24, 0xC8	; 200
 2ea:	80 83       	st	Z, r24
 2ec:	88 ea       	ldi	r24, 0xA8	; 168
 2ee:	80 83       	st	Z, r24
 2f0:	8f e3       	ldi	r24, 0x3F	; 63
 2f2:	80 83       	st	Z, r24
 2f4:	85 ed       	ldi	r24, 0xD5	; 213
 2f6:	80 83       	st	Z, r24
 2f8:	80 e8       	ldi	r24, 0x80	; 128
 2fa:	80 83       	st	Z, r24
 2fc:	81 e8       	ldi	r24, 0x81	; 129
 2fe:	80 83       	st	Z, r24
 300:	80 e5       	ldi	r24, 0x50	; 80
 302:	80 83       	st	Z, r24
 304:	89 ed       	ldi	r24, 0xD9	; 217
 306:	80 83       	st	Z, r24
 308:	81 e2       	ldi	r24, 0x21	; 33
 30a:	80 83       	st	Z, r24
 30c:	80 e2       	ldi	r24, 0x20	; 32
 30e:	80 83       	st	Z, r24
 310:	10 82       	st	Z, r1
 312:	8b ed       	ldi	r24, 0xDB	; 219
 314:	80 83       	st	Z, r24
 316:	80 e3       	ldi	r24, 0x30	; 48
 318:	80 83       	st	Z, r24
 31a:	8d ea       	ldi	r24, 0xAD	; 173
 31c:	80 83       	st	Z, r24
 31e:	10 82       	st	Z, r1
 320:	84 ea       	ldi	r24, 0xA4	; 164
 322:	80 83       	st	Z, r24
 324:	86 ea       	ldi	r24, 0xA6	; 166
 326:	80 83       	st	Z, r24
 328:	8f ea       	ldi	r24, 0xAF	; 175
 32a:	80 83       	st	Z, r24
 32c:	08 95       	ret

0000032e <reset_position>:
 32e:	e0 e0       	ldi	r30, 0x00	; 0
 330:	f0 e1       	ldi	r31, 0x10	; 16
 332:	81 e2       	ldi	r24, 0x21	; 33
 334:	80 83       	st	Z, r24
 336:	10 82       	st	Z, r1
 338:	8f e7       	ldi	r24, 0x7F	; 127
 33a:	80 83       	st	Z, r24
 33c:	82 e2       	ldi	r24, 0x22	; 34
 33e:	80 83       	st	Z, r24
 340:	10 82       	st	Z, r1
 342:	87 e0       	ldi	r24, 0x07	; 7
 344:	80 83       	st	Z, r24
 346:	08 95       	ret

00000348 <refresh_oled>:
	write_c(0x07);
}

void refresh_oled()
{
	reset_position();
 348:	0e 94 97 01 	call	0x32e	; 0x32e <reset_position>
 34c:	e0 e0       	ldi	r30, 0x00	; 0
 34e:	f8 e1       	ldi	r31, 0x18	; 24
}

void write_d(char data)
{
	volatile char *ext_oled = (char *) OLED_DATA_BASE_ADDR;
	ext_oled[0] = data;
 350:	a0 e0       	ldi	r26, 0x00	; 0
 352:	b2 e1       	ldi	r27, 0x12	; 18
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	unsigned char oled_value;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
	{
		oled_value = ext_ram[i];
 354:	81 91       	ld	r24, Z+
}

void write_d(char data)
{
	volatile char *ext_oled = (char *) OLED_DATA_BASE_ADDR;
	ext_oled[0] = data;
 356:	8c 93       	st	X, r24
{
	reset_position();
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	unsigned char oled_value;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
 358:	e1 15       	cp	r30, r1
 35a:	8c e1       	ldi	r24, 0x1C	; 28
 35c:	f8 07       	cpc	r31, r24
 35e:	d1 f7       	brne	.-12     	; 0x354 <refresh_oled+0xc>
	{
		oled_value = ext_ram[i];
		write_d(oled_value);
	}
}
 360:	08 95       	ret

00000362 <clear_oled>:

void clear_oled()
{
 362:	e0 e0       	ldi	r30, 0x00	; 0
 364:	f8 e1       	ldi	r31, 0x18	; 24
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
	{
		ext_ram[i] = 0x00;
 366:	11 92       	st	Z+, r1

void clear_oled()
{
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
 368:	e1 15       	cp	r30, r1
 36a:	8c e1       	ldi	r24, 0x1C	; 28
 36c:	f8 07       	cpc	r31, r24
 36e:	d9 f7       	brne	.-10     	; 0x366 <clear_oled+0x4>
	{
		ext_ram[i] = 0x00;
	}
}
 370:	08 95       	ret

00000372 <set_pixel>:

int set_pixel(unsigned int x,unsigned int y)
{
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	
	if (x > 127)
 372:	80 38       	cpi	r24, 0x80	; 128
 374:	91 05       	cpc	r25, r1
 376:	10 f5       	brcc	.+68     	; 0x3bc <set_pixel+0x4a>
	{
		return 1;
	}
	else if (y > 64)
 378:	61 34       	cpi	r22, 0x41	; 65
 37a:	71 05       	cpc	r23, r1
 37c:	f8 f4       	brcc	.+62     	; 0x3bc <set_pixel+0x4a>
	{
		return 1;
	}
	else
	{
		unsigned int page = y/8;
 37e:	fb 01       	movw	r30, r22
 380:	f6 95       	lsr	r31
 382:	e7 95       	ror	r30
 384:	f6 95       	lsr	r31
 386:	e7 95       	ror	r30
 388:	f6 95       	lsr	r31
 38a:	e7 95       	ror	r30
		unsigned int coloumn = page*128 + x;
 38c:	f6 95       	lsr	r31
 38e:	fe 2f       	mov	r31, r30
 390:	ee 27       	eor	r30, r30
 392:	f7 95       	ror	r31
 394:	e7 95       	ror	r30
 396:	8e 0f       	add	r24, r30
 398:	9f 1f       	adc	r25, r31
		ext_ram[coloumn] |= (1 << (y % 8));
 39a:	fc 01       	movw	r30, r24
 39c:	f8 5e       	subi	r31, 0xE8	; 232
 39e:	20 81       	ld	r18, Z
 3a0:	67 70       	andi	r22, 0x07	; 7
 3a2:	77 27       	eor	r23, r23
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	ac 01       	movw	r20, r24
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <set_pixel+0x3e>
 3ac:	44 0f       	add	r20, r20
 3ae:	55 1f       	adc	r21, r21
 3b0:	6a 95       	dec	r22
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <set_pixel+0x3a>
 3b4:	ba 01       	movw	r22, r20
 3b6:	62 2b       	or	r22, r18
 3b8:	60 83       	st	Z, r22
 3ba:	08 95       	ret
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 3c0:	08 95       	ret

000003c2 <unset_pixel>:

int unset_pixel(unsigned int x,unsigned int y)
{
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	
	if (x > 127)
 3c2:	80 38       	cpi	r24, 0x80	; 128
 3c4:	91 05       	cpc	r25, r1
 3c6:	18 f5       	brcc	.+70     	; 0x40e <unset_pixel+0x4c>
	{
		return 1;
	}
	else if (y > 64)
 3c8:	61 34       	cpi	r22, 0x41	; 65
 3ca:	71 05       	cpc	r23, r1
 3cc:	00 f5       	brcc	.+64     	; 0x40e <unset_pixel+0x4c>
	{
		return 1;
	}
	else
	{
		unsigned int page = y/8;
 3ce:	fb 01       	movw	r30, r22
 3d0:	f6 95       	lsr	r31
 3d2:	e7 95       	ror	r30
 3d4:	f6 95       	lsr	r31
 3d6:	e7 95       	ror	r30
 3d8:	f6 95       	lsr	r31
 3da:	e7 95       	ror	r30
		unsigned int column = page*128 + x;
 3dc:	f6 95       	lsr	r31
 3de:	fe 2f       	mov	r31, r30
 3e0:	ee 27       	eor	r30, r30
 3e2:	f7 95       	ror	r31
 3e4:	e7 95       	ror	r30
 3e6:	8e 0f       	add	r24, r30
 3e8:	9f 1f       	adc	r25, r31
		ext_ram[column] &= ~(1 << (y % 8));
 3ea:	fc 01       	movw	r30, r24
 3ec:	f8 5e       	subi	r31, 0xE8	; 232
 3ee:	20 81       	ld	r18, Z
 3f0:	67 70       	andi	r22, 0x07	; 7
 3f2:	77 27       	eor	r23, r23
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	ac 01       	movw	r20, r24
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <unset_pixel+0x3e>
 3fc:	44 0f       	add	r20, r20
 3fe:	55 1f       	adc	r21, r21
 400:	6a 95       	dec	r22
 402:	e2 f7       	brpl	.-8      	; 0x3fc <unset_pixel+0x3a>
 404:	ba 01       	movw	r22, r20
 406:	60 95       	com	r22
 408:	62 23       	and	r22, r18
 40a:	60 83       	st	Z, r22
 40c:	08 95       	ret
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 412:	08 95       	ret

00000414 <print_char>:

void print_char(char character)
{
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	c0 91 32 01 	lds	r28, 0x0132
 41c:	d0 91 33 01 	lds	r29, 0x0133
 420:	28 2f       	mov	r18, r24
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	20 52       	subi	r18, 0x20	; 32
 426:	31 09       	sbc	r19, r1
 428:	c9 01       	movw	r24, r18
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	28 0f       	add	r18, r24
 434:	39 1f       	adc	r19, r25
 436:	20 59       	subi	r18, 0x90	; 144
 438:	3f 4f       	sbci	r19, 0xFF	; 255
 43a:	84 e0       	ldi	r24, 0x04	; 4
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	be 01       	movw	r22, r28
 440:	6c 5f       	subi	r22, 0xFC	; 252
 442:	77 4e       	sbci	r23, 0xE7	; 231
 444:	db 01       	movw	r26, r22
 446:	a8 1b       	sub	r26, r24
 448:	b9 0b       	sbc	r27, r25
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	
	for(int i=0; i<4;i++)
	{
		ext_ram[position] = pgm_read_word_near(&(font[character-32][i]));
 44a:	f9 01       	movw	r30, r18
 44c:	45 91       	lpm	r20, Z+
 44e:	54 91       	lpm	r21, Z
 450:	4c 93       	st	X, r20
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	2f 5f       	subi	r18, 0xFF	; 255
 456:	3f 4f       	sbci	r19, 0xFF	; 255

void print_char(char character)
{
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	
	for(int i=0; i<4;i++)
 458:	00 97       	sbiw	r24, 0x00	; 0
 45a:	a1 f7       	brne	.-24     	; 0x444 <print_char+0x30>
 45c:	24 96       	adiw	r28, 0x04	; 4
 45e:	d0 93 33 01 	sts	0x0133, r29
 462:	c0 93 32 01 	sts	0x0132, r28
	{
		ext_ram[position] = pgm_read_word_near(&(font[character-32][i]));
		position++;
	}
}
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	08 95       	ret

0000046c <screensaver>:



void screensaver()
{
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
	static char x = 0;
	static char dir = 0;
	if (dir == 0)
 470:	80 91 31 01 	lds	r24, 0x0131
 474:	81 11       	cpse	r24, r1
 476:	0c c0       	rjmp	.+24     	; 0x490 <screensaver+0x24>
	{
		x++;
 478:	80 91 30 01 	lds	r24, 0x0130
 47c:	8f 5f       	subi	r24, 0xFF	; 255
 47e:	80 93 30 01 	sts	0x0130, r24
		dir = x == 127 ? 1 : 0;
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	8f 37       	cpi	r24, 0x7F	; 127
 486:	09 f0       	breq	.+2      	; 0x48a <screensaver+0x1e>
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	90 93 31 01 	sts	0x0131, r25
 48e:	2b c0       	rjmp	.+86     	; 0x4e6 <screensaver+0x7a>
	}
	else
	{
		x--;
 490:	80 91 30 01 	lds	r24, 0x0130
 494:	81 50       	subi	r24, 0x01	; 1
 496:	80 93 30 01 	sts	0x0130, r24
		dir = x == 0 ? 0 : 1;
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	81 11       	cpse	r24, r1
 49e:	01 c0       	rjmp	.+2      	; 0x4a2 <screensaver+0x36>
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	90 93 31 01 	sts	0x0131, r25
 4a6:	1f c0       	rjmp	.+62     	; 0x4e6 <screensaver+0x7a>
	}

	
	for (int i = 0; i < 64; i++)
	{
		set_pixel(x, i);
 4a8:	80 91 30 01 	lds	r24, 0x0130
 4ac:	be 01       	movw	r22, r28
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 b9 01 	call	0x372	; 0x372 <set_pixel>
		x--;
		dir = x == 0 ? 0 : 1;
	}

	
	for (int i = 0; i < 64; i++)
 4b4:	21 96       	adiw	r28, 0x01	; 1
 4b6:	c0 34       	cpi	r28, 0x40	; 64
 4b8:	d1 05       	cpc	r29, r1
 4ba:	b1 f7       	brne	.-20     	; 0x4a8 <screensaver+0x3c>
	{
		set_pixel(x, i);
	}
	refresh_oled();
 4bc:	0e 94 a4 01 	call	0x348	; 0x348 <refresh_oled>
	for (int i = 0; i < 64; i++)
 4c0:	c0 e0       	ldi	r28, 0x00	; 0
 4c2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		unset_pixel(x, i);
 4c4:	80 91 30 01 	lds	r24, 0x0130
 4c8:	be 01       	movw	r22, r28
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <unset_pixel>
	for (int i = 0; i < 64; i++)
	{
		set_pixel(x, i);
	}
	refresh_oled();
	for (int i = 0; i < 64; i++)
 4d0:	21 96       	adiw	r28, 0x01	; 1
 4d2:	c0 34       	cpi	r28, 0x40	; 64
 4d4:	d1 05       	cpc	r29, r1
 4d6:	b1 f7       	brne	.-20     	; 0x4c4 <screensaver+0x58>
 4d8:	83 ec       	ldi	r24, 0xC3	; 195
 4da:	99 e0       	ldi	r25, 0x09	; 9
 4dc:	01 97       	sbiw	r24, 0x01	; 1
 4de:	f1 f7       	brne	.-4      	; 0x4dc <screensaver+0x70>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <screensaver+0x76>
 4e2:	00 00       	nop
 4e4:	03 c0       	rjmp	.+6      	; 0x4ec <screensaver+0x80>
}



void screensaver()
{
 4e6:	c0 e0       	ldi	r28, 0x00	; 0
 4e8:	d0 e0       	ldi	r29, 0x00	; 0
 4ea:	de cf       	rjmp	.-68     	; 0x4a8 <screensaver+0x3c>
	for (int i = 0; i < 64; i++)
	{
		unset_pixel(x, i);
	}
	_delay_ms(10);
}
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	08 95       	ret

000004f2 <set_position>:



int set_position(unsigned int column, unsigned int page)
{
	if (column > 32)
 4f2:	81 32       	cpi	r24, 0x21	; 33
 4f4:	91 05       	cpc	r25, r1
 4f6:	b0 f4       	brcc	.+44     	; 0x524 <__stack+0x25>
	{
		return 1;
	}
	else if (page > 8)
 4f8:	69 30       	cpi	r22, 0x09	; 9
 4fa:	71 05       	cpc	r23, r1
 4fc:	98 f4       	brcc	.+38     	; 0x524 <__stack+0x25>
	{
		return 1;
	}
		
	position = page*128 + column*4;
 4fe:	66 0f       	add	r22, r22
 500:	77 1f       	adc	r23, r23
 502:	62 95       	swap	r22
 504:	72 95       	swap	r23
 506:	70 7f       	andi	r23, 0xF0	; 240
 508:	76 27       	eor	r23, r22
 50a:	60 7f       	andi	r22, 0xF0	; 240
 50c:	76 27       	eor	r23, r22
 50e:	86 0f       	add	r24, r22
 510:	97 1f       	adc	r25, r23
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	90 93 33 01 	sts	0x0133, r25
 51e:	80 93 32 01 	sts	0x0132, r24
 522:	08 95       	ret
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	90 e0       	ldi	r25, 0x00	; 0

}
 528:	08 95       	ret

0000052a <print_string>:


int print_string(char* string)
{
 52a:	ef 92       	push	r14
 52c:	ff 92       	push	r15
 52e:	0f 93       	push	r16
 530:	1f 93       	push	r17
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
	int lenght  = strlen(string);
 536:	fc 01       	movw	r30, r24
 538:	01 90       	ld	r0, Z+
 53a:	00 20       	and	r0, r0
 53c:	e9 f7       	brne	.-6      	; 0x538 <print_string+0xe>
 53e:	31 97       	sbiw	r30, 0x01	; 1
 540:	7f 01       	movw	r14, r30
 542:	e8 1a       	sub	r14, r24
 544:	f9 0a       	sbc	r15, r25
	for(int i=0; i<lenght;i++){
 546:	1e 14       	cp	r1, r14
 548:	1f 04       	cpc	r1, r15
 54a:	64 f4       	brge	.+24     	; 0x564 <print_string+0x3a>
 54c:	8c 01       	movw	r16, r24
 54e:	c0 e0       	ldi	r28, 0x00	; 0
 550:	d0 e0       	ldi	r29, 0x00	; 0
		print_char(string[i]);
 552:	f8 01       	movw	r30, r16
 554:	81 91       	ld	r24, Z+
 556:	8f 01       	movw	r16, r30
 558:	0e 94 0a 02 	call	0x414	; 0x414 <print_char>


int print_string(char* string)
{
	int lenght  = strlen(string);
	for(int i=0; i<lenght;i++){
 55c:	21 96       	adiw	r28, 0x01	; 1
 55e:	ec 16       	cp	r14, r28
 560:	fd 06       	cpc	r15, r29
 562:	b9 f7       	brne	.-18     	; 0x552 <print_string+0x28>
		print_char(string[i]);
	}
}
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	1f 91       	pop	r17
 56a:	0f 91       	pop	r16
 56c:	ff 90       	pop	r15
 56e:	ef 90       	pop	r14
 570:	08 95       	ret

00000572 <init>:
* \brief Initialize all important peripherals and pins
*
****************************************************************************/
void init()
{
	USART_Init(MYUBBR);
 572:	8f e1       	ldi	r24, 0x1F	; 31
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	0e 94 e6 02 	call	0x5cc	; 0x5cc <USART_Init>
	/* Enables standard IO functions */	
	fdevopen(USART_putchar, USART_getchar);
 57a:	63 ef       	ldi	r22, 0xF3	; 243
 57c:	72 e0       	ldi	r23, 0x02	; 2
 57e:	8d ee       	ldi	r24, 0xED	; 237
 580:	92 e0       	ldi	r25, 0x02	; 2
 582:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <fdevopen>
	/* Enables external memory*/
	set_bit(MCUCR, SRE);
 586:	85 b7       	in	r24, 0x35	; 53
 588:	80 68       	ori	r24, 0x80	; 128
 58a:	85 bf       	out	0x35, r24	; 53
	/* Pin 1 is set to output for the LED*/
	set_bit(DDRB, PB0);
 58c:	b8 9a       	sbi	0x17, 0	; 23
	/* Pin is now driven LOW*/
	clear_bit(PORTB, PB0);
 58e:	c0 98       	cbi	0x18, 0	; 24
 590:	08 95       	ret

00000592 <main>:


int main(void)
{	
	
	clear_bit(DDRD, PD3);
 592:	8b 98       	cbi	0x11, 3	; 17
	clear_bit(DDRD, PD2);
 594:	8a 98       	cbi	0x11, 2	; 17
	
	init();
 596:	0e 94 b9 02 	call	0x572	; 0x572 <init>
	TouchpadData data; 
	int i = 0;
	JoystickPosition position;
	JoystickPosition calibration;
	calibration = joystick_calibration();
 59a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <joystick_calibration>
	//sei();
	
	//SRAM_test();
	
	init_oled();
 59e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <init_oled>
	
	clear_oled();
 5a2:	0e 94 b1 01 	call	0x362	; 0x362 <clear_oled>
	reset_position();
 5a6:	0e 94 97 01 	call	0x32e	; 0x32e <reset_position>
	
	
	
	print_string(" Hello World ");
 5aa:	86 e0       	ldi	r24, 0x06	; 6
 5ac:	91 e0       	ldi	r25, 0x01	; 1
 5ae:	0e 94 95 02 	call	0x52a	; 0x52a <print_string>
	
	set_position(1, 2);
 5b2:	62 e0       	ldi	r22, 0x02	; 2
 5b4:	70 e0       	ldi	r23, 0x00	; 0
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	0e 94 79 02 	call	0x4f2	; 0x4f2 <set_position>
	
	print_string("You are so beautiful.... jk");
 5be:	84 e1       	ldi	r24, 0x14	; 20
 5c0:	91 e0       	ldi	r25, 0x01	; 1
 5c2:	0e 94 95 02 	call	0x52a	; 0x52a <print_string>
	
	while(1)
	{
		
		//refresh_oled();
		screensaver();
 5c6:	0e 94 36 02 	call	0x46c	; 0x46c <screensaver>
 5ca:	fd cf       	rjmp	.-6      	; 0x5c6 <main+0x34>

000005cc <USART_Init>:
 * \param ubrr Desired baud rate.
 ****************************************************************************/
void USART_Init(unsigned int ubrr)
{
	//Set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
 5cc:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
 5ce:	89 b9       	out	0x09, r24	; 9
	// Enable receiver and transmitter
	UCSR0B = (1<< RXEN0) | (1<<TXEN0) | (1<<RXCIE0) | (1<<TXCIE0);
 5d0:	88 ed       	ldi	r24, 0xD8	; 216
 5d2:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 2 stop bit
	UCSR0C = (1<<URSEL0) | (3<<UCSZ00) ;
 5d4:	86 e8       	ldi	r24, 0x86	; 134
 5d6:	80 bd       	out	0x20, r24	; 32
 5d8:	08 95       	ret

000005da <USART_putchar>:
 * \param c Char to be sent.
 * \return Always 0.
 ****************************************************************************/
int USART_putchar(char c)
{
	loop_until_bit_is_set(UCSR0A, UDRE0);
 5da:	5d 9b       	sbis	0x0b, 5	; 11
 5dc:	fe cf       	rjmp	.-4      	; 0x5da <USART_putchar>
	UDR0 = c;
 5de:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	08 95       	ret

000005e6 <USART_getchar>:
 * \return Received char.
 ****************************************************************************/
int USART_getchar()
{
	char c;
	loop_until_bit_is_set(UCSR0A, RXC0);
 5e6:	5f 9b       	sbis	0x0b, 7	; 11
 5e8:	fe cf       	rjmp	.-4      	; 0x5e6 <USART_getchar>
	c = UDR0;
 5ea:	8c b1       	in	r24, 0x0c	; 12
	return c;
}
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	08 95       	ret

000005f0 <fdevopen>:
 5f0:	0f 93       	push	r16
 5f2:	1f 93       	push	r17
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	ec 01       	movw	r28, r24
 5fa:	8b 01       	movw	r16, r22
 5fc:	00 97       	sbiw	r24, 0x00	; 0
 5fe:	31 f4       	brne	.+12     	; 0x60c <fdevopen+0x1c>
 600:	61 15       	cp	r22, r1
 602:	71 05       	cpc	r23, r1
 604:	19 f4       	brne	.+6      	; 0x60c <fdevopen+0x1c>
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	38 c0       	rjmp	.+112    	; 0x67c <fdevopen+0x8c>
 60c:	6e e0       	ldi	r22, 0x0E	; 14
 60e:	70 e0       	ldi	r23, 0x00	; 0
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	0e 94 43 03 	call	0x686	; 0x686 <calloc>
 618:	fc 01       	movw	r30, r24
 61a:	00 97       	sbiw	r24, 0x00	; 0
 61c:	a1 f3       	breq	.-24     	; 0x606 <fdevopen+0x16>
 61e:	80 e8       	ldi	r24, 0x80	; 128
 620:	83 83       	std	Z+3, r24	; 0x03
 622:	01 15       	cp	r16, r1
 624:	11 05       	cpc	r17, r1
 626:	71 f0       	breq	.+28     	; 0x644 <fdevopen+0x54>
 628:	13 87       	std	Z+11, r17	; 0x0b
 62a:	02 87       	std	Z+10, r16	; 0x0a
 62c:	81 e8       	ldi	r24, 0x81	; 129
 62e:	83 83       	std	Z+3, r24	; 0x03
 630:	80 91 34 01 	lds	r24, 0x0134
 634:	90 91 35 01 	lds	r25, 0x0135
 638:	89 2b       	or	r24, r25
 63a:	21 f4       	brne	.+8      	; 0x644 <fdevopen+0x54>
 63c:	f0 93 35 01 	sts	0x0135, r31
 640:	e0 93 34 01 	sts	0x0134, r30
 644:	20 97       	sbiw	r28, 0x00	; 0
 646:	c9 f0       	breq	.+50     	; 0x67a <fdevopen+0x8a>
 648:	d1 87       	std	Z+9, r29	; 0x09
 64a:	c0 87       	std	Z+8, r28	; 0x08
 64c:	83 81       	ldd	r24, Z+3	; 0x03
 64e:	82 60       	ori	r24, 0x02	; 2
 650:	83 83       	std	Z+3, r24	; 0x03
 652:	80 91 36 01 	lds	r24, 0x0136
 656:	90 91 37 01 	lds	r25, 0x0137
 65a:	89 2b       	or	r24, r25
 65c:	71 f4       	brne	.+28     	; 0x67a <fdevopen+0x8a>
 65e:	f0 93 37 01 	sts	0x0137, r31
 662:	e0 93 36 01 	sts	0x0136, r30
 666:	80 91 38 01 	lds	r24, 0x0138
 66a:	90 91 39 01 	lds	r25, 0x0139
 66e:	89 2b       	or	r24, r25
 670:	21 f4       	brne	.+8      	; 0x67a <fdevopen+0x8a>
 672:	f0 93 39 01 	sts	0x0139, r31
 676:	e0 93 38 01 	sts	0x0138, r30
 67a:	cf 01       	movw	r24, r30
 67c:	df 91       	pop	r29
 67e:	cf 91       	pop	r28
 680:	1f 91       	pop	r17
 682:	0f 91       	pop	r16
 684:	08 95       	ret

00000686 <calloc>:
 686:	0f 93       	push	r16
 688:	1f 93       	push	r17
 68a:	cf 93       	push	r28
 68c:	df 93       	push	r29
 68e:	86 9f       	mul	r24, r22
 690:	80 01       	movw	r16, r0
 692:	87 9f       	mul	r24, r23
 694:	10 0d       	add	r17, r0
 696:	96 9f       	mul	r25, r22
 698:	10 0d       	add	r17, r0
 69a:	11 24       	eor	r1, r1
 69c:	c8 01       	movw	r24, r16
 69e:	0e 94 5f 03 	call	0x6be	; 0x6be <malloc>
 6a2:	ec 01       	movw	r28, r24
 6a4:	00 97       	sbiw	r24, 0x00	; 0
 6a6:	29 f0       	breq	.+10     	; 0x6b2 <calloc+0x2c>
 6a8:	a8 01       	movw	r20, r16
 6aa:	60 e0       	ldi	r22, 0x00	; 0
 6ac:	70 e0       	ldi	r23, 0x00	; 0
 6ae:	0e 94 86 04 	call	0x90c	; 0x90c <memset>
 6b2:	ce 01       	movw	r24, r28
 6b4:	df 91       	pop	r29
 6b6:	cf 91       	pop	r28
 6b8:	1f 91       	pop	r17
 6ba:	0f 91       	pop	r16
 6bc:	08 95       	ret

000006be <malloc>:
 6be:	cf 93       	push	r28
 6c0:	df 93       	push	r29
 6c2:	82 30       	cpi	r24, 0x02	; 2
 6c4:	91 05       	cpc	r25, r1
 6c6:	10 f4       	brcc	.+4      	; 0x6cc <malloc+0xe>
 6c8:	82 e0       	ldi	r24, 0x02	; 2
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	e0 91 3c 01 	lds	r30, 0x013C
 6d0:	f0 91 3d 01 	lds	r31, 0x013D
 6d4:	20 e0       	ldi	r18, 0x00	; 0
 6d6:	30 e0       	ldi	r19, 0x00	; 0
 6d8:	a0 e0       	ldi	r26, 0x00	; 0
 6da:	b0 e0       	ldi	r27, 0x00	; 0
 6dc:	30 97       	sbiw	r30, 0x00	; 0
 6de:	39 f1       	breq	.+78     	; 0x72e <malloc+0x70>
 6e0:	40 81       	ld	r20, Z
 6e2:	51 81       	ldd	r21, Z+1	; 0x01
 6e4:	48 17       	cp	r20, r24
 6e6:	59 07       	cpc	r21, r25
 6e8:	b8 f0       	brcs	.+46     	; 0x718 <malloc+0x5a>
 6ea:	48 17       	cp	r20, r24
 6ec:	59 07       	cpc	r21, r25
 6ee:	71 f4       	brne	.+28     	; 0x70c <malloc+0x4e>
 6f0:	82 81       	ldd	r24, Z+2	; 0x02
 6f2:	93 81       	ldd	r25, Z+3	; 0x03
 6f4:	10 97       	sbiw	r26, 0x00	; 0
 6f6:	29 f0       	breq	.+10     	; 0x702 <malloc+0x44>
 6f8:	13 96       	adiw	r26, 0x03	; 3
 6fa:	9c 93       	st	X, r25
 6fc:	8e 93       	st	-X, r24
 6fe:	12 97       	sbiw	r26, 0x02	; 2
 700:	2c c0       	rjmp	.+88     	; 0x75a <malloc+0x9c>
 702:	90 93 3d 01 	sts	0x013D, r25
 706:	80 93 3c 01 	sts	0x013C, r24
 70a:	27 c0       	rjmp	.+78     	; 0x75a <malloc+0x9c>
 70c:	21 15       	cp	r18, r1
 70e:	31 05       	cpc	r19, r1
 710:	31 f0       	breq	.+12     	; 0x71e <malloc+0x60>
 712:	42 17       	cp	r20, r18
 714:	53 07       	cpc	r21, r19
 716:	18 f0       	brcs	.+6      	; 0x71e <malloc+0x60>
 718:	a9 01       	movw	r20, r18
 71a:	db 01       	movw	r26, r22
 71c:	01 c0       	rjmp	.+2      	; 0x720 <malloc+0x62>
 71e:	ef 01       	movw	r28, r30
 720:	9a 01       	movw	r18, r20
 722:	bd 01       	movw	r22, r26
 724:	df 01       	movw	r26, r30
 726:	02 80       	ldd	r0, Z+2	; 0x02
 728:	f3 81       	ldd	r31, Z+3	; 0x03
 72a:	e0 2d       	mov	r30, r0
 72c:	d7 cf       	rjmp	.-82     	; 0x6dc <malloc+0x1e>
 72e:	21 15       	cp	r18, r1
 730:	31 05       	cpc	r19, r1
 732:	f9 f0       	breq	.+62     	; 0x772 <malloc+0xb4>
 734:	28 1b       	sub	r18, r24
 736:	39 0b       	sbc	r19, r25
 738:	24 30       	cpi	r18, 0x04	; 4
 73a:	31 05       	cpc	r19, r1
 73c:	80 f4       	brcc	.+32     	; 0x75e <malloc+0xa0>
 73e:	8a 81       	ldd	r24, Y+2	; 0x02
 740:	9b 81       	ldd	r25, Y+3	; 0x03
 742:	61 15       	cp	r22, r1
 744:	71 05       	cpc	r23, r1
 746:	21 f0       	breq	.+8      	; 0x750 <malloc+0x92>
 748:	fb 01       	movw	r30, r22
 74a:	93 83       	std	Z+3, r25	; 0x03
 74c:	82 83       	std	Z+2, r24	; 0x02
 74e:	04 c0       	rjmp	.+8      	; 0x758 <malloc+0x9a>
 750:	90 93 3d 01 	sts	0x013D, r25
 754:	80 93 3c 01 	sts	0x013C, r24
 758:	fe 01       	movw	r30, r28
 75a:	32 96       	adiw	r30, 0x02	; 2
 75c:	44 c0       	rjmp	.+136    	; 0x7e6 <malloc+0x128>
 75e:	fe 01       	movw	r30, r28
 760:	e2 0f       	add	r30, r18
 762:	f3 1f       	adc	r31, r19
 764:	81 93       	st	Z+, r24
 766:	91 93       	st	Z+, r25
 768:	22 50       	subi	r18, 0x02	; 2
 76a:	31 09       	sbc	r19, r1
 76c:	39 83       	std	Y+1, r19	; 0x01
 76e:	28 83       	st	Y, r18
 770:	3a c0       	rjmp	.+116    	; 0x7e6 <malloc+0x128>
 772:	20 91 3a 01 	lds	r18, 0x013A
 776:	30 91 3b 01 	lds	r19, 0x013B
 77a:	23 2b       	or	r18, r19
 77c:	41 f4       	brne	.+16     	; 0x78e <malloc+0xd0>
 77e:	20 91 02 01 	lds	r18, 0x0102
 782:	30 91 03 01 	lds	r19, 0x0103
 786:	30 93 3b 01 	sts	0x013B, r19
 78a:	20 93 3a 01 	sts	0x013A, r18
 78e:	20 91 00 01 	lds	r18, 0x0100
 792:	30 91 01 01 	lds	r19, 0x0101
 796:	21 15       	cp	r18, r1
 798:	31 05       	cpc	r19, r1
 79a:	41 f4       	brne	.+16     	; 0x7ac <malloc+0xee>
 79c:	2d b7       	in	r18, 0x3d	; 61
 79e:	3e b7       	in	r19, 0x3e	; 62
 7a0:	40 91 04 01 	lds	r20, 0x0104
 7a4:	50 91 05 01 	lds	r21, 0x0105
 7a8:	24 1b       	sub	r18, r20
 7aa:	35 0b       	sbc	r19, r21
 7ac:	e0 91 3a 01 	lds	r30, 0x013A
 7b0:	f0 91 3b 01 	lds	r31, 0x013B
 7b4:	e2 17       	cp	r30, r18
 7b6:	f3 07       	cpc	r31, r19
 7b8:	a0 f4       	brcc	.+40     	; 0x7e2 <malloc+0x124>
 7ba:	2e 1b       	sub	r18, r30
 7bc:	3f 0b       	sbc	r19, r31
 7be:	28 17       	cp	r18, r24
 7c0:	39 07       	cpc	r19, r25
 7c2:	78 f0       	brcs	.+30     	; 0x7e2 <malloc+0x124>
 7c4:	ac 01       	movw	r20, r24
 7c6:	4e 5f       	subi	r20, 0xFE	; 254
 7c8:	5f 4f       	sbci	r21, 0xFF	; 255
 7ca:	24 17       	cp	r18, r20
 7cc:	35 07       	cpc	r19, r21
 7ce:	48 f0       	brcs	.+18     	; 0x7e2 <malloc+0x124>
 7d0:	4e 0f       	add	r20, r30
 7d2:	5f 1f       	adc	r21, r31
 7d4:	50 93 3b 01 	sts	0x013B, r21
 7d8:	40 93 3a 01 	sts	0x013A, r20
 7dc:	81 93       	st	Z+, r24
 7de:	91 93       	st	Z+, r25
 7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <malloc+0x128>
 7e2:	e0 e0       	ldi	r30, 0x00	; 0
 7e4:	f0 e0       	ldi	r31, 0x00	; 0
 7e6:	cf 01       	movw	r24, r30
 7e8:	df 91       	pop	r29
 7ea:	cf 91       	pop	r28
 7ec:	08 95       	ret

000007ee <free>:
 7ee:	cf 93       	push	r28
 7f0:	df 93       	push	r29
 7f2:	00 97       	sbiw	r24, 0x00	; 0
 7f4:	09 f4       	brne	.+2      	; 0x7f8 <free+0xa>
 7f6:	87 c0       	rjmp	.+270    	; 0x906 <free+0x118>
 7f8:	fc 01       	movw	r30, r24
 7fa:	32 97       	sbiw	r30, 0x02	; 2
 7fc:	13 82       	std	Z+3, r1	; 0x03
 7fe:	12 82       	std	Z+2, r1	; 0x02
 800:	c0 91 3c 01 	lds	r28, 0x013C
 804:	d0 91 3d 01 	lds	r29, 0x013D
 808:	20 97       	sbiw	r28, 0x00	; 0
 80a:	81 f4       	brne	.+32     	; 0x82c <free+0x3e>
 80c:	20 81       	ld	r18, Z
 80e:	31 81       	ldd	r19, Z+1	; 0x01
 810:	28 0f       	add	r18, r24
 812:	39 1f       	adc	r19, r25
 814:	80 91 3a 01 	lds	r24, 0x013A
 818:	90 91 3b 01 	lds	r25, 0x013B
 81c:	82 17       	cp	r24, r18
 81e:	93 07       	cpc	r25, r19
 820:	79 f5       	brne	.+94     	; 0x880 <free+0x92>
 822:	f0 93 3b 01 	sts	0x013B, r31
 826:	e0 93 3a 01 	sts	0x013A, r30
 82a:	6d c0       	rjmp	.+218    	; 0x906 <free+0x118>
 82c:	de 01       	movw	r26, r28
 82e:	20 e0       	ldi	r18, 0x00	; 0
 830:	30 e0       	ldi	r19, 0x00	; 0
 832:	ae 17       	cp	r26, r30
 834:	bf 07       	cpc	r27, r31
 836:	50 f4       	brcc	.+20     	; 0x84c <free+0x5e>
 838:	12 96       	adiw	r26, 0x02	; 2
 83a:	4d 91       	ld	r20, X+
 83c:	5c 91       	ld	r21, X
 83e:	13 97       	sbiw	r26, 0x03	; 3
 840:	9d 01       	movw	r18, r26
 842:	41 15       	cp	r20, r1
 844:	51 05       	cpc	r21, r1
 846:	09 f1       	breq	.+66     	; 0x88a <free+0x9c>
 848:	da 01       	movw	r26, r20
 84a:	f3 cf       	rjmp	.-26     	; 0x832 <free+0x44>
 84c:	b3 83       	std	Z+3, r27	; 0x03
 84e:	a2 83       	std	Z+2, r26	; 0x02
 850:	40 81       	ld	r20, Z
 852:	51 81       	ldd	r21, Z+1	; 0x01
 854:	84 0f       	add	r24, r20
 856:	95 1f       	adc	r25, r21
 858:	8a 17       	cp	r24, r26
 85a:	9b 07       	cpc	r25, r27
 85c:	71 f4       	brne	.+28     	; 0x87a <free+0x8c>
 85e:	8d 91       	ld	r24, X+
 860:	9c 91       	ld	r25, X
 862:	11 97       	sbiw	r26, 0x01	; 1
 864:	84 0f       	add	r24, r20
 866:	95 1f       	adc	r25, r21
 868:	02 96       	adiw	r24, 0x02	; 2
 86a:	91 83       	std	Z+1, r25	; 0x01
 86c:	80 83       	st	Z, r24
 86e:	12 96       	adiw	r26, 0x02	; 2
 870:	8d 91       	ld	r24, X+
 872:	9c 91       	ld	r25, X
 874:	13 97       	sbiw	r26, 0x03	; 3
 876:	93 83       	std	Z+3, r25	; 0x03
 878:	82 83       	std	Z+2, r24	; 0x02
 87a:	21 15       	cp	r18, r1
 87c:	31 05       	cpc	r19, r1
 87e:	29 f4       	brne	.+10     	; 0x88a <free+0x9c>
 880:	f0 93 3d 01 	sts	0x013D, r31
 884:	e0 93 3c 01 	sts	0x013C, r30
 888:	3e c0       	rjmp	.+124    	; 0x906 <free+0x118>
 88a:	d9 01       	movw	r26, r18
 88c:	13 96       	adiw	r26, 0x03	; 3
 88e:	fc 93       	st	X, r31
 890:	ee 93       	st	-X, r30
 892:	12 97       	sbiw	r26, 0x02	; 2
 894:	4d 91       	ld	r20, X+
 896:	5d 91       	ld	r21, X+
 898:	a4 0f       	add	r26, r20
 89a:	b5 1f       	adc	r27, r21
 89c:	ea 17       	cp	r30, r26
 89e:	fb 07       	cpc	r31, r27
 8a0:	79 f4       	brne	.+30     	; 0x8c0 <free+0xd2>
 8a2:	80 81       	ld	r24, Z
 8a4:	91 81       	ldd	r25, Z+1	; 0x01
 8a6:	84 0f       	add	r24, r20
 8a8:	95 1f       	adc	r25, r21
 8aa:	02 96       	adiw	r24, 0x02	; 2
 8ac:	d9 01       	movw	r26, r18
 8ae:	11 96       	adiw	r26, 0x01	; 1
 8b0:	9c 93       	st	X, r25
 8b2:	8e 93       	st	-X, r24
 8b4:	82 81       	ldd	r24, Z+2	; 0x02
 8b6:	93 81       	ldd	r25, Z+3	; 0x03
 8b8:	13 96       	adiw	r26, 0x03	; 3
 8ba:	9c 93       	st	X, r25
 8bc:	8e 93       	st	-X, r24
 8be:	12 97       	sbiw	r26, 0x02	; 2
 8c0:	e0 e0       	ldi	r30, 0x00	; 0
 8c2:	f0 e0       	ldi	r31, 0x00	; 0
 8c4:	8a 81       	ldd	r24, Y+2	; 0x02
 8c6:	9b 81       	ldd	r25, Y+3	; 0x03
 8c8:	00 97       	sbiw	r24, 0x00	; 0
 8ca:	19 f0       	breq	.+6      	; 0x8d2 <free+0xe4>
 8cc:	fe 01       	movw	r30, r28
 8ce:	ec 01       	movw	r28, r24
 8d0:	f9 cf       	rjmp	.-14     	; 0x8c4 <free+0xd6>
 8d2:	ce 01       	movw	r24, r28
 8d4:	02 96       	adiw	r24, 0x02	; 2
 8d6:	28 81       	ld	r18, Y
 8d8:	39 81       	ldd	r19, Y+1	; 0x01
 8da:	82 0f       	add	r24, r18
 8dc:	93 1f       	adc	r25, r19
 8de:	20 91 3a 01 	lds	r18, 0x013A
 8e2:	30 91 3b 01 	lds	r19, 0x013B
 8e6:	28 17       	cp	r18, r24
 8e8:	39 07       	cpc	r19, r25
 8ea:	69 f4       	brne	.+26     	; 0x906 <free+0x118>
 8ec:	30 97       	sbiw	r30, 0x00	; 0
 8ee:	29 f4       	brne	.+10     	; 0x8fa <free+0x10c>
 8f0:	10 92 3d 01 	sts	0x013D, r1
 8f4:	10 92 3c 01 	sts	0x013C, r1
 8f8:	02 c0       	rjmp	.+4      	; 0x8fe <free+0x110>
 8fa:	13 82       	std	Z+3, r1	; 0x03
 8fc:	12 82       	std	Z+2, r1	; 0x02
 8fe:	d0 93 3b 01 	sts	0x013B, r29
 902:	c0 93 3a 01 	sts	0x013A, r28
 906:	df 91       	pop	r29
 908:	cf 91       	pop	r28
 90a:	08 95       	ret

0000090c <memset>:
 90c:	dc 01       	movw	r26, r24
 90e:	01 c0       	rjmp	.+2      	; 0x912 <memset+0x6>
 910:	6d 93       	st	X+, r22
 912:	41 50       	subi	r20, 0x01	; 1
 914:	50 40       	sbci	r21, 0x00	; 0
 916:	e0 f7       	brcc	.-8      	; 0x910 <memset+0x4>
 918:	08 95       	ret

0000091a <_exit>:
 91a:	f8 94       	cli

0000091c <__stop_program>:
 91c:	ff cf       	rjmp	.-2      	; 0x91c <__stop_program>
