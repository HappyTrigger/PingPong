
PingPongApplication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800100  00001d10  00001da4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  008001ac  008001ac  00001e50  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e50  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000310  00000000  00000000  00001eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000425f  00000000  00000000  000021bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000123d  00000000  00000000  0000641b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001303  00000000  00000000  00007658  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000950  00000000  00000000  0000895c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009aa  00000000  00000000  000092ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002384  00000000  00000000  00009c56  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000290  00000000  00000000  0000bfda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 01 	jmp	0x266	; 0x266 <__ctors_end>
       4:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
       8:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
       c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      10:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      14:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      18:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      1c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      20:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      24:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      28:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      2c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      30:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      34:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      38:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      3c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      40:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      44:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      48:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      4c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      50:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      54:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      58:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      5c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      60:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      64:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      68:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      6c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      70:	7c 09       	sbc	r23, r12
      72:	82 09       	sbc	r24, r2
      74:	88 09       	sbc	r24, r8
      76:	91 09       	sbc	r25, r1
      78:	9a 09       	sbc	r25, r10
      7a:	a3 09       	sbc	r26, r3
      7c:	ac 09       	sbc	r26, r12
      7e:	bb 09       	sbc	r27, r11
      80:	b5 09       	sbc	r27, r5
      82:	c1 09       	sbc	r28, r1
      84:	c7 09       	sbc	r28, r7
      86:	d0 09       	sbc	r29, r0
      88:	cd 09       	sbc	r28, r13

0000008a <__trampolines_end>:
      8a:	00 00       	nop
      8c:	00 00       	nop
      8e:	00 00       	nop
      90:	00 5e       	subi	r16, 0xE0	; 224
      92:	00 00       	nop
      94:	00 0e       	add	r0, r16
      96:	00 0e       	add	r0, r16
      98:	00 28       	or	r0, r0
      9a:	7c 28       	or	r7, r12
      9c:	7c 28       	or	r7, r12
      9e:	08 54       	subi	r16, 0x48	; 72
      a0:	7c 54       	subi	r23, 0x4C	; 76
      a2:	20 26       	eor	r2, r16
      a4:	10 08       	sbc	r1, r0
      a6:	64 00       	.word	0x0064	; ????
      a8:	28 54       	subi	r18, 0x48	; 72
      aa:	28 40       	sbci	r18, 0x08	; 8
      ac:	00 00       	nop
      ae:	00 0e       	add	r0, r16
      b0:	00 00       	nop
      b2:	00 3c       	cpi	r16, 0xC0	; 192
      b4:	42 00       	.word	0x0042	; ????
      b6:	00 00       	nop
      b8:	42 3c       	cpi	r20, 0xC2	; 194
      ba:	00 00       	nop
      bc:	00 54       	subi	r16, 0x40	; 64
      be:	38 54       	subi	r19, 0x48	; 72
      c0:	00 10       	cpse	r0, r0
      c2:	10 7c       	andi	r17, 0xC0	; 192
      c4:	10 10       	cpse	r1, r0
      c6:	00 80       	ld	r0, Z
      c8:	60 20       	and	r6, r0
      ca:	00 10       	cpse	r0, r0
      cc:	10 10       	cpse	r1, r0
      ce:	10 00       	.word	0x0010	; ????
      d0:	00 60       	ori	r16, 0x00	; 0
      d2:	60 00       	.word	0x0060	; ????
      d4:	00 20       	and	r0, r0
      d6:	10 08       	sbc	r1, r0
      d8:	04 00       	.word	0x0004	; ????
      da:	00 3c       	cpi	r16, 0xC0	; 192
      dc:	42 3c       	cpi	r20, 0xC2	; 194
      de:	00 00       	nop
      e0:	44 7e       	andi	r20, 0xE4	; 228
      e2:	40 00       	.word	0x0040	; ????
      e4:	44 62       	ori	r20, 0x24	; 36
      e6:	52 4c       	sbci	r21, 0xC2	; 194
      e8:	00 22       	and	r0, r16
      ea:	4a 4a       	sbci	r20, 0xAA	; 170
      ec:	36 00       	.word	0x0036	; ????
      ee:	18 14       	cp	r1, r8
      f0:	7e 10       	cpse	r7, r14
      f2:	00 2e       	mov	r0, r16
      f4:	4a 4a       	sbci	r20, 0xAA	; 170
      f6:	32 00       	.word	0x0032	; ????
      f8:	3c 4a       	sbci	r19, 0xAC	; 172
      fa:	4a 30       	cpi	r20, 0x0A	; 10
      fc:	00 02       	muls	r16, r16
      fe:	62 1a       	sub	r6, r18
     100:	06 00       	.word	0x0006	; ????
     102:	34 4a       	sbci	r19, 0xA4	; 164
     104:	4a 34       	cpi	r20, 0x4A	; 74
     106:	00 0c       	add	r0, r0
     108:	52 52       	subi	r21, 0x22	; 34
     10a:	3c 00       	.word	0x003c	; ????
     10c:	00 6c       	ori	r16, 0xC0	; 192
     10e:	6c 00       	.word	0x006c	; ????
     110:	00 80       	ld	r0, Z
     112:	6c 2c       	mov	r6, r12
     114:	00 00       	nop
     116:	00 10       	cpse	r0, r0
     118:	28 44       	sbci	r18, 0x48	; 72
     11a:	00 28       	or	r0, r0
     11c:	28 28       	or	r2, r8
     11e:	28 00       	.word	0x0028	; ????
     120:	00 44       	sbci	r16, 0x40	; 64
     122:	28 10       	cpse	r2, r8
     124:	00 00       	nop
     126:	04 52       	subi	r16, 0x24	; 36
     128:	0c 00       	.word	0x000c	; ????
     12a:	3c 42       	sbci	r19, 0x2C	; 44
     12c:	5a 1c       	adc	r5, r10
     12e:	00 7c       	andi	r16, 0xC0	; 192
     130:	12 12       	cpse	r1, r18
     132:	7c 00       	.word	0x007c	; ????
     134:	7e 4a       	sbci	r23, 0xAE	; 174
     136:	4a 34       	cpi	r20, 0x4A	; 74
     138:	00 3c       	cpi	r16, 0xC0	; 192
     13a:	42 42       	sbci	r20, 0x22	; 34
     13c:	24 00       	.word	0x0024	; ????
     13e:	7e 42       	sbci	r23, 0x2E	; 46
     140:	42 3c       	cpi	r20, 0xC2	; 194
     142:	00 7e       	andi	r16, 0xE0	; 224
     144:	4a 4a       	sbci	r20, 0xAA	; 170
     146:	42 00       	.word	0x0042	; ????
     148:	7e 0a       	sbc	r7, r30
     14a:	0a 02       	muls	r16, r26
     14c:	00 3c       	cpi	r16, 0xC0	; 192
     14e:	42 52       	subi	r20, 0x22	; 34
     150:	74 00       	.word	0x0074	; ????
     152:	7e 08       	sbc	r7, r14
     154:	08 7e       	andi	r16, 0xE8	; 232
     156:	00 00       	nop
     158:	42 7e       	andi	r20, 0xE2	; 226
     15a:	42 00       	.word	0x0042	; ????
     15c:	20 40       	sbci	r18, 0x00	; 0
     15e:	40 3e       	cpi	r20, 0xE0	; 224
     160:	00 7e       	andi	r16, 0xE0	; 224
     162:	18 24       	eor	r1, r8
     164:	42 00       	.word	0x0042	; ????
     166:	7e 40       	sbci	r23, 0x0E	; 14
     168:	40 40       	sbci	r20, 0x00	; 0
     16a:	00 7e       	andi	r16, 0xE0	; 224
     16c:	0c 0c       	add	r0, r12
     16e:	7e 00       	.word	0x007e	; ????
     170:	7e 0c       	add	r7, r14
     172:	30 7e       	andi	r19, 0xE0	; 224
     174:	00 3c       	cpi	r16, 0xC0	; 192
     176:	42 42       	sbci	r20, 0x22	; 34
     178:	3c 00       	.word	0x003c	; ????
     17a:	7e 12       	cpse	r7, r30
     17c:	12 0c       	add	r1, r2
     17e:	00 3c       	cpi	r16, 0xC0	; 192
     180:	62 42       	sbci	r22, 0x22	; 34
     182:	bc 00       	.word	0x00bc	; ????
     184:	7e 12       	cpse	r7, r30
     186:	32 4c       	sbci	r19, 0xC2	; 194
     188:	00 24       	eor	r0, r0
     18a:	4a 52       	subi	r20, 0x2A	; 42
     18c:	24 00       	.word	0x0024	; ????
     18e:	00 02       	muls	r16, r16
     190:	7e 02       	muls	r23, r30
     192:	00 3e       	cpi	r16, 0xE0	; 224
     194:	40 40       	sbci	r20, 0x00	; 0
     196:	3e 00       	.word	0x003e	; ????
     198:	1e 60       	ori	r17, 0x0E	; 14
     19a:	60 1e       	adc	r6, r16
     19c:	00 7e       	andi	r16, 0xE0	; 224
     19e:	30 30       	cpi	r19, 0x00	; 0
     1a0:	7e 00       	.word	0x007e	; ????
     1a2:	66 18       	sub	r6, r6
     1a4:	18 66       	ori	r17, 0x68	; 104
     1a6:	00 00       	nop
     1a8:	0e 70       	andi	r16, 0x0E	; 14
     1aa:	0e 00       	.word	0x000e	; ????
     1ac:	62 52       	subi	r22, 0x22	; 34
     1ae:	4a 46       	sbci	r20, 0x6A	; 106
     1b0:	00 00       	nop
     1b2:	7e 42       	sbci	r23, 0x2E	; 46
     1b4:	42 00       	.word	0x0042	; ????
     1b6:	04 08       	sbc	r0, r4
     1b8:	10 20       	and	r1, r0
     1ba:	00 00       	nop
     1bc:	42 42       	sbci	r20, 0x22	; 34
     1be:	7e 00       	.word	0x007e	; ????
     1c0:	00 04       	cpc	r0, r0
     1c2:	02 04       	cpc	r0, r2
     1c4:	00 40       	sbci	r16, 0x00	; 0
     1c6:	40 40       	sbci	r20, 0x00	; 0
     1c8:	40 00       	.word	0x0040	; ????
     1ca:	00 02       	muls	r16, r16
     1cc:	04 00       	.word	0x0004	; ????
     1ce:	00 30       	cpi	r16, 0x00	; 0
     1d0:	48 28       	or	r4, r8
     1d2:	78 00       	.word	0x0078	; ????
     1d4:	7e 48       	sbci	r23, 0x8E	; 142
     1d6:	48 30       	cpi	r20, 0x08	; 8
     1d8:	00 30       	cpi	r16, 0x00	; 0
     1da:	48 48       	sbci	r20, 0x88	; 136
     1dc:	00 00       	nop
     1de:	30 48       	sbci	r19, 0x80	; 128
     1e0:	48 7e       	andi	r20, 0xE8	; 232
     1e2:	00 30       	cpi	r16, 0x00	; 0
     1e4:	68 58       	subi	r22, 0x88	; 136
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	10 7c       	andi	r17, 0xC0	; 192
     1ea:	12 04       	cpc	r1, r2
     1ec:	00 50       	subi	r16, 0x00	; 0
     1ee:	a8 a8       	ldd	r10, Y+48	; 0x30
     1f0:	98 00       	.word	0x0098	; ????
     1f2:	7e 08       	sbc	r7, r14
     1f4:	08 70       	andi	r16, 0x08	; 8
     1f6:	00 00       	nop
     1f8:	48 7a       	andi	r20, 0xA8	; 168
     1fa:	40 00       	.word	0x0040	; ????
     1fc:	00 40       	sbci	r16, 0x00	; 0
     1fe:	80 7a       	andi	r24, 0xA0	; 160
     200:	00 7e       	andi	r16, 0xE0	; 224
     202:	10 28       	or	r1, r0
     204:	40 00       	.word	0x0040	; ????
     206:	00 42       	sbci	r16, 0x20	; 32
     208:	7e 40       	sbci	r23, 0x0E	; 14
     20a:	00 78       	andi	r16, 0x80	; 128
     20c:	10 18       	sub	r1, r0
     20e:	70 00       	.word	0x0070	; ????
     210:	78 08       	sbc	r7, r8
     212:	08 70       	andi	r16, 0x08	; 8
     214:	00 30       	cpi	r16, 0x00	; 0
     216:	48 48       	sbci	r20, 0x88	; 136
     218:	30 00       	.word	0x0030	; ????
     21a:	f8 48       	sbci	r31, 0x88	; 136
     21c:	48 30       	cpi	r20, 0x08	; 8
     21e:	00 30       	cpi	r16, 0x00	; 0
     220:	48 48       	sbci	r20, 0x88	; 136
     222:	f8 00       	.word	0x00f8	; ????
     224:	78 08       	sbc	r7, r8
     226:	08 10       	cpse	r0, r8
     228:	00 50       	subi	r16, 0x00	; 0
     22a:	58 68       	ori	r21, 0x88	; 136
     22c:	28 00       	.word	0x0028	; ????
     22e:	08 3e       	cpi	r16, 0xE8	; 232
     230:	48 40       	sbci	r20, 0x08	; 8
     232:	00 38       	cpi	r16, 0x80	; 128
     234:	40 40       	sbci	r20, 0x00	; 0
     236:	78 00       	.word	0x0078	; ????
     238:	00 38       	cpi	r16, 0x80	; 128
     23a:	40 38       	cpi	r20, 0x80	; 128
     23c:	00 78       	andi	r16, 0x80	; 128
     23e:	60 60       	ori	r22, 0x00	; 0
     240:	78 00       	.word	0x0078	; ????
     242:	48 30       	cpi	r20, 0x08	; 8
     244:	30 48       	sbci	r19, 0x80	; 128
     246:	00 18       	sub	r0, r0
     248:	a0 40       	sbci	r26, 0x00	; 0
     24a:	38 00       	.word	0x0038	; ????
     24c:	48 68       	ori	r20, 0x88	; 136
     24e:	58 48       	sbci	r21, 0x88	; 136
     250:	00 00       	nop
     252:	08 3c       	cpi	r16, 0xC8	; 200
     254:	42 00       	.word	0x0042	; ????
     256:	00 00       	nop
     258:	7e 00       	.word	0x007e	; ????
     25a:	00 00       	nop
     25c:	42 3c       	cpi	r20, 0xC2	; 194
     25e:	08 00       	.word	0x0008	; ????
     260:	04 02       	muls	r16, r20
     262:	04 02       	muls	r16, r20
	...

00000266 <__ctors_end>:
     266:	11 24       	eor	r1, r1
     268:	1f be       	out	0x3f, r1	; 63
     26a:	cf ef       	ldi	r28, 0xFF	; 255
     26c:	d4 e0       	ldi	r29, 0x04	; 4
     26e:	de bf       	out	0x3e, r29	; 62
     270:	cd bf       	out	0x3d, r28	; 61

00000272 <__do_copy_data>:
     272:	11 e0       	ldi	r17, 0x01	; 1
     274:	a0 e0       	ldi	r26, 0x00	; 0
     276:	b1 e0       	ldi	r27, 0x01	; 1
     278:	e0 e1       	ldi	r30, 0x10	; 16
     27a:	fd e1       	ldi	r31, 0x1D	; 29
     27c:	02 c0       	rjmp	.+4      	; 0x282 <__do_copy_data+0x10>
     27e:	05 90       	lpm	r0, Z+
     280:	0d 92       	st	X+, r0
     282:	ac 3a       	cpi	r26, 0xAC	; 172
     284:	b1 07       	cpc	r27, r17
     286:	d9 f7       	brne	.-10     	; 0x27e <__do_copy_data+0xc>

00000288 <__do_clear_bss>:
     288:	21 e0       	ldi	r18, 0x01	; 1
     28a:	ac ea       	ldi	r26, 0xAC	; 172
     28c:	b1 e0       	ldi	r27, 0x01	; 1
     28e:	01 c0       	rjmp	.+2      	; 0x292 <.do_clear_bss_start>

00000290 <.do_clear_bss_loop>:
     290:	1d 92       	st	X+, r1

00000292 <.do_clear_bss_start>:
     292:	ad 3b       	cpi	r26, 0xBD	; 189
     294:	b2 07       	cpc	r27, r18
     296:	e1 f7       	brne	.-8      	; 0x290 <.do_clear_bss_loop>
     298:	0e 94 93 04 	call	0x926	; 0x926 <main>
     29c:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <_exit>

000002a0 <__bad_interrupt>:
     2a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002a4 <read_adc>:
****************************************************************************/
int read_adc(char channel)
{
	volatile char *ext_adc = (char *) ADC_BASE_ADDR;
	
	*ext_adc = channel;
     2a4:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2a8:	89 ef       	ldi	r24, 0xF9	; 249
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <read_adc+0x8>
     2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <read_adc+0xe>
     2b2:	00 00       	nop
	_delay_ms(1);
	return *ext_adc;
     2b4:	80 91 00 14 	lds	r24, 0x1400
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	08 95       	ret

000002bc <CAN_init>:
* \brief Initialize CAN communication with node 2
*
****************************************************************************/
void CAN_init()
{
	mcp_init();
     2bc:	0e 94 2b 03 	call	0x656	; 0x656 <mcp_init>
	/* Turn off mask/filters, receive any message, rollover enabled */
	mcp_modify_bit(MCP_RXB0CTRL, 0b01100100, 0xFF);
     2c0:	4f ef       	ldi	r20, 0xFF	; 255
     2c2:	64 e6       	ldi	r22, 0x64	; 100
     2c4:	80 e6       	ldi	r24, 0x60	; 96
     2c6:	0e 94 51 03 	call	0x6a2	; 0x6a2 <mcp_modify_bit>
	/* Loopback mode enabled */
	mcp_modify_bit(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     2ca:	40 e0       	ldi	r20, 0x00	; 0
     2cc:	60 ee       	ldi	r22, 0xE0	; 224
     2ce:	8f e0       	ldi	r24, 0x0F	; 15
     2d0:	0e 94 51 03 	call	0x6a2	; 0x6a2 <mcp_modify_bit>
     2d4:	08 95       	ret

000002d6 <CAN_send_message>:
*
* \param in message
* \return result of the CAN operation
****************************************************************************/
uint8_t CAN_send_message(CANMessage message)
{
     2d6:	bf 92       	push	r11
     2d8:	cf 92       	push	r12
     2da:	df 92       	push	r13
     2dc:	ef 92       	push	r14
     2de:	ff 92       	push	r15
     2e0:	0f 93       	push	r16
     2e2:	1f 93       	push	r17
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
     2ec:	2a 97       	sbiw	r28, 0x0a	; 10
     2ee:	0f b6       	in	r0, 0x3f	; 63
     2f0:	f8 94       	cli
     2f2:	de bf       	out	0x3e, r29	; 62
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	cd bf       	out	0x3d, r28	; 61
     2f8:	09 83       	std	Y+1, r16	; 0x01
     2fa:	c1 2e       	mov	r12, r17
     2fc:	1a 83       	std	Y+2, r17	; 0x02
     2fe:	2b 83       	std	Y+3, r18	; 0x03
     300:	3c 83       	std	Y+4, r19	; 0x04
     302:	4d 83       	std	Y+5, r20	; 0x05
     304:	5e 83       	std	Y+6, r21	; 0x06
     306:	6f 83       	std	Y+7, r22	; 0x07
     308:	78 87       	std	Y+8, r23	; 0x08
     30a:	89 87       	std	Y+9, r24	; 0x09
     30c:	9a 87       	std	Y+10, r25	; 0x0a
     30e:	10 2f       	mov	r17, r16
	uint8_t ctrl = mcp_read(MCP_TXB0CTRL);
     310:	80 e3       	ldi	r24, 0x30	; 48
     312:	0e 94 11 03 	call	0x622	; 0x622 <mcp_read>
	
	if (test_bit(ctrl, TXREQ))
     316:	98 2f       	mov	r25, r24
     318:	98 70       	andi	r25, 0x08	; 8
     31a:	b9 2e       	mov	r11, r25
     31c:	83 fd       	sbrc	r24, 3
     31e:	2d c0       	rjmp	.+90     	; 0x37a <CAN_send_message+0xa4>
	{
		return MESSAGE_PENDING;
	}
	/* Use lower 8bits of ID */
	mcp_write_byte(MCP_TXB0SIDL, (uint8_t)(message.ID << 5));
     320:	61 2f       	mov	r22, r17
     322:	62 95       	swap	r22
     324:	66 0f       	add	r22, r22
     326:	60 7e       	andi	r22, 0xE0	; 224
     328:	82 e3       	ldi	r24, 0x32	; 50
     32a:	0e 94 3d 03 	call	0x67a	; 0x67a <mcp_write_byte>
	mcp_write_byte(MCP_TXB0SIDH, (uint8_t)(message.ID >> 3));
     32e:	61 2f       	mov	r22, r17
     330:	66 95       	lsr	r22
     332:	66 95       	lsr	r22
     334:	66 95       	lsr	r22
     336:	81 e3       	ldi	r24, 0x31	; 49
     338:	0e 94 3d 03 	call	0x67a	; 0x67a <mcp_write_byte>
	
	mcp_write_byte(MCP_TXB0DLC, (message.length) & 0x0F);
     33c:	6c 2d       	mov	r22, r12
     33e:	6f 70       	andi	r22, 0x0F	; 15
     340:	85 e3       	ldi	r24, 0x35	; 53
     342:	0e 94 3d 03 	call	0x67a	; 0x67a <mcp_write_byte>
	
	for (int i = 0; i < message.length; i++)
     346:	d1 2c       	mov	r13, r1
     348:	1c 14       	cp	r1, r12
     34a:	1d 04       	cpc	r1, r13
     34c:	94 f4       	brge	.+36     	; 0x372 <CAN_send_message+0x9c>
     34e:	7e 01       	movw	r14, r28
     350:	e3 e0       	ldi	r30, 0x03	; 3
     352:	ee 0e       	add	r14, r30
     354:	f1 1c       	adc	r15, r1
     356:	00 e0       	ldi	r16, 0x00	; 0
     358:	10 e0       	ldi	r17, 0x00	; 0
	{
		mcp_write_byte(MCP_TXB0D0 + i, message.data_array[i]);
     35a:	f7 01       	movw	r30, r14
     35c:	61 91       	ld	r22, Z+
     35e:	7f 01       	movw	r14, r30
     360:	86 e3       	ldi	r24, 0x36	; 54
     362:	80 0f       	add	r24, r16
     364:	0e 94 3d 03 	call	0x67a	; 0x67a <mcp_write_byte>
	mcp_write_byte(MCP_TXB0SIDL, (uint8_t)(message.ID << 5));
	mcp_write_byte(MCP_TXB0SIDH, (uint8_t)(message.ID >> 3));
	
	mcp_write_byte(MCP_TXB0DLC, (message.length) & 0x0F);
	
	for (int i = 0; i < message.length; i++)
     368:	0f 5f       	subi	r16, 0xFF	; 255
     36a:	1f 4f       	sbci	r17, 0xFF	; 255
     36c:	0c 15       	cp	r16, r12
     36e:	1d 05       	cpc	r17, r13
     370:	a4 f3       	brlt	.-24     	; 0x35a <CAN_send_message+0x84>
	{
		mcp_write_byte(MCP_TXB0D0 + i, message.data_array[i]);
	}
	
	mcp_request_to_send(1);
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <mcp_request_to_send>

	return SUCCESS;
     378:	02 c0       	rjmp	.+4      	; 0x37e <CAN_send_message+0xa8>
{
	uint8_t ctrl = mcp_read(MCP_TXB0CTRL);
	
	if (test_bit(ctrl, TXREQ))
	{
		return MESSAGE_PENDING;
     37a:	bb 24       	eor	r11, r11
     37c:	b3 94       	inc	r11
	}
	
	mcp_request_to_send(1);

	return SUCCESS;
}
     37e:	8b 2d       	mov	r24, r11
     380:	2a 96       	adiw	r28, 0x0a	; 10
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	f8 94       	cli
     386:	de bf       	out	0x3e, r29	; 62
     388:	0f be       	out	0x3f, r0	; 63
     38a:	cd bf       	out	0x3d, r28	; 61
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	1f 91       	pop	r17
     392:	0f 91       	pop	r16
     394:	ff 90       	pop	r15
     396:	ef 90       	pop	r14
     398:	df 90       	pop	r13
     39a:	cf 90       	pop	r12
     39c:	bf 90       	pop	r11
     39e:	08 95       	ret

000003a0 <CAN_receive_message>:
*
* \param out message
* \return result of the CAN operation
****************************************************************************/
uint8_t CAN_receive_message(CANMessage* message)
{
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	8c 01       	movw	r16, r24
	int i = 0;
	uint8_t received = mcp_read(MCP_CANINTF) & (0x01);
     3ae:	8c e2       	ldi	r24, 0x2C	; 44
     3b0:	0e 94 11 03 	call	0x622	; 0x622 <mcp_read>
	if (received)
     3b4:	80 ff       	sbrs	r24, 0
     3b6:	34 c0       	rjmp	.+104    	; 0x420 <CAN_receive_message+0x80>
	{
		mcp_modify_bit(MCP_CANINTF, 0x01, 0);
     3b8:	40 e0       	ldi	r20, 0x00	; 0
     3ba:	61 e0       	ldi	r22, 0x01	; 1
     3bc:	8c e2       	ldi	r24, 0x2C	; 44
     3be:	0e 94 51 03 	call	0x6a2	; 0x6a2 <mcp_modify_bit>
		message->ID = (mcp_read(MCP_RXB0SIDH) << 3);
     3c2:	81 e6       	ldi	r24, 0x61	; 97
     3c4:	0e 94 11 03 	call	0x622	; 0x622 <mcp_read>
     3c8:	c8 2f       	mov	r28, r24
     3ca:	cc 0f       	add	r28, r28
     3cc:	cc 0f       	add	r28, r28
     3ce:	cc 0f       	add	r28, r28
     3d0:	f8 01       	movw	r30, r16
     3d2:	c0 83       	st	Z, r28
		message->ID |= (mcp_read(MCP_RXB0SIDL) >> 5);
     3d4:	82 e6       	ldi	r24, 0x62	; 98
     3d6:	0e 94 11 03 	call	0x622	; 0x622 <mcp_read>
     3da:	82 95       	swap	r24
     3dc:	86 95       	lsr	r24
     3de:	87 70       	andi	r24, 0x07	; 7
     3e0:	c8 2b       	or	r28, r24
     3e2:	f8 01       	movw	r30, r16
     3e4:	c0 83       	st	Z, r28
		
		message->length = mcp_read(MCP_RXB0DLC) & (0x0F);
     3e6:	85 e6       	ldi	r24, 0x65	; 101
     3e8:	0e 94 11 03 	call	0x622	; 0x622 <mcp_read>
     3ec:	8f 70       	andi	r24, 0x0F	; 15
     3ee:	f8 01       	movw	r30, r16
     3f0:	81 83       	std	Z+1, r24	; 0x01
		
		for (i = 0; i < message->length; i++)
     3f2:	88 23       	and	r24, r24
     3f4:	b9 f0       	breq	.+46     	; 0x424 <CAN_receive_message+0x84>
     3f6:	78 01       	movw	r14, r16
     3f8:	f2 e0       	ldi	r31, 0x02	; 2
     3fa:	ef 0e       	add	r14, r31
     3fc:	f1 1c       	adc	r15, r1
     3fe:	c0 e0       	ldi	r28, 0x00	; 0
     400:	d0 e0       	ldi	r29, 0x00	; 0
		{
			message->data_array[i] = mcp_read(MCP_RXB0D0 + i);
     402:	8c 2f       	mov	r24, r28
     404:	8a 59       	subi	r24, 0x9A	; 154
     406:	0e 94 11 03 	call	0x622	; 0x622 <mcp_read>
     40a:	f7 01       	movw	r30, r14
     40c:	81 93       	st	Z+, r24
     40e:	7f 01       	movw	r14, r30
		message->ID = (mcp_read(MCP_RXB0SIDH) << 3);
		message->ID |= (mcp_read(MCP_RXB0SIDL) >> 5);
		
		message->length = mcp_read(MCP_RXB0DLC) & (0x0F);
		
		for (i = 0; i < message->length; i++)
     410:	21 96       	adiw	r28, 0x01	; 1
     412:	f8 01       	movw	r30, r16
     414:	81 81       	ldd	r24, Z+1	; 0x01
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	c8 17       	cp	r28, r24
     41a:	d9 07       	cpc	r29, r25
     41c:	94 f3       	brlt	.-28     	; 0x402 <CAN_receive_message+0x62>
     41e:	04 c0       	rjmp	.+8      	; 0x428 <CAN_receive_message+0x88>
			message->data_array[i] = mcp_read(MCP_RXB0D0 + i);
		}
	}
	else
	{
		return NO_NEW_MESSAGE;
     420:	82 e0       	ldi	r24, 0x02	; 2
     422:	03 c0       	rjmp	.+6      	; 0x42a <CAN_receive_message+0x8a>
	}
	
	return SUCCESS;
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	01 c0       	rjmp	.+2      	; 0x42a <CAN_receive_message+0x8a>
     428:	80 e0       	ldi	r24, 0x00	; 0
}
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	1f 91       	pop	r17
     430:	0f 91       	pop	r16
     432:	ff 90       	pop	r15
     434:	ef 90       	pop	r14
     436:	08 95       	ret

00000438 <send_joystick_possition>:
* \param in joystick position
* \param in touchpad data
* \return result of the CAN send operation
****************************************************************************/
uint8_t send_joystick_possition(JoystickPosition joystick_position, TouchpadData touchpad_data)
{
     438:	0f 93       	push	r16
     43a:	1f 93       	push	r17
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
     444:	2a 97       	sbiw	r28, 0x0a	; 10
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	cd bf       	out	0x3d, r28	; 61
	message.data_array[3] = (uint8_t) (touchpad_data.leftTouchPad);
	
	message.data_array[4] = (uint8_t) (touchpad_data.rightButton);
	message.data_array[5] = (uint8_t) (touchpad_data.leftButton);
	
	return CAN_send_message(message);
     450:	01 e0       	ldi	r16, 0x01	; 1
     452:	16 e0       	ldi	r17, 0x06	; 6
     454:	28 2f       	mov	r18, r24
     456:	39 2f       	mov	r19, r25
     458:	89 85       	ldd	r24, Y+9	; 0x09
     45a:	9a 85       	ldd	r25, Y+10	; 0x0a
     45c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <CAN_send_message>
}
     460:	2a 96       	adiw	r28, 0x0a	; 10
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	f8 94       	cli
     466:	de bf       	out	0x3e, r29	; 62
     468:	0f be       	out	0x3f, r0	; 63
     46a:	cd bf       	out	0x3d, r28	; 61
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	0f 91       	pop	r16
     474:	08 95       	ret

00000476 <send_game_mode>:
*
* \param in game mode
* \return result of the CAN send operation
****************************************************************************/
uint8_t send_game_mode(GameModes mode)
{
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
     482:	2a 97       	sbiw	r28, 0x0a	; 10
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
	message.ID = 0x02;
	message.length = 1;
	
	message.data_array[0]= (uint8_t) (mode);
	
	return CAN_send_message(message);
     48e:	02 e0       	ldi	r16, 0x02	; 2
     490:	11 e0       	ldi	r17, 0x01	; 1
     492:	28 2f       	mov	r18, r24
     494:	3c 81       	ldd	r19, Y+4	; 0x04
     496:	4d 81       	ldd	r20, Y+5	; 0x05
     498:	5e 81       	ldd	r21, Y+6	; 0x06
     49a:	6f 81       	ldd	r22, Y+7	; 0x07
     49c:	78 85       	ldd	r23, Y+8	; 0x08
     49e:	89 85       	ldd	r24, Y+9	; 0x09
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <CAN_send_message>
}
     4a6:	2a 96       	adiw	r28, 0x0a	; 10
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	08 95       	ret

000004bc <receive_mode_change>:


void receive_mode_change(My_Game_Mode* CurrentMode, CANMessage message)
{
     4bc:	ef 92       	push	r14
     4be:	ff 92       	push	r15
     4c0:	0f 93       	push	r16
     4c2:	1f 93       	push	r17
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
     4cc:	2a 97       	sbiw	r28, 0x0a	; 10
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	f8 94       	cli
     4d2:	de bf       	out	0x3e, r29	; 62
     4d4:	0f be       	out	0x3f, r0	; 63
     4d6:	cd bf       	out	0x3d, r28	; 61
	CurrentMode->gamemode = message.data_array[0];
     4d8:	fc 01       	movw	r30, r24
     4da:	00 83       	st	Z, r16
     4dc:	2a 96       	adiw	r28, 0x0a	; 10
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	f8 94       	cli
     4e2:	de bf       	out	0x3e, r29	; 62
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	cd bf       	out	0x3d, r28	; 61
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	1f 91       	pop	r17
     4ee:	0f 91       	pop	r16
     4f0:	ff 90       	pop	r15
     4f2:	ef 90       	pop	r14
     4f4:	08 95       	ret

000004f6 <read_joystick_position>:
*
* \param in calibration data
* \return Joystick position
****************************************************************************/
JoystickPosition read_joystick_position(JoystickPosition calibration)
{
     4f6:	cf 93       	push	r28
	JoystickPosition position;

	position.xaxis = read_adc(ADC_CH2);
     4f8:	85 e0       	ldi	r24, 0x05	; 5
     4fa:	0e 94 52 01 	call	0x2a4	; 0x2a4 <read_adc>
     4fe:	c8 2f       	mov	r28, r24
	//position.xaxis = ((((position.xaxis - calibration.xaxis)*100)/255)-50)*2;

	position.yaxis = read_adc(ADC_CH1);
     500:	84 e0       	ldi	r24, 0x04	; 4
     502:	0e 94 52 01 	call	0x2a4	; 0x2a4 <read_adc>
     506:	98 2f       	mov	r25, r24
	//position.yaxis = ((((position.yaxis - calibration.yaxis)*100)/255)-50)*2;
	
	return position;
}
     508:	8c 2f       	mov	r24, r28
     50a:	cf 91       	pop	r28
     50c:	08 95       	ret

0000050e <read_joystick_direction>:
****************************************************************************/
JoystickDirection read_joystick_direction(JoystickPosition joystickPos)
{
	JoystickDirection xAxes, yAxes, retVal;
	
	if (joystickPos.xaxis > 20)
     50e:	85 31       	cpi	r24, 0x15	; 21
     510:	10 f4       	brcc	.+4      	; 0x516 <read_joystick_direction+0x8>
	{
		xAxes = Left;
	}
	else
	{
		xAxes = Neutral;
     512:	24 e0       	ldi	r18, 0x04	; 4
     514:	01 c0       	rjmp	.+2      	; 0x518 <read_joystick_direction+0xa>
{
	JoystickDirection xAxes, yAxes, retVal;
	
	if (joystickPos.xaxis > 20)
	{
		xAxes = Right;
     516:	21 e0       	ldi	r18, 0x01	; 1
	else
	{
		xAxes = Neutral;
	}
	
	if (joystickPos.yaxis > 20)
     518:	95 31       	cpi	r25, 0x15	; 21
     51a:	10 f4       	brcc	.+4      	; 0x520 <read_joystick_direction+0x12>
	else if (joystickPos.yaxis < -20)
	{
		yAxes = Down;
	}
	else{
		yAxes = Neutral; 
     51c:	34 e0       	ldi	r19, 0x04	; 4
     51e:	01 c0       	rjmp	.+2      	; 0x522 <read_joystick_direction+0x14>
		xAxes = Neutral;
	}
	
	if (joystickPos.yaxis > 20)
	{
		yAxes = Up;
     520:	32 e0       	ldi	r19, 0x02	; 2
	}
	else{
		yAxes = Neutral; 
	}
	
	if(abs(joystickPos.yaxis) > abs(joystickPos.xaxis))
     522:	89 17       	cp	r24, r25
     524:	08 f4       	brcc	.+2      	; 0x528 <read_joystick_direction+0x1a>
	{
		retVal = yAxes;
     526:	23 2f       	mov	r18, r19
	{
		retVal = xAxes;
	}
	
	return retVal;
}
     528:	82 2f       	mov	r24, r18
     52a:	08 95       	ret

0000052c <joystick_calibration>:
* \brief Calibrate joystick
*
* \return Joystick calibration data
****************************************************************************/
JoystickPosition joystick_calibration()
{
     52c:	cf 93       	push	r28
	
	JoystickPosition position;
	position.xaxis = read_adc(ADC_CH2);
     52e:	85 e0       	ldi	r24, 0x05	; 5
     530:	0e 94 52 01 	call	0x2a4	; 0x2a4 <read_adc>
     534:	c8 2f       	mov	r28, r24
	position.yaxis = read_adc(ADC_CH1);
     536:	84 e0       	ldi	r24, 0x04	; 4
     538:	0e 94 52 01 	call	0x2a4	; 0x2a4 <read_adc>
	position.xaxis -= 127;
	position.yaxis -= 127;
     53c:	91 e8       	ldi	r25, 0x81	; 129
     53e:	98 0f       	add	r25, r24

	return position;	
}
     540:	81 e8       	ldi	r24, 0x81	; 129
     542:	8c 0f       	add	r24, r28
     544:	cf 91       	pop	r28
     546:	08 95       	ret

00000548 <read_touchpad_data>:
* \brief Read Touchpad data
*
* \return Touchpad data
****************************************************************************/
TouchpadData read_touchpad_data()
{
     548:	cf 93       	push	r28
	TouchpadData touchpad;
	touchpad.rightTouchPad = read_adc(ADC_CH3);
     54a:	86 e0       	ldi	r24, 0x06	; 6
     54c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <read_adc>
     550:	c8 2f       	mov	r28, r24
	touchpad.leftTouchPad = read_adc(ADC_CH4);
     552:	87 e0       	ldi	r24, 0x07	; 7
     554:	0e 94 52 01 	call	0x2a4	; 0x2a4 <read_adc>
     558:	78 2f       	mov	r23, r24
	
	if(test_bit(BUTTON_PORT, LEFT_BUTTON_PIN))
     55a:	85 9b       	sbis	0x10, 5	; 16
     55c:	02 c0       	rjmp	.+4      	; 0x562 <read_touchpad_data+0x1a>
	{
		touchpad.leftButton = 1;
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	01 c0       	rjmp	.+2      	; 0x564 <read_touchpad_data+0x1c>
	}
	else
	{
		touchpad.leftButton = 0;
     562:	90 e0       	ldi	r25, 0x00	; 0
	}
	if(test_bit(BUTTON_PORT, RIGHT_BUTTON_PIN))
     564:	84 9b       	sbis	0x10, 4	; 16
     566:	02 c0       	rjmp	.+4      	; 0x56c <read_touchpad_data+0x24>
	{
		touchpad.rightButton = 1;
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	01 c0       	rjmp	.+2      	; 0x56e <read_touchpad_data+0x26>
	}
	else
	{
		touchpad.rightButton = 0;	
     56c:	80 e0       	ldi	r24, 0x00	; 0
	}
	return touchpad;
}
     56e:	6c 2f       	mov	r22, r28
     570:	cf 91       	pop	r28
     572:	08 95       	ret

00000574 <change_xaxis>:
***********************************************************************************/
JoystickDirection change_xaxis(JoystickDirection direction)
{
	static JoystickDirection old_x_direction = Neutral;
	
	if(direction!= Right && direction != Left)
     574:	82 30       	cpi	r24, 0x02	; 2
     576:	20 f0       	brcs	.+8      	; 0x580 <change_xaxis+0xc>
	{
		old_x_direction = Neutral;
     578:	84 e0       	ldi	r24, 0x04	; 4
     57a:	80 93 07 01 	sts	0x0107, r24
		return Neutral;
     57e:	08 95       	ret
	}
		
	if (old_x_direction != direction)
     580:	90 91 07 01 	lds	r25, 0x0107
     584:	98 17       	cp	r25, r24
     586:	19 f0       	breq	.+6      	; 0x58e <change_xaxis+0x1a>
	{
		old_x_direction = direction;
     588:	80 93 07 01 	sts	0x0107, r24
		return direction;
     58c:	08 95       	ret
	}
		
	old_x_direction = direction;
	return Neutral;
     58e:	84 e0       	ldi	r24, 0x04	; 4
}
     590:	08 95       	ret

00000592 <change_yaxis>:
* \return Direction of joystick
***********************************************************************************/
JoystickDirection change_yaxis(JoystickDirection direction){
	static JoystickDirection old_y_direction = Neutral;
	
	if(direction!= Up && direction != Down)
     592:	9e ef       	ldi	r25, 0xFE	; 254
     594:	98 0f       	add	r25, r24
     596:	92 30       	cpi	r25, 0x02	; 2
     598:	20 f0       	brcs	.+8      	; 0x5a2 <change_yaxis+0x10>
	{
		old_y_direction = Neutral;
     59a:	84 e0       	ldi	r24, 0x04	; 4
     59c:	80 93 06 01 	sts	0x0106, r24
		return Neutral;
     5a0:	08 95       	ret
	}
		
	if (old_y_direction != direction)
     5a2:	90 91 06 01 	lds	r25, 0x0106
     5a6:	98 17       	cp	r25, r24
     5a8:	19 f0       	breq	.+6      	; 0x5b0 <change_yaxis+0x1e>
	{
		old_y_direction = direction;
     5aa:	80 93 06 01 	sts	0x0106, r24
		return direction;
     5ae:	08 95       	ret
	}
	
	old_y_direction = direction;
	return Neutral;
     5b0:	84 e0       	ldi	r24, 0x04	; 4
}
     5b2:	08 95       	ret

000005b4 <change_touchpad_data>:
	ChangeTouchpadData ret_val;
	
	ret_val.rightButton = 0;
	ret_val.leftButton = 0;
	
	if (old_touchpad_data.leftButton == 0 && new_touchpad_data.leftButton == 1)
     5b4:	20 91 af 01 	lds	r18, 0x01AF
     5b8:	21 11       	cpse	r18, r1
     5ba:	05 c0       	rjmp	.+10     	; 0x5c6 <change_touchpad_data+0x12>
     5bc:	91 30       	cpi	r25, 0x01	; 1
     5be:	19 f4       	brne	.+6      	; 0x5c6 <change_touchpad_data+0x12>
	{
		old_touchpad_data.leftButton = 1;
     5c0:	90 93 af 01 	sts	0x01AF, r25
		ret_val.leftButton = 1;
     5c4:	0c c0       	rjmp	.+24     	; 0x5de <change_touchpad_data+0x2a>
	}
	else if (old_touchpad_data.leftButton == 1 && new_touchpad_data.leftButton == 0)
     5c6:	20 91 af 01 	lds	r18, 0x01AF
     5ca:	21 30       	cpi	r18, 0x01	; 1
     5cc:	29 f4       	brne	.+10     	; 0x5d8 <change_touchpad_data+0x24>
     5ce:	91 11       	cpse	r25, r1
     5d0:	05 c0       	rjmp	.+10     	; 0x5dc <change_touchpad_data+0x28>
	{
		old_touchpad_data.leftButton = 0;
     5d2:	10 92 af 01 	sts	0x01AF, r1
     5d6:	03 c0       	rjmp	.+6      	; 0x5de <change_touchpad_data+0x2a>
{
	static TouchpadData old_touchpad_data;
	ChangeTouchpadData ret_val;
	
	ret_val.rightButton = 0;
	ret_val.leftButton = 0;
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	01 c0       	rjmp	.+2      	; 0x5de <change_touchpad_data+0x2a>
     5dc:	90 e0       	ldi	r25, 0x00	; 0
	else if (old_touchpad_data.leftButton == 1 && new_touchpad_data.leftButton == 0)
	{
		old_touchpad_data.leftButton = 0;
	}
	
	if (old_touchpad_data.rightButton == 0 && new_touchpad_data.rightButton == 1)
     5de:	20 91 ae 01 	lds	r18, 0x01AE
     5e2:	21 11       	cpse	r18, r1
     5e4:	05 c0       	rjmp	.+10     	; 0x5f0 <change_touchpad_data+0x3c>
     5e6:	81 30       	cpi	r24, 0x01	; 1
     5e8:	19 f4       	brne	.+6      	; 0x5f0 <change_touchpad_data+0x3c>
	{
		old_touchpad_data.rightButton = 1;
     5ea:	80 93 ae 01 	sts	0x01AE, r24
		ret_val.rightButton = 1;
     5ee:	08 95       	ret
	}
	else if (old_touchpad_data.rightButton == 1 && new_touchpad_data.rightButton == 0)
     5f0:	20 91 ae 01 	lds	r18, 0x01AE
     5f4:	21 30       	cpi	r18, 0x01	; 1
     5f6:	29 f4       	brne	.+10     	; 0x602 <change_touchpad_data+0x4e>
     5f8:	81 11       	cpse	r24, r1
     5fa:	05 c0       	rjmp	.+10     	; 0x606 <change_touchpad_data+0x52>
	{
		old_touchpad_data.rightButton = 0;
     5fc:	10 92 ae 01 	sts	0x01AE, r1
     600:	08 95       	ret
ChangeTouchpadData change_touchpad_data(TouchpadData new_touchpad_data)
{
	static TouchpadData old_touchpad_data;
	ChangeTouchpadData ret_val;
	
	ret_val.rightButton = 0;
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	08 95       	ret
     606:	80 e0       	ldi	r24, 0x00	; 0
	{
		old_touchpad_data.rightButton = 0;
	}
	
	return ret_val;
     608:	08 95       	ret

0000060a <mcp_turn_on>:
* \brief Enable communication with CAN controller 
*
****************************************************************************/
void mcp_turn_on()
{
	PORTB &= ~(1 << DD_CS);
     60a:	c4 98       	cbi	0x18, 4	; 24
     60c:	08 95       	ret

0000060e <mcp_turn_off>:
* \brief Disable communication with CAN controller
*
****************************************************************************/
void mcp_turn_off()
{
	PORTB |= (1 << DD_CS);
     60e:	c4 9a       	sbi	0x18, 4	; 24
     610:	08 95       	ret

00000612 <mcp_reset>:
* \brief Reset the CAN controller
*
****************************************************************************/
void mcp_reset()
{
	mcp_turn_on();
     612:	0e 94 05 03 	call	0x60a	; 0x60a <mcp_turn_on>
	
	SPI_write(MCP_RESET);
     616:	80 ec       	ldi	r24, 0xC0	; 192
     618:	0e 94 07 05 	call	0xa0e	; 0xa0e <SPI_write>
	
	mcp_turn_off();
     61c:	0e 94 07 03 	call	0x60e	; 0x60e <mcp_turn_off>
     620:	08 95       	ret

00000622 <mcp_read>:
*
* \param in address from which shall be read
* \return data
****************************************************************************/
uint8_t mcp_read(uint8_t address)
{
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	1f 92       	push	r1
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62
     62e:	18 2f       	mov	r17, r24
	volatile uint8_t retVal;
	
	mcp_turn_on();
     630:	0e 94 05 03 	call	0x60a	; 0x60a <mcp_turn_on>
	
	SPI_write(MCP_READ);
     634:	83 e0       	ldi	r24, 0x03	; 3
     636:	0e 94 07 05 	call	0xa0e	; 0xa0e <SPI_write>
	SPI_write(address);
     63a:	81 2f       	mov	r24, r17
     63c:	0e 94 07 05 	call	0xa0e	; 0xa0e <SPI_write>
	
	retVal = SPI_read();
     640:	0e 94 0b 05 	call	0xa16	; 0xa16 <SPI_read>
     644:	89 83       	std	Y+1, r24	; 0x01
	
	mcp_turn_off();
     646:	0e 94 07 03 	call	0x60e	; 0x60e <mcp_turn_off>
	
	return retVal;
     64a:	89 81       	ldd	r24, Y+1	; 0x01
}
     64c:	0f 90       	pop	r0
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	1f 91       	pop	r17
     654:	08 95       	ret

00000656 <mcp_init>:
****************************************************************************/
uint8_t mcp_init()
{
	uint8_t tmp;
	
	SPI_init();
     656:	0e 94 01 05 	call	0xa02	; 0xa02 <SPI_init>
	mcp_reset();
     65a:	0e 94 09 03 	call	0x612	; 0x612 <mcp_reset>
	
	tmp = mcp_read(MCP_CANSTAT);
     65e:	8e e0       	ldi	r24, 0x0E	; 14
     660:	0e 94 11 03 	call	0x622	; 0x622 <mcp_read>
	
	if ((tmp & MODE_MASK) != MODE_CONFIG)
     664:	80 7e       	andi	r24, 0xE0	; 224
     666:	80 38       	cpi	r24, 0x80	; 128
     668:	31 f0       	breq	.+12     	; 0x676 <mcp_init+0x20>
	{
		printf("MCP2515 NOT configured properly\n");
     66a:	88 e0       	ldi	r24, 0x08	; 8
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <puts>
		return 1;
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	08 95       	ret
	}
	
	return 0;
     676:	80 e0       	ldi	r24, 0x00	; 0
}
     678:	08 95       	ret

0000067a <mcp_write_byte>:
*
* \param in address to which shall be write
* \return data
****************************************************************************/
void mcp_write_byte(uint8_t address, uint8_t byte)
{
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	d8 2f       	mov	r29, r24
     680:	c6 2f       	mov	r28, r22
	mcp_turn_on();
     682:	0e 94 05 03 	call	0x60a	; 0x60a <mcp_turn_on>
	SPI_write(MCP_WRITE);
     686:	82 e0       	ldi	r24, 0x02	; 2
     688:	0e 94 07 05 	call	0xa0e	; 0xa0e <SPI_write>
	SPI_write(address);
     68c:	8d 2f       	mov	r24, r29
     68e:	0e 94 07 05 	call	0xa0e	; 0xa0e <SPI_write>
	SPI_write(byte);
     692:	8c 2f       	mov	r24, r28
     694:	0e 94 07 05 	call	0xa0e	; 0xa0e <SPI_write>
	mcp_turn_off();
     698:	0e 94 07 03 	call	0x60e	; 0x60e <mcp_turn_off>
}
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	08 95       	ret

000006a2 <mcp_modify_bit>:
* \param in address of the register
* \param in bit mask
* \param in new value of the register
****************************************************************************/
void mcp_modify_bit(uint8_t address, uint8_t mask, uint8_t byte)
{
     6a2:	1f 93       	push	r17
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	18 2f       	mov	r17, r24
     6aa:	d6 2f       	mov	r29, r22
     6ac:	c4 2f       	mov	r28, r20
	mcp_turn_on();
     6ae:	0e 94 05 03 	call	0x60a	; 0x60a <mcp_turn_on>
	SPI_write(MCP_BITMOD);
     6b2:	85 e0       	ldi	r24, 0x05	; 5
     6b4:	0e 94 07 05 	call	0xa0e	; 0xa0e <SPI_write>
	SPI_write(address);
     6b8:	81 2f       	mov	r24, r17
     6ba:	0e 94 07 05 	call	0xa0e	; 0xa0e <SPI_write>
	SPI_write(mask);
     6be:	8d 2f       	mov	r24, r29
     6c0:	0e 94 07 05 	call	0xa0e	; 0xa0e <SPI_write>
	SPI_write(byte);
     6c4:	8c 2f       	mov	r24, r28
     6c6:	0e 94 07 05 	call	0xa0e	; 0xa0e <SPI_write>
	mcp_turn_off();
     6ca:	0e 94 07 03 	call	0x60e	; 0x60e <mcp_turn_off>
}
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	1f 91       	pop	r17
     6d4:	08 95       	ret

000006d6 <mcp_request_to_send>:
* \brief Request to send particular buffer
*
* \param in address of the buffer
****************************************************************************/
void mcp_request_to_send(uint8_t bits)
{
     6d6:	cf 93       	push	r28
     6d8:	c8 2f       	mov	r28, r24
	mcp_turn_on();
     6da:	0e 94 05 03 	call	0x60a	; 0x60a <mcp_turn_on>
	SPI_write(MCP_RTS | (bits & 0b00000111));
     6de:	8c 2f       	mov	r24, r28
     6e0:	87 70       	andi	r24, 0x07	; 7
     6e2:	80 68       	ori	r24, 0x80	; 128
     6e4:	0e 94 07 05 	call	0xa0e	; 0xa0e <SPI_write>
	mcp_turn_off();
     6e8:	0e 94 07 03 	call	0x60e	; 0x60e <mcp_turn_off>
}
     6ec:	cf 91       	pop	r28
     6ee:	08 95       	ret

000006f0 <init_oled>:
*
****************************************************************************/
void write_c(char command)
{
	volatile char *ext_oled = (char *) OLED_COMMAND_BASE_ADDR;
	ext_oled[0] = command;
     6f0:	e0 e0       	ldi	r30, 0x00	; 0
     6f2:	f0 e1       	ldi	r31, 0x10	; 16
     6f4:	8e ea       	ldi	r24, 0xAE	; 174
     6f6:	80 83       	st	Z, r24
     6f8:	81 ea       	ldi	r24, 0xA1	; 161
     6fa:	80 83       	st	Z, r24
     6fc:	8a ed       	ldi	r24, 0xDA	; 218
     6fe:	80 83       	st	Z, r24
     700:	82 e1       	ldi	r24, 0x12	; 18
     702:	80 83       	st	Z, r24
     704:	88 ec       	ldi	r24, 0xC8	; 200
     706:	80 83       	st	Z, r24
     708:	88 ea       	ldi	r24, 0xA8	; 168
     70a:	80 83       	st	Z, r24
     70c:	8f e3       	ldi	r24, 0x3F	; 63
     70e:	80 83       	st	Z, r24
     710:	85 ed       	ldi	r24, 0xD5	; 213
     712:	80 83       	st	Z, r24
     714:	80 e8       	ldi	r24, 0x80	; 128
     716:	80 83       	st	Z, r24
     718:	81 e8       	ldi	r24, 0x81	; 129
     71a:	80 83       	st	Z, r24
     71c:	80 e5       	ldi	r24, 0x50	; 80
     71e:	80 83       	st	Z, r24
     720:	89 ed       	ldi	r24, 0xD9	; 217
     722:	80 83       	st	Z, r24
     724:	81 e2       	ldi	r24, 0x21	; 33
     726:	80 83       	st	Z, r24
     728:	80 e2       	ldi	r24, 0x20	; 32
     72a:	80 83       	st	Z, r24
     72c:	10 82       	st	Z, r1
     72e:	8b ed       	ldi	r24, 0xDB	; 219
     730:	80 83       	st	Z, r24
     732:	80 e3       	ldi	r24, 0x30	; 48
     734:	80 83       	st	Z, r24
     736:	8d ea       	ldi	r24, 0xAD	; 173
     738:	80 83       	st	Z, r24
     73a:	10 82       	st	Z, r1
     73c:	84 ea       	ldi	r24, 0xA4	; 164
     73e:	80 83       	st	Z, r24
     740:	86 ea       	ldi	r24, 0xA6	; 166
     742:	80 83       	st	Z, r24
     744:	8f ea       	ldi	r24, 0xAF	; 175
     746:	80 83       	st	Z, r24
     748:	08 95       	ret

0000074a <reset_position>:
     74a:	e0 e0       	ldi	r30, 0x00	; 0
     74c:	f0 e1       	ldi	r31, 0x10	; 16
     74e:	81 e2       	ldi	r24, 0x21	; 33
     750:	80 83       	st	Z, r24
     752:	10 82       	st	Z, r1
     754:	8f e7       	ldi	r24, 0x7F	; 127
     756:	80 83       	st	Z, r24
     758:	82 e2       	ldi	r24, 0x22	; 34
     75a:	80 83       	st	Z, r24
     75c:	10 82       	st	Z, r1
     75e:	87 e0       	ldi	r24, 0x07	; 7
     760:	80 83       	st	Z, r24
     762:	08 95       	ret

00000764 <refresh_oled>:
* \brief Refresh OLED by rewriting all data from SRAM to OLED
*
****************************************************************************/
void refresh_oled()
{
	reset_position();
     764:	0e 94 a5 03 	call	0x74a	; 0x74a <reset_position>
     768:	e0 e0       	ldi	r30, 0x00	; 0
     76a:	f8 e1       	ldi	r31, 0x18	; 24
*
****************************************************************************/
void write_d(char data)
{
	volatile char *ext_oled = (char *) OLED_DATA_BASE_ADDR;
	ext_oled[0] = data;
     76c:	a0 e0       	ldi	r26, 0x00	; 0
     76e:	b2 e1       	ldi	r27, 0x12	; 18
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	unsigned char oled_value;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
	{
		oled_value = ext_ram[i];
     770:	81 91       	ld	r24, Z+
*
****************************************************************************/
void write_d(char data)
{
	volatile char *ext_oled = (char *) OLED_DATA_BASE_ADDR;
	ext_oled[0] = data;
     772:	8c 93       	st	X, r24
{
	reset_position();
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	unsigned char oled_value;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
     774:	e1 15       	cp	r30, r1
     776:	8c e1       	ldi	r24, 0x1C	; 28
     778:	f8 07       	cpc	r31, r24
     77a:	d1 f7       	brne	.-12     	; 0x770 <refresh_oled+0xc>
	{
		oled_value = ext_ram[i];
		write_d(oled_value);
	}
}
     77c:	08 95       	ret

0000077e <clear_oled>:
/****************************************************************************
* \brief Clear OLED display
*
****************************************************************************/
void clear_oled()
{
     77e:	e0 e0       	ldi	r30, 0x00	; 0
     780:	f8 e1       	ldi	r31, 0x18	; 24
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
	{
		ext_ram[i] = 0x00;
     782:	11 92       	st	Z+, r1
****************************************************************************/
void clear_oled()
{
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
     784:	e1 15       	cp	r30, r1
     786:	8c e1       	ldi	r24, 0x1C	; 28
     788:	f8 07       	cpc	r31, r24
     78a:	d9 f7       	brne	.-10     	; 0x782 <clear_oled+0x4>
	{
		ext_ram[i] = 0x00;
	}
}
     78c:	08 95       	ret

0000078e <print_char>:
* \brief Print character on current position on OLED display
*
* \param in x Position of pixel that should be set
****************************************************************************/
void print_char(char character)
{
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	c0 91 b0 01 	lds	r28, 0x01B0
     796:	d0 91 b1 01 	lds	r29, 0x01B1
     79a:	28 2f       	mov	r18, r24
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	20 52       	subi	r18, 0x20	; 32
     7a0:	31 09       	sbc	r19, r1
     7a2:	c9 01       	movw	r24, r18
     7a4:	88 0f       	add	r24, r24
     7a6:	99 1f       	adc	r25, r25
     7a8:	88 0f       	add	r24, r24
     7aa:	99 1f       	adc	r25, r25
     7ac:	28 0f       	add	r18, r24
     7ae:	39 1f       	adc	r19, r25
     7b0:	26 57       	subi	r18, 0x76	; 118
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	84 e0       	ldi	r24, 0x04	; 4
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	be 01       	movw	r22, r28
     7ba:	6c 5f       	subi	r22, 0xFC	; 252
     7bc:	77 4e       	sbci	r23, 0xE7	; 231
     7be:	db 01       	movw	r26, r22
     7c0:	a8 1b       	sub	r26, r24
     7c2:	b9 0b       	sbc	r27, r25
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
	
	for(int i = 0; i < 4; i++)
	{
		ext_ram[position] = pgm_read_word_near(&(font[character-32][i]));
     7c4:	f9 01       	movw	r30, r18
     7c6:	45 91       	lpm	r20, Z+
     7c8:	54 91       	lpm	r21, Z
     7ca:	4c 93       	st	X, r20
     7cc:	01 97       	sbiw	r24, 0x01	; 1
     7ce:	2f 5f       	subi	r18, 0xFF	; 255
     7d0:	3f 4f       	sbci	r19, 0xFF	; 255
****************************************************************************/
void print_char(char character)
{
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
	
	for(int i = 0; i < 4; i++)
     7d2:	00 97       	sbiw	r24, 0x00	; 0
     7d4:	a1 f7       	brne	.-24     	; 0x7be <print_char+0x30>
     7d6:	24 96       	adiw	r28, 0x04	; 4
     7d8:	d0 93 b1 01 	sts	0x01B1, r29
     7dc:	c0 93 b0 01 	sts	0x01B0, r28
	{
		ext_ram[position] = pgm_read_word_near(&(font[character-32][i]));
		position++;
	}
}
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	08 95       	ret

000007e6 <print_inverted_char>:

void print_inverted_char(char character)
{
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	c0 91 b0 01 	lds	r28, 0x01B0
     7ee:	d0 91 b1 01 	lds	r29, 0x01B1
     7f2:	28 2f       	mov	r18, r24
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	20 52       	subi	r18, 0x20	; 32
     7f8:	31 09       	sbc	r19, r1
     7fa:	c9 01       	movw	r24, r18
     7fc:	88 0f       	add	r24, r24
     7fe:	99 1f       	adc	r25, r25
     800:	88 0f       	add	r24, r24
     802:	99 1f       	adc	r25, r25
     804:	28 0f       	add	r18, r24
     806:	39 1f       	adc	r19, r25
     808:	26 57       	subi	r18, 0x76	; 118
     80a:	3f 4f       	sbci	r19, 0xFF	; 255
     80c:	84 e0       	ldi	r24, 0x04	; 4
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	be 01       	movw	r22, r28
     812:	6c 5f       	subi	r22, 0xFC	; 252
     814:	77 4e       	sbci	r23, 0xE7	; 231
     816:	db 01       	movw	r26, r22
     818:	a8 1b       	sub	r26, r24
     81a:	b9 0b       	sbc	r27, r25
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
	
	for(int i = 0; i < 4; i++)
	{
		ext_ram[position] = ~pgm_read_word_near(&(font[character-32][i]));
     81c:	f9 01       	movw	r30, r18
     81e:	45 91       	lpm	r20, Z+
     820:	54 91       	lpm	r21, Z
     822:	40 95       	com	r20
     824:	4c 93       	st	X, r20
     826:	01 97       	sbiw	r24, 0x01	; 1
     828:	2f 5f       	subi	r18, 0xFF	; 255
     82a:	3f 4f       	sbci	r19, 0xFF	; 255

void print_inverted_char(char character)
{
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
	
	for(int i = 0; i < 4; i++)
     82c:	00 97       	sbiw	r24, 0x00	; 0
     82e:	99 f7       	brne	.-26     	; 0x816 <print_inverted_char+0x30>
     830:	24 96       	adiw	r28, 0x04	; 4
     832:	d0 93 b1 01 	sts	0x01B1, r29
     836:	c0 93 b0 01 	sts	0x01B0, r28
	{
		ext_ram[position] = ~pgm_read_word_near(&(font[character-32][i]));
		position++;
	}
}
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	08 95       	ret

00000840 <set_position>:
* \param in page Row on Y-axis
* \return Success/Failure
****************************************************************************/
int set_position(unsigned int column, unsigned int page)
{
	if (column > 32)
     840:	81 32       	cpi	r24, 0x21	; 33
     842:	91 05       	cpc	r25, r1
     844:	c0 f4       	brcc	.+48     	; 0x876 <set_position+0x36>
	{
		return 1;
	}
	else if (page > 8)
     846:	69 30       	cpi	r22, 0x09	; 9
     848:	71 05       	cpc	r23, r1
     84a:	c0 f4       	brcc	.+48     	; 0x87c <set_position+0x3c>
	{
		return 1;
	}
		
	position = page * 128 + column * 4;
     84c:	66 0f       	add	r22, r22
     84e:	77 1f       	adc	r23, r23
     850:	62 95       	swap	r22
     852:	72 95       	swap	r23
     854:	70 7f       	andi	r23, 0xF0	; 240
     856:	76 27       	eor	r23, r22
     858:	60 7f       	andi	r22, 0xF0	; 240
     85a:	76 27       	eor	r23, r22
     85c:	86 0f       	add	r24, r22
     85e:	97 1f       	adc	r25, r23
     860:	88 0f       	add	r24, r24
     862:	99 1f       	adc	r25, r25
     864:	88 0f       	add	r24, r24
     866:	99 1f       	adc	r25, r25
     868:	90 93 b1 01 	sts	0x01B1, r25
     86c:	80 93 b0 01 	sts	0x01B0, r24
	
	return 0;
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	08 95       	ret
****************************************************************************/
int set_position(unsigned int column, unsigned int page)
{
	if (column > 32)
	{
		return 1;
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	08 95       	ret
	}
	else if (page > 8)
	{
		return 1;
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	90 e0       	ldi	r25, 0x00	; 0
	}
		
	position = page * 128 + column * 4;
	
	return 0;
}
     880:	08 95       	ret

00000882 <print_string>:
*
* \param in String that shall be printed
* \return Success/Failure
****************************************************************************/
int print_string(char* string)
{
     882:	ef 92       	push	r14
     884:	ff 92       	push	r15
     886:	0f 93       	push	r16
     888:	1f 93       	push	r17
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
	int lenght  = strlen(string);
     88e:	fc 01       	movw	r30, r24
     890:	01 90       	ld	r0, Z+
     892:	00 20       	and	r0, r0
     894:	e9 f7       	brne	.-6      	; 0x890 <print_string+0xe>
     896:	31 97       	sbiw	r30, 0x01	; 1
     898:	7f 01       	movw	r14, r30
     89a:	e8 1a       	sub	r14, r24
     89c:	f9 0a       	sbc	r15, r25
	for(int i = 0; i < lenght; i++)
     89e:	1e 14       	cp	r1, r14
     8a0:	1f 04       	cpc	r1, r15
     8a2:	64 f4       	brge	.+24     	; 0x8bc <print_string+0x3a>
     8a4:	8c 01       	movw	r16, r24
     8a6:	c0 e0       	ldi	r28, 0x00	; 0
     8a8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		print_char(string[i]);
     8aa:	f8 01       	movw	r30, r16
     8ac:	81 91       	ld	r24, Z+
     8ae:	8f 01       	movw	r16, r30
     8b0:	0e 94 c7 03 	call	0x78e	; 0x78e <print_char>
* \return Success/Failure
****************************************************************************/
int print_string(char* string)
{
	int lenght  = strlen(string);
	for(int i = 0; i < lenght; i++)
     8b4:	21 96       	adiw	r28, 0x01	; 1
     8b6:	ec 16       	cp	r14, r28
     8b8:	fd 06       	cpc	r15, r29
     8ba:	b9 f7       	brne	.-18     	; 0x8aa <print_string+0x28>
	{
		print_char(string[i]);
	}
	
	return 0;
}
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	ff 90       	pop	r15
     8ca:	ef 90       	pop	r14
     8cc:	08 95       	ret

000008ce <revert_colour_line>:
****************************************************************************/
void revert_colour_line(unsigned char line)
{
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
		
	for(int i = (line * OLED_LINE_LENGTH_COLUMNS) + 2; i < ((line + 1) * OLED_LINE_LENGTH_COLUMNS); i++)
     8ce:	90 e8       	ldi	r25, 0x80	; 128
     8d0:	89 9f       	mul	r24, r25
     8d2:	f0 01       	movw	r30, r0
     8d4:	11 24       	eor	r1, r1
     8d6:	cf 01       	movw	r24, r30
     8d8:	80 58       	subi	r24, 0x80	; 128
     8da:	9f 4f       	sbci	r25, 0xFF	; 255
     8dc:	9f 01       	movw	r18, r30
     8de:	2e 5f       	subi	r18, 0xFE	; 254
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	28 17       	cp	r18, r24
     8e4:	39 07       	cpc	r19, r25
     8e6:	54 f4       	brge	.+20     	; 0x8fc <revert_colour_line+0x2e>
     8e8:	ef 5f       	subi	r30, 0xFF	; 255
     8ea:	f7 4e       	sbci	r31, 0xE7	; 231
     8ec:	81 50       	subi	r24, 0x01	; 1
     8ee:	98 4e       	sbci	r25, 0xE8	; 232
	{
		ext_ram[i-1] = ~ext_ram[i-1];
     8f0:	20 81       	ld	r18, Z
     8f2:	20 95       	com	r18
     8f4:	21 93       	st	Z+, r18
****************************************************************************/
void revert_colour_line(unsigned char line)
{
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
		
	for(int i = (line * OLED_LINE_LENGTH_COLUMNS) + 2; i < ((line + 1) * OLED_LINE_LENGTH_COLUMNS); i++)
     8f6:	e8 17       	cp	r30, r24
     8f8:	f9 07       	cpc	r31, r25
     8fa:	d1 f7       	brne	.-12     	; 0x8f0 <revert_colour_line+0x22>
     8fc:	08 95       	ret

000008fe <init>:
* \brief Initialize all important peripherals and pins
*
****************************************************************************/
void init()
{
	USART_init(MYUBBR);
     8fe:	8f e1       	ldi	r24, 0x1F	; 31
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 1b 05 	call	0xa36	; 0xa36 <USART_init>
	/* Enables standard IO functions */	
	fdevopen(USART_putchar, USART_getchar);
     906:	68 e2       	ldi	r22, 0x28	; 40
     908:	75 e0       	ldi	r23, 0x05	; 5
     90a:	82 e2       	ldi	r24, 0x22	; 34
     90c:	95 e0       	ldi	r25, 0x05	; 5
     90e:	0e 94 01 0a 	call	0x1402	; 0x1402 <fdevopen>
	/* Enables external memory*/
	set_bit(MCUCR, SRE);
     912:	85 b7       	in	r24, 0x35	; 53
     914:	80 68       	ori	r24, 0x80	; 128
     916:	85 bf       	out	0x35, r24	; 53
	/* Pin 1 is set to output for the LED*/
	set_bit(DDRB, PB0);
     918:	b8 9a       	sbi	0x17, 0	; 23
	/* Pin is now driven LOW*/
	clear_bit(PORTB, PB0);
     91a:	c0 98       	cbi	0x18, 0	; 24
	/* Initialize OLED display */
	init_oled();
     91c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <init_oled>
	interface_init();
     920:	0e 94 2d 05 	call	0xa5a	; 0xa5a <interface_init>
     924:	08 95       	ret

00000926 <main>:




int main(void)
{	
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	cd b7       	in	r28, 0x3d	; 61
     92c:	de b7       	in	r29, 0x3e	; 62
     92e:	2c 97       	sbiw	r28, 0x0c	; 12
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	f8 94       	cli
     934:	de bf       	out	0x3e, r29	; 62
     936:	0f be       	out	0x3f, r0	; 63
     938:	cd bf       	out	0x3d, r28	; 61

	clear_bit(DDRD, PD3);
     93a:	8b 98       	cbi	0x11, 3	; 17
	clear_bit(DDRD, PD2);
     93c:	8a 98       	cbi	0x11, 2	; 17
	
	init();
     93e:	0e 94 7f 04 	call	0x8fe	; 0x8fe <init>
	volatile char SPIdata = 0;
     942:	19 82       	std	Y+1, r1	; 0x01
	JoystickPosition position;
	JoystickPosition calibration;
	JoystickDirection direction;
	JoystickDirection change_y, change_x;
	ScreenName screen_name = 0;
	calibration = joystick_calibration();
     944:	0e 94 96 02 	call	0x52c	; 0x52c <joystick_calibration>
     948:	6c 01       	movw	r12, r24
	My_Game_Mode game_mode;
	high_score scores, score_read;
	
	//SRAM_test();
	
	CAN_init();
     94a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <CAN_init>
	
	clear_oled();
     94e:	0e 94 bf 03 	call	0x77e	; 0x77e <clear_oled>
	reset_position();
     952:	0e 94 a5 03 	call	0x74a	; 0x74a <reset_position>
	
	clear_oled();
     956:	0e 94 bf 03 	call	0x77e	; 0x77e <clear_oled>
	refresh_oled();
     95a:	0e 94 b2 03 	call	0x764	; 0x764 <refresh_oled>
	canMessage.ID = 0xAA;
	canMessage.length = 1;
	canMessage.data_array[0] = 0x10;
	
	
	printf("start\n");
     95e:	88 e2       	ldi	r24, 0x28	; 40
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <puts>

		
		
		if(CAN_receive_message(&canMessageNode2)==SUCCESS)
		{
			printf("#%d. %s : %d\n", 1, 2, 3);
     966:	0f 2e       	mov	r0, r31
     968:	f3 e0       	ldi	r31, 0x03	; 3
     96a:	8f 2e       	mov	r8, r31
     96c:	f0 2d       	mov	r31, r0
     96e:	68 94       	set
     970:	99 24       	eor	r9, r9
     972:	91 f8       	bld	r9, 1
     974:	0f 2e       	mov	r0, r31
     976:	fe e2       	ldi	r31, 0x2E	; 46
     978:	af 2e       	mov	r10, r31
     97a:	f1 e0       	ldi	r31, 0x01	; 1
     97c:	bf 2e       	mov	r11, r31
     97e:	f0 2d       	mov	r31, r0
	high_score_write(scores);
	*/
	//sei();
	while(1)
	{
		interface_state_machine(calibration, State_NewGame);
     980:	61 e0       	ldi	r22, 0x01	; 1
     982:	c6 01       	movw	r24, r12
     984:	0e 94 66 09 	call	0x12cc	; 0x12cc <interface_state_machine>
	
		position = read_joystick_position(calibration);
     988:	c6 01       	movw	r24, r12
     98a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <read_joystick_position>
     98e:	8c 01       	movw	r16, r24
		data = read_touchpad_data();
     990:	0e 94 a4 02 	call	0x548	; 0x548 <read_touchpad_data>
     994:	ab 01       	movw	r20, r22
     996:	bc 01       	movw	r22, r24
		
		send_joystick_possition(position, data);
     998:	c8 01       	movw	r24, r16
     99a:	0e 94 1c 02 	call	0x438	; 0x438 <send_joystick_possition>
     99e:	8c ec       	ldi	r24, 0xCC	; 204
     9a0:	94 e0       	ldi	r25, 0x04	; 4
     9a2:	01 97       	sbiw	r24, 0x01	; 1
     9a4:	f1 f7       	brne	.-4      	; 0x9a2 <main+0x7c>
     9a6:	00 c0       	rjmp	.+0      	; 0x9a8 <main+0x82>
     9a8:	00 00       	nop
		_delay_ms(1);	

		
		
		if(CAN_receive_message(&canMessageNode2)==SUCCESS)
     9aa:	ce 01       	movw	r24, r28
     9ac:	02 96       	adiw	r24, 0x02	; 2
     9ae:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <CAN_receive_message>
     9b2:	81 11       	cpse	r24, r1
     9b4:	e5 cf       	rjmp	.-54     	; 0x980 <main+0x5a>
		{
			printf("#%d. %s : %d\n", 1, 2, 3);
     9b6:	1f 92       	push	r1
     9b8:	8f 92       	push	r8
     9ba:	1f 92       	push	r1
     9bc:	9f 92       	push	r9
     9be:	1f 92       	push	r1
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	8f 93       	push	r24
     9c4:	bf 92       	push	r11
     9c6:	af 92       	push	r10
     9c8:	0e 94 4c 0a 	call	0x1498	; 0x1498 <printf>
			receive_mode_change(&game_mode, canMessageNode2);
     9cc:	ea 80       	ldd	r14, Y+2	; 0x02
     9ce:	fb 80       	ldd	r15, Y+3	; 0x03
     9d0:	0c 81       	ldd	r16, Y+4	; 0x04
     9d2:	1d 81       	ldd	r17, Y+5	; 0x05
     9d4:	2e 81       	ldd	r18, Y+6	; 0x06
     9d6:	3f 81       	ldd	r19, Y+7	; 0x07
     9d8:	48 85       	ldd	r20, Y+8	; 0x08
     9da:	59 85       	ldd	r21, Y+9	; 0x09
     9dc:	6a 85       	ldd	r22, Y+10	; 0x0a
     9de:	7b 85       	ldd	r23, Y+11	; 0x0b
     9e0:	ce 01       	movw	r24, r28
     9e2:	0c 96       	adiw	r24, 0x0c	; 12
     9e4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <receive_mode_change>
			if(game_mode.gamemode == Endgame)
     9e8:	8c 85       	ldd	r24, Y+12	; 0x0c
     9ea:	0f b6       	in	r0, 0x3f	; 63
     9ec:	f8 94       	cli
     9ee:	de bf       	out	0x3e, r29	; 62
     9f0:	0f be       	out	0x3f, r0	; 63
     9f2:	cd bf       	out	0x3d, r28	; 61
     9f4:	87 30       	cpi	r24, 0x07	; 7
     9f6:	21 f6       	brne	.-120    	; 0x980 <main+0x5a>
			{
				interface_state_machine(calibration, State_Endgame);
     9f8:	6c e0       	ldi	r22, 0x0C	; 12
     9fa:	c6 01       	movw	r24, r12
     9fc:	0e 94 66 09 	call	0x12cc	; 0x12cc <interface_state_machine>
     a00:	bf cf       	rjmp	.-130    	; 0x980 <main+0x5a>

00000a02 <SPI_init>:
*
****************************************************************************/
void SPI_init()
{
	/* Drive MOSI, SCK and CS HIGH*/
	DDR_SPI |= (1 << DD_MOSI) | (1 << DD_SCK) | (1 << DD_CS);
     a02:	87 b3       	in	r24, 0x17	; 23
     a04:	80 6b       	ori	r24, 0xB0	; 176
     a06:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master mode, clock rate fck/16*/
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     a08:	81 e5       	ldi	r24, 0x51	; 81
     a0a:	8d b9       	out	0x0d, r24	; 13
     a0c:	08 95       	ret

00000a0e <SPI_write>:
*
* \param in byte to be written
****************************************************************************/
void SPI_write(uint8_t data)
{
	SPDR = data;
     a0e:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1 << SPIF)));
     a10:	77 9b       	sbis	0x0e, 7	; 14
     a12:	fe cf       	rjmp	.-4      	; 0xa10 <SPI_write+0x2>
}
     a14:	08 95       	ret

00000a16 <SPI_read>:
* \brief Read data from slave unit
*
* \return Read data
****************************************************************************/
uint8_t SPI_read()
{
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	1f 92       	push	r1
     a1c:	cd b7       	in	r28, 0x3d	; 61
     a1e:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t retVal;
	SPDR = 0xFF;
     a20:	8f ef       	ldi	r24, 0xFF	; 255
     a22:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1 << SPIF)));
     a24:	77 9b       	sbis	0x0e, 7	; 14
     a26:	fe cf       	rjmp	.-4      	; 0xa24 <SPI_read+0xe>
	
	retVal = SPDR;
     a28:	8f b1       	in	r24, 0x0f	; 15
     a2a:	89 83       	std	Y+1, r24	; 0x01
	
	return retVal;
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	0f 90       	pop	r0
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <USART_init>:
 * \param ubrr Desired baud rate.
 ****************************************************************************/
void USART_init(unsigned int ubrr)
{
	//Set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
     a36:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
     a38:	89 b9       	out	0x09, r24	; 9
	// Enable receiver and transmitter
	UCSR0B = (1<< RXEN0) | (1<<TXEN0) | (1<<RXCIE0) | (1<<TXCIE0);
     a3a:	88 ed       	ldi	r24, 0xD8	; 216
     a3c:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 2 stop bit
	UCSR0C = (1<<URSEL0) | (3<<UCSZ00) ;
     a3e:	86 e8       	ldi	r24, 0x86	; 134
     a40:	80 bd       	out	0x20, r24	; 32
     a42:	08 95       	ret

00000a44 <USART_putchar>:
 * \param c Char to be sent.
 * \return Always 0.
 ****************************************************************************/
int USART_putchar(char c)
{
	loop_until_bit_is_set(UCSR0A, UDRE0);
     a44:	5d 9b       	sbis	0x0b, 5	; 11
     a46:	fe cf       	rjmp	.-4      	; 0xa44 <USART_putchar>
	UDR0 = c;
     a48:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	08 95       	ret

00000a50 <USART_getchar>:
 * \return Received char.
 ****************************************************************************/
int USART_getchar()
{
	char c;
	loop_until_bit_is_set(UCSR0A, RXC0);
     a50:	5f 9b       	sbis	0x0b, 7	; 11
     a52:	fe cf       	rjmp	.-4      	; 0xa50 <USART_getchar>
	c = UDR0;
     a54:	8c b1       	in	r24, 0x0c	; 12
	return c;
}
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	08 95       	ret

00000a5a <interface_init>:
	volatile char *high_scores_sram = (char *) EEPROM_HIGH_SCORES_BASE_ADDR;
	uint8_t i, j;
	
	for(i = 0; i < USERNAME_LENGTH; i++)
	{
		ext_ram[i] = 'A';
     a5a:	81 e4       	ldi	r24, 0x41	; 65
     a5c:	80 93 00 1c 	sts	0x1C00, r24
     a60:	80 93 01 1c 	sts	0x1C01, r24
     a64:	80 93 02 1c 	sts	0x1C02, r24
     a68:	80 93 03 1c 	sts	0x1C03, r24
     a6c:	80 93 04 1c 	sts	0x1C04, r24
     a70:	08 95       	ret

00000a72 <interface_username>:
* \brief Function call during the set username phase
*
* \param in joystick calibration data
****************************************************************************/
InterfaceState interface_username(JoystickPosition calibration)
{
     a72:	4f 92       	push	r4
     a74:	5f 92       	push	r5
     a76:	6f 92       	push	r6
     a78:	7f 92       	push	r7
     a7a:	8f 92       	push	r8
     a7c:	9f 92       	push	r9
     a7e:	af 92       	push	r10
     a80:	bf 92       	push	r11
     a82:	cf 92       	push	r12
     a84:	df 92       	push	r13
     a86:	ef 92       	push	r14
     a88:	ff 92       	push	r15
     a8a:	0f 93       	push	r16
     a8c:	1f 93       	push	r17
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	00 d0       	rcall	.+0      	; 0xa94 <interface_username+0x22>
     a94:	00 d0       	rcall	.+0      	; 0xa96 <interface_username+0x24>
     a96:	1f 92       	push	r1
     a98:	cd b7       	in	r28, 0x3d	; 61
     a9a:	de b7       	in	r29, 0x3e	; 62
     a9c:	5c 01       	movw	r10, r24
     a9e:	de 01       	movw	r26, r28
     aa0:	11 96       	adiw	r26, 0x01	; 1
     aa2:	e0 e0       	ldi	r30, 0x00	; 0
     aa4:	fc e1       	ldi	r31, 0x1C	; 28
	char name[USERNAME_LENGTH];
	char index = 0;
	
	for(int i=0; i<USERNAME_LENGTH;i++)
	{
		name[i] = ext_ram[i];
     aa6:	81 91       	ld	r24, Z+
     aa8:	8d 93       	st	X+, r24
	ChangeTouchpadData change_touch_data;
	TouchpadData touch_data;
	char name[USERNAME_LENGTH];
	char index = 0;
	
	for(int i=0; i<USERNAME_LENGTH;i++)
     aaa:	e5 30       	cpi	r30, 0x05	; 5
     aac:	8c e1       	ldi	r24, 0x1C	; 28
     aae:	f8 07       	cpc	r31, r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <interface_username+0x34>
	{
		name[i] = ext_ram[i];
	}
	
	position = read_joystick_position(calibration);
     ab2:	c5 01       	movw	r24, r10
     ab4:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <read_joystick_position>
	direction = read_joystick_direction(position);
     ab8:	0e 94 87 02 	call	0x50e	; 0x50e <read_joystick_direction>
     abc:	18 2f       	mov	r17, r24
	change_y = change_yaxis(direction);
     abe:	0e 94 c9 02 	call	0x592	; 0x592 <change_yaxis>
	change_x = change_xaxis(direction);
     ac2:	81 2f       	mov	r24, r17
     ac4:	0e 94 ba 02 	call	0x574	; 0x574 <change_xaxis>
	
	set_position(12, 0);
     ac8:	60 e0       	ldi	r22, 0x00	; 0
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	8c e0       	ldi	r24, 0x0C	; 12
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
	print_string("Username");
     ad4:	8c e8       	ldi	r24, 0x8C	; 140
     ad6:	91 e0       	ldi	r25, 0x01	; 1
     ad8:	0e 94 41 04 	call	0x882	; 0x882 <print_string>
	revert_colour_line(0);
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	0e 94 67 04 	call	0x8ce	; 0x8ce <revert_colour_line>
	
	set_position(4,4);
     ae2:	64 e0       	ldi	r22, 0x04	; 4
     ae4:	70 e0       	ldi	r23, 0x00	; 0
     ae6:	84 e0       	ldi	r24, 0x04	; 4
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
	JoystickDirection direction;
	JoystickDirection change_y, change_x;
	ChangeTouchpadData change_touch_data;
	TouchpadData touch_data;
	char name[USERNAME_LENGTH];
	char index = 0;
     aee:	71 2c       	mov	r7, r1
		{
			index = (index + 1) % 5;
		}
		else if (change_x == Left)
		{
			index = index == 0 ? 4 : (index - 1);
     af0:	68 94       	set
     af2:	44 24       	eor	r4, r4
     af4:	42 f8       	bld	r4, 2
		change_y = change_yaxis(direction);
		change_x = change_xaxis(direction);
		
		if (change_x == Right)
		{
			index = (index + 1) % 5;
     af6:	0f 2e       	mov	r0, r31
     af8:	f5 e0       	ldi	r31, 0x05	; 5
     afa:	8f 2e       	mov	r8, r31
     afc:	91 2c       	mov	r9, r1
     afe:	f0 2d       	mov	r31, r0
		{
			name[index] = (name[index] == 'A') ? 'Z' : (name[index] - 1);
		}
		
		set_position(10,4);
		for (int i = 0; i < 5; i++)
     b00:	51 2c       	mov	r5, r1
     b02:	61 2c       	mov	r6, r1
	
	set_position(4,4);
	
	while (1)
	{
		position = read_joystick_position(calibration);
     b04:	c5 01       	movw	r24, r10
     b06:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <read_joystick_position>
		direction = read_joystick_direction(position);
     b0a:	0e 94 87 02 	call	0x50e	; 0x50e <read_joystick_direction>
     b0e:	18 2f       	mov	r17, r24
		change_y = change_yaxis(direction);
     b10:	0e 94 c9 02 	call	0x592	; 0x592 <change_yaxis>
     b14:	08 2f       	mov	r16, r24
		change_x = change_xaxis(direction);
     b16:	81 2f       	mov	r24, r17
     b18:	0e 94 ba 02 	call	0x574	; 0x574 <change_xaxis>
		
		if (change_x == Right)
     b1c:	81 30       	cpi	r24, 0x01	; 1
     b1e:	49 f4       	brne	.+18     	; 0xb32 <interface_username+0xc0>
		{
			index = (index + 1) % 5;
     b20:	27 2d       	mov	r18, r7
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	c9 01       	movw	r24, r18
     b26:	01 96       	adiw	r24, 0x01	; 1
     b28:	b4 01       	movw	r22, r8
     b2a:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__divmodhi4>
     b2e:	78 2e       	mov	r7, r24
     b30:	07 c0       	rjmp	.+14     	; 0xb40 <interface_username+0xce>
		}
		else if (change_x == Left)
     b32:	81 11       	cpse	r24, r1
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <interface_username+0xce>
		{
			index = index == 0 ? 4 : (index - 1);
     b36:	77 20       	and	r7, r7
     b38:	11 f0       	breq	.+4      	; 0xb3e <interface_username+0xcc>
     b3a:	7a 94       	dec	r7
     b3c:	01 c0       	rjmp	.+2      	; 0xb40 <interface_username+0xce>
     b3e:	74 2c       	mov	r7, r4
		}
		
		if (change_y == Up)
     b40:	02 30       	cpi	r16, 0x02	; 2
     b42:	b1 f4       	brne	.+44     	; 0xb70 <interface_username+0xfe>
		{
			name[index] = (name[index] == 'Z') ? 'A' : (name[index] + 1);
     b44:	87 2d       	mov	r24, r7
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	e1 e0       	ldi	r30, 0x01	; 1
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	ec 0f       	add	r30, r28
     b4e:	fd 1f       	adc	r31, r29
     b50:	e8 0f       	add	r30, r24
     b52:	f9 1f       	adc	r31, r25
     b54:	20 81       	ld	r18, Z
     b56:	2a 35       	cpi	r18, 0x5A	; 90
     b58:	11 f0       	breq	.+4      	; 0xb5e <interface_username+0xec>
     b5a:	2f 5f       	subi	r18, 0xFF	; 255
     b5c:	01 c0       	rjmp	.+2      	; 0xb60 <interface_username+0xee>
     b5e:	21 e4       	ldi	r18, 0x41	; 65
     b60:	e1 e0       	ldi	r30, 0x01	; 1
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	ec 0f       	add	r30, r28
     b66:	fd 1f       	adc	r31, r29
     b68:	e8 0f       	add	r30, r24
     b6a:	f9 1f       	adc	r31, r25
     b6c:	20 83       	st	Z, r18
     b6e:	17 c0       	rjmp	.+46     	; 0xb9e <interface_username+0x12c>
		}
		else if (change_y == Down)
     b70:	03 30       	cpi	r16, 0x03	; 3
     b72:	a9 f4       	brne	.+42     	; 0xb9e <interface_username+0x12c>
		{
			name[index] = (name[index] == 'A') ? 'Z' : (name[index] - 1);
     b74:	87 2d       	mov	r24, r7
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	e1 e0       	ldi	r30, 0x01	; 1
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	ec 0f       	add	r30, r28
     b7e:	fd 1f       	adc	r31, r29
     b80:	e8 0f       	add	r30, r24
     b82:	f9 1f       	adc	r31, r25
     b84:	20 81       	ld	r18, Z
     b86:	21 34       	cpi	r18, 0x41	; 65
     b88:	11 f0       	breq	.+4      	; 0xb8e <interface_username+0x11c>
     b8a:	21 50       	subi	r18, 0x01	; 1
     b8c:	01 c0       	rjmp	.+2      	; 0xb90 <interface_username+0x11e>
     b8e:	2a e5       	ldi	r18, 0x5A	; 90
     b90:	e1 e0       	ldi	r30, 0x01	; 1
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	ec 0f       	add	r30, r28
     b96:	fd 1f       	adc	r31, r29
     b98:	e8 0f       	add	r30, r24
     b9a:	f9 1f       	adc	r31, r25
     b9c:	20 83       	st	Z, r18
		}
		
		set_position(10,4);
     b9e:	64 e0       	ldi	r22, 0x04	; 4
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	8a e0       	ldi	r24, 0x0A	; 10
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
		for (int i = 0; i < 5; i++)
     baa:	05 2d       	mov	r16, r5
     bac:	16 2d       	mov	r17, r6
		{
			if (i == index)
     bae:	e7 2c       	mov	r14, r7
     bb0:	f1 2c       	mov	r15, r1
			{
				print_inverted_char(name[i]);
     bb2:	cc 24       	eor	r12, r12
     bb4:	c3 94       	inc	r12
     bb6:	d1 2c       	mov	r13, r1
     bb8:	cc 0e       	add	r12, r28
     bba:	dd 1e       	adc	r13, r29
     bbc:	ce 0c       	add	r12, r14
     bbe:	df 1c       	adc	r13, r15
		}
		
		set_position(10,4);
		for (int i = 0; i < 5; i++)
		{
			if (i == index)
     bc0:	e0 16       	cp	r14, r16
     bc2:	f1 06       	cpc	r15, r17
     bc4:	29 f4       	brne	.+10     	; 0xbd0 <interface_username+0x15e>
			{
				print_inverted_char(name[i]);
     bc6:	f6 01       	movw	r30, r12
     bc8:	80 81       	ld	r24, Z
     bca:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <print_inverted_char>
     bce:	09 c0       	rjmp	.+18     	; 0xbe2 <interface_username+0x170>
     bd0:	e1 e0       	ldi	r30, 0x01	; 1
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	ec 0f       	add	r30, r28
     bd6:	fd 1f       	adc	r31, r29
     bd8:	e0 0f       	add	r30, r16
     bda:	f1 1f       	adc	r31, r17
			}
			else
			{
				print_char(name[i]);
     bdc:	80 81       	ld	r24, Z
     bde:	0e 94 c7 03 	call	0x78e	; 0x78e <print_char>
			}
			print_char(' ');
     be2:	80 e2       	ldi	r24, 0x20	; 32
     be4:	0e 94 c7 03 	call	0x78e	; 0x78e <print_char>
		{
			name[index] = (name[index] == 'A') ? 'Z' : (name[index] - 1);
		}
		
		set_position(10,4);
		for (int i = 0; i < 5; i++)
     be8:	0f 5f       	subi	r16, 0xFF	; 255
     bea:	1f 4f       	sbci	r17, 0xFF	; 255
     bec:	05 30       	cpi	r16, 0x05	; 5
     bee:	11 05       	cpc	r17, r1
     bf0:	39 f7       	brne	.-50     	; 0xbc0 <interface_username+0x14e>
				print_char(name[i]);
			}
			print_char(' ');
		}
		
		refresh_oled();
     bf2:	0e 94 b2 03 	call	0x764	; 0x764 <refresh_oled>
		
		touch_data = read_touchpad_data();
     bf6:	0e 94 a4 02 	call	0x548	; 0x548 <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
     bfa:	0e 94 da 02 	call	0x5b4	; 0x5b4 <change_touchpad_data>
		if (change_touch_data.rightButton)
     bfe:	88 23       	and	r24, r24
     c00:	09 f4       	brne	.+2      	; 0xc04 <interface_username+0x192>
     c02:	80 cf       	rjmp	.-256    	; 0xb04 <interface_username+0x92>
     c04:	de 01       	movw	r26, r28
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	e0 e0       	ldi	r30, 0x00	; 0
     c0a:	fc e1       	ldi	r31, 0x1C	; 28
		{
			for(int i=0; i<USERNAME_LENGTH;i++)
			{
				ext_ram[i] = name[i];
     c0c:	8d 91       	ld	r24, X+
     c0e:	81 93       	st	Z+, r24
		
		touch_data = read_touchpad_data();
		change_touch_data = change_touchpad_data(touch_data);
		if (change_touch_data.rightButton)
		{
			for(int i=0; i<USERNAME_LENGTH;i++)
     c10:	e5 30       	cpi	r30, 0x05	; 5
     c12:	8c e1       	ldi	r24, 0x1C	; 28
     c14:	f8 07       	cpc	r31, r24
     c16:	d1 f7       	brne	.-12     	; 0xc0c <interface_username+0x19a>
			}
			
			return State_NewGame;
		}
	}	
}
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	df 91       	pop	r29
     c26:	cf 91       	pop	r28
     c28:	1f 91       	pop	r17
     c2a:	0f 91       	pop	r16
     c2c:	ff 90       	pop	r15
     c2e:	ef 90       	pop	r14
     c30:	df 90       	pop	r13
     c32:	cf 90       	pop	r12
     c34:	bf 90       	pop	r11
     c36:	af 90       	pop	r10
     c38:	9f 90       	pop	r9
     c3a:	8f 90       	pop	r8
     c3c:	7f 90       	pop	r7
     c3e:	6f 90       	pop	r6
     c40:	5f 90       	pop	r5
     c42:	4f 90       	pop	r4
     c44:	08 95       	ret

00000c46 <interface_new_game>:
* \brief Function call during the set new game phase
*
* \param in joystick calibration data
****************************************************************************/
InterfaceState interface_new_game(JoystickPosition calibration)
{
     c46:	ef 92       	push	r14
     c48:	ff 92       	push	r15
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	ec 01       	movw	r28, r24
	JoystickDirection change_y, change_x;
	ChangeTouchpadData change_touch_data;
	TouchpadData touch_data;
	char scr_position = 0;
	
	position = read_joystick_position(calibration);
     c54:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <read_joystick_position>
	direction = read_joystick_direction(position);
     c58:	0e 94 87 02 	call	0x50e	; 0x50e <read_joystick_direction>
     c5c:	18 2f       	mov	r17, r24
	change_y = change_yaxis(direction);
     c5e:	0e 94 c9 02 	call	0x592	; 0x592 <change_yaxis>
	change_x = change_xaxis(direction);
     c62:	81 2f       	mov	r24, r17
     c64:	0e 94 ba 02 	call	0x574	; 0x574 <change_xaxis>
	
	set_position(13, 0);
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	8d e0       	ldi	r24, 0x0D	; 13
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
	print_string("New game");
     c74:	8c e3       	ldi	r24, 0x3C	; 60
     c76:	91 e0       	ldi	r25, 0x01	; 1
     c78:	0e 94 41 04 	call	0x882	; 0x882 <print_string>
	revert_colour_line(0);
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	0e 94 67 04 	call	0x8ce	; 0x8ce <revert_colour_line>
	set_position(3, 2);
     c82:	62 e0       	ldi	r22, 0x02	; 2
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	83 e0       	ldi	r24, 0x03	; 3
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
	print_string("Tutorial");
     c8e:	85 e4       	ldi	r24, 0x45	; 69
     c90:	91 e0       	ldi	r25, 0x01	; 1
     c92:	0e 94 41 04 	call	0x882	; 0x882 <print_string>
	set_position(3, 3);
     c96:	63 e0       	ldi	r22, 0x03	; 3
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
	print_string("Easy");
     ca2:	8e e4       	ldi	r24, 0x4E	; 78
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	0e 94 41 04 	call	0x882	; 0x882 <print_string>
	set_position(3, 4);
     caa:	64 e0       	ldi	r22, 0x04	; 4
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	83 e0       	ldi	r24, 0x03	; 3
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
	print_string("Normal");
     cb6:	83 e5       	ldi	r24, 0x53	; 83
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	0e 94 41 04 	call	0x882	; 0x882 <print_string>
	set_position(3, 5);
     cbe:	65 e0       	ldi	r22, 0x05	; 5
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	83 e0       	ldi	r24, 0x03	; 3
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
	print_string("Hard");
     cca:	8a e5       	ldi	r24, 0x5A	; 90
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	0e 94 41 04 	call	0x882	; 0x882 <print_string>
	set_position(3, 6);
     cd2:	66 e0       	ldi	r22, 0x06	; 6
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	83 e0       	ldi	r24, 0x03	; 3
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
	print_string("Insane");
     cde:	8f e5       	ldi	r24, 0x5F	; 95
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	0e 94 41 04 	call	0x882	; 0x882 <print_string>
	JoystickPosition position;
	JoystickDirection direction;
	JoystickDirection change_y, change_x;
	ChangeTouchpadData change_touch_data;
	TouchpadData touch_data;
	char scr_position = 0;
     ce6:	10 e0       	ldi	r17, 0x00	; 0
			print_char(' ');
			scr_position--;
		}
		else if (change_y == Down)
		{
			set_position(1, (scr_position % 5) + 2);
     ce8:	0d ec       	ldi	r16, 0xCD	; 205
	set_position(3, 6);
	print_string("Insane");
	
	while(1)
	{
		position = read_joystick_position(calibration);
     cea:	ce 01       	movw	r24, r28
     cec:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <read_joystick_position>
		direction = read_joystick_direction(position);
     cf0:	0e 94 87 02 	call	0x50e	; 0x50e <read_joystick_direction>
     cf4:	f8 2e       	mov	r15, r24
		change_y = change_yaxis(direction);
     cf6:	0e 94 c9 02 	call	0x592	; 0x592 <change_yaxis>
     cfa:	e8 2e       	mov	r14, r24
		change_x = change_xaxis(direction);
     cfc:	8f 2d       	mov	r24, r15
     cfe:	0e 94 ba 02 	call	0x574	; 0x574 <change_xaxis>
		
		if (change_x == Right)
     d02:	81 30       	cpi	r24, 0x01	; 1
     d04:	09 f4       	brne	.+2      	; 0xd08 <interface_new_game+0xc2>
     d06:	7a c0       	rjmp	.+244    	; 0xdfc <interface_new_game+0x1b6>
		{
			return State_Options;
		}
		else if (change_x == Left)
     d08:	88 23       	and	r24, r24
     d0a:	09 f4       	brne	.+2      	; 0xd0e <interface_new_game+0xc8>
     d0c:	79 c0       	rjmp	.+242    	; 0xe00 <interface_new_game+0x1ba>
		{
			return State_HighScores;
		}
		
		if (change_y == Up)
     d0e:	82 e0       	ldi	r24, 0x02	; 2
     d10:	e8 12       	cpse	r14, r24
     d12:	17 c0       	rjmp	.+46     	; 0xd42 <interface_new_game+0xfc>
		{
			set_position(1, (scr_position % 5) + 2);
     d14:	10 9f       	mul	r17, r16
     d16:	81 2d       	mov	r24, r1
     d18:	11 24       	eor	r1, r1
     d1a:	86 95       	lsr	r24
     d1c:	86 95       	lsr	r24
     d1e:	98 2f       	mov	r25, r24
     d20:	99 0f       	add	r25, r25
     d22:	99 0f       	add	r25, r25
     d24:	89 0f       	add	r24, r25
     d26:	61 2f       	mov	r22, r17
     d28:	68 1b       	sub	r22, r24
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	6e 5f       	subi	r22, 0xFE	; 254
     d2e:	7f 4f       	sbci	r23, 0xFF	; 255
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
			print_char(' ');
     d38:	80 e2       	ldi	r24, 0x20	; 32
     d3a:	0e 94 c7 03 	call	0x78e	; 0x78e <print_char>
			scr_position--;
     d3e:	11 50       	subi	r17, 0x01	; 1
     d40:	19 c0       	rjmp	.+50     	; 0xd74 <interface_new_game+0x12e>
		}
		else if (change_y == Down)
     d42:	83 e0       	ldi	r24, 0x03	; 3
     d44:	e8 12       	cpse	r14, r24
     d46:	16 c0       	rjmp	.+44     	; 0xd74 <interface_new_game+0x12e>
		{
			set_position(1, (scr_position % 5) + 2);
     d48:	10 9f       	mul	r17, r16
     d4a:	81 2d       	mov	r24, r1
     d4c:	11 24       	eor	r1, r1
     d4e:	86 95       	lsr	r24
     d50:	86 95       	lsr	r24
     d52:	98 2f       	mov	r25, r24
     d54:	99 0f       	add	r25, r25
     d56:	99 0f       	add	r25, r25
     d58:	89 0f       	add	r24, r25
     d5a:	61 2f       	mov	r22, r17
     d5c:	68 1b       	sub	r22, r24
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	6e 5f       	subi	r22, 0xFE	; 254
     d62:	7f 4f       	sbci	r23, 0xFF	; 255
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
			print_char(' ');
     d6c:	80 e2       	ldi	r24, 0x20	; 32
     d6e:	0e 94 c7 03 	call	0x78e	; 0x78e <print_char>
			scr_position++;
     d72:	1f 5f       	subi	r17, 0xFF	; 255
		}
		
		set_position(1, (scr_position % 5) + 2);
     d74:	10 9f       	mul	r17, r16
     d76:	81 2d       	mov	r24, r1
     d78:	11 24       	eor	r1, r1
     d7a:	86 95       	lsr	r24
     d7c:	86 95       	lsr	r24
     d7e:	98 2f       	mov	r25, r24
     d80:	99 0f       	add	r25, r25
     d82:	99 0f       	add	r25, r25
     d84:	89 0f       	add	r24, r25
     d86:	61 2f       	mov	r22, r17
     d88:	68 1b       	sub	r22, r24
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	6e 5f       	subi	r22, 0xFE	; 254
     d8e:	7f 4f       	sbci	r23, 0xFF	; 255
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
		print_char('#');
     d98:	83 e2       	ldi	r24, 0x23	; 35
     d9a:	0e 94 c7 03 	call	0x78e	; 0x78e <print_char>
		
		touch_data = read_touchpad_data();
     d9e:	0e 94 a4 02 	call	0x548	; 0x548 <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
     da2:	0e 94 da 02 	call	0x5b4	; 0x5b4 <change_touchpad_data>
		if (change_touch_data.rightButton)
     da6:	88 23       	and	r24, r24
     da8:	31 f1       	breq	.+76     	; 0xdf6 <interface_new_game+0x1b0>
		{
			switch(scr_position)
     daa:	12 30       	cpi	r17, 0x02	; 2
     dac:	a9 f0       	breq	.+42     	; 0xdd8 <interface_new_game+0x192>
     dae:	28 f4       	brcc	.+10     	; 0xdba <interface_new_game+0x174>
     db0:	11 23       	and	r17, r17
     db2:	41 f0       	breq	.+16     	; 0xdc4 <interface_new_game+0x17e>
     db4:	11 30       	cpi	r17, 0x01	; 1
     db6:	59 f0       	breq	.+22     	; 0xdce <interface_new_game+0x188>
     db8:	1e c0       	rjmp	.+60     	; 0xdf6 <interface_new_game+0x1b0>
     dba:	13 30       	cpi	r17, 0x03	; 3
     dbc:	91 f0       	breq	.+36     	; 0xde2 <interface_new_game+0x19c>
     dbe:	14 30       	cpi	r17, 0x04	; 4
     dc0:	a9 f0       	breq	.+42     	; 0xdec <interface_new_game+0x1a6>
     dc2:	19 c0       	rjmp	.+50     	; 0xdf6 <interface_new_game+0x1b0>
			{
				case 0:
					send_game_mode(Tutorial);
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
					return State_Tutorial;
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	1a c0       	rjmp	.+52     	; 0xe02 <interface_new_game+0x1bc>
				case 1:
					send_game_mode(Easy);
     dce:	82 e0       	ldi	r24, 0x02	; 2
     dd0:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
					return State_Easy;
     dd4:	83 e0       	ldi	r24, 0x03	; 3
     dd6:	15 c0       	rjmp	.+42     	; 0xe02 <interface_new_game+0x1bc>
				case 2:
					send_game_mode(Normal);
     dd8:	83 e0       	ldi	r24, 0x03	; 3
     dda:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
					return State_Normal;
     dde:	84 e0       	ldi	r24, 0x04	; 4
     de0:	10 c0       	rjmp	.+32     	; 0xe02 <interface_new_game+0x1bc>
				case 3:
					send_game_mode(Hard);
     de2:	84 e0       	ldi	r24, 0x04	; 4
     de4:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
					return State_Hard;
     de8:	85 e0       	ldi	r24, 0x05	; 5
     dea:	0b c0       	rjmp	.+22     	; 0xe02 <interface_new_game+0x1bc>
				case 4:
					send_game_mode(Insane);
     dec:	85 e0       	ldi	r24, 0x05	; 5
     dee:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
					return State_Insane;
     df2:	86 e0       	ldi	r24, 0x06	; 6
     df4:	06 c0       	rjmp	.+12     	; 0xe02 <interface_new_game+0x1bc>
			}
		}
		refresh_oled();
     df6:	0e 94 b2 03 	call	0x764	; 0x764 <refresh_oled>
	}
     dfa:	77 cf       	rjmp	.-274    	; 0xcea <interface_new_game+0xa4>
		change_y = change_yaxis(direction);
		change_x = change_xaxis(direction);
		
		if (change_x == Right)
		{
			return State_Options;
     dfc:	87 e0       	ldi	r24, 0x07	; 7
     dfe:	01 c0       	rjmp	.+2      	; 0xe02 <interface_new_game+0x1bc>
		}
		else if (change_x == Left)
		{
			return State_HighScores;
     e00:	88 e0       	ldi	r24, 0x08	; 8
					return State_Insane;
			}
		}
		refresh_oled();
	}
}
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	1f 91       	pop	r17
     e08:	0f 91       	pop	r16
     e0a:	ff 90       	pop	r15
     e0c:	ef 90       	pop	r14
     e0e:	08 95       	ret

00000e10 <interface_high_scores>:
* TODO EEPROM reading the high scores
*
* \param in joystick calibration data
****************************************************************************/
InterfaceState interface_high_scores(JoystickPosition calibration)
{
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
     e14:	ec 01       	movw	r28, r24
	JoystickDirection direction;
	JoystickDirection change_x;
	char scr_position = 0;
	volatile char *high_scores = (char *) SRAM_HIGH_SCORES_ADDR;
	
	position = read_joystick_position(calibration);
     e16:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <read_joystick_position>
	direction = read_joystick_direction(position);
     e1a:	0e 94 87 02 	call	0x50e	; 0x50e <read_joystick_direction>
	change_x = change_xaxis(direction);
     e1e:	0e 94 ba 02 	call	0x574	; 0x574 <change_xaxis>
	
	set_position(9,0);
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	89 e0       	ldi	r24, 0x09	; 9
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
	print_string("High Scores");
     e2e:	86 e6       	ldi	r24, 0x66	; 102
     e30:	91 e0       	ldi	r25, 0x01	; 1
     e32:	0e 94 41 04 	call	0x882	; 0x882 <print_string>
	revert_colour_line(0);
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	0e 94 67 04 	call	0x8ce	; 0x8ce <revert_colour_line>
		{
			print_char(high_scores[j + k]);
		}
	}*/
	
	refresh_oled();
     e3c:	0e 94 b2 03 	call	0x764	; 0x764 <refresh_oled>
	
	while(1)
	{
		position = read_joystick_position(calibration);
     e40:	ce 01       	movw	r24, r28
     e42:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <read_joystick_position>
		direction = read_joystick_direction(position);
     e46:	0e 94 87 02 	call	0x50e	; 0x50e <read_joystick_direction>
		change_x = change_xaxis(direction);
     e4a:	0e 94 ba 02 	call	0x574	; 0x574 <change_xaxis>
		
		if (change_x == Right)
     e4e:	81 30       	cpi	r24, 0x01	; 1
     e50:	19 f0       	breq	.+6      	; 0xe58 <interface_high_scores+0x48>
		{
			return State_NewGame;
		}
		else if (change_x == Left)
     e52:	81 11       	cpse	r24, r1
     e54:	f5 cf       	rjmp	.-22     	; 0xe40 <interface_high_scores+0x30>
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <interface_high_scores+0x4c>
		direction = read_joystick_direction(position);
		change_x = change_xaxis(direction);
		
		if (change_x == Right)
		{
			return State_NewGame;
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	01 c0       	rjmp	.+2      	; 0xe5e <interface_high_scores+0x4e>
		}
		else if (change_x == Left)
		{
			return State_Options;
     e5c:	87 e0       	ldi	r24, 0x07	; 7
		}
	}
		
}
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	08 95       	ret

00000e64 <interface_options>:
* \brief Function call during the options phase
*
* \param in joystick calibration data
****************************************************************************/
InterfaceState interface_options(JoystickPosition calibration)
{
     e64:	ef 92       	push	r14
     e66:	ff 92       	push	r15
     e68:	0f 93       	push	r16
     e6a:	1f 93       	push	r17
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	ec 01       	movw	r28, r24
	JoystickDirection change_y, change_x;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	char scr_position = 0;
	
	position = read_joystick_position(calibration);
     e72:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <read_joystick_position>
	direction = read_joystick_direction(position);
     e76:	0e 94 87 02 	call	0x50e	; 0x50e <read_joystick_direction>
     e7a:	18 2f       	mov	r17, r24
	change_y = change_yaxis(direction);
     e7c:	0e 94 c9 02 	call	0x592	; 0x592 <change_yaxis>
	change_x = change_xaxis(direction);
     e80:	81 2f       	mov	r24, r17
     e82:	0e 94 ba 02 	call	0x574	; 0x574 <change_xaxis>

	set_position(12,0);
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	8c e0       	ldi	r24, 0x0C	; 12
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
	print_string("Options");
     e92:	82 e7       	ldi	r24, 0x72	; 114
     e94:	91 e0       	ldi	r25, 0x01	; 1
     e96:	0e 94 41 04 	call	0x882	; 0x882 <print_string>
	revert_colour_line(0);
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	0e 94 67 04 	call	0x8ce	; 0x8ce <revert_colour_line>
	set_position(3,3);
     ea0:	63 e0       	ldi	r22, 0x03	; 3
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	83 e0       	ldi	r24, 0x03	; 3
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
	print_string("Mode");
     eac:	8a e7       	ldi	r24, 0x7A	; 122
     eae:	91 e0       	ldi	r25, 0x01	; 1
     eb0:	0e 94 41 04 	call	0x882	; 0x882 <print_string>
	set_position(3,4);
     eb4:	64 e0       	ldi	r22, 0x04	; 4
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	83 e0       	ldi	r24, 0x03	; 3
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
	print_string("Sound");
     ec0:	8f e7       	ldi	r24, 0x7F	; 127
     ec2:	91 e0       	ldi	r25, 0x01	; 1
     ec4:	0e 94 41 04 	call	0x882	; 0x882 <print_string>
	set_position(3,5);
     ec8:	65 e0       	ldi	r22, 0x05	; 5
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	83 e0       	ldi	r24, 0x03	; 3
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
	print_string("Change Username");
     ed4:	85 e8       	ldi	r24, 0x85	; 133
     ed6:	91 e0       	ldi	r25, 0x01	; 1
     ed8:	0e 94 41 04 	call	0x882	; 0x882 <print_string>
	JoystickPosition position;
	JoystickDirection direction;
	JoystickDirection change_y, change_x;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	char scr_position = 0;
     edc:	10 e0       	ldi	r17, 0x00	; 0
			print_char(' ');
			scr_position--;
		}
		else if (change_y == Down)
		{
			set_position(1, (scr_position % 3) + 3);
     ede:	0f 2e       	mov	r0, r31
     ee0:	fb ea       	ldi	r31, 0xAB	; 171
     ee2:	ef 2e       	mov	r14, r31
     ee4:	f0 2d       	mov	r31, r0
	set_position(3,5);
	print_string("Change Username");
	
	while(1)
	{
		position = read_joystick_position(calibration);
     ee6:	ce 01       	movw	r24, r28
     ee8:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <read_joystick_position>
		direction = read_joystick_direction(position);
     eec:	0e 94 87 02 	call	0x50e	; 0x50e <read_joystick_direction>
     ef0:	f8 2e       	mov	r15, r24
		change_y = change_yaxis(direction);
     ef2:	0e 94 c9 02 	call	0x592	; 0x592 <change_yaxis>
     ef6:	08 2f       	mov	r16, r24
		change_x = change_xaxis(direction);
     ef8:	8f 2d       	mov	r24, r15
     efa:	0e 94 ba 02 	call	0x574	; 0x574 <change_xaxis>
		
		if (change_x == Right)
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	09 f4       	brne	.+2      	; 0xf04 <interface_options+0xa0>
     f02:	56 c0       	rjmp	.+172    	; 0xfb0 <interface_options+0x14c>
		{
			return State_HighScores;
		}
		else if (change_x == Left)
     f04:	88 23       	and	r24, r24
     f06:	09 f4       	brne	.+2      	; 0xf0a <interface_options+0xa6>
     f08:	55 c0       	rjmp	.+170    	; 0xfb4 <interface_options+0x150>
		{
			return State_NewGame;
		}
		
		if (change_y == Up)
     f0a:	02 30       	cpi	r16, 0x02	; 2
     f0c:	a9 f4       	brne	.+42     	; 0xf38 <interface_options+0xd4>
		{
			set_position(1, (scr_position % 3) + 3);
     f0e:	1e 9d       	mul	r17, r14
     f10:	81 2d       	mov	r24, r1
     f12:	11 24       	eor	r1, r1
     f14:	86 95       	lsr	r24
     f16:	98 2f       	mov	r25, r24
     f18:	99 0f       	add	r25, r25
     f1a:	89 0f       	add	r24, r25
     f1c:	61 2f       	mov	r22, r17
     f1e:	68 1b       	sub	r22, r24
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	6d 5f       	subi	r22, 0xFD	; 253
     f24:	7f 4f       	sbci	r23, 0xFF	; 255
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
			print_char(' ');
     f2e:	80 e2       	ldi	r24, 0x20	; 32
     f30:	0e 94 c7 03 	call	0x78e	; 0x78e <print_char>
			scr_position--;
     f34:	11 50       	subi	r17, 0x01	; 1
     f36:	16 c0       	rjmp	.+44     	; 0xf64 <interface_options+0x100>
		}
		else if (change_y == Down)
     f38:	03 30       	cpi	r16, 0x03	; 3
     f3a:	a1 f4       	brne	.+40     	; 0xf64 <interface_options+0x100>
		{
			set_position(1, (scr_position % 3) + 3);
     f3c:	1e 9d       	mul	r17, r14
     f3e:	81 2d       	mov	r24, r1
     f40:	11 24       	eor	r1, r1
     f42:	86 95       	lsr	r24
     f44:	98 2f       	mov	r25, r24
     f46:	99 0f       	add	r25, r25
     f48:	89 0f       	add	r24, r25
     f4a:	61 2f       	mov	r22, r17
     f4c:	68 1b       	sub	r22, r24
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	6d 5f       	subi	r22, 0xFD	; 253
     f52:	7f 4f       	sbci	r23, 0xFF	; 255
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
			print_char(' ');
     f5c:	80 e2       	ldi	r24, 0x20	; 32
     f5e:	0e 94 c7 03 	call	0x78e	; 0x78e <print_char>
			scr_position++;
     f62:	1f 5f       	subi	r17, 0xFF	; 255
		}
		
		set_position(1, (scr_position % 3) + 3);
     f64:	1e 9d       	mul	r17, r14
     f66:	81 2d       	mov	r24, r1
     f68:	11 24       	eor	r1, r1
     f6a:	86 95       	lsr	r24
     f6c:	98 2f       	mov	r25, r24
     f6e:	99 0f       	add	r25, r25
     f70:	89 0f       	add	r24, r25
     f72:	61 2f       	mov	r22, r17
     f74:	68 1b       	sub	r22, r24
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	6d 5f       	subi	r22, 0xFD	; 253
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
		print_char('#');
     f84:	83 e2       	ldi	r24, 0x23	; 35
     f86:	0e 94 c7 03 	call	0x78e	; 0x78e <print_char>
		
		touch_data = read_touchpad_data();
     f8a:	0e 94 a4 02 	call	0x548	; 0x548 <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
     f8e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <change_touchpad_data>
		if (change_touch_data.rightButton)
     f92:	88 23       	and	r24, r24
     f94:	51 f0       	breq	.+20     	; 0xfaa <interface_options+0x146>
		{
			switch(scr_position)
     f96:	11 30       	cpi	r17, 0x01	; 1
     f98:	79 f0       	breq	.+30     	; 0xfb8 <interface_options+0x154>
     f9a:	18 f0       	brcs	.+6      	; 0xfa2 <interface_options+0x13e>
     f9c:	12 30       	cpi	r17, 0x02	; 2
     f9e:	19 f0       	breq	.+6      	; 0xfa6 <interface_options+0x142>
     fa0:	04 c0       	rjmp	.+8      	; 0xfaa <interface_options+0x146>
			{
				case 0:
					return State_Mode;
     fa2:	8a e0       	ldi	r24, 0x0A	; 10
     fa4:	0a c0       	rjmp	.+20     	; 0xfba <interface_options+0x156>
				case 1:
					return State_Sound;
				case 2:
					return State_Username;
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	08 c0       	rjmp	.+16     	; 0xfba <interface_options+0x156>
			}
		}
		refresh_oled();
     faa:	0e 94 b2 03 	call	0x764	; 0x764 <refresh_oled>
	}
     fae:	9b cf       	rjmp	.-202    	; 0xee6 <interface_options+0x82>
		change_y = change_yaxis(direction);
		change_x = change_xaxis(direction);
		
		if (change_x == Right)
		{
			return State_HighScores;
     fb0:	88 e0       	ldi	r24, 0x08	; 8
     fb2:	03 c0       	rjmp	.+6      	; 0xfba <interface_options+0x156>
		}
		else if (change_x == Left)
		{
			return State_NewGame;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	01 c0       	rjmp	.+2      	; 0xfba <interface_options+0x156>
			switch(scr_position)
			{
				case 0:
					return State_Mode;
				case 1:
					return State_Sound;
     fb8:	89 e0       	ldi	r24, 0x09	; 9
					return State_Username;
			}
		}
		refresh_oled();
	}
}
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	1f 91       	pop	r17
     fc0:	0f 91       	pop	r16
     fc2:	ff 90       	pop	r15
     fc4:	ef 90       	pop	r14
     fc6:	08 95       	ret

00000fc8 <interface_mode>:
* \brief Function call during the set mode phase
*
* \param in joystick calibration data
****************************************************************************/
InterfaceState interface_mode(JoystickPosition calibration)
{
     fc8:	bf 92       	push	r11
     fca:	cf 92       	push	r12
     fcc:	df 92       	push	r13
     fce:	ef 92       	push	r14
     fd0:	ff 92       	push	r15
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	8c 01       	movw	r16, r24
	JoystickDirection change_y;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	char scr_position = 0;
	
	position = read_joystick_position(calibration);
     fdc:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <read_joystick_position>
	direction = read_joystick_direction(position);
     fe0:	0e 94 87 02 	call	0x50e	; 0x50e <read_joystick_direction>
	change_y = change_yaxis(direction);
     fe4:	0e 94 c9 02 	call	0x592	; 0x592 <change_yaxis>

	set_position(14,0);
     fe8:	60 e0       	ldi	r22, 0x00	; 0
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	8e e0       	ldi	r24, 0x0E	; 14
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
	print_string("Mode");
     ff4:	8a e7       	ldi	r24, 0x7A	; 122
     ff6:	91 e0       	ldi	r25, 0x01	; 1
     ff8:	0e 94 41 04 	call	0x882	; 0x882 <print_string>
	revert_colour_line(0);
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	0e 94 67 04 	call	0x8ce	; 0x8ce <revert_colour_line>
	set_position(3,3);
    1002:	63 e0       	ldi	r22, 0x03	; 3
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	83 e0       	ldi	r24, 0x03	; 3
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
	print_string("Reverse");
    100e:	85 e9       	ldi	r24, 0x95	; 149
    1010:	91 e0       	ldi	r25, 0x01	; 1
    1012:	0e 94 41 04 	call	0x882	; 0x882 <print_string>
	set_position(3,5);
    1016:	65 e0       	ldi	r22, 0x05	; 5
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	83 e0       	ldi	r24, 0x03	; 3
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
	print_string("Normal");
    1022:	83 e5       	ldi	r24, 0x53	; 83
    1024:	91 e0       	ldi	r25, 0x01	; 1
    1026:	0e 94 41 04 	call	0x882	; 0x882 <print_string>
	
	
	set_position(1, (scr_position % 2) * 2 + 3);
    102a:	63 e0       	ldi	r22, 0x03	; 3
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
	print_char('#');
    1036:	83 e2       	ldi	r24, 0x23	; 35
    1038:	0e 94 c7 03 	call	0x78e	; 0x78e <print_char>
	JoystickPosition position;
	JoystickDirection direction;
	JoystickDirection change_y;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	char scr_position = 0;
    103c:	b1 2c       	mov	r11, r1
	set_position(1, (scr_position % 2) * 2 + 3);
	print_char('#');
	
	while(1)
	{
		position = read_joystick_position(calibration);
    103e:	c8 01       	movw	r24, r16
    1040:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <read_joystick_position>
		direction = read_joystick_direction(position);
    1044:	0e 94 87 02 	call	0x50e	; 0x50e <read_joystick_direction>
		change_y = change_yaxis(direction);
    1048:	0e 94 c9 02 	call	0x592	; 0x592 <change_yaxis>
		
		if (change_y == Up)
    104c:	82 30       	cpi	r24, 0x02	; 2
    104e:	91 f4       	brne	.+36     	; 0x1074 <interface_mode+0xac>
		{
			set_position(1, (scr_position % 2) * 2 + 3);
    1050:	b0 fa       	bst	r11, 0
    1052:	ee 24       	eor	r14, r14
    1054:	e0 f8       	bld	r14, 0
    1056:	f1 2c       	mov	r15, r1
    1058:	b7 01       	movw	r22, r14
    105a:	66 0f       	add	r22, r22
    105c:	77 1f       	adc	r23, r23
    105e:	6d 5f       	subi	r22, 0xFD	; 253
    1060:	7f 4f       	sbci	r23, 0xFF	; 255
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
			print_char(' ');
    106a:	80 e2       	ldi	r24, 0x20	; 32
    106c:	0e 94 c7 03 	call	0x78e	; 0x78e <print_char>
			scr_position--;
    1070:	ba 94       	dec	r11
    1072:	13 c0       	rjmp	.+38     	; 0x109a <interface_mode+0xd2>
		}
		else if (change_y == Down)
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	89 f4       	brne	.+34     	; 0x109a <interface_mode+0xd2>
		{
			set_position(1, (scr_position % 2) * 2 + 3);
    1078:	b0 fa       	bst	r11, 0
    107a:	cc 24       	eor	r12, r12
    107c:	c0 f8       	bld	r12, 0
    107e:	d1 2c       	mov	r13, r1
    1080:	b6 01       	movw	r22, r12
    1082:	66 0f       	add	r22, r22
    1084:	77 1f       	adc	r23, r23
    1086:	6d 5f       	subi	r22, 0xFD	; 253
    1088:	7f 4f       	sbci	r23, 0xFF	; 255
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
			print_char(' ');
    1092:	80 e2       	ldi	r24, 0x20	; 32
    1094:	0e 94 c7 03 	call	0x78e	; 0x78e <print_char>
			scr_position++;
    1098:	b3 94       	inc	r11
		}
		
		set_position(1, (scr_position % 2) * 2 + 3);
    109a:	8b 2d       	mov	r24, r11
    109c:	81 70       	andi	r24, 0x01	; 1
    109e:	c8 2f       	mov	r28, r24
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	d8 2f       	mov	r29, r24
    10a4:	be 01       	movw	r22, r28
    10a6:	66 0f       	add	r22, r22
    10a8:	77 1f       	adc	r23, r23
    10aa:	6d 5f       	subi	r22, 0xFD	; 253
    10ac:	7f 4f       	sbci	r23, 0xFF	; 255
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
		print_char('#');
    10b6:	83 e2       	ldi	r24, 0x23	; 35
    10b8:	0e 94 c7 03 	call	0x78e	; 0x78e <print_char>
		
		touch_data = read_touchpad_data();
    10bc:	0e 94 a4 02 	call	0x548	; 0x548 <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
    10c0:	0e 94 da 02 	call	0x5b4	; 0x5b4 <change_touchpad_data>
		if (change_touch_data.rightButton)
    10c4:	88 23       	and	r24, r24
    10c6:	51 f0       	breq	.+20     	; 0x10dc <interface_mode+0x114>
		{
			switch(scr_position)
    10c8:	b1 10       	cpse	r11, r1
    10ca:	0b c0       	rjmp	.+22     	; 0x10e2 <interface_mode+0x11a>
			{
				case 0:
					send_game_mode(Normal_settings);
    10cc:	86 e0       	ldi	r24, 0x06	; 6
    10ce:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
					printf("Normal\n");
    10d2:	83 e5       	ldi	r24, 0x53	; 83
    10d4:	91 e0       	ldi	r25, 0x01	; 1
    10d6:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <puts>
					break;
    10da:	03 c0       	rjmp	.+6      	; 0x10e2 <interface_mode+0x11a>
					//printf("Reverse\n");
					break;
			}
			return State_Options;
		}
		refresh_oled();
    10dc:	0e 94 b2 03 	call	0x764	; 0x764 <refresh_oled>
	}
    10e0:	ae cf       	rjmp	.-164    	; 0x103e <interface_mode+0x76>
}
    10e2:	87 e0       	ldi	r24, 0x07	; 7
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	ff 90       	pop	r15
    10ee:	ef 90       	pop	r14
    10f0:	df 90       	pop	r13
    10f2:	cf 90       	pop	r12
    10f4:	bf 90       	pop	r11
    10f6:	08 95       	ret

000010f8 <interface_sound>:
* \brief Function call during the set sound phase
*
* \param in joystick calibration data
****************************************************************************/
InterfaceState interface_sound(JoystickPosition calibration)
{
    10f8:	bf 92       	push	r11
    10fa:	cf 92       	push	r12
    10fc:	df 92       	push	r13
    10fe:	ef 92       	push	r14
    1100:	ff 92       	push	r15
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	8c 01       	movw	r16, r24
	JoystickDirection change_y;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	char scr_position = 0;
	
	position = read_joystick_position(calibration);
    110c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <read_joystick_position>
	direction = read_joystick_direction(position);
    1110:	0e 94 87 02 	call	0x50e	; 0x50e <read_joystick_direction>
	change_y = change_yaxis(direction);
    1114:	0e 94 c9 02 	call	0x592	; 0x592 <change_yaxis>

	set_position(14,0);
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	70 e0       	ldi	r23, 0x00	; 0
    111c:	8e e0       	ldi	r24, 0x0E	; 14
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
	print_string("Sound");
    1124:	8f e7       	ldi	r24, 0x7F	; 127
    1126:	91 e0       	ldi	r25, 0x01	; 1
    1128:	0e 94 41 04 	call	0x882	; 0x882 <print_string>
	revert_colour_line(0);
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	0e 94 67 04 	call	0x8ce	; 0x8ce <revert_colour_line>
	set_position(3,3);
    1132:	63 e0       	ldi	r22, 0x03	; 3
    1134:	70 e0       	ldi	r23, 0x00	; 0
    1136:	83 e0       	ldi	r24, 0x03	; 3
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
	print_string("On");
    113e:	8d e9       	ldi	r24, 0x9D	; 157
    1140:	91 e0       	ldi	r25, 0x01	; 1
    1142:	0e 94 41 04 	call	0x882	; 0x882 <print_string>
	set_position(3,5);
    1146:	65 e0       	ldi	r22, 0x05	; 5
    1148:	70 e0       	ldi	r23, 0x00	; 0
    114a:	83 e0       	ldi	r24, 0x03	; 3
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
	print_string("Off");
    1152:	80 ea       	ldi	r24, 0xA0	; 160
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	0e 94 41 04 	call	0x882	; 0x882 <print_string>
	JoystickPosition position;
	JoystickDirection direction;
	JoystickDirection change_y;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	char scr_position = 0;
    115a:	b1 2c       	mov	r11, r1
	set_position(3,5);
	print_string("Off");
	
	while(1)
	{
		position = read_joystick_position(calibration);
    115c:	c8 01       	movw	r24, r16
    115e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <read_joystick_position>
		direction = read_joystick_direction(position);
    1162:	0e 94 87 02 	call	0x50e	; 0x50e <read_joystick_direction>
		change_y = change_yaxis(direction);
    1166:	0e 94 c9 02 	call	0x592	; 0x592 <change_yaxis>
		
		if (change_y == Up)
    116a:	82 30       	cpi	r24, 0x02	; 2
    116c:	91 f4       	brne	.+36     	; 0x1192 <interface_sound+0x9a>
		{
			set_position(1, (scr_position % 2) * 2 + 3);
    116e:	b0 fa       	bst	r11, 0
    1170:	ee 24       	eor	r14, r14
    1172:	e0 f8       	bld	r14, 0
    1174:	f1 2c       	mov	r15, r1
    1176:	b7 01       	movw	r22, r14
    1178:	66 0f       	add	r22, r22
    117a:	77 1f       	adc	r23, r23
    117c:	6d 5f       	subi	r22, 0xFD	; 253
    117e:	7f 4f       	sbci	r23, 0xFF	; 255
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
			print_char(' ');
    1188:	80 e2       	ldi	r24, 0x20	; 32
    118a:	0e 94 c7 03 	call	0x78e	; 0x78e <print_char>
			scr_position--;
    118e:	ba 94       	dec	r11
    1190:	13 c0       	rjmp	.+38     	; 0x11b8 <interface_sound+0xc0>
		}
		else if (change_y == Down)
    1192:	83 30       	cpi	r24, 0x03	; 3
    1194:	89 f4       	brne	.+34     	; 0x11b8 <interface_sound+0xc0>
		{
			set_position(1, (scr_position % 2) * 2 + 3);
    1196:	b0 fa       	bst	r11, 0
    1198:	cc 24       	eor	r12, r12
    119a:	c0 f8       	bld	r12, 0
    119c:	d1 2c       	mov	r13, r1
    119e:	b6 01       	movw	r22, r12
    11a0:	66 0f       	add	r22, r22
    11a2:	77 1f       	adc	r23, r23
    11a4:	6d 5f       	subi	r22, 0xFD	; 253
    11a6:	7f 4f       	sbci	r23, 0xFF	; 255
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
			print_char(' ');
    11b0:	80 e2       	ldi	r24, 0x20	; 32
    11b2:	0e 94 c7 03 	call	0x78e	; 0x78e <print_char>
			scr_position++;
    11b6:	b3 94       	inc	r11
		}
		
		set_position(1, (scr_position % 2) * 2 + 3);
    11b8:	8b 2d       	mov	r24, r11
    11ba:	81 70       	andi	r24, 0x01	; 1
    11bc:	c8 2f       	mov	r28, r24
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	d8 2f       	mov	r29, r24
    11c2:	be 01       	movw	r22, r28
    11c4:	66 0f       	add	r22, r22
    11c6:	77 1f       	adc	r23, r23
    11c8:	6d 5f       	subi	r22, 0xFD	; 253
    11ca:	7f 4f       	sbci	r23, 0xFF	; 255
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
		print_char('#');
    11d4:	83 e2       	ldi	r24, 0x23	; 35
    11d6:	0e 94 c7 03 	call	0x78e	; 0x78e <print_char>
		
		touch_data = read_touchpad_data();
    11da:	0e 94 a4 02 	call	0x548	; 0x548 <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
    11de:	0e 94 da 02 	call	0x5b4	; 0x5b4 <change_touchpad_data>
		if (change_touch_data.rightButton)
    11e2:	88 23       	and	r24, r24
    11e4:	81 f0       	breq	.+32     	; 0x1206 <interface_sound+0x10e>
		{
			switch(scr_position)
    11e6:	bb 20       	and	r11, r11
    11e8:	21 f0       	breq	.+8      	; 0x11f2 <interface_sound+0xfa>
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	b8 16       	cp	r11, r24
    11ee:	31 f0       	breq	.+12     	; 0x11fc <interface_sound+0x104>
    11f0:	0d c0       	rjmp	.+26     	; 0x120c <interface_sound+0x114>
			{
				case 0:
				printf("ON\n");
    11f2:	84 ea       	ldi	r24, 0xA4	; 164
    11f4:	91 e0       	ldi	r25, 0x01	; 1
    11f6:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <puts>
				break;
    11fa:	08 c0       	rjmp	.+16     	; 0x120c <interface_sound+0x114>
				case 1:
				printf("OFF\n");
    11fc:	87 ea       	ldi	r24, 0xA7	; 167
    11fe:	91 e0       	ldi	r25, 0x01	; 1
    1200:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <puts>
				break;
    1204:	03 c0       	rjmp	.+6      	; 0x120c <interface_sound+0x114>
			}
			return State_Options;
		}
		refresh_oled();
    1206:	0e 94 b2 03 	call	0x764	; 0x764 <refresh_oled>
	}
    120a:	a8 cf       	rjmp	.-176    	; 0x115c <interface_sound+0x64>
}
    120c:	87 e0       	ldi	r24, 0x07	; 7
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	ff 90       	pop	r15
    1218:	ef 90       	pop	r14
    121a:	df 90       	pop	r13
    121c:	cf 90       	pop	r12
    121e:	bf 90       	pop	r11
    1220:	08 95       	ret

00001222 <interface_tutorial>:
****************************************************************************/
InterfaceState interface_tutorial(JoystickPosition calibration)
{
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	set_position(14,0);
    1222:	60 e0       	ldi	r22, 0x00	; 0
    1224:	70 e0       	ldi	r23, 0x00	; 0
    1226:	8e e0       	ldi	r24, 0x0E	; 14
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
	print_string("Tutorial");
    122e:	85 e4       	ldi	r24, 0x45	; 69
    1230:	91 e0       	ldi	r25, 0x01	; 1
    1232:	0e 94 41 04 	call	0x882	; 0x882 <print_string>
	revert_colour_line(0);
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	0e 94 67 04 	call	0x8ce	; 0x8ce <revert_colour_line>
	refresh_oled();
    123c:	0e 94 b2 03 	call	0x764	; 0x764 <refresh_oled>
		{
			return State_NewGame;
		}
	}*/
	return State_Playing;
}
    1240:	8b e0       	ldi	r24, 0x0B	; 11
    1242:	08 95       	ret

00001244 <interface_easy>:
****************************************************************************/
InterfaceState interface_easy(JoystickPosition calibration)
{
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	set_position(14,0);
    1244:	60 e0       	ldi	r22, 0x00	; 0
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	8e e0       	ldi	r24, 0x0E	; 14
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
	print_string("Easy");
    1250:	8e e4       	ldi	r24, 0x4E	; 78
    1252:	91 e0       	ldi	r25, 0x01	; 1
    1254:	0e 94 41 04 	call	0x882	; 0x882 <print_string>
	revert_colour_line(0);
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	0e 94 67 04 	call	0x8ce	; 0x8ce <revert_colour_line>
	refresh_oled();
    125e:	0e 94 b2 03 	call	0x764	; 0x764 <refresh_oled>
		{
			return State_NewGame;
		}
	}*/
	return State_Playing;
}
    1262:	8b e0       	ldi	r24, 0x0B	; 11
    1264:	08 95       	ret

00001266 <interface_normal>:
****************************************************************************/
InterfaceState interface_normal(JoystickPosition calibration)
{
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	set_position(12,0);
    1266:	60 e0       	ldi	r22, 0x00	; 0
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	8c e0       	ldi	r24, 0x0C	; 12
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
	print_string("Normal");
    1272:	83 e5       	ldi	r24, 0x53	; 83
    1274:	91 e0       	ldi	r25, 0x01	; 1
    1276:	0e 94 41 04 	call	0x882	; 0x882 <print_string>
	revert_colour_line(0);
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	0e 94 67 04 	call	0x8ce	; 0x8ce <revert_colour_line>
	refresh_oled();
    1280:	0e 94 b2 03 	call	0x764	; 0x764 <refresh_oled>
		{
			return State_NewGame;
		}
	}*/
	return State_Playing;
}
    1284:	8b e0       	ldi	r24, 0x0B	; 11
    1286:	08 95       	ret

00001288 <interface_hard>:
****************************************************************************/
InterfaceState interface_hard(JoystickPosition calibration)
{
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	set_position(12,0);
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	70 e0       	ldi	r23, 0x00	; 0
    128c:	8c e0       	ldi	r24, 0x0C	; 12
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
	print_string("Hard");
    1294:	8a e5       	ldi	r24, 0x5A	; 90
    1296:	91 e0       	ldi	r25, 0x01	; 1
    1298:	0e 94 41 04 	call	0x882	; 0x882 <print_string>
	revert_colour_line(0);
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	0e 94 67 04 	call	0x8ce	; 0x8ce <revert_colour_line>
	refresh_oled();
    12a2:	0e 94 b2 03 	call	0x764	; 0x764 <refresh_oled>
		{
			return State_NewGame;
		}
	}*/
	return State_Playing;
}
    12a6:	8b e0       	ldi	r24, 0x0B	; 11
    12a8:	08 95       	ret

000012aa <interface_insane>:
****************************************************************************/
InterfaceState interface_insane(JoystickPosition calibration)
{
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	set_position(12,0);
    12aa:	60 e0       	ldi	r22, 0x00	; 0
    12ac:	70 e0       	ldi	r23, 0x00	; 0
    12ae:	8c e0       	ldi	r24, 0x0C	; 12
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	0e 94 20 04 	call	0x840	; 0x840 <set_position>
	print_string("Insane");
    12b6:	8f e5       	ldi	r24, 0x5F	; 95
    12b8:	91 e0       	ldi	r25, 0x01	; 1
    12ba:	0e 94 41 04 	call	0x882	; 0x882 <print_string>
	revert_colour_line(0);
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	0e 94 67 04 	call	0x8ce	; 0x8ce <revert_colour_line>
	refresh_oled();
    12c4:	0e 94 b2 03 	call	0x764	; 0x764 <refresh_oled>
		{
			return State_NewGame;
		}
	}*/
	return State_Playing;
}
    12c8:	8b e0       	ldi	r24, 0x0B	; 11
    12ca:	08 95       	ret

000012cc <interface_state_machine>:
* \brief The main function serving the game
*
* \param in joystick calibration data
****************************************************************************/
void interface_state_machine(JoystickPosition calibration, InterfaceState special_case)
{
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	ec 01       	movw	r28, r24
	static InterfaceState state = State_Username;
	
	if(special_case == State_Endgame){
    12d2:	6c 30       	cpi	r22, 0x0C	; 12
    12d4:	19 f4       	brne	.+6      	; 0x12dc <interface_state_machine+0x10>
		state = State_Endgame;
    12d6:	8c e0       	ldi	r24, 0x0C	; 12
    12d8:	80 93 b2 01 	sts	0x01B2, r24
	}
	clear_oled();
    12dc:	0e 94 bf 03 	call	0x77e	; 0x77e <clear_oled>
	
	switch(state)
    12e0:	40 91 b2 01 	lds	r20, 0x01B2
    12e4:	50 e0       	ldi	r21, 0x00	; 0
    12e6:	4d 30       	cpi	r20, 0x0D	; 13
    12e8:	51 05       	cpc	r21, r1
    12ea:	08 f0       	brcs	.+2      	; 0x12ee <interface_state_machine+0x22>
    12ec:	59 c0       	rjmp	.+178    	; 0x13a0 <interface_state_machine+0xd4>
    12ee:	fa 01       	movw	r30, r20
    12f0:	e8 5c       	subi	r30, 0xC8	; 200
    12f2:	ff 4f       	sbci	r31, 0xFF	; 255
    12f4:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__tablejump2__>
	{
		case State_Username :
		state = interface_username(calibration);
    12f8:	ce 01       	movw	r24, r28
    12fa:	0e 94 39 05 	call	0xa72	; 0xa72 <interface_username>
    12fe:	80 93 b2 01 	sts	0x01B2, r24
		break;
    1302:	4e c0       	rjmp	.+156    	; 0x13a0 <interface_state_machine+0xd4>
		
		case State_NewGame :
		state = interface_new_game(calibration);
    1304:	ce 01       	movw	r24, r28
    1306:	0e 94 23 06 	call	0xc46	; 0xc46 <interface_new_game>
    130a:	80 93 b2 01 	sts	0x01B2, r24
		break;
    130e:	48 c0       	rjmp	.+144    	; 0x13a0 <interface_state_machine+0xd4>
		
		case State_Tutorial :
		state = interface_tutorial(calibration);
    1310:	ce 01       	movw	r24, r28
    1312:	0e 94 11 09 	call	0x1222	; 0x1222 <interface_tutorial>
    1316:	80 93 b2 01 	sts	0x01B2, r24
		send_game_mode(Tutorial);
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
		break;
    1320:	3f c0       	rjmp	.+126    	; 0x13a0 <interface_state_machine+0xd4>
		
		case State_Easy :
		state = interface_easy(calibration);
    1322:	ce 01       	movw	r24, r28
    1324:	0e 94 22 09 	call	0x1244	; 0x1244 <interface_easy>
    1328:	80 93 b2 01 	sts	0x01B2, r24
		send_game_mode(Easy);
    132c:	82 e0       	ldi	r24, 0x02	; 2
    132e:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
		break;
    1332:	36 c0       	rjmp	.+108    	; 0x13a0 <interface_state_machine+0xd4>
		
		case State_Normal :
		state = interface_normal(calibration);
    1334:	ce 01       	movw	r24, r28
    1336:	0e 94 33 09 	call	0x1266	; 0x1266 <interface_normal>
    133a:	80 93 b2 01 	sts	0x01B2, r24
		send_game_mode(Normal);
    133e:	83 e0       	ldi	r24, 0x03	; 3
    1340:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
		break;
    1344:	2d c0       	rjmp	.+90     	; 0x13a0 <interface_state_machine+0xd4>
		
		case State_Hard :
		state = interface_hard(calibration);
    1346:	ce 01       	movw	r24, r28
    1348:	0e 94 44 09 	call	0x1288	; 0x1288 <interface_hard>
    134c:	80 93 b2 01 	sts	0x01B2, r24
		send_game_mode(Hard);
    1350:	84 e0       	ldi	r24, 0x04	; 4
    1352:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
		break;
    1356:	24 c0       	rjmp	.+72     	; 0x13a0 <interface_state_machine+0xd4>
		
		case State_Insane :
		state = interface_insane(calibration);
    1358:	ce 01       	movw	r24, r28
    135a:	0e 94 55 09 	call	0x12aa	; 0x12aa <interface_insane>
    135e:	80 93 b2 01 	sts	0x01B2, r24
		send_game_mode(Insane);
    1362:	85 e0       	ldi	r24, 0x05	; 5
    1364:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
		break;
    1368:	1b c0       	rjmp	.+54     	; 0x13a0 <interface_state_machine+0xd4>
		
		case State_HighScores :
		state = interface_high_scores(calibration);
    136a:	ce 01       	movw	r24, r28
    136c:	0e 94 08 07 	call	0xe10	; 0xe10 <interface_high_scores>
    1370:	80 93 b2 01 	sts	0x01B2, r24
		break;
    1374:	15 c0       	rjmp	.+42     	; 0x13a0 <interface_state_machine+0xd4>
		
		case State_Options :
		state = interface_options(calibration);
    1376:	ce 01       	movw	r24, r28
    1378:	0e 94 32 07 	call	0xe64	; 0xe64 <interface_options>
    137c:	80 93 b2 01 	sts	0x01B2, r24
		break;
    1380:	0f c0       	rjmp	.+30     	; 0x13a0 <interface_state_machine+0xd4>
		
		case State_Sound :
		state = interface_sound(calibration);
    1382:	ce 01       	movw	r24, r28
    1384:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <interface_sound>
    1388:	80 93 b2 01 	sts	0x01B2, r24
		break;
    138c:	09 c0       	rjmp	.+18     	; 0x13a0 <interface_state_machine+0xd4>
		
		case  State_Mode :
		state = interface_mode(calibration);
    138e:	ce 01       	movw	r24, r28
    1390:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <interface_mode>
    1394:	80 93 b2 01 	sts	0x01B2, r24
		break;
    1398:	03 c0       	rjmp	.+6      	; 0x13a0 <interface_state_machine+0xd4>
		break;
		
		case State_Endgame:
		//Ending animation, probably return to highscore
		//after some time
		state = State_HighScores;
    139a:	88 e0       	ldi	r24, 0x08	; 8
    139c:	80 93 b2 01 	sts	0x01B2, r24
		break;
	}
}
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	08 95       	ret

000013a6 <__divmodhi4>:
    13a6:	97 fb       	bst	r25, 7
    13a8:	07 2e       	mov	r0, r23
    13aa:	16 f4       	brtc	.+4      	; 0x13b0 <__divmodhi4+0xa>
    13ac:	00 94       	com	r0
    13ae:	07 d0       	rcall	.+14     	; 0x13be <__divmodhi4_neg1>
    13b0:	77 fd       	sbrc	r23, 7
    13b2:	09 d0       	rcall	.+18     	; 0x13c6 <__divmodhi4_neg2>
    13b4:	0e 94 ed 09 	call	0x13da	; 0x13da <__udivmodhi4>
    13b8:	07 fc       	sbrc	r0, 7
    13ba:	05 d0       	rcall	.+10     	; 0x13c6 <__divmodhi4_neg2>
    13bc:	3e f4       	brtc	.+14     	; 0x13cc <__divmodhi4_exit>

000013be <__divmodhi4_neg1>:
    13be:	90 95       	com	r25
    13c0:	81 95       	neg	r24
    13c2:	9f 4f       	sbci	r25, 0xFF	; 255
    13c4:	08 95       	ret

000013c6 <__divmodhi4_neg2>:
    13c6:	70 95       	com	r23
    13c8:	61 95       	neg	r22
    13ca:	7f 4f       	sbci	r23, 0xFF	; 255

000013cc <__divmodhi4_exit>:
    13cc:	08 95       	ret

000013ce <__tablejump2__>:
    13ce:	ee 0f       	add	r30, r30
    13d0:	ff 1f       	adc	r31, r31

000013d2 <__tablejump__>:
    13d2:	05 90       	lpm	r0, Z+
    13d4:	f4 91       	lpm	r31, Z
    13d6:	e0 2d       	mov	r30, r0
    13d8:	09 94       	ijmp

000013da <__udivmodhi4>:
    13da:	aa 1b       	sub	r26, r26
    13dc:	bb 1b       	sub	r27, r27
    13de:	51 e1       	ldi	r21, 0x11	; 17
    13e0:	07 c0       	rjmp	.+14     	; 0x13f0 <__udivmodhi4_ep>

000013e2 <__udivmodhi4_loop>:
    13e2:	aa 1f       	adc	r26, r26
    13e4:	bb 1f       	adc	r27, r27
    13e6:	a6 17       	cp	r26, r22
    13e8:	b7 07       	cpc	r27, r23
    13ea:	10 f0       	brcs	.+4      	; 0x13f0 <__udivmodhi4_ep>
    13ec:	a6 1b       	sub	r26, r22
    13ee:	b7 0b       	sbc	r27, r23

000013f0 <__udivmodhi4_ep>:
    13f0:	88 1f       	adc	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	5a 95       	dec	r21
    13f6:	a9 f7       	brne	.-22     	; 0x13e2 <__udivmodhi4_loop>
    13f8:	80 95       	com	r24
    13fa:	90 95       	com	r25
    13fc:	bc 01       	movw	r22, r24
    13fe:	cd 01       	movw	r24, r26
    1400:	08 95       	ret

00001402 <fdevopen>:
    1402:	0f 93       	push	r16
    1404:	1f 93       	push	r17
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	ec 01       	movw	r28, r24
    140c:	8b 01       	movw	r16, r22
    140e:	00 97       	sbiw	r24, 0x00	; 0
    1410:	31 f4       	brne	.+12     	; 0x141e <fdevopen+0x1c>
    1412:	61 15       	cp	r22, r1
    1414:	71 05       	cpc	r23, r1
    1416:	19 f4       	brne	.+6      	; 0x141e <fdevopen+0x1c>
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	38 c0       	rjmp	.+112    	; 0x148e <fdevopen+0x8c>
    141e:	6e e0       	ldi	r22, 0x0E	; 14
    1420:	70 e0       	ldi	r23, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	0e 94 5f 0c 	call	0x18be	; 0x18be <calloc>
    142a:	fc 01       	movw	r30, r24
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	a1 f3       	breq	.-24     	; 0x1418 <fdevopen+0x16>
    1430:	80 e8       	ldi	r24, 0x80	; 128
    1432:	83 83       	std	Z+3, r24	; 0x03
    1434:	01 15       	cp	r16, r1
    1436:	11 05       	cpc	r17, r1
    1438:	71 f0       	breq	.+28     	; 0x1456 <fdevopen+0x54>
    143a:	13 87       	std	Z+11, r17	; 0x0b
    143c:	02 87       	std	Z+10, r16	; 0x0a
    143e:	81 e8       	ldi	r24, 0x81	; 129
    1440:	83 83       	std	Z+3, r24	; 0x03
    1442:	80 91 b3 01 	lds	r24, 0x01B3
    1446:	90 91 b4 01 	lds	r25, 0x01B4
    144a:	89 2b       	or	r24, r25
    144c:	21 f4       	brne	.+8      	; 0x1456 <fdevopen+0x54>
    144e:	f0 93 b4 01 	sts	0x01B4, r31
    1452:	e0 93 b3 01 	sts	0x01B3, r30
    1456:	20 97       	sbiw	r28, 0x00	; 0
    1458:	c9 f0       	breq	.+50     	; 0x148c <fdevopen+0x8a>
    145a:	d1 87       	std	Z+9, r29	; 0x09
    145c:	c0 87       	std	Z+8, r28	; 0x08
    145e:	83 81       	ldd	r24, Z+3	; 0x03
    1460:	82 60       	ori	r24, 0x02	; 2
    1462:	83 83       	std	Z+3, r24	; 0x03
    1464:	80 91 b5 01 	lds	r24, 0x01B5
    1468:	90 91 b6 01 	lds	r25, 0x01B6
    146c:	89 2b       	or	r24, r25
    146e:	71 f4       	brne	.+28     	; 0x148c <fdevopen+0x8a>
    1470:	f0 93 b6 01 	sts	0x01B6, r31
    1474:	e0 93 b5 01 	sts	0x01B5, r30
    1478:	80 91 b7 01 	lds	r24, 0x01B7
    147c:	90 91 b8 01 	lds	r25, 0x01B8
    1480:	89 2b       	or	r24, r25
    1482:	21 f4       	brne	.+8      	; 0x148c <fdevopen+0x8a>
    1484:	f0 93 b8 01 	sts	0x01B8, r31
    1488:	e0 93 b7 01 	sts	0x01B7, r30
    148c:	cf 01       	movw	r24, r30
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	1f 91       	pop	r17
    1494:	0f 91       	pop	r16
    1496:	08 95       	ret

00001498 <printf>:
    1498:	a0 e0       	ldi	r26, 0x00	; 0
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e2 e5       	ldi	r30, 0x52	; 82
    149e:	fa e0       	ldi	r31, 0x0A	; 10
    14a0:	0c 94 5f 0e 	jmp	0x1cbe	; 0x1cbe <__prologue_saves__+0x20>
    14a4:	fe 01       	movw	r30, r28
    14a6:	35 96       	adiw	r30, 0x05	; 5
    14a8:	61 91       	ld	r22, Z+
    14aa:	71 91       	ld	r23, Z+
    14ac:	af 01       	movw	r20, r30
    14ae:	80 91 b5 01 	lds	r24, 0x01B5
    14b2:	90 91 b6 01 	lds	r25, 0x01B6
    14b6:	0e 94 8d 0a 	call	0x151a	; 0x151a <vfprintf>
    14ba:	e2 e0       	ldi	r30, 0x02	; 2
    14bc:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <__epilogue_restores__+0x20>

000014c0 <puts>:
    14c0:	0f 93       	push	r16
    14c2:	1f 93       	push	r17
    14c4:	cf 93       	push	r28
    14c6:	df 93       	push	r29
    14c8:	e0 91 b5 01 	lds	r30, 0x01B5
    14cc:	f0 91 b6 01 	lds	r31, 0x01B6
    14d0:	23 81       	ldd	r18, Z+3	; 0x03
    14d2:	21 ff       	sbrs	r18, 1
    14d4:	1b c0       	rjmp	.+54     	; 0x150c <puts+0x4c>
    14d6:	ec 01       	movw	r28, r24
    14d8:	00 e0       	ldi	r16, 0x00	; 0
    14da:	10 e0       	ldi	r17, 0x00	; 0
    14dc:	89 91       	ld	r24, Y+
    14de:	60 91 b5 01 	lds	r22, 0x01B5
    14e2:	70 91 b6 01 	lds	r23, 0x01B6
    14e6:	db 01       	movw	r26, r22
    14e8:	18 96       	adiw	r26, 0x08	; 8
    14ea:	ed 91       	ld	r30, X+
    14ec:	fc 91       	ld	r31, X
    14ee:	19 97       	sbiw	r26, 0x09	; 9
    14f0:	88 23       	and	r24, r24
    14f2:	31 f0       	breq	.+12     	; 0x1500 <puts+0x40>
    14f4:	09 95       	icall
    14f6:	89 2b       	or	r24, r25
    14f8:	89 f3       	breq	.-30     	; 0x14dc <puts+0x1c>
    14fa:	0f ef       	ldi	r16, 0xFF	; 255
    14fc:	1f ef       	ldi	r17, 0xFF	; 255
    14fe:	ee cf       	rjmp	.-36     	; 0x14dc <puts+0x1c>
    1500:	8a e0       	ldi	r24, 0x0A	; 10
    1502:	09 95       	icall
    1504:	89 2b       	or	r24, r25
    1506:	11 f4       	brne	.+4      	; 0x150c <puts+0x4c>
    1508:	c8 01       	movw	r24, r16
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <puts+0x50>
    150c:	8f ef       	ldi	r24, 0xFF	; 255
    150e:	9f ef       	ldi	r25, 0xFF	; 255
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	08 95       	ret

0000151a <vfprintf>:
    151a:	ac e0       	ldi	r26, 0x0C	; 12
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e3 e9       	ldi	r30, 0x93	; 147
    1520:	fa e0       	ldi	r31, 0x0A	; 10
    1522:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__prologue_saves__>
    1526:	7c 01       	movw	r14, r24
    1528:	6b 01       	movw	r12, r22
    152a:	8a 01       	movw	r16, r20
    152c:	fc 01       	movw	r30, r24
    152e:	17 82       	std	Z+7, r1	; 0x07
    1530:	16 82       	std	Z+6, r1	; 0x06
    1532:	83 81       	ldd	r24, Z+3	; 0x03
    1534:	81 ff       	sbrs	r24, 1
    1536:	bd c1       	rjmp	.+890    	; 0x18b2 <vfprintf+0x398>
    1538:	ce 01       	movw	r24, r28
    153a:	01 96       	adiw	r24, 0x01	; 1
    153c:	4c 01       	movw	r8, r24
    153e:	f7 01       	movw	r30, r14
    1540:	93 81       	ldd	r25, Z+3	; 0x03
    1542:	f6 01       	movw	r30, r12
    1544:	93 fd       	sbrc	r25, 3
    1546:	85 91       	lpm	r24, Z+
    1548:	93 ff       	sbrs	r25, 3
    154a:	81 91       	ld	r24, Z+
    154c:	6f 01       	movw	r12, r30
    154e:	88 23       	and	r24, r24
    1550:	09 f4       	brne	.+2      	; 0x1554 <vfprintf+0x3a>
    1552:	ab c1       	rjmp	.+854    	; 0x18aa <vfprintf+0x390>
    1554:	85 32       	cpi	r24, 0x25	; 37
    1556:	39 f4       	brne	.+14     	; 0x1566 <vfprintf+0x4c>
    1558:	93 fd       	sbrc	r25, 3
    155a:	85 91       	lpm	r24, Z+
    155c:	93 ff       	sbrs	r25, 3
    155e:	81 91       	ld	r24, Z+
    1560:	6f 01       	movw	r12, r30
    1562:	85 32       	cpi	r24, 0x25	; 37
    1564:	29 f4       	brne	.+10     	; 0x1570 <vfprintf+0x56>
    1566:	b7 01       	movw	r22, r14
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <fputc>
    156e:	e7 cf       	rjmp	.-50     	; 0x153e <vfprintf+0x24>
    1570:	51 2c       	mov	r5, r1
    1572:	31 2c       	mov	r3, r1
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	20 32       	cpi	r18, 0x20	; 32
    1578:	a0 f4       	brcc	.+40     	; 0x15a2 <vfprintf+0x88>
    157a:	8b 32       	cpi	r24, 0x2B	; 43
    157c:	69 f0       	breq	.+26     	; 0x1598 <vfprintf+0x7e>
    157e:	30 f4       	brcc	.+12     	; 0x158c <vfprintf+0x72>
    1580:	80 32       	cpi	r24, 0x20	; 32
    1582:	59 f0       	breq	.+22     	; 0x159a <vfprintf+0x80>
    1584:	83 32       	cpi	r24, 0x23	; 35
    1586:	69 f4       	brne	.+26     	; 0x15a2 <vfprintf+0x88>
    1588:	20 61       	ori	r18, 0x10	; 16
    158a:	2c c0       	rjmp	.+88     	; 0x15e4 <vfprintf+0xca>
    158c:	8d 32       	cpi	r24, 0x2D	; 45
    158e:	39 f0       	breq	.+14     	; 0x159e <vfprintf+0x84>
    1590:	80 33       	cpi	r24, 0x30	; 48
    1592:	39 f4       	brne	.+14     	; 0x15a2 <vfprintf+0x88>
    1594:	21 60       	ori	r18, 0x01	; 1
    1596:	26 c0       	rjmp	.+76     	; 0x15e4 <vfprintf+0xca>
    1598:	22 60       	ori	r18, 0x02	; 2
    159a:	24 60       	ori	r18, 0x04	; 4
    159c:	23 c0       	rjmp	.+70     	; 0x15e4 <vfprintf+0xca>
    159e:	28 60       	ori	r18, 0x08	; 8
    15a0:	21 c0       	rjmp	.+66     	; 0x15e4 <vfprintf+0xca>
    15a2:	27 fd       	sbrc	r18, 7
    15a4:	27 c0       	rjmp	.+78     	; 0x15f4 <vfprintf+0xda>
    15a6:	30 ed       	ldi	r19, 0xD0	; 208
    15a8:	38 0f       	add	r19, r24
    15aa:	3a 30       	cpi	r19, 0x0A	; 10
    15ac:	78 f4       	brcc	.+30     	; 0x15cc <vfprintf+0xb2>
    15ae:	26 ff       	sbrs	r18, 6
    15b0:	06 c0       	rjmp	.+12     	; 0x15be <vfprintf+0xa4>
    15b2:	fa e0       	ldi	r31, 0x0A	; 10
    15b4:	5f 9e       	mul	r5, r31
    15b6:	30 0d       	add	r19, r0
    15b8:	11 24       	eor	r1, r1
    15ba:	53 2e       	mov	r5, r19
    15bc:	13 c0       	rjmp	.+38     	; 0x15e4 <vfprintf+0xca>
    15be:	8a e0       	ldi	r24, 0x0A	; 10
    15c0:	38 9e       	mul	r3, r24
    15c2:	30 0d       	add	r19, r0
    15c4:	11 24       	eor	r1, r1
    15c6:	33 2e       	mov	r3, r19
    15c8:	20 62       	ori	r18, 0x20	; 32
    15ca:	0c c0       	rjmp	.+24     	; 0x15e4 <vfprintf+0xca>
    15cc:	8e 32       	cpi	r24, 0x2E	; 46
    15ce:	21 f4       	brne	.+8      	; 0x15d8 <vfprintf+0xbe>
    15d0:	26 fd       	sbrc	r18, 6
    15d2:	6b c1       	rjmp	.+726    	; 0x18aa <vfprintf+0x390>
    15d4:	20 64       	ori	r18, 0x40	; 64
    15d6:	06 c0       	rjmp	.+12     	; 0x15e4 <vfprintf+0xca>
    15d8:	8c 36       	cpi	r24, 0x6C	; 108
    15da:	11 f4       	brne	.+4      	; 0x15e0 <vfprintf+0xc6>
    15dc:	20 68       	ori	r18, 0x80	; 128
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <vfprintf+0xca>
    15e0:	88 36       	cpi	r24, 0x68	; 104
    15e2:	41 f4       	brne	.+16     	; 0x15f4 <vfprintf+0xda>
    15e4:	f6 01       	movw	r30, r12
    15e6:	93 fd       	sbrc	r25, 3
    15e8:	85 91       	lpm	r24, Z+
    15ea:	93 ff       	sbrs	r25, 3
    15ec:	81 91       	ld	r24, Z+
    15ee:	6f 01       	movw	r12, r30
    15f0:	81 11       	cpse	r24, r1
    15f2:	c1 cf       	rjmp	.-126    	; 0x1576 <vfprintf+0x5c>
    15f4:	98 2f       	mov	r25, r24
    15f6:	9f 7d       	andi	r25, 0xDF	; 223
    15f8:	95 54       	subi	r25, 0x45	; 69
    15fa:	93 30       	cpi	r25, 0x03	; 3
    15fc:	28 f4       	brcc	.+10     	; 0x1608 <vfprintf+0xee>
    15fe:	0c 5f       	subi	r16, 0xFC	; 252
    1600:	1f 4f       	sbci	r17, 0xFF	; 255
    1602:	ff e3       	ldi	r31, 0x3F	; 63
    1604:	f9 83       	std	Y+1, r31	; 0x01
    1606:	0d c0       	rjmp	.+26     	; 0x1622 <vfprintf+0x108>
    1608:	83 36       	cpi	r24, 0x63	; 99
    160a:	31 f0       	breq	.+12     	; 0x1618 <vfprintf+0xfe>
    160c:	83 37       	cpi	r24, 0x73	; 115
    160e:	71 f0       	breq	.+28     	; 0x162c <vfprintf+0x112>
    1610:	83 35       	cpi	r24, 0x53	; 83
    1612:	09 f0       	breq	.+2      	; 0x1616 <vfprintf+0xfc>
    1614:	5b c0       	rjmp	.+182    	; 0x16cc <vfprintf+0x1b2>
    1616:	22 c0       	rjmp	.+68     	; 0x165c <vfprintf+0x142>
    1618:	f8 01       	movw	r30, r16
    161a:	80 81       	ld	r24, Z
    161c:	89 83       	std	Y+1, r24	; 0x01
    161e:	0e 5f       	subi	r16, 0xFE	; 254
    1620:	1f 4f       	sbci	r17, 0xFF	; 255
    1622:	44 24       	eor	r4, r4
    1624:	43 94       	inc	r4
    1626:	51 2c       	mov	r5, r1
    1628:	54 01       	movw	r10, r8
    162a:	15 c0       	rjmp	.+42     	; 0x1656 <vfprintf+0x13c>
    162c:	38 01       	movw	r6, r16
    162e:	f2 e0       	ldi	r31, 0x02	; 2
    1630:	6f 0e       	add	r6, r31
    1632:	71 1c       	adc	r7, r1
    1634:	f8 01       	movw	r30, r16
    1636:	a0 80       	ld	r10, Z
    1638:	b1 80       	ldd	r11, Z+1	; 0x01
    163a:	26 ff       	sbrs	r18, 6
    163c:	03 c0       	rjmp	.+6      	; 0x1644 <vfprintf+0x12a>
    163e:	65 2d       	mov	r22, r5
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <vfprintf+0x12e>
    1644:	6f ef       	ldi	r22, 0xFF	; 255
    1646:	7f ef       	ldi	r23, 0xFF	; 255
    1648:	c5 01       	movw	r24, r10
    164a:	2c 87       	std	Y+12, r18	; 0x0c
    164c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <strnlen>
    1650:	2c 01       	movw	r4, r24
    1652:	83 01       	movw	r16, r6
    1654:	2c 85       	ldd	r18, Y+12	; 0x0c
    1656:	2f 77       	andi	r18, 0x7F	; 127
    1658:	22 2e       	mov	r2, r18
    165a:	17 c0       	rjmp	.+46     	; 0x168a <vfprintf+0x170>
    165c:	38 01       	movw	r6, r16
    165e:	f2 e0       	ldi	r31, 0x02	; 2
    1660:	6f 0e       	add	r6, r31
    1662:	71 1c       	adc	r7, r1
    1664:	f8 01       	movw	r30, r16
    1666:	a0 80       	ld	r10, Z
    1668:	b1 80       	ldd	r11, Z+1	; 0x01
    166a:	26 ff       	sbrs	r18, 6
    166c:	03 c0       	rjmp	.+6      	; 0x1674 <vfprintf+0x15a>
    166e:	65 2d       	mov	r22, r5
    1670:	70 e0       	ldi	r23, 0x00	; 0
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <vfprintf+0x15e>
    1674:	6f ef       	ldi	r22, 0xFF	; 255
    1676:	7f ef       	ldi	r23, 0xFF	; 255
    1678:	c5 01       	movw	r24, r10
    167a:	2c 87       	std	Y+12, r18	; 0x0c
    167c:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <strnlen_P>
    1680:	2c 01       	movw	r4, r24
    1682:	2c 85       	ldd	r18, Y+12	; 0x0c
    1684:	20 68       	ori	r18, 0x80	; 128
    1686:	22 2e       	mov	r2, r18
    1688:	83 01       	movw	r16, r6
    168a:	23 fc       	sbrc	r2, 3
    168c:	1b c0       	rjmp	.+54     	; 0x16c4 <vfprintf+0x1aa>
    168e:	83 2d       	mov	r24, r3
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	48 16       	cp	r4, r24
    1694:	59 06       	cpc	r5, r25
    1696:	b0 f4       	brcc	.+44     	; 0x16c4 <vfprintf+0x1aa>
    1698:	b7 01       	movw	r22, r14
    169a:	80 e2       	ldi	r24, 0x20	; 32
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <fputc>
    16a2:	3a 94       	dec	r3
    16a4:	f4 cf       	rjmp	.-24     	; 0x168e <vfprintf+0x174>
    16a6:	f5 01       	movw	r30, r10
    16a8:	27 fc       	sbrc	r2, 7
    16aa:	85 91       	lpm	r24, Z+
    16ac:	27 fe       	sbrs	r2, 7
    16ae:	81 91       	ld	r24, Z+
    16b0:	5f 01       	movw	r10, r30
    16b2:	b7 01       	movw	r22, r14
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <fputc>
    16ba:	31 10       	cpse	r3, r1
    16bc:	3a 94       	dec	r3
    16be:	f1 e0       	ldi	r31, 0x01	; 1
    16c0:	4f 1a       	sub	r4, r31
    16c2:	51 08       	sbc	r5, r1
    16c4:	41 14       	cp	r4, r1
    16c6:	51 04       	cpc	r5, r1
    16c8:	71 f7       	brne	.-36     	; 0x16a6 <vfprintf+0x18c>
    16ca:	e5 c0       	rjmp	.+458    	; 0x1896 <vfprintf+0x37c>
    16cc:	84 36       	cpi	r24, 0x64	; 100
    16ce:	11 f0       	breq	.+4      	; 0x16d4 <vfprintf+0x1ba>
    16d0:	89 36       	cpi	r24, 0x69	; 105
    16d2:	39 f5       	brne	.+78     	; 0x1722 <vfprintf+0x208>
    16d4:	f8 01       	movw	r30, r16
    16d6:	27 ff       	sbrs	r18, 7
    16d8:	07 c0       	rjmp	.+14     	; 0x16e8 <vfprintf+0x1ce>
    16da:	60 81       	ld	r22, Z
    16dc:	71 81       	ldd	r23, Z+1	; 0x01
    16de:	82 81       	ldd	r24, Z+2	; 0x02
    16e0:	93 81       	ldd	r25, Z+3	; 0x03
    16e2:	0c 5f       	subi	r16, 0xFC	; 252
    16e4:	1f 4f       	sbci	r17, 0xFF	; 255
    16e6:	08 c0       	rjmp	.+16     	; 0x16f8 <vfprintf+0x1de>
    16e8:	60 81       	ld	r22, Z
    16ea:	71 81       	ldd	r23, Z+1	; 0x01
    16ec:	88 27       	eor	r24, r24
    16ee:	77 fd       	sbrc	r23, 7
    16f0:	80 95       	com	r24
    16f2:	98 2f       	mov	r25, r24
    16f4:	0e 5f       	subi	r16, 0xFE	; 254
    16f6:	1f 4f       	sbci	r17, 0xFF	; 255
    16f8:	2f 76       	andi	r18, 0x6F	; 111
    16fa:	b2 2e       	mov	r11, r18
    16fc:	97 ff       	sbrs	r25, 7
    16fe:	09 c0       	rjmp	.+18     	; 0x1712 <vfprintf+0x1f8>
    1700:	90 95       	com	r25
    1702:	80 95       	com	r24
    1704:	70 95       	com	r23
    1706:	61 95       	neg	r22
    1708:	7f 4f       	sbci	r23, 0xFF	; 255
    170a:	8f 4f       	sbci	r24, 0xFF	; 255
    170c:	9f 4f       	sbci	r25, 0xFF	; 255
    170e:	20 68       	ori	r18, 0x80	; 128
    1710:	b2 2e       	mov	r11, r18
    1712:	2a e0       	ldi	r18, 0x0A	; 10
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	a4 01       	movw	r20, r8
    1718:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__ultoa_invert>
    171c:	a8 2e       	mov	r10, r24
    171e:	a8 18       	sub	r10, r8
    1720:	44 c0       	rjmp	.+136    	; 0x17aa <vfprintf+0x290>
    1722:	85 37       	cpi	r24, 0x75	; 117
    1724:	29 f4       	brne	.+10     	; 0x1730 <vfprintf+0x216>
    1726:	2f 7e       	andi	r18, 0xEF	; 239
    1728:	b2 2e       	mov	r11, r18
    172a:	2a e0       	ldi	r18, 0x0A	; 10
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	25 c0       	rjmp	.+74     	; 0x177a <vfprintf+0x260>
    1730:	f2 2f       	mov	r31, r18
    1732:	f9 7f       	andi	r31, 0xF9	; 249
    1734:	bf 2e       	mov	r11, r31
    1736:	8f 36       	cpi	r24, 0x6F	; 111
    1738:	c1 f0       	breq	.+48     	; 0x176a <vfprintf+0x250>
    173a:	18 f4       	brcc	.+6      	; 0x1742 <vfprintf+0x228>
    173c:	88 35       	cpi	r24, 0x58	; 88
    173e:	79 f0       	breq	.+30     	; 0x175e <vfprintf+0x244>
    1740:	b4 c0       	rjmp	.+360    	; 0x18aa <vfprintf+0x390>
    1742:	80 37       	cpi	r24, 0x70	; 112
    1744:	19 f0       	breq	.+6      	; 0x174c <vfprintf+0x232>
    1746:	88 37       	cpi	r24, 0x78	; 120
    1748:	21 f0       	breq	.+8      	; 0x1752 <vfprintf+0x238>
    174a:	af c0       	rjmp	.+350    	; 0x18aa <vfprintf+0x390>
    174c:	2f 2f       	mov	r18, r31
    174e:	20 61       	ori	r18, 0x10	; 16
    1750:	b2 2e       	mov	r11, r18
    1752:	b4 fe       	sbrs	r11, 4
    1754:	0d c0       	rjmp	.+26     	; 0x1770 <vfprintf+0x256>
    1756:	8b 2d       	mov	r24, r11
    1758:	84 60       	ori	r24, 0x04	; 4
    175a:	b8 2e       	mov	r11, r24
    175c:	09 c0       	rjmp	.+18     	; 0x1770 <vfprintf+0x256>
    175e:	24 ff       	sbrs	r18, 4
    1760:	0a c0       	rjmp	.+20     	; 0x1776 <vfprintf+0x25c>
    1762:	9f 2f       	mov	r25, r31
    1764:	96 60       	ori	r25, 0x06	; 6
    1766:	b9 2e       	mov	r11, r25
    1768:	06 c0       	rjmp	.+12     	; 0x1776 <vfprintf+0x25c>
    176a:	28 e0       	ldi	r18, 0x08	; 8
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	05 c0       	rjmp	.+10     	; 0x177a <vfprintf+0x260>
    1770:	20 e1       	ldi	r18, 0x10	; 16
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	02 c0       	rjmp	.+4      	; 0x177a <vfprintf+0x260>
    1776:	20 e1       	ldi	r18, 0x10	; 16
    1778:	32 e0       	ldi	r19, 0x02	; 2
    177a:	f8 01       	movw	r30, r16
    177c:	b7 fe       	sbrs	r11, 7
    177e:	07 c0       	rjmp	.+14     	; 0x178e <vfprintf+0x274>
    1780:	60 81       	ld	r22, Z
    1782:	71 81       	ldd	r23, Z+1	; 0x01
    1784:	82 81       	ldd	r24, Z+2	; 0x02
    1786:	93 81       	ldd	r25, Z+3	; 0x03
    1788:	0c 5f       	subi	r16, 0xFC	; 252
    178a:	1f 4f       	sbci	r17, 0xFF	; 255
    178c:	06 c0       	rjmp	.+12     	; 0x179a <vfprintf+0x280>
    178e:	60 81       	ld	r22, Z
    1790:	71 81       	ldd	r23, Z+1	; 0x01
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	0e 5f       	subi	r16, 0xFE	; 254
    1798:	1f 4f       	sbci	r17, 0xFF	; 255
    179a:	a4 01       	movw	r20, r8
    179c:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__ultoa_invert>
    17a0:	a8 2e       	mov	r10, r24
    17a2:	a8 18       	sub	r10, r8
    17a4:	fb 2d       	mov	r31, r11
    17a6:	ff 77       	andi	r31, 0x7F	; 127
    17a8:	bf 2e       	mov	r11, r31
    17aa:	b6 fe       	sbrs	r11, 6
    17ac:	0b c0       	rjmp	.+22     	; 0x17c4 <vfprintf+0x2aa>
    17ae:	2b 2d       	mov	r18, r11
    17b0:	2e 7f       	andi	r18, 0xFE	; 254
    17b2:	a5 14       	cp	r10, r5
    17b4:	50 f4       	brcc	.+20     	; 0x17ca <vfprintf+0x2b0>
    17b6:	b4 fe       	sbrs	r11, 4
    17b8:	0a c0       	rjmp	.+20     	; 0x17ce <vfprintf+0x2b4>
    17ba:	b2 fc       	sbrc	r11, 2
    17bc:	08 c0       	rjmp	.+16     	; 0x17ce <vfprintf+0x2b4>
    17be:	2b 2d       	mov	r18, r11
    17c0:	2e 7e       	andi	r18, 0xEE	; 238
    17c2:	05 c0       	rjmp	.+10     	; 0x17ce <vfprintf+0x2b4>
    17c4:	7a 2c       	mov	r7, r10
    17c6:	2b 2d       	mov	r18, r11
    17c8:	03 c0       	rjmp	.+6      	; 0x17d0 <vfprintf+0x2b6>
    17ca:	7a 2c       	mov	r7, r10
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <vfprintf+0x2b6>
    17ce:	75 2c       	mov	r7, r5
    17d0:	24 ff       	sbrs	r18, 4
    17d2:	0d c0       	rjmp	.+26     	; 0x17ee <vfprintf+0x2d4>
    17d4:	fe 01       	movw	r30, r28
    17d6:	ea 0d       	add	r30, r10
    17d8:	f1 1d       	adc	r31, r1
    17da:	80 81       	ld	r24, Z
    17dc:	80 33       	cpi	r24, 0x30	; 48
    17de:	11 f4       	brne	.+4      	; 0x17e4 <vfprintf+0x2ca>
    17e0:	29 7e       	andi	r18, 0xE9	; 233
    17e2:	09 c0       	rjmp	.+18     	; 0x17f6 <vfprintf+0x2dc>
    17e4:	22 ff       	sbrs	r18, 2
    17e6:	06 c0       	rjmp	.+12     	; 0x17f4 <vfprintf+0x2da>
    17e8:	73 94       	inc	r7
    17ea:	73 94       	inc	r7
    17ec:	04 c0       	rjmp	.+8      	; 0x17f6 <vfprintf+0x2dc>
    17ee:	82 2f       	mov	r24, r18
    17f0:	86 78       	andi	r24, 0x86	; 134
    17f2:	09 f0       	breq	.+2      	; 0x17f6 <vfprintf+0x2dc>
    17f4:	73 94       	inc	r7
    17f6:	23 fd       	sbrc	r18, 3
    17f8:	13 c0       	rjmp	.+38     	; 0x1820 <vfprintf+0x306>
    17fa:	20 ff       	sbrs	r18, 0
    17fc:	06 c0       	rjmp	.+12     	; 0x180a <vfprintf+0x2f0>
    17fe:	5a 2c       	mov	r5, r10
    1800:	73 14       	cp	r7, r3
    1802:	18 f4       	brcc	.+6      	; 0x180a <vfprintf+0x2f0>
    1804:	53 0c       	add	r5, r3
    1806:	57 18       	sub	r5, r7
    1808:	73 2c       	mov	r7, r3
    180a:	73 14       	cp	r7, r3
    180c:	68 f4       	brcc	.+26     	; 0x1828 <vfprintf+0x30e>
    180e:	b7 01       	movw	r22, r14
    1810:	80 e2       	ldi	r24, 0x20	; 32
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	2c 87       	std	Y+12, r18	; 0x0c
    1816:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <fputc>
    181a:	73 94       	inc	r7
    181c:	2c 85       	ldd	r18, Y+12	; 0x0c
    181e:	f5 cf       	rjmp	.-22     	; 0x180a <vfprintf+0x2f0>
    1820:	73 14       	cp	r7, r3
    1822:	10 f4       	brcc	.+4      	; 0x1828 <vfprintf+0x30e>
    1824:	37 18       	sub	r3, r7
    1826:	01 c0       	rjmp	.+2      	; 0x182a <vfprintf+0x310>
    1828:	31 2c       	mov	r3, r1
    182a:	24 ff       	sbrs	r18, 4
    182c:	12 c0       	rjmp	.+36     	; 0x1852 <vfprintf+0x338>
    182e:	b7 01       	movw	r22, r14
    1830:	80 e3       	ldi	r24, 0x30	; 48
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	2c 87       	std	Y+12, r18	; 0x0c
    1836:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <fputc>
    183a:	2c 85       	ldd	r18, Y+12	; 0x0c
    183c:	22 ff       	sbrs	r18, 2
    183e:	17 c0       	rjmp	.+46     	; 0x186e <vfprintf+0x354>
    1840:	21 ff       	sbrs	r18, 1
    1842:	03 c0       	rjmp	.+6      	; 0x184a <vfprintf+0x330>
    1844:	88 e5       	ldi	r24, 0x58	; 88
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	02 c0       	rjmp	.+4      	; 0x184e <vfprintf+0x334>
    184a:	88 e7       	ldi	r24, 0x78	; 120
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	b7 01       	movw	r22, r14
    1850:	0c c0       	rjmp	.+24     	; 0x186a <vfprintf+0x350>
    1852:	82 2f       	mov	r24, r18
    1854:	86 78       	andi	r24, 0x86	; 134
    1856:	59 f0       	breq	.+22     	; 0x186e <vfprintf+0x354>
    1858:	21 fd       	sbrc	r18, 1
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <vfprintf+0x346>
    185c:	80 e2       	ldi	r24, 0x20	; 32
    185e:	01 c0       	rjmp	.+2      	; 0x1862 <vfprintf+0x348>
    1860:	8b e2       	ldi	r24, 0x2B	; 43
    1862:	27 fd       	sbrc	r18, 7
    1864:	8d e2       	ldi	r24, 0x2D	; 45
    1866:	b7 01       	movw	r22, r14
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <fputc>
    186e:	a5 14       	cp	r10, r5
    1870:	38 f4       	brcc	.+14     	; 0x1880 <vfprintf+0x366>
    1872:	b7 01       	movw	r22, r14
    1874:	80 e3       	ldi	r24, 0x30	; 48
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <fputc>
    187c:	5a 94       	dec	r5
    187e:	f7 cf       	rjmp	.-18     	; 0x186e <vfprintf+0x354>
    1880:	aa 94       	dec	r10
    1882:	f4 01       	movw	r30, r8
    1884:	ea 0d       	add	r30, r10
    1886:	f1 1d       	adc	r31, r1
    1888:	80 81       	ld	r24, Z
    188a:	b7 01       	movw	r22, r14
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <fputc>
    1892:	a1 10       	cpse	r10, r1
    1894:	f5 cf       	rjmp	.-22     	; 0x1880 <vfprintf+0x366>
    1896:	33 20       	and	r3, r3
    1898:	09 f4       	brne	.+2      	; 0x189c <vfprintf+0x382>
    189a:	51 ce       	rjmp	.-862    	; 0x153e <vfprintf+0x24>
    189c:	b7 01       	movw	r22, r14
    189e:	80 e2       	ldi	r24, 0x20	; 32
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <fputc>
    18a6:	3a 94       	dec	r3
    18a8:	f6 cf       	rjmp	.-20     	; 0x1896 <vfprintf+0x37c>
    18aa:	f7 01       	movw	r30, r14
    18ac:	86 81       	ldd	r24, Z+6	; 0x06
    18ae:	97 81       	ldd	r25, Z+7	; 0x07
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <vfprintf+0x39c>
    18b2:	8f ef       	ldi	r24, 0xFF	; 255
    18b4:	9f ef       	ldi	r25, 0xFF	; 255
    18b6:	2c 96       	adiw	r28, 0x0c	; 12
    18b8:	e2 e1       	ldi	r30, 0x12	; 18
    18ba:	0c 94 6b 0e 	jmp	0x1cd6	; 0x1cd6 <__epilogue_restores__>

000018be <calloc>:
    18be:	0f 93       	push	r16
    18c0:	1f 93       	push	r17
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	86 9f       	mul	r24, r22
    18c8:	80 01       	movw	r16, r0
    18ca:	87 9f       	mul	r24, r23
    18cc:	10 0d       	add	r17, r0
    18ce:	96 9f       	mul	r25, r22
    18d0:	10 0d       	add	r17, r0
    18d2:	11 24       	eor	r1, r1
    18d4:	c8 01       	movw	r24, r16
    18d6:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <malloc>
    18da:	ec 01       	movw	r28, r24
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	29 f0       	breq	.+10     	; 0x18ea <calloc+0x2c>
    18e0:	a8 01       	movw	r20, r16
    18e2:	60 e0       	ldi	r22, 0x00	; 0
    18e4:	70 e0       	ldi	r23, 0x00	; 0
    18e6:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <memset>
    18ea:	ce 01       	movw	r24, r28
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	1f 91       	pop	r17
    18f2:	0f 91       	pop	r16
    18f4:	08 95       	ret

000018f6 <malloc>:
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	82 30       	cpi	r24, 0x02	; 2
    18fc:	91 05       	cpc	r25, r1
    18fe:	10 f4       	brcc	.+4      	; 0x1904 <malloc+0xe>
    1900:	82 e0       	ldi	r24, 0x02	; 2
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	e0 91 bb 01 	lds	r30, 0x01BB
    1908:	f0 91 bc 01 	lds	r31, 0x01BC
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	a0 e0       	ldi	r26, 0x00	; 0
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	30 97       	sbiw	r30, 0x00	; 0
    1916:	39 f1       	breq	.+78     	; 0x1966 <malloc+0x70>
    1918:	40 81       	ld	r20, Z
    191a:	51 81       	ldd	r21, Z+1	; 0x01
    191c:	48 17       	cp	r20, r24
    191e:	59 07       	cpc	r21, r25
    1920:	b8 f0       	brcs	.+46     	; 0x1950 <malloc+0x5a>
    1922:	48 17       	cp	r20, r24
    1924:	59 07       	cpc	r21, r25
    1926:	71 f4       	brne	.+28     	; 0x1944 <malloc+0x4e>
    1928:	82 81       	ldd	r24, Z+2	; 0x02
    192a:	93 81       	ldd	r25, Z+3	; 0x03
    192c:	10 97       	sbiw	r26, 0x00	; 0
    192e:	29 f0       	breq	.+10     	; 0x193a <malloc+0x44>
    1930:	13 96       	adiw	r26, 0x03	; 3
    1932:	9c 93       	st	X, r25
    1934:	8e 93       	st	-X, r24
    1936:	12 97       	sbiw	r26, 0x02	; 2
    1938:	2c c0       	rjmp	.+88     	; 0x1992 <malloc+0x9c>
    193a:	90 93 bc 01 	sts	0x01BC, r25
    193e:	80 93 bb 01 	sts	0x01BB, r24
    1942:	27 c0       	rjmp	.+78     	; 0x1992 <malloc+0x9c>
    1944:	21 15       	cp	r18, r1
    1946:	31 05       	cpc	r19, r1
    1948:	31 f0       	breq	.+12     	; 0x1956 <malloc+0x60>
    194a:	42 17       	cp	r20, r18
    194c:	53 07       	cpc	r21, r19
    194e:	18 f0       	brcs	.+6      	; 0x1956 <malloc+0x60>
    1950:	a9 01       	movw	r20, r18
    1952:	db 01       	movw	r26, r22
    1954:	01 c0       	rjmp	.+2      	; 0x1958 <malloc+0x62>
    1956:	ef 01       	movw	r28, r30
    1958:	9a 01       	movw	r18, r20
    195a:	bd 01       	movw	r22, r26
    195c:	df 01       	movw	r26, r30
    195e:	02 80       	ldd	r0, Z+2	; 0x02
    1960:	f3 81       	ldd	r31, Z+3	; 0x03
    1962:	e0 2d       	mov	r30, r0
    1964:	d7 cf       	rjmp	.-82     	; 0x1914 <malloc+0x1e>
    1966:	21 15       	cp	r18, r1
    1968:	31 05       	cpc	r19, r1
    196a:	f9 f0       	breq	.+62     	; 0x19aa <malloc+0xb4>
    196c:	28 1b       	sub	r18, r24
    196e:	39 0b       	sbc	r19, r25
    1970:	24 30       	cpi	r18, 0x04	; 4
    1972:	31 05       	cpc	r19, r1
    1974:	80 f4       	brcc	.+32     	; 0x1996 <malloc+0xa0>
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	9b 81       	ldd	r25, Y+3	; 0x03
    197a:	61 15       	cp	r22, r1
    197c:	71 05       	cpc	r23, r1
    197e:	21 f0       	breq	.+8      	; 0x1988 <malloc+0x92>
    1980:	fb 01       	movw	r30, r22
    1982:	93 83       	std	Z+3, r25	; 0x03
    1984:	82 83       	std	Z+2, r24	; 0x02
    1986:	04 c0       	rjmp	.+8      	; 0x1990 <malloc+0x9a>
    1988:	90 93 bc 01 	sts	0x01BC, r25
    198c:	80 93 bb 01 	sts	0x01BB, r24
    1990:	fe 01       	movw	r30, r28
    1992:	32 96       	adiw	r30, 0x02	; 2
    1994:	44 c0       	rjmp	.+136    	; 0x1a1e <malloc+0x128>
    1996:	fe 01       	movw	r30, r28
    1998:	e2 0f       	add	r30, r18
    199a:	f3 1f       	adc	r31, r19
    199c:	81 93       	st	Z+, r24
    199e:	91 93       	st	Z+, r25
    19a0:	22 50       	subi	r18, 0x02	; 2
    19a2:	31 09       	sbc	r19, r1
    19a4:	39 83       	std	Y+1, r19	; 0x01
    19a6:	28 83       	st	Y, r18
    19a8:	3a c0       	rjmp	.+116    	; 0x1a1e <malloc+0x128>
    19aa:	20 91 b9 01 	lds	r18, 0x01B9
    19ae:	30 91 ba 01 	lds	r19, 0x01BA
    19b2:	23 2b       	or	r18, r19
    19b4:	41 f4       	brne	.+16     	; 0x19c6 <malloc+0xd0>
    19b6:	20 91 02 01 	lds	r18, 0x0102
    19ba:	30 91 03 01 	lds	r19, 0x0103
    19be:	30 93 ba 01 	sts	0x01BA, r19
    19c2:	20 93 b9 01 	sts	0x01B9, r18
    19c6:	20 91 00 01 	lds	r18, 0x0100
    19ca:	30 91 01 01 	lds	r19, 0x0101
    19ce:	21 15       	cp	r18, r1
    19d0:	31 05       	cpc	r19, r1
    19d2:	41 f4       	brne	.+16     	; 0x19e4 <malloc+0xee>
    19d4:	2d b7       	in	r18, 0x3d	; 61
    19d6:	3e b7       	in	r19, 0x3e	; 62
    19d8:	40 91 04 01 	lds	r20, 0x0104
    19dc:	50 91 05 01 	lds	r21, 0x0105
    19e0:	24 1b       	sub	r18, r20
    19e2:	35 0b       	sbc	r19, r21
    19e4:	e0 91 b9 01 	lds	r30, 0x01B9
    19e8:	f0 91 ba 01 	lds	r31, 0x01BA
    19ec:	e2 17       	cp	r30, r18
    19ee:	f3 07       	cpc	r31, r19
    19f0:	a0 f4       	brcc	.+40     	; 0x1a1a <malloc+0x124>
    19f2:	2e 1b       	sub	r18, r30
    19f4:	3f 0b       	sbc	r19, r31
    19f6:	28 17       	cp	r18, r24
    19f8:	39 07       	cpc	r19, r25
    19fa:	78 f0       	brcs	.+30     	; 0x1a1a <malloc+0x124>
    19fc:	ac 01       	movw	r20, r24
    19fe:	4e 5f       	subi	r20, 0xFE	; 254
    1a00:	5f 4f       	sbci	r21, 0xFF	; 255
    1a02:	24 17       	cp	r18, r20
    1a04:	35 07       	cpc	r19, r21
    1a06:	48 f0       	brcs	.+18     	; 0x1a1a <malloc+0x124>
    1a08:	4e 0f       	add	r20, r30
    1a0a:	5f 1f       	adc	r21, r31
    1a0c:	50 93 ba 01 	sts	0x01BA, r21
    1a10:	40 93 b9 01 	sts	0x01B9, r20
    1a14:	81 93       	st	Z+, r24
    1a16:	91 93       	st	Z+, r25
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <malloc+0x128>
    1a1a:	e0 e0       	ldi	r30, 0x00	; 0
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	cf 01       	movw	r24, r30
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <free>:
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <free+0xa>
    1a2e:	87 c0       	rjmp	.+270    	; 0x1b3e <free+0x118>
    1a30:	fc 01       	movw	r30, r24
    1a32:	32 97       	sbiw	r30, 0x02	; 2
    1a34:	13 82       	std	Z+3, r1	; 0x03
    1a36:	12 82       	std	Z+2, r1	; 0x02
    1a38:	c0 91 bb 01 	lds	r28, 0x01BB
    1a3c:	d0 91 bc 01 	lds	r29, 0x01BC
    1a40:	20 97       	sbiw	r28, 0x00	; 0
    1a42:	81 f4       	brne	.+32     	; 0x1a64 <free+0x3e>
    1a44:	20 81       	ld	r18, Z
    1a46:	31 81       	ldd	r19, Z+1	; 0x01
    1a48:	28 0f       	add	r18, r24
    1a4a:	39 1f       	adc	r19, r25
    1a4c:	80 91 b9 01 	lds	r24, 0x01B9
    1a50:	90 91 ba 01 	lds	r25, 0x01BA
    1a54:	82 17       	cp	r24, r18
    1a56:	93 07       	cpc	r25, r19
    1a58:	79 f5       	brne	.+94     	; 0x1ab8 <free+0x92>
    1a5a:	f0 93 ba 01 	sts	0x01BA, r31
    1a5e:	e0 93 b9 01 	sts	0x01B9, r30
    1a62:	6d c0       	rjmp	.+218    	; 0x1b3e <free+0x118>
    1a64:	de 01       	movw	r26, r28
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	ae 17       	cp	r26, r30
    1a6c:	bf 07       	cpc	r27, r31
    1a6e:	50 f4       	brcc	.+20     	; 0x1a84 <free+0x5e>
    1a70:	12 96       	adiw	r26, 0x02	; 2
    1a72:	4d 91       	ld	r20, X+
    1a74:	5c 91       	ld	r21, X
    1a76:	13 97       	sbiw	r26, 0x03	; 3
    1a78:	9d 01       	movw	r18, r26
    1a7a:	41 15       	cp	r20, r1
    1a7c:	51 05       	cpc	r21, r1
    1a7e:	09 f1       	breq	.+66     	; 0x1ac2 <free+0x9c>
    1a80:	da 01       	movw	r26, r20
    1a82:	f3 cf       	rjmp	.-26     	; 0x1a6a <free+0x44>
    1a84:	b3 83       	std	Z+3, r27	; 0x03
    1a86:	a2 83       	std	Z+2, r26	; 0x02
    1a88:	40 81       	ld	r20, Z
    1a8a:	51 81       	ldd	r21, Z+1	; 0x01
    1a8c:	84 0f       	add	r24, r20
    1a8e:	95 1f       	adc	r25, r21
    1a90:	8a 17       	cp	r24, r26
    1a92:	9b 07       	cpc	r25, r27
    1a94:	71 f4       	brne	.+28     	; 0x1ab2 <free+0x8c>
    1a96:	8d 91       	ld	r24, X+
    1a98:	9c 91       	ld	r25, X
    1a9a:	11 97       	sbiw	r26, 0x01	; 1
    1a9c:	84 0f       	add	r24, r20
    1a9e:	95 1f       	adc	r25, r21
    1aa0:	02 96       	adiw	r24, 0x02	; 2
    1aa2:	91 83       	std	Z+1, r25	; 0x01
    1aa4:	80 83       	st	Z, r24
    1aa6:	12 96       	adiw	r26, 0x02	; 2
    1aa8:	8d 91       	ld	r24, X+
    1aaa:	9c 91       	ld	r25, X
    1aac:	13 97       	sbiw	r26, 0x03	; 3
    1aae:	93 83       	std	Z+3, r25	; 0x03
    1ab0:	82 83       	std	Z+2, r24	; 0x02
    1ab2:	21 15       	cp	r18, r1
    1ab4:	31 05       	cpc	r19, r1
    1ab6:	29 f4       	brne	.+10     	; 0x1ac2 <free+0x9c>
    1ab8:	f0 93 bc 01 	sts	0x01BC, r31
    1abc:	e0 93 bb 01 	sts	0x01BB, r30
    1ac0:	3e c0       	rjmp	.+124    	; 0x1b3e <free+0x118>
    1ac2:	d9 01       	movw	r26, r18
    1ac4:	13 96       	adiw	r26, 0x03	; 3
    1ac6:	fc 93       	st	X, r31
    1ac8:	ee 93       	st	-X, r30
    1aca:	12 97       	sbiw	r26, 0x02	; 2
    1acc:	4d 91       	ld	r20, X+
    1ace:	5d 91       	ld	r21, X+
    1ad0:	a4 0f       	add	r26, r20
    1ad2:	b5 1f       	adc	r27, r21
    1ad4:	ea 17       	cp	r30, r26
    1ad6:	fb 07       	cpc	r31, r27
    1ad8:	79 f4       	brne	.+30     	; 0x1af8 <free+0xd2>
    1ada:	80 81       	ld	r24, Z
    1adc:	91 81       	ldd	r25, Z+1	; 0x01
    1ade:	84 0f       	add	r24, r20
    1ae0:	95 1f       	adc	r25, r21
    1ae2:	02 96       	adiw	r24, 0x02	; 2
    1ae4:	d9 01       	movw	r26, r18
    1ae6:	11 96       	adiw	r26, 0x01	; 1
    1ae8:	9c 93       	st	X, r25
    1aea:	8e 93       	st	-X, r24
    1aec:	82 81       	ldd	r24, Z+2	; 0x02
    1aee:	93 81       	ldd	r25, Z+3	; 0x03
    1af0:	13 96       	adiw	r26, 0x03	; 3
    1af2:	9c 93       	st	X, r25
    1af4:	8e 93       	st	-X, r24
    1af6:	12 97       	sbiw	r26, 0x02	; 2
    1af8:	e0 e0       	ldi	r30, 0x00	; 0
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	9b 81       	ldd	r25, Y+3	; 0x03
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	19 f0       	breq	.+6      	; 0x1b0a <free+0xe4>
    1b04:	fe 01       	movw	r30, r28
    1b06:	ec 01       	movw	r28, r24
    1b08:	f9 cf       	rjmp	.-14     	; 0x1afc <free+0xd6>
    1b0a:	ce 01       	movw	r24, r28
    1b0c:	02 96       	adiw	r24, 0x02	; 2
    1b0e:	28 81       	ld	r18, Y
    1b10:	39 81       	ldd	r19, Y+1	; 0x01
    1b12:	82 0f       	add	r24, r18
    1b14:	93 1f       	adc	r25, r19
    1b16:	20 91 b9 01 	lds	r18, 0x01B9
    1b1a:	30 91 ba 01 	lds	r19, 0x01BA
    1b1e:	28 17       	cp	r18, r24
    1b20:	39 07       	cpc	r19, r25
    1b22:	69 f4       	brne	.+26     	; 0x1b3e <free+0x118>
    1b24:	30 97       	sbiw	r30, 0x00	; 0
    1b26:	29 f4       	brne	.+10     	; 0x1b32 <free+0x10c>
    1b28:	10 92 bc 01 	sts	0x01BC, r1
    1b2c:	10 92 bb 01 	sts	0x01BB, r1
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <free+0x110>
    1b32:	13 82       	std	Z+3, r1	; 0x03
    1b34:	12 82       	std	Z+2, r1	; 0x02
    1b36:	d0 93 ba 01 	sts	0x01BA, r29
    1b3a:	c0 93 b9 01 	sts	0x01B9, r28
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	08 95       	ret

00001b44 <strnlen_P>:
    1b44:	fc 01       	movw	r30, r24
    1b46:	05 90       	lpm	r0, Z+
    1b48:	61 50       	subi	r22, 0x01	; 1
    1b4a:	70 40       	sbci	r23, 0x00	; 0
    1b4c:	01 10       	cpse	r0, r1
    1b4e:	d8 f7       	brcc	.-10     	; 0x1b46 <strnlen_P+0x2>
    1b50:	80 95       	com	r24
    1b52:	90 95       	com	r25
    1b54:	8e 0f       	add	r24, r30
    1b56:	9f 1f       	adc	r25, r31
    1b58:	08 95       	ret

00001b5a <memset>:
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	01 c0       	rjmp	.+2      	; 0x1b60 <memset+0x6>
    1b5e:	6d 93       	st	X+, r22
    1b60:	41 50       	subi	r20, 0x01	; 1
    1b62:	50 40       	sbci	r21, 0x00	; 0
    1b64:	e0 f7       	brcc	.-8      	; 0x1b5e <memset+0x4>
    1b66:	08 95       	ret

00001b68 <strnlen>:
    1b68:	fc 01       	movw	r30, r24
    1b6a:	61 50       	subi	r22, 0x01	; 1
    1b6c:	70 40       	sbci	r23, 0x00	; 0
    1b6e:	01 90       	ld	r0, Z+
    1b70:	01 10       	cpse	r0, r1
    1b72:	d8 f7       	brcc	.-10     	; 0x1b6a <strnlen+0x2>
    1b74:	80 95       	com	r24
    1b76:	90 95       	com	r25
    1b78:	8e 0f       	add	r24, r30
    1b7a:	9f 1f       	adc	r25, r31
    1b7c:	08 95       	ret

00001b7e <fputc>:
    1b7e:	0f 93       	push	r16
    1b80:	1f 93       	push	r17
    1b82:	cf 93       	push	r28
    1b84:	df 93       	push	r29
    1b86:	18 2f       	mov	r17, r24
    1b88:	09 2f       	mov	r16, r25
    1b8a:	eb 01       	movw	r28, r22
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	81 fd       	sbrc	r24, 1
    1b90:	03 c0       	rjmp	.+6      	; 0x1b98 <fputc+0x1a>
    1b92:	8f ef       	ldi	r24, 0xFF	; 255
    1b94:	9f ef       	ldi	r25, 0xFF	; 255
    1b96:	20 c0       	rjmp	.+64     	; 0x1bd8 <fputc+0x5a>
    1b98:	82 ff       	sbrs	r24, 2
    1b9a:	10 c0       	rjmp	.+32     	; 0x1bbc <fputc+0x3e>
    1b9c:	4e 81       	ldd	r20, Y+6	; 0x06
    1b9e:	5f 81       	ldd	r21, Y+7	; 0x07
    1ba0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ba2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ba4:	42 17       	cp	r20, r18
    1ba6:	53 07       	cpc	r21, r19
    1ba8:	7c f4       	brge	.+30     	; 0x1bc8 <fputc+0x4a>
    1baa:	e8 81       	ld	r30, Y
    1bac:	f9 81       	ldd	r31, Y+1	; 0x01
    1bae:	9f 01       	movw	r18, r30
    1bb0:	2f 5f       	subi	r18, 0xFF	; 255
    1bb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb4:	39 83       	std	Y+1, r19	; 0x01
    1bb6:	28 83       	st	Y, r18
    1bb8:	10 83       	st	Z, r17
    1bba:	06 c0       	rjmp	.+12     	; 0x1bc8 <fputc+0x4a>
    1bbc:	e8 85       	ldd	r30, Y+8	; 0x08
    1bbe:	f9 85       	ldd	r31, Y+9	; 0x09
    1bc0:	81 2f       	mov	r24, r17
    1bc2:	09 95       	icall
    1bc4:	89 2b       	or	r24, r25
    1bc6:	29 f7       	brne	.-54     	; 0x1b92 <fputc+0x14>
    1bc8:	2e 81       	ldd	r18, Y+6	; 0x06
    1bca:	3f 81       	ldd	r19, Y+7	; 0x07
    1bcc:	2f 5f       	subi	r18, 0xFF	; 255
    1bce:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd0:	3f 83       	std	Y+7, r19	; 0x07
    1bd2:	2e 83       	std	Y+6, r18	; 0x06
    1bd4:	81 2f       	mov	r24, r17
    1bd6:	90 2f       	mov	r25, r16
    1bd8:	df 91       	pop	r29
    1bda:	cf 91       	pop	r28
    1bdc:	1f 91       	pop	r17
    1bde:	0f 91       	pop	r16
    1be0:	08 95       	ret

00001be2 <__ultoa_invert>:
    1be2:	fa 01       	movw	r30, r20
    1be4:	aa 27       	eor	r26, r26
    1be6:	28 30       	cpi	r18, 0x08	; 8
    1be8:	51 f1       	breq	.+84     	; 0x1c3e <__ultoa_invert+0x5c>
    1bea:	20 31       	cpi	r18, 0x10	; 16
    1bec:	81 f1       	breq	.+96     	; 0x1c4e <__ultoa_invert+0x6c>
    1bee:	e8 94       	clt
    1bf0:	6f 93       	push	r22
    1bf2:	6e 7f       	andi	r22, 0xFE	; 254
    1bf4:	6e 5f       	subi	r22, 0xFE	; 254
    1bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1bfc:	af 4f       	sbci	r26, 0xFF	; 255
    1bfe:	b1 e0       	ldi	r27, 0x01	; 1
    1c00:	3e d0       	rcall	.+124    	; 0x1c7e <__ultoa_invert+0x9c>
    1c02:	b4 e0       	ldi	r27, 0x04	; 4
    1c04:	3c d0       	rcall	.+120    	; 0x1c7e <__ultoa_invert+0x9c>
    1c06:	67 0f       	add	r22, r23
    1c08:	78 1f       	adc	r23, r24
    1c0a:	89 1f       	adc	r24, r25
    1c0c:	9a 1f       	adc	r25, r26
    1c0e:	a1 1d       	adc	r26, r1
    1c10:	68 0f       	add	r22, r24
    1c12:	79 1f       	adc	r23, r25
    1c14:	8a 1f       	adc	r24, r26
    1c16:	91 1d       	adc	r25, r1
    1c18:	a1 1d       	adc	r26, r1
    1c1a:	6a 0f       	add	r22, r26
    1c1c:	71 1d       	adc	r23, r1
    1c1e:	81 1d       	adc	r24, r1
    1c20:	91 1d       	adc	r25, r1
    1c22:	a1 1d       	adc	r26, r1
    1c24:	20 d0       	rcall	.+64     	; 0x1c66 <__ultoa_invert+0x84>
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <__ultoa_invert+0x48>
    1c28:	68 94       	set
    1c2a:	3f 91       	pop	r19
    1c2c:	2a e0       	ldi	r18, 0x0A	; 10
    1c2e:	26 9f       	mul	r18, r22
    1c30:	11 24       	eor	r1, r1
    1c32:	30 19       	sub	r19, r0
    1c34:	30 5d       	subi	r19, 0xD0	; 208
    1c36:	31 93       	st	Z+, r19
    1c38:	de f6       	brtc	.-74     	; 0x1bf0 <__ultoa_invert+0xe>
    1c3a:	cf 01       	movw	r24, r30
    1c3c:	08 95       	ret
    1c3e:	46 2f       	mov	r20, r22
    1c40:	47 70       	andi	r20, 0x07	; 7
    1c42:	40 5d       	subi	r20, 0xD0	; 208
    1c44:	41 93       	st	Z+, r20
    1c46:	b3 e0       	ldi	r27, 0x03	; 3
    1c48:	0f d0       	rcall	.+30     	; 0x1c68 <__ultoa_invert+0x86>
    1c4a:	c9 f7       	brne	.-14     	; 0x1c3e <__ultoa_invert+0x5c>
    1c4c:	f6 cf       	rjmp	.-20     	; 0x1c3a <__ultoa_invert+0x58>
    1c4e:	46 2f       	mov	r20, r22
    1c50:	4f 70       	andi	r20, 0x0F	; 15
    1c52:	40 5d       	subi	r20, 0xD0	; 208
    1c54:	4a 33       	cpi	r20, 0x3A	; 58
    1c56:	18 f0       	brcs	.+6      	; 0x1c5e <__ultoa_invert+0x7c>
    1c58:	49 5d       	subi	r20, 0xD9	; 217
    1c5a:	31 fd       	sbrc	r19, 1
    1c5c:	40 52       	subi	r20, 0x20	; 32
    1c5e:	41 93       	st	Z+, r20
    1c60:	02 d0       	rcall	.+4      	; 0x1c66 <__ultoa_invert+0x84>
    1c62:	a9 f7       	brne	.-22     	; 0x1c4e <__ultoa_invert+0x6c>
    1c64:	ea cf       	rjmp	.-44     	; 0x1c3a <__ultoa_invert+0x58>
    1c66:	b4 e0       	ldi	r27, 0x04	; 4
    1c68:	a6 95       	lsr	r26
    1c6a:	97 95       	ror	r25
    1c6c:	87 95       	ror	r24
    1c6e:	77 95       	ror	r23
    1c70:	67 95       	ror	r22
    1c72:	ba 95       	dec	r27
    1c74:	c9 f7       	brne	.-14     	; 0x1c68 <__ultoa_invert+0x86>
    1c76:	00 97       	sbiw	r24, 0x00	; 0
    1c78:	61 05       	cpc	r22, r1
    1c7a:	71 05       	cpc	r23, r1
    1c7c:	08 95       	ret
    1c7e:	9b 01       	movw	r18, r22
    1c80:	ac 01       	movw	r20, r24
    1c82:	0a 2e       	mov	r0, r26
    1c84:	06 94       	lsr	r0
    1c86:	57 95       	ror	r21
    1c88:	47 95       	ror	r20
    1c8a:	37 95       	ror	r19
    1c8c:	27 95       	ror	r18
    1c8e:	ba 95       	dec	r27
    1c90:	c9 f7       	brne	.-14     	; 0x1c84 <__ultoa_invert+0xa2>
    1c92:	62 0f       	add	r22, r18
    1c94:	73 1f       	adc	r23, r19
    1c96:	84 1f       	adc	r24, r20
    1c98:	95 1f       	adc	r25, r21
    1c9a:	a0 1d       	adc	r26, r0
    1c9c:	08 95       	ret

00001c9e <__prologue_saves__>:
    1c9e:	2f 92       	push	r2
    1ca0:	3f 92       	push	r3
    1ca2:	4f 92       	push	r4
    1ca4:	5f 92       	push	r5
    1ca6:	6f 92       	push	r6
    1ca8:	7f 92       	push	r7
    1caa:	8f 92       	push	r8
    1cac:	9f 92       	push	r9
    1cae:	af 92       	push	r10
    1cb0:	bf 92       	push	r11
    1cb2:	cf 92       	push	r12
    1cb4:	df 92       	push	r13
    1cb6:	ef 92       	push	r14
    1cb8:	ff 92       	push	r15
    1cba:	0f 93       	push	r16
    1cbc:	1f 93       	push	r17
    1cbe:	cf 93       	push	r28
    1cc0:	df 93       	push	r29
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
    1cc6:	ca 1b       	sub	r28, r26
    1cc8:	db 0b       	sbc	r29, r27
    1cca:	0f b6       	in	r0, 0x3f	; 63
    1ccc:	f8 94       	cli
    1cce:	de bf       	out	0x3e, r29	; 62
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	cd bf       	out	0x3d, r28	; 61
    1cd4:	09 94       	ijmp

00001cd6 <__epilogue_restores__>:
    1cd6:	2a 88       	ldd	r2, Y+18	; 0x12
    1cd8:	39 88       	ldd	r3, Y+17	; 0x11
    1cda:	48 88       	ldd	r4, Y+16	; 0x10
    1cdc:	5f 84       	ldd	r5, Y+15	; 0x0f
    1cde:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ce0:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ce2:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ce4:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ce6:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ce8:	b9 84       	ldd	r11, Y+9	; 0x09
    1cea:	c8 84       	ldd	r12, Y+8	; 0x08
    1cec:	df 80       	ldd	r13, Y+7	; 0x07
    1cee:	ee 80       	ldd	r14, Y+6	; 0x06
    1cf0:	fd 80       	ldd	r15, Y+5	; 0x05
    1cf2:	0c 81       	ldd	r16, Y+4	; 0x04
    1cf4:	1b 81       	ldd	r17, Y+3	; 0x03
    1cf6:	aa 81       	ldd	r26, Y+2	; 0x02
    1cf8:	b9 81       	ldd	r27, Y+1	; 0x01
    1cfa:	ce 0f       	add	r28, r30
    1cfc:	d1 1d       	adc	r29, r1
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	f8 94       	cli
    1d02:	de bf       	out	0x3e, r29	; 62
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	cd bf       	out	0x3d, r28	; 61
    1d08:	ed 01       	movw	r28, r26
    1d0a:	08 95       	ret

00001d0c <_exit>:
    1d0c:	f8 94       	cli

00001d0e <__stop_program>:
    1d0e:	ff cf       	rjmp	.-2      	; 0x1d0e <__stop_program>
