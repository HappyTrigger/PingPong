
PingPongApplication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00000e12  00000ea6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800158  00800158  00000efe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000efe  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002f8  00000000  00000000  00000f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003e99  00000000  00000000  00001252  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000115d  00000000  00000000  000050eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001256  00000000  00000000  00006248  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000878  00000000  00000000  000074a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000090a  00000000  00000000  00007d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000207d  00000000  00000000  00008622  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000278  00000000  00000000  0000a69f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e2 e1       	ldi	r30, 0x12	; 18
  84:	fe e0       	ldi	r31, 0x0E	; 14
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 35       	cpi	r26, 0x58	; 88
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a8 e5       	ldi	r26, 0x58	; 88
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a2 36       	cpi	r26, 0x62	; 98
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <main>
  a6:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <read_adc>:
****************************************************************************/
int read_adc(char channel)
{
	volatile char *ext_adc = (char *) ADC_BASE_ADDR;
	
	*ext_adc = channel;
  ae:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	89 ef       	ldi	r24, 0xF9	; 249
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <read_adc+0x8>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <read_adc+0xe>
  bc:	00 00       	nop
	_delay_ms(1);
	return *ext_adc;
  be:	80 91 00 14 	lds	r24, 0x1400
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	08 95       	ret

000000c6 <CAN_init>:
//#include <avr/interrupt.h>
//#include <avr/delay.h>

void CAN_init()
{
	mcp_init();
  c6:	0e 94 4a 01 	call	0x294	; 0x294 <mcp_init>
	/* Turn off mask/filters, receive any message, rollover enabled */
	mcp_modify_bit(MCP_RXB0CTRL, 0b01100100, 0xFF);
  ca:	4f ef       	ldi	r20, 0xFF	; 255
  cc:	64 e6       	ldi	r22, 0x64	; 100
  ce:	80 e6       	ldi	r24, 0x60	; 96
  d0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <mcp_modify_bit>
	/* Loopback mode enabled */
	mcp_modify_bit(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	60 ee       	ldi	r22, 0xE0	; 224
  d8:	8f e0       	ldi	r24, 0x0F	; 15
  da:	0e 94 70 01 	call	0x2e0	; 0x2e0 <mcp_modify_bit>
  de:	08 95       	ret

000000e0 <CAN_send_message>:
	*/
}


uint8_t CAN_send_message(CANMessage message)
{
  e0:	bf 92       	push	r11
  e2:	cf 92       	push	r12
  e4:	df 92       	push	r13
  e6:	ef 92       	push	r14
  e8:	ff 92       	push	r15
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	2a 97       	sbiw	r28, 0x0a	; 10
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	f8 94       	cli
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	0f be       	out	0x3f, r0	; 63
 100:	cd bf       	out	0x3d, r28	; 61
 102:	09 83       	std	Y+1, r16	; 0x01
 104:	c1 2e       	mov	r12, r17
 106:	1a 83       	std	Y+2, r17	; 0x02
 108:	2b 83       	std	Y+3, r18	; 0x03
 10a:	3c 83       	std	Y+4, r19	; 0x04
 10c:	4d 83       	std	Y+5, r20	; 0x05
 10e:	5e 83       	std	Y+6, r21	; 0x06
 110:	6f 83       	std	Y+7, r22	; 0x07
 112:	78 87       	std	Y+8, r23	; 0x08
 114:	89 87       	std	Y+9, r24	; 0x09
 116:	9a 87       	std	Y+10, r25	; 0x0a
 118:	10 2f       	mov	r17, r16
	uint8_t ctrl = mcp_read(MCP_TXB0CTRL);
 11a:	80 e3       	ldi	r24, 0x30	; 48
 11c:	0e 94 30 01 	call	0x260	; 0x260 <mcp_read>
	
	if (test_bit(ctrl, TXREQ))
 120:	98 2f       	mov	r25, r24
 122:	98 70       	andi	r25, 0x08	; 8
 124:	b9 2e       	mov	r11, r25
 126:	83 fd       	sbrc	r24, 3
 128:	2d c0       	rjmp	.+90     	; 0x184 <CAN_send_message+0xa4>
	{
		return MESSAGE_PENDING;
	}
	/* Use lower 8bits of ID */
	mcp_write_byte(MCP_TXB0SIDL, (uint8_t)(message.ID << 5));
 12a:	61 2f       	mov	r22, r17
 12c:	62 95       	swap	r22
 12e:	66 0f       	add	r22, r22
 130:	60 7e       	andi	r22, 0xE0	; 224
 132:	82 e3       	ldi	r24, 0x32	; 50
 134:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <mcp_write_byte>
	mcp_write_byte(MCP_TXB0SIDH, (uint8_t)(message.ID >> 3));
 138:	61 2f       	mov	r22, r17
 13a:	66 95       	lsr	r22
 13c:	66 95       	lsr	r22
 13e:	66 95       	lsr	r22
 140:	81 e3       	ldi	r24, 0x31	; 49
 142:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <mcp_write_byte>
	
	mcp_write_byte(MCP_TXB0DLC, (message.length) & 0x0F);
 146:	6c 2d       	mov	r22, r12
 148:	6f 70       	andi	r22, 0x0F	; 15
 14a:	85 e3       	ldi	r24, 0x35	; 53
 14c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <mcp_write_byte>
	
	for (int i = 0; i < message.length; i++)
 150:	d1 2c       	mov	r13, r1
 152:	1c 14       	cp	r1, r12
 154:	1d 04       	cpc	r1, r13
 156:	94 f4       	brge	.+36     	; 0x17c <CAN_send_message+0x9c>
 158:	7e 01       	movw	r14, r28
 15a:	e3 e0       	ldi	r30, 0x03	; 3
 15c:	ee 0e       	add	r14, r30
 15e:	f1 1c       	adc	r15, r1
 160:	00 e0       	ldi	r16, 0x00	; 0
 162:	10 e0       	ldi	r17, 0x00	; 0
	{
		mcp_write_byte(MCP_TXB0D0 + i, message.data_array[i]);
 164:	f7 01       	movw	r30, r14
 166:	61 91       	ld	r22, Z+
 168:	7f 01       	movw	r14, r30
 16a:	86 e3       	ldi	r24, 0x36	; 54
 16c:	80 0f       	add	r24, r16
 16e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <mcp_write_byte>
	mcp_write_byte(MCP_TXB0SIDL, (uint8_t)(message.ID << 5));
	mcp_write_byte(MCP_TXB0SIDH, (uint8_t)(message.ID >> 3));
	
	mcp_write_byte(MCP_TXB0DLC, (message.length) & 0x0F);
	
	for (int i = 0; i < message.length; i++)
 172:	0f 5f       	subi	r16, 0xFF	; 255
 174:	1f 4f       	sbci	r17, 0xFF	; 255
 176:	0c 15       	cp	r16, r12
 178:	1d 05       	cpc	r17, r13
 17a:	a4 f3       	brlt	.-24     	; 0x164 <CAN_send_message+0x84>
	{
		mcp_write_byte(MCP_TXB0D0 + i, message.data_array[i]);
	}
	
	mcp_request_to_send(1);
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 8a 01 	call	0x314	; 0x314 <mcp_request_to_send>

	return SUCCESS;
 182:	02 c0       	rjmp	.+4      	; 0x188 <CAN_send_message+0xa8>
{
	uint8_t ctrl = mcp_read(MCP_TXB0CTRL);
	
	if (test_bit(ctrl, TXREQ))
	{
		return MESSAGE_PENDING;
 184:	bb 24       	eor	r11, r11
 186:	b3 94       	inc	r11
	}
	
	mcp_request_to_send(1);

	return SUCCESS;
}
 188:	8b 2d       	mov	r24, r11
 18a:	2a 96       	adiw	r28, 0x0a	; 10
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	f8 94       	cli
 190:	de bf       	out	0x3e, r29	; 62
 192:	0f be       	out	0x3f, r0	; 63
 194:	cd bf       	out	0x3d, r28	; 61
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	ff 90       	pop	r15
 1a0:	ef 90       	pop	r14
 1a2:	df 90       	pop	r13
 1a4:	cf 90       	pop	r12
 1a6:	bf 90       	pop	r11
 1a8:	08 95       	ret

000001aa <send_joystick_possition>:
#include "CAN_DRIVER.h"
#include "JOYSTICK_DRIVER.h"


uint8_t send_joystick_possition(JoystickPosition joystick_position, TouchpadData touchpad_data)
{
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
 1b6:	2a 97       	sbiw	r28, 0x0a	; 10
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	f8 94       	cli
 1bc:	de bf       	out	0x3e, r29	; 62
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	cd bf       	out	0x3d, r28	; 61
	message.data_array[3] = (uint8_t) (touchpad_data.leftTouchPad);
	
	message.data_array[4] = (uint8_t) (touchpad_data.rightButton);
	message.data_array[5] = (uint8_t) (touchpad_data.leftButton);
	
	return CAN_send_message(message);
 1c2:	01 e0       	ldi	r16, 0x01	; 1
 1c4:	16 e0       	ldi	r17, 0x06	; 6
 1c6:	28 2f       	mov	r18, r24
 1c8:	39 2f       	mov	r19, r25
 1ca:	89 85       	ldd	r24, Y+9	; 0x09
 1cc:	9a 85       	ldd	r25, Y+10	; 0x0a
 1ce:	0e 94 70 00 	call	0xe0	; 0xe0 <CAN_send_message>
}
 1d2:	2a 96       	adiw	r28, 0x0a	; 10
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	f8 94       	cli
 1d8:	de bf       	out	0x3e, r29	; 62
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	cd bf       	out	0x3d, r28	; 61
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	08 95       	ret

000001e8 <read_joystick_position>:
*
* \param in calibration data
* \return Joystick position
****************************************************************************/
JoystickPosition read_joystick_position(JoystickPosition calibration)
{
 1e8:	cf 93       	push	r28
	JoystickPosition position;

	position.xaxis = read_adc(ADC_CH2);
 1ea:	85 e0       	ldi	r24, 0x05	; 5
 1ec:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
 1f0:	c8 2f       	mov	r28, r24
	//position.xaxis = ((((position.xaxis - calibration.xaxis)*100)/255)-50)*2;

	position.yaxis = read_adc(ADC_CH1);
 1f2:	84 e0       	ldi	r24, 0x04	; 4
 1f4:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
 1f8:	98 2f       	mov	r25, r24
	//position.yaxis = ((((position.yaxis - calibration.yaxis)*100)/255)-50)*2;
	
	return position;
}
 1fa:	8c 2f       	mov	r24, r28
 1fc:	cf 91       	pop	r28
 1fe:	08 95       	ret

00000200 <joystick_calibration>:
* \brief Calibrate joystick
*
* \return Joystick calibration data
****************************************************************************/
JoystickPosition joystick_calibration()
{
 200:	cf 93       	push	r28
	
	JoystickPosition position;
	position.xaxis = read_adc(ADC_CH2);
 202:	85 e0       	ldi	r24, 0x05	; 5
 204:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
 208:	c8 2f       	mov	r28, r24
	position.yaxis = read_adc(ADC_CH1);
 20a:	84 e0       	ldi	r24, 0x04	; 4
 20c:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
	position.xaxis -= 127;
	position.yaxis -= 127;
 210:	91 e8       	ldi	r25, 0x81	; 129
 212:	98 0f       	add	r25, r24

	return position;	
}
 214:	81 e8       	ldi	r24, 0x81	; 129
 216:	8c 0f       	add	r24, r28
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <read_touchpad_data>:
* \brief Read Touchpad data
*
* \return Touchpad data
****************************************************************************/
TouchpadData read_touchpad_data()
{
 21c:	cf 93       	push	r28
	TouchpadData touchpad;
	touchpad.rightTouchPad = read_adc(ADC_CH3);
 21e:	86 e0       	ldi	r24, 0x06	; 6
 220:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
 224:	c8 2f       	mov	r28, r24
	touchpad.leftTouchPad = read_adc(ADC_CH4);
 226:	87 e0       	ldi	r24, 0x07	; 7
 228:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
 22c:	78 2f       	mov	r23, r24
	
	if(test_bit(BUTTON_PORT, LEFT_BUTTON_PIN))
 22e:	85 9b       	sbis	0x10, 5	; 16
 230:	02 c0       	rjmp	.+4      	; 0x236 <read_touchpad_data+0x1a>
	{
		touchpad.leftButton = 1;
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	01 c0       	rjmp	.+2      	; 0x238 <read_touchpad_data+0x1c>
	}
	else
	{
		touchpad.leftButton = 0;
 236:	90 e0       	ldi	r25, 0x00	; 0
	}
	if(test_bit(BUTTON_PORT, RIGHT_BUTTON_PIN))
 238:	84 9b       	sbis	0x10, 4	; 16
 23a:	02 c0       	rjmp	.+4      	; 0x240 <read_touchpad_data+0x24>
	{
		touchpad.rightButton = 1;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	01 c0       	rjmp	.+2      	; 0x242 <read_touchpad_data+0x26>
	}
	else
	{
		touchpad.rightButton = 0;	
 240:	80 e0       	ldi	r24, 0x00	; 0
	}
	return touchpad;
}
 242:	6c 2f       	mov	r22, r28
 244:	cf 91       	pop	r28
 246:	08 95       	ret

00000248 <mcp_turn_on>:
* \brief Enable communication with CAN controller 
*
****************************************************************************/
void mcp_turn_on()
{
	PORTB &= ~(1 << DD_CS);
 248:	c4 98       	cbi	0x18, 4	; 24
 24a:	08 95       	ret

0000024c <mcp_turn_off>:
* \brief Disable communication with CAN controller
*
****************************************************************************/
void mcp_turn_off()
{
	PORTB |= (1 << DD_CS);
 24c:	c4 9a       	sbi	0x18, 4	; 24
 24e:	08 95       	ret

00000250 <mcp_reset>:
* \brief Reset the CAN controller
*
****************************************************************************/
void mcp_reset()
{
	mcp_turn_on();
 250:	0e 94 24 01 	call	0x248	; 0x248 <mcp_turn_on>
	
	SPI_write(MCP_RESET);
 254:	80 ec       	ldi	r24, 0xC0	; 192
 256:	0e 94 50 02 	call	0x4a0	; 0x4a0 <SPI_write>
	
	mcp_turn_off();
 25a:	0e 94 26 01 	call	0x24c	; 0x24c <mcp_turn_off>
 25e:	08 95       	ret

00000260 <mcp_read>:
*
* \param in address from which shall be read
* \return data
****************************************************************************/
uint8_t mcp_read(uint8_t address)
{
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	1f 92       	push	r1
 268:	cd b7       	in	r28, 0x3d	; 61
 26a:	de b7       	in	r29, 0x3e	; 62
 26c:	18 2f       	mov	r17, r24
	volatile uint8_t retVal;
	
	mcp_turn_on();
 26e:	0e 94 24 01 	call	0x248	; 0x248 <mcp_turn_on>
	
	SPI_write(MCP_READ);
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	0e 94 50 02 	call	0x4a0	; 0x4a0 <SPI_write>
	SPI_write(address);
 278:	81 2f       	mov	r24, r17
 27a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <SPI_write>
	
	retVal = SPI_read();
 27e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <SPI_read>
 282:	89 83       	std	Y+1, r24	; 0x01
	
	mcp_turn_off();
 284:	0e 94 26 01 	call	0x24c	; 0x24c <mcp_turn_off>
	
	return retVal;
 288:	89 81       	ldd	r24, Y+1	; 0x01
}
 28a:	0f 90       	pop	r0
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	1f 91       	pop	r17
 292:	08 95       	ret

00000294 <mcp_init>:
****************************************************************************/
uint8_t mcp_init()
{
	uint8_t tmp;
	
	SPI_init();
 294:	0e 94 4a 02 	call	0x494	; 0x494 <SPI_init>
	mcp_reset();
 298:	0e 94 28 01 	call	0x250	; 0x250 <mcp_reset>
	
	tmp = mcp_read(MCP_CANSTAT);
 29c:	8e e0       	ldi	r24, 0x0E	; 14
 29e:	0e 94 30 01 	call	0x260	; 0x260 <mcp_read>
	
	if ((tmp & MODE_MASK) != MODE_CONFIG)
 2a2:	80 7e       	andi	r24, 0xE0	; 224
 2a4:	80 38       	cpi	r24, 0x80	; 128
 2a6:	31 f0       	breq	.+12     	; 0x2b4 <mcp_init+0x20>
	{
		printf("MCP2515 NOT configured properly\n");
 2a8:	86 e0       	ldi	r24, 0x06	; 6
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <puts>
		return 1;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	08 95       	ret
	}
	
	return 0;
 2b4:	80 e0       	ldi	r24, 0x00	; 0
}
 2b6:	08 95       	ret

000002b8 <mcp_write_byte>:
*
* \param in address to which shall be write
* \return data
****************************************************************************/
void mcp_write_byte(uint8_t address, uint8_t byte)
{
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	d8 2f       	mov	r29, r24
 2be:	c6 2f       	mov	r28, r22
	mcp_turn_on();
 2c0:	0e 94 24 01 	call	0x248	; 0x248 <mcp_turn_on>
	SPI_write(MCP_WRITE);
 2c4:	82 e0       	ldi	r24, 0x02	; 2
 2c6:	0e 94 50 02 	call	0x4a0	; 0x4a0 <SPI_write>
	SPI_write(address);
 2ca:	8d 2f       	mov	r24, r29
 2cc:	0e 94 50 02 	call	0x4a0	; 0x4a0 <SPI_write>
	SPI_write(byte);
 2d0:	8c 2f       	mov	r24, r28
 2d2:	0e 94 50 02 	call	0x4a0	; 0x4a0 <SPI_write>
	mcp_turn_off();
 2d6:	0e 94 26 01 	call	0x24c	; 0x24c <mcp_turn_off>
}
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <mcp_modify_bit>:
* \param in address of the register
* \param in bit mask
* \param in new value of the register
****************************************************************************/
void mcp_modify_bit(uint8_t address, uint8_t mask, uint8_t byte)
{
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	18 2f       	mov	r17, r24
 2e8:	d6 2f       	mov	r29, r22
 2ea:	c4 2f       	mov	r28, r20
	mcp_turn_on();
 2ec:	0e 94 24 01 	call	0x248	; 0x248 <mcp_turn_on>
	SPI_write(MCP_BITMOD);
 2f0:	85 e0       	ldi	r24, 0x05	; 5
 2f2:	0e 94 50 02 	call	0x4a0	; 0x4a0 <SPI_write>
	SPI_write(address);
 2f6:	81 2f       	mov	r24, r17
 2f8:	0e 94 50 02 	call	0x4a0	; 0x4a0 <SPI_write>
	SPI_write(mask);
 2fc:	8d 2f       	mov	r24, r29
 2fe:	0e 94 50 02 	call	0x4a0	; 0x4a0 <SPI_write>
	SPI_write(byte);
 302:	8c 2f       	mov	r24, r28
 304:	0e 94 50 02 	call	0x4a0	; 0x4a0 <SPI_write>
	mcp_turn_off();
 308:	0e 94 26 01 	call	0x24c	; 0x24c <mcp_turn_off>
}
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	1f 91       	pop	r17
 312:	08 95       	ret

00000314 <mcp_request_to_send>:
* \brief Request to send particular buffer
*
* \param in address of the buffer
****************************************************************************/
void mcp_request_to_send(uint8_t bits)
{
 314:	cf 93       	push	r28
 316:	c8 2f       	mov	r28, r24
	mcp_turn_on();
 318:	0e 94 24 01 	call	0x248	; 0x248 <mcp_turn_on>
	SPI_write(MCP_RTS | (bits & 0b00000111));
 31c:	8c 2f       	mov	r24, r28
 31e:	87 70       	andi	r24, 0x07	; 7
 320:	80 68       	ori	r24, 0x80	; 128
 322:	0e 94 50 02 	call	0x4a0	; 0x4a0 <SPI_write>
	mcp_turn_off();
 326:	0e 94 26 01 	call	0x24c	; 0x24c <mcp_turn_off>
}
 32a:	cf 91       	pop	r28
 32c:	08 95       	ret

0000032e <init_oled>:
*
****************************************************************************/
void write_c(char command)
{
	volatile char *ext_oled = (char *) OLED_COMMAND_BASE_ADDR;
	ext_oled[0] = command;
 32e:	e0 e0       	ldi	r30, 0x00	; 0
 330:	f0 e1       	ldi	r31, 0x10	; 16
 332:	8e ea       	ldi	r24, 0xAE	; 174
 334:	80 83       	st	Z, r24
 336:	81 ea       	ldi	r24, 0xA1	; 161
 338:	80 83       	st	Z, r24
 33a:	8a ed       	ldi	r24, 0xDA	; 218
 33c:	80 83       	st	Z, r24
 33e:	82 e1       	ldi	r24, 0x12	; 18
 340:	80 83       	st	Z, r24
 342:	88 ec       	ldi	r24, 0xC8	; 200
 344:	80 83       	st	Z, r24
 346:	88 ea       	ldi	r24, 0xA8	; 168
 348:	80 83       	st	Z, r24
 34a:	8f e3       	ldi	r24, 0x3F	; 63
 34c:	80 83       	st	Z, r24
 34e:	85 ed       	ldi	r24, 0xD5	; 213
 350:	80 83       	st	Z, r24
 352:	80 e8       	ldi	r24, 0x80	; 128
 354:	80 83       	st	Z, r24
 356:	81 e8       	ldi	r24, 0x81	; 129
 358:	80 83       	st	Z, r24
 35a:	80 e5       	ldi	r24, 0x50	; 80
 35c:	80 83       	st	Z, r24
 35e:	89 ed       	ldi	r24, 0xD9	; 217
 360:	80 83       	st	Z, r24
 362:	81 e2       	ldi	r24, 0x21	; 33
 364:	80 83       	st	Z, r24
 366:	80 e2       	ldi	r24, 0x20	; 32
 368:	80 83       	st	Z, r24
 36a:	10 82       	st	Z, r1
 36c:	8b ed       	ldi	r24, 0xDB	; 219
 36e:	80 83       	st	Z, r24
 370:	80 e3       	ldi	r24, 0x30	; 48
 372:	80 83       	st	Z, r24
 374:	8d ea       	ldi	r24, 0xAD	; 173
 376:	80 83       	st	Z, r24
 378:	10 82       	st	Z, r1
 37a:	84 ea       	ldi	r24, 0xA4	; 164
 37c:	80 83       	st	Z, r24
 37e:	86 ea       	ldi	r24, 0xA6	; 166
 380:	80 83       	st	Z, r24
 382:	8f ea       	ldi	r24, 0xAF	; 175
 384:	80 83       	st	Z, r24
 386:	08 95       	ret

00000388 <reset_position>:
 388:	e0 e0       	ldi	r30, 0x00	; 0
 38a:	f0 e1       	ldi	r31, 0x10	; 16
 38c:	81 e2       	ldi	r24, 0x21	; 33
 38e:	80 83       	st	Z, r24
 390:	10 82       	st	Z, r1
 392:	8f e7       	ldi	r24, 0x7F	; 127
 394:	80 83       	st	Z, r24
 396:	82 e2       	ldi	r24, 0x22	; 34
 398:	80 83       	st	Z, r24
 39a:	10 82       	st	Z, r1
 39c:	87 e0       	ldi	r24, 0x07	; 7
 39e:	80 83       	st	Z, r24
 3a0:	08 95       	ret

000003a2 <refresh_oled>:
* \brief Refresh OLED by rewriting all data from SRAM to OLED
*
****************************************************************************/
void refresh_oled()
{
	reset_position();
 3a2:	0e 94 c4 01 	call	0x388	; 0x388 <reset_position>
 3a6:	e0 e0       	ldi	r30, 0x00	; 0
 3a8:	f8 e1       	ldi	r31, 0x18	; 24
*
****************************************************************************/
void write_d(char data)
{
	volatile char *ext_oled = (char *) OLED_DATA_BASE_ADDR;
	ext_oled[0] = data;
 3aa:	a0 e0       	ldi	r26, 0x00	; 0
 3ac:	b2 e1       	ldi	r27, 0x12	; 18
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	unsigned char oled_value;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
	{
		oled_value = ext_ram[i];
 3ae:	81 91       	ld	r24, Z+
*
****************************************************************************/
void write_d(char data)
{
	volatile char *ext_oled = (char *) OLED_DATA_BASE_ADDR;
	ext_oled[0] = data;
 3b0:	8c 93       	st	X, r24
{
	reset_position();
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	unsigned char oled_value;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
 3b2:	e1 15       	cp	r30, r1
 3b4:	8c e1       	ldi	r24, 0x1C	; 28
 3b6:	f8 07       	cpc	r31, r24
 3b8:	d1 f7       	brne	.-12     	; 0x3ae <refresh_oled+0xc>
	{
		oled_value = ext_ram[i];
		write_d(oled_value);
	}
}
 3ba:	08 95       	ret

000003bc <clear_oled>:
/****************************************************************************
* \brief Clear OLED display
*
****************************************************************************/
void clear_oled()
{
 3bc:	e0 e0       	ldi	r30, 0x00	; 0
 3be:	f8 e1       	ldi	r31, 0x18	; 24
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
	{
		ext_ram[i] = 0x00;
 3c0:	11 92       	st	Z+, r1
****************************************************************************/
void clear_oled()
{
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
 3c2:	e1 15       	cp	r30, r1
 3c4:	8c e1       	ldi	r24, 0x1C	; 28
 3c6:	f8 07       	cpc	r31, r24
 3c8:	d9 f7       	brne	.-10     	; 0x3c0 <clear_oled+0x4>
	{
		ext_ram[i] = 0x00;
	}
}
 3ca:	08 95       	ret

000003cc <init>:
* \brief Initialize all important peripherals and pins
*
****************************************************************************/
void init()
{
	USART_init(MYUBBR);
 3cc:	8f e1       	ldi	r24, 0x1F	; 31
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 64 02 	call	0x4c8	; 0x4c8 <USART_init>
	/* Enables standard IO functions */	
	fdevopen(USART_putchar, USART_getchar);
 3d4:	61 e7       	ldi	r22, 0x71	; 113
 3d6:	72 e0       	ldi	r23, 0x02	; 2
 3d8:	8b e6       	ldi	r24, 0x6B	; 107
 3da:	92 e0       	ldi	r25, 0x02	; 2
 3dc:	0e 94 82 02 	call	0x504	; 0x504 <fdevopen>
	/* Enables external memory*/
	set_bit(MCUCR, SRE);
 3e0:	85 b7       	in	r24, 0x35	; 53
 3e2:	80 68       	ori	r24, 0x80	; 128
 3e4:	85 bf       	out	0x35, r24	; 53
	/* Pin 1 is set to output for the LED*/
	set_bit(DDRB, PB0);
 3e6:	b8 9a       	sbi	0x17, 0	; 23
	/* Pin is now driven LOW*/
	clear_bit(PORTB, PB0);
 3e8:	c0 98       	cbi	0x18, 0	; 24
	/* Initialize OLED display */
	init_oled();
 3ea:	0e 94 97 01 	call	0x32e	; 0x32e <init_oled>
	interface_init();
 3ee:	0e 94 76 02 	call	0x4ec	; 0x4ec <interface_init>
 3f2:	08 95       	ret

000003f4 <main>:




int main(void)
{	
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
 3f8:	1f 92       	push	r1
 3fa:	cd b7       	in	r28, 0x3d	; 61
 3fc:	de b7       	in	r29, 0x3e	; 62

	clear_bit(DDRD, PD3);
 3fe:	8b 98       	cbi	0x11, 3	; 17
	clear_bit(DDRD, PD2);
 400:	8a 98       	cbi	0x11, 2	; 17
	
	init();
 402:	0e 94 e6 01 	call	0x3cc	; 0x3cc <init>
	volatile char SPIdata = 0;
 406:	19 82       	std	Y+1, r1	; 0x01
	JoystickPosition position;
	JoystickPosition calibration;
	JoystickDirection direction;
	JoystickDirection change_y, change_x;
	ScreenName screen_name = 0;
	calibration = joystick_calibration();
 408:	0e 94 00 01 	call	0x200	; 0x200 <joystick_calibration>
 40c:	6c 01       	movw	r12, r24
	CANMessage canMessage, canMessage2;
	
	//SRAM_test();
	
	CAN_init();
 40e:	0e 94 63 00 	call	0xc6	; 0xc6 <CAN_init>
	
	clear_oled();
 412:	0e 94 de 01 	call	0x3bc	; 0x3bc <clear_oled>
	reset_position();
 416:	0e 94 c4 01 	call	0x388	; 0x388 <reset_position>
	
	clear_oled();
 41a:	0e 94 de 01 	call	0x3bc	; 0x3bc <clear_oled>
	refresh_oled();
 41e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <refresh_oled>
	canMessage.data_array[0] = 0x10;
	
	canMessage2.ID = 0;
	canMessage2.length = 0;
	
	printf("start\n");
 422:	86 e2       	ldi	r24, 0x26	; 38
 424:	91 e0       	ldi	r25, 0x01	; 1
 426:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <puts>
		//interface_state_machine(calibration);
	
		position = read_joystick_position(calibration);
		data = read_touchpad_data();
		
		printf("The x-axis is: %d  ", position.xaxis);
 42a:	0f 2e       	mov	r0, r31
 42c:	fc e2       	ldi	r31, 0x2C	; 44
 42e:	ef 2e       	mov	r14, r31
 430:	f1 e0       	ldi	r31, 0x01	; 1
 432:	ff 2e       	mov	r15, r31
 434:	f0 2d       	mov	r31, r0
		printf("  The y-axis is: %d \n ", position.yaxis);
 436:	00 e4       	ldi	r16, 0x40	; 64
 438:	11 e0       	ldi	r17, 0x01	; 1
		
		//_delay_ms(200);
		
		//interface_state_machine(calibration);
	
		position = read_joystick_position(calibration);
 43a:	c6 01       	movw	r24, r12
 43c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <read_joystick_position>
 440:	68 2e       	mov	r6, r24
 442:	79 2e       	mov	r7, r25
		data = read_touchpad_data();
 444:	0e 94 0e 01 	call	0x21c	; 0x21c <read_touchpad_data>
 448:	4b 01       	movw	r8, r22
 44a:	5c 01       	movw	r10, r24
		
		printf("The x-axis is: %d  ", position.xaxis);
 44c:	1f 92       	push	r1
 44e:	6f 92       	push	r6
 450:	ff 92       	push	r15
 452:	ef 92       	push	r14
 454:	0e 94 cd 02 	call	0x59a	; 0x59a <printf>
		printf("  The y-axis is: %d \n ", position.yaxis);
 458:	1f 92       	push	r1
 45a:	7f 92       	push	r7
 45c:	1f 93       	push	r17
 45e:	0f 93       	push	r16
 460:	0e 94 cd 02 	call	0x59a	; 0x59a <printf>
		//_delay_ms(100);
		send_joystick_possition(position, data);
 464:	b5 01       	movw	r22, r10
 466:	a4 01       	movw	r20, r8
 468:	86 2d       	mov	r24, r6
 46a:	97 2d       	mov	r25, r7
 46c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <send_joystick_possition>
 470:	8c ec       	ldi	r24, 0xCC	; 204
 472:	94 e0       	ldi	r25, 0x04	; 4
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <main+0x80>
 478:	00 c0       	rjmp	.+0      	; 0x47a <main+0x86>
 47a:	00 00       	nop
 47c:	8c ec       	ldi	r24, 0xCC	; 204
 47e:	94 e0       	ldi	r25, 0x04	; 4
 480:	01 97       	sbiw	r24, 0x01	; 1
 482:	f1 f7       	brne	.-4      	; 0x480 <main+0x8c>
 484:	00 c0       	rjmp	.+0      	; 0x486 <main+0x92>
 486:	00 00       	nop
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	f8 94       	cli
 48c:	de bf       	out	0x3e, r29	; 62
 48e:	0f be       	out	0x3f, r0	; 63
 490:	cd bf       	out	0x3d, r28	; 61
 492:	d3 cf       	rjmp	.-90     	; 0x43a <main+0x46>

00000494 <SPI_init>:
*
****************************************************************************/
void SPI_init()
{
	/* Drive MOSI, SCK and CS HIGH*/
	DDR_SPI |= (1 << DD_MOSI) | (1 << DD_SCK) | (1 << DD_CS);
 494:	87 b3       	in	r24, 0x17	; 23
 496:	80 6b       	ori	r24, 0xB0	; 176
 498:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master mode, clock rate fck/16*/
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 49a:	81 e5       	ldi	r24, 0x51	; 81
 49c:	8d b9       	out	0x0d, r24	; 13
 49e:	08 95       	ret

000004a0 <SPI_write>:
*
* \param in byte to be written
****************************************************************************/
void SPI_write(uint8_t data)
{
	SPDR = data;
 4a0:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1 << SPIF)));
 4a2:	77 9b       	sbis	0x0e, 7	; 14
 4a4:	fe cf       	rjmp	.-4      	; 0x4a2 <SPI_write+0x2>
}
 4a6:	08 95       	ret

000004a8 <SPI_read>:
* \brief Read data from slave unit
*
* \return Read data
****************************************************************************/
uint8_t SPI_read()
{
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	1f 92       	push	r1
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t retVal;
	SPDR = 0xFF;
 4b2:	8f ef       	ldi	r24, 0xFF	; 255
 4b4:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1 << SPIF)));
 4b6:	77 9b       	sbis	0x0e, 7	; 14
 4b8:	fe cf       	rjmp	.-4      	; 0x4b6 <SPI_read+0xe>
	
	retVal = SPDR;
 4ba:	8f b1       	in	r24, 0x0f	; 15
 4bc:	89 83       	std	Y+1, r24	; 0x01
	
	return retVal;
 4be:	89 81       	ldd	r24, Y+1	; 0x01
 4c0:	0f 90       	pop	r0
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	08 95       	ret

000004c8 <USART_init>:
 * \param ubrr Desired baud rate.
 ****************************************************************************/
void USART_init(unsigned int ubrr)
{
	//Set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
 4c8:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
 4ca:	89 b9       	out	0x09, r24	; 9
	// Enable receiver and transmitter
	UCSR0B = (1<< RXEN0) | (1<<TXEN0) | (1<<RXCIE0) | (1<<TXCIE0);
 4cc:	88 ed       	ldi	r24, 0xD8	; 216
 4ce:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 2 stop bit
	UCSR0C = (1<<URSEL0) | (3<<UCSZ00) ;
 4d0:	86 e8       	ldi	r24, 0x86	; 134
 4d2:	80 bd       	out	0x20, r24	; 32
 4d4:	08 95       	ret

000004d6 <USART_putchar>:
 * \param c Char to be sent.
 * \return Always 0.
 ****************************************************************************/
int USART_putchar(char c)
{
	loop_until_bit_is_set(UCSR0A, UDRE0);
 4d6:	5d 9b       	sbis	0x0b, 5	; 11
 4d8:	fe cf       	rjmp	.-4      	; 0x4d6 <USART_putchar>
	UDR0 = c;
 4da:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	08 95       	ret

000004e2 <USART_getchar>:
 * \return Received char.
 ****************************************************************************/
int USART_getchar()
{
	char c;
	loop_until_bit_is_set(UCSR0A, RXC0);
 4e2:	5f 9b       	sbis	0x0b, 7	; 11
 4e4:	fe cf       	rjmp	.-4      	; 0x4e2 <USART_getchar>
	c = UDR0;
 4e6:	8c b1       	in	r24, 0x0c	; 12
	return c;
}
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	08 95       	ret

000004ec <interface_init>:
	volatile char *ext_ram = (char *) SRAM_USERNAME_ADDR;
	volatile char *eeprom = (char *) EEPROM_HIGH_SCORES_BASE_ADDR;

	for(int i = 0; i < SRAM_USERNAME_ADDR_LENGTH; i++)
	{
		ext_ram[i] = 'A';
 4ec:	81 e4       	ldi	r24, 0x41	; 65
 4ee:	80 93 00 1c 	sts	0x1C00, r24
 4f2:	80 93 01 1c 	sts	0x1C01, r24
 4f6:	80 93 02 1c 	sts	0x1C02, r24
 4fa:	80 93 03 1c 	sts	0x1C03, r24
 4fe:	80 93 04 1c 	sts	0x1C04, r24
 502:	08 95       	ret

00000504 <fdevopen>:
 504:	0f 93       	push	r16
 506:	1f 93       	push	r17
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	ec 01       	movw	r28, r24
 50e:	8b 01       	movw	r16, r22
 510:	00 97       	sbiw	r24, 0x00	; 0
 512:	31 f4       	brne	.+12     	; 0x520 <fdevopen+0x1c>
 514:	61 15       	cp	r22, r1
 516:	71 05       	cpc	r23, r1
 518:	19 f4       	brne	.+6      	; 0x520 <fdevopen+0x1c>
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	38 c0       	rjmp	.+112    	; 0x590 <fdevopen+0x8c>
 520:	6e e0       	ldi	r22, 0x0E	; 14
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <calloc>
 52c:	fc 01       	movw	r30, r24
 52e:	00 97       	sbiw	r24, 0x00	; 0
 530:	a1 f3       	breq	.-24     	; 0x51a <fdevopen+0x16>
 532:	80 e8       	ldi	r24, 0x80	; 128
 534:	83 83       	std	Z+3, r24	; 0x03
 536:	01 15       	cp	r16, r1
 538:	11 05       	cpc	r17, r1
 53a:	71 f0       	breq	.+28     	; 0x558 <fdevopen+0x54>
 53c:	13 87       	std	Z+11, r17	; 0x0b
 53e:	02 87       	std	Z+10, r16	; 0x0a
 540:	81 e8       	ldi	r24, 0x81	; 129
 542:	83 83       	std	Z+3, r24	; 0x03
 544:	80 91 58 01 	lds	r24, 0x0158
 548:	90 91 59 01 	lds	r25, 0x0159
 54c:	89 2b       	or	r24, r25
 54e:	21 f4       	brne	.+8      	; 0x558 <fdevopen+0x54>
 550:	f0 93 59 01 	sts	0x0159, r31
 554:	e0 93 58 01 	sts	0x0158, r30
 558:	20 97       	sbiw	r28, 0x00	; 0
 55a:	c9 f0       	breq	.+50     	; 0x58e <fdevopen+0x8a>
 55c:	d1 87       	std	Z+9, r29	; 0x09
 55e:	c0 87       	std	Z+8, r28	; 0x08
 560:	83 81       	ldd	r24, Z+3	; 0x03
 562:	82 60       	ori	r24, 0x02	; 2
 564:	83 83       	std	Z+3, r24	; 0x03
 566:	80 91 5a 01 	lds	r24, 0x015A
 56a:	90 91 5b 01 	lds	r25, 0x015B
 56e:	89 2b       	or	r24, r25
 570:	71 f4       	brne	.+28     	; 0x58e <fdevopen+0x8a>
 572:	f0 93 5b 01 	sts	0x015B, r31
 576:	e0 93 5a 01 	sts	0x015A, r30
 57a:	80 91 5c 01 	lds	r24, 0x015C
 57e:	90 91 5d 01 	lds	r25, 0x015D
 582:	89 2b       	or	r24, r25
 584:	21 f4       	brne	.+8      	; 0x58e <fdevopen+0x8a>
 586:	f0 93 5d 01 	sts	0x015D, r31
 58a:	e0 93 5c 01 	sts	0x015C, r30
 58e:	cf 01       	movw	r24, r30
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	1f 91       	pop	r17
 596:	0f 91       	pop	r16
 598:	08 95       	ret

0000059a <printf>:
 59a:	a0 e0       	ldi	r26, 0x00	; 0
 59c:	b0 e0       	ldi	r27, 0x00	; 0
 59e:	e3 ed       	ldi	r30, 0xD3	; 211
 5a0:	f2 e0       	ldi	r31, 0x02	; 2
 5a2:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__prologue_saves__+0x20>
 5a6:	fe 01       	movw	r30, r28
 5a8:	35 96       	adiw	r30, 0x05	; 5
 5aa:	61 91       	ld	r22, Z+
 5ac:	71 91       	ld	r23, Z+
 5ae:	af 01       	movw	r20, r30
 5b0:	80 91 5a 01 	lds	r24, 0x015A
 5b4:	90 91 5b 01 	lds	r25, 0x015B
 5b8:	0e 94 0e 03 	call	0x61c	; 0x61c <vfprintf>
 5bc:	e2 e0       	ldi	r30, 0x02	; 2
 5be:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <__epilogue_restores__+0x20>

000005c2 <puts>:
 5c2:	0f 93       	push	r16
 5c4:	1f 93       	push	r17
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	e0 91 5a 01 	lds	r30, 0x015A
 5ce:	f0 91 5b 01 	lds	r31, 0x015B
 5d2:	23 81       	ldd	r18, Z+3	; 0x03
 5d4:	21 ff       	sbrs	r18, 1
 5d6:	1b c0       	rjmp	.+54     	; 0x60e <puts+0x4c>
 5d8:	ec 01       	movw	r28, r24
 5da:	00 e0       	ldi	r16, 0x00	; 0
 5dc:	10 e0       	ldi	r17, 0x00	; 0
 5de:	89 91       	ld	r24, Y+
 5e0:	60 91 5a 01 	lds	r22, 0x015A
 5e4:	70 91 5b 01 	lds	r23, 0x015B
 5e8:	db 01       	movw	r26, r22
 5ea:	18 96       	adiw	r26, 0x08	; 8
 5ec:	ed 91       	ld	r30, X+
 5ee:	fc 91       	ld	r31, X
 5f0:	19 97       	sbiw	r26, 0x09	; 9
 5f2:	88 23       	and	r24, r24
 5f4:	31 f0       	breq	.+12     	; 0x602 <puts+0x40>
 5f6:	09 95       	icall
 5f8:	89 2b       	or	r24, r25
 5fa:	89 f3       	breq	.-30     	; 0x5de <puts+0x1c>
 5fc:	0f ef       	ldi	r16, 0xFF	; 255
 5fe:	1f ef       	ldi	r17, 0xFF	; 255
 600:	ee cf       	rjmp	.-36     	; 0x5de <puts+0x1c>
 602:	8a e0       	ldi	r24, 0x0A	; 10
 604:	09 95       	icall
 606:	89 2b       	or	r24, r25
 608:	11 f4       	brne	.+4      	; 0x60e <puts+0x4c>
 60a:	c8 01       	movw	r24, r16
 60c:	02 c0       	rjmp	.+4      	; 0x612 <puts+0x50>
 60e:	8f ef       	ldi	r24, 0xFF	; 255
 610:	9f ef       	ldi	r25, 0xFF	; 255
 612:	df 91       	pop	r29
 614:	cf 91       	pop	r28
 616:	1f 91       	pop	r17
 618:	0f 91       	pop	r16
 61a:	08 95       	ret

0000061c <vfprintf>:
 61c:	ac e0       	ldi	r26, 0x0C	; 12
 61e:	b0 e0       	ldi	r27, 0x00	; 0
 620:	e4 e1       	ldi	r30, 0x14	; 20
 622:	f3 e0       	ldi	r31, 0x03	; 3
 624:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__prologue_saves__>
 628:	7c 01       	movw	r14, r24
 62a:	6b 01       	movw	r12, r22
 62c:	8a 01       	movw	r16, r20
 62e:	fc 01       	movw	r30, r24
 630:	17 82       	std	Z+7, r1	; 0x07
 632:	16 82       	std	Z+6, r1	; 0x06
 634:	83 81       	ldd	r24, Z+3	; 0x03
 636:	81 ff       	sbrs	r24, 1
 638:	bd c1       	rjmp	.+890    	; 0x9b4 <vfprintf+0x398>
 63a:	ce 01       	movw	r24, r28
 63c:	01 96       	adiw	r24, 0x01	; 1
 63e:	4c 01       	movw	r8, r24
 640:	f7 01       	movw	r30, r14
 642:	93 81       	ldd	r25, Z+3	; 0x03
 644:	f6 01       	movw	r30, r12
 646:	93 fd       	sbrc	r25, 3
 648:	85 91       	lpm	r24, Z+
 64a:	93 ff       	sbrs	r25, 3
 64c:	81 91       	ld	r24, Z+
 64e:	6f 01       	movw	r12, r30
 650:	88 23       	and	r24, r24
 652:	09 f4       	brne	.+2      	; 0x656 <vfprintf+0x3a>
 654:	ab c1       	rjmp	.+854    	; 0x9ac <vfprintf+0x390>
 656:	85 32       	cpi	r24, 0x25	; 37
 658:	39 f4       	brne	.+14     	; 0x668 <vfprintf+0x4c>
 65a:	93 fd       	sbrc	r25, 3
 65c:	85 91       	lpm	r24, Z+
 65e:	93 ff       	sbrs	r25, 3
 660:	81 91       	ld	r24, Z+
 662:	6f 01       	movw	r12, r30
 664:	85 32       	cpi	r24, 0x25	; 37
 666:	29 f4       	brne	.+10     	; 0x672 <vfprintf+0x56>
 668:	b7 01       	movw	r22, r14
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	0e 94 40 06 	call	0xc80	; 0xc80 <fputc>
 670:	e7 cf       	rjmp	.-50     	; 0x640 <vfprintf+0x24>
 672:	51 2c       	mov	r5, r1
 674:	31 2c       	mov	r3, r1
 676:	20 e0       	ldi	r18, 0x00	; 0
 678:	20 32       	cpi	r18, 0x20	; 32
 67a:	a0 f4       	brcc	.+40     	; 0x6a4 <vfprintf+0x88>
 67c:	8b 32       	cpi	r24, 0x2B	; 43
 67e:	69 f0       	breq	.+26     	; 0x69a <vfprintf+0x7e>
 680:	30 f4       	brcc	.+12     	; 0x68e <vfprintf+0x72>
 682:	80 32       	cpi	r24, 0x20	; 32
 684:	59 f0       	breq	.+22     	; 0x69c <vfprintf+0x80>
 686:	83 32       	cpi	r24, 0x23	; 35
 688:	69 f4       	brne	.+26     	; 0x6a4 <vfprintf+0x88>
 68a:	20 61       	ori	r18, 0x10	; 16
 68c:	2c c0       	rjmp	.+88     	; 0x6e6 <vfprintf+0xca>
 68e:	8d 32       	cpi	r24, 0x2D	; 45
 690:	39 f0       	breq	.+14     	; 0x6a0 <vfprintf+0x84>
 692:	80 33       	cpi	r24, 0x30	; 48
 694:	39 f4       	brne	.+14     	; 0x6a4 <vfprintf+0x88>
 696:	21 60       	ori	r18, 0x01	; 1
 698:	26 c0       	rjmp	.+76     	; 0x6e6 <vfprintf+0xca>
 69a:	22 60       	ori	r18, 0x02	; 2
 69c:	24 60       	ori	r18, 0x04	; 4
 69e:	23 c0       	rjmp	.+70     	; 0x6e6 <vfprintf+0xca>
 6a0:	28 60       	ori	r18, 0x08	; 8
 6a2:	21 c0       	rjmp	.+66     	; 0x6e6 <vfprintf+0xca>
 6a4:	27 fd       	sbrc	r18, 7
 6a6:	27 c0       	rjmp	.+78     	; 0x6f6 <vfprintf+0xda>
 6a8:	30 ed       	ldi	r19, 0xD0	; 208
 6aa:	38 0f       	add	r19, r24
 6ac:	3a 30       	cpi	r19, 0x0A	; 10
 6ae:	78 f4       	brcc	.+30     	; 0x6ce <vfprintf+0xb2>
 6b0:	26 ff       	sbrs	r18, 6
 6b2:	06 c0       	rjmp	.+12     	; 0x6c0 <vfprintf+0xa4>
 6b4:	fa e0       	ldi	r31, 0x0A	; 10
 6b6:	5f 9e       	mul	r5, r31
 6b8:	30 0d       	add	r19, r0
 6ba:	11 24       	eor	r1, r1
 6bc:	53 2e       	mov	r5, r19
 6be:	13 c0       	rjmp	.+38     	; 0x6e6 <vfprintf+0xca>
 6c0:	8a e0       	ldi	r24, 0x0A	; 10
 6c2:	38 9e       	mul	r3, r24
 6c4:	30 0d       	add	r19, r0
 6c6:	11 24       	eor	r1, r1
 6c8:	33 2e       	mov	r3, r19
 6ca:	20 62       	ori	r18, 0x20	; 32
 6cc:	0c c0       	rjmp	.+24     	; 0x6e6 <vfprintf+0xca>
 6ce:	8e 32       	cpi	r24, 0x2E	; 46
 6d0:	21 f4       	brne	.+8      	; 0x6da <vfprintf+0xbe>
 6d2:	26 fd       	sbrc	r18, 6
 6d4:	6b c1       	rjmp	.+726    	; 0x9ac <vfprintf+0x390>
 6d6:	20 64       	ori	r18, 0x40	; 64
 6d8:	06 c0       	rjmp	.+12     	; 0x6e6 <vfprintf+0xca>
 6da:	8c 36       	cpi	r24, 0x6C	; 108
 6dc:	11 f4       	brne	.+4      	; 0x6e2 <vfprintf+0xc6>
 6de:	20 68       	ori	r18, 0x80	; 128
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <vfprintf+0xca>
 6e2:	88 36       	cpi	r24, 0x68	; 104
 6e4:	41 f4       	brne	.+16     	; 0x6f6 <vfprintf+0xda>
 6e6:	f6 01       	movw	r30, r12
 6e8:	93 fd       	sbrc	r25, 3
 6ea:	85 91       	lpm	r24, Z+
 6ec:	93 ff       	sbrs	r25, 3
 6ee:	81 91       	ld	r24, Z+
 6f0:	6f 01       	movw	r12, r30
 6f2:	81 11       	cpse	r24, r1
 6f4:	c1 cf       	rjmp	.-126    	; 0x678 <vfprintf+0x5c>
 6f6:	98 2f       	mov	r25, r24
 6f8:	9f 7d       	andi	r25, 0xDF	; 223
 6fa:	95 54       	subi	r25, 0x45	; 69
 6fc:	93 30       	cpi	r25, 0x03	; 3
 6fe:	28 f4       	brcc	.+10     	; 0x70a <vfprintf+0xee>
 700:	0c 5f       	subi	r16, 0xFC	; 252
 702:	1f 4f       	sbci	r17, 0xFF	; 255
 704:	ff e3       	ldi	r31, 0x3F	; 63
 706:	f9 83       	std	Y+1, r31	; 0x01
 708:	0d c0       	rjmp	.+26     	; 0x724 <vfprintf+0x108>
 70a:	83 36       	cpi	r24, 0x63	; 99
 70c:	31 f0       	breq	.+12     	; 0x71a <vfprintf+0xfe>
 70e:	83 37       	cpi	r24, 0x73	; 115
 710:	71 f0       	breq	.+28     	; 0x72e <vfprintf+0x112>
 712:	83 35       	cpi	r24, 0x53	; 83
 714:	09 f0       	breq	.+2      	; 0x718 <vfprintf+0xfc>
 716:	5b c0       	rjmp	.+182    	; 0x7ce <vfprintf+0x1b2>
 718:	22 c0       	rjmp	.+68     	; 0x75e <vfprintf+0x142>
 71a:	f8 01       	movw	r30, r16
 71c:	80 81       	ld	r24, Z
 71e:	89 83       	std	Y+1, r24	; 0x01
 720:	0e 5f       	subi	r16, 0xFE	; 254
 722:	1f 4f       	sbci	r17, 0xFF	; 255
 724:	44 24       	eor	r4, r4
 726:	43 94       	inc	r4
 728:	51 2c       	mov	r5, r1
 72a:	54 01       	movw	r10, r8
 72c:	15 c0       	rjmp	.+42     	; 0x758 <vfprintf+0x13c>
 72e:	38 01       	movw	r6, r16
 730:	f2 e0       	ldi	r31, 0x02	; 2
 732:	6f 0e       	add	r6, r31
 734:	71 1c       	adc	r7, r1
 736:	f8 01       	movw	r30, r16
 738:	a0 80       	ld	r10, Z
 73a:	b1 80       	ldd	r11, Z+1	; 0x01
 73c:	26 ff       	sbrs	r18, 6
 73e:	03 c0       	rjmp	.+6      	; 0x746 <vfprintf+0x12a>
 740:	65 2d       	mov	r22, r5
 742:	70 e0       	ldi	r23, 0x00	; 0
 744:	02 c0       	rjmp	.+4      	; 0x74a <vfprintf+0x12e>
 746:	6f ef       	ldi	r22, 0xFF	; 255
 748:	7f ef       	ldi	r23, 0xFF	; 255
 74a:	c5 01       	movw	r24, r10
 74c:	2c 87       	std	Y+12, r18	; 0x0c
 74e:	0e 94 35 06 	call	0xc6a	; 0xc6a <strnlen>
 752:	2c 01       	movw	r4, r24
 754:	83 01       	movw	r16, r6
 756:	2c 85       	ldd	r18, Y+12	; 0x0c
 758:	2f 77       	andi	r18, 0x7F	; 127
 75a:	22 2e       	mov	r2, r18
 75c:	17 c0       	rjmp	.+46     	; 0x78c <vfprintf+0x170>
 75e:	38 01       	movw	r6, r16
 760:	f2 e0       	ldi	r31, 0x02	; 2
 762:	6f 0e       	add	r6, r31
 764:	71 1c       	adc	r7, r1
 766:	f8 01       	movw	r30, r16
 768:	a0 80       	ld	r10, Z
 76a:	b1 80       	ldd	r11, Z+1	; 0x01
 76c:	26 ff       	sbrs	r18, 6
 76e:	03 c0       	rjmp	.+6      	; 0x776 <vfprintf+0x15a>
 770:	65 2d       	mov	r22, r5
 772:	70 e0       	ldi	r23, 0x00	; 0
 774:	02 c0       	rjmp	.+4      	; 0x77a <vfprintf+0x15e>
 776:	6f ef       	ldi	r22, 0xFF	; 255
 778:	7f ef       	ldi	r23, 0xFF	; 255
 77a:	c5 01       	movw	r24, r10
 77c:	2c 87       	std	Y+12, r18	; 0x0c
 77e:	0e 94 23 06 	call	0xc46	; 0xc46 <strnlen_P>
 782:	2c 01       	movw	r4, r24
 784:	2c 85       	ldd	r18, Y+12	; 0x0c
 786:	20 68       	ori	r18, 0x80	; 128
 788:	22 2e       	mov	r2, r18
 78a:	83 01       	movw	r16, r6
 78c:	23 fc       	sbrc	r2, 3
 78e:	1b c0       	rjmp	.+54     	; 0x7c6 <vfprintf+0x1aa>
 790:	83 2d       	mov	r24, r3
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	48 16       	cp	r4, r24
 796:	59 06       	cpc	r5, r25
 798:	b0 f4       	brcc	.+44     	; 0x7c6 <vfprintf+0x1aa>
 79a:	b7 01       	movw	r22, r14
 79c:	80 e2       	ldi	r24, 0x20	; 32
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	0e 94 40 06 	call	0xc80	; 0xc80 <fputc>
 7a4:	3a 94       	dec	r3
 7a6:	f4 cf       	rjmp	.-24     	; 0x790 <vfprintf+0x174>
 7a8:	f5 01       	movw	r30, r10
 7aa:	27 fc       	sbrc	r2, 7
 7ac:	85 91       	lpm	r24, Z+
 7ae:	27 fe       	sbrs	r2, 7
 7b0:	81 91       	ld	r24, Z+
 7b2:	5f 01       	movw	r10, r30
 7b4:	b7 01       	movw	r22, r14
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	0e 94 40 06 	call	0xc80	; 0xc80 <fputc>
 7bc:	31 10       	cpse	r3, r1
 7be:	3a 94       	dec	r3
 7c0:	f1 e0       	ldi	r31, 0x01	; 1
 7c2:	4f 1a       	sub	r4, r31
 7c4:	51 08       	sbc	r5, r1
 7c6:	41 14       	cp	r4, r1
 7c8:	51 04       	cpc	r5, r1
 7ca:	71 f7       	brne	.-36     	; 0x7a8 <vfprintf+0x18c>
 7cc:	e5 c0       	rjmp	.+458    	; 0x998 <vfprintf+0x37c>
 7ce:	84 36       	cpi	r24, 0x64	; 100
 7d0:	11 f0       	breq	.+4      	; 0x7d6 <vfprintf+0x1ba>
 7d2:	89 36       	cpi	r24, 0x69	; 105
 7d4:	39 f5       	brne	.+78     	; 0x824 <vfprintf+0x208>
 7d6:	f8 01       	movw	r30, r16
 7d8:	27 ff       	sbrs	r18, 7
 7da:	07 c0       	rjmp	.+14     	; 0x7ea <vfprintf+0x1ce>
 7dc:	60 81       	ld	r22, Z
 7de:	71 81       	ldd	r23, Z+1	; 0x01
 7e0:	82 81       	ldd	r24, Z+2	; 0x02
 7e2:	93 81       	ldd	r25, Z+3	; 0x03
 7e4:	0c 5f       	subi	r16, 0xFC	; 252
 7e6:	1f 4f       	sbci	r17, 0xFF	; 255
 7e8:	08 c0       	rjmp	.+16     	; 0x7fa <vfprintf+0x1de>
 7ea:	60 81       	ld	r22, Z
 7ec:	71 81       	ldd	r23, Z+1	; 0x01
 7ee:	88 27       	eor	r24, r24
 7f0:	77 fd       	sbrc	r23, 7
 7f2:	80 95       	com	r24
 7f4:	98 2f       	mov	r25, r24
 7f6:	0e 5f       	subi	r16, 0xFE	; 254
 7f8:	1f 4f       	sbci	r17, 0xFF	; 255
 7fa:	2f 76       	andi	r18, 0x6F	; 111
 7fc:	b2 2e       	mov	r11, r18
 7fe:	97 ff       	sbrs	r25, 7
 800:	09 c0       	rjmp	.+18     	; 0x814 <vfprintf+0x1f8>
 802:	90 95       	com	r25
 804:	80 95       	com	r24
 806:	70 95       	com	r23
 808:	61 95       	neg	r22
 80a:	7f 4f       	sbci	r23, 0xFF	; 255
 80c:	8f 4f       	sbci	r24, 0xFF	; 255
 80e:	9f 4f       	sbci	r25, 0xFF	; 255
 810:	20 68       	ori	r18, 0x80	; 128
 812:	b2 2e       	mov	r11, r18
 814:	2a e0       	ldi	r18, 0x0A	; 10
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	a4 01       	movw	r20, r8
 81a:	0e 94 72 06 	call	0xce4	; 0xce4 <__ultoa_invert>
 81e:	a8 2e       	mov	r10, r24
 820:	a8 18       	sub	r10, r8
 822:	44 c0       	rjmp	.+136    	; 0x8ac <vfprintf+0x290>
 824:	85 37       	cpi	r24, 0x75	; 117
 826:	29 f4       	brne	.+10     	; 0x832 <vfprintf+0x216>
 828:	2f 7e       	andi	r18, 0xEF	; 239
 82a:	b2 2e       	mov	r11, r18
 82c:	2a e0       	ldi	r18, 0x0A	; 10
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	25 c0       	rjmp	.+74     	; 0x87c <vfprintf+0x260>
 832:	f2 2f       	mov	r31, r18
 834:	f9 7f       	andi	r31, 0xF9	; 249
 836:	bf 2e       	mov	r11, r31
 838:	8f 36       	cpi	r24, 0x6F	; 111
 83a:	c1 f0       	breq	.+48     	; 0x86c <vfprintf+0x250>
 83c:	18 f4       	brcc	.+6      	; 0x844 <vfprintf+0x228>
 83e:	88 35       	cpi	r24, 0x58	; 88
 840:	79 f0       	breq	.+30     	; 0x860 <vfprintf+0x244>
 842:	b4 c0       	rjmp	.+360    	; 0x9ac <vfprintf+0x390>
 844:	80 37       	cpi	r24, 0x70	; 112
 846:	19 f0       	breq	.+6      	; 0x84e <vfprintf+0x232>
 848:	88 37       	cpi	r24, 0x78	; 120
 84a:	21 f0       	breq	.+8      	; 0x854 <vfprintf+0x238>
 84c:	af c0       	rjmp	.+350    	; 0x9ac <vfprintf+0x390>
 84e:	2f 2f       	mov	r18, r31
 850:	20 61       	ori	r18, 0x10	; 16
 852:	b2 2e       	mov	r11, r18
 854:	b4 fe       	sbrs	r11, 4
 856:	0d c0       	rjmp	.+26     	; 0x872 <vfprintf+0x256>
 858:	8b 2d       	mov	r24, r11
 85a:	84 60       	ori	r24, 0x04	; 4
 85c:	b8 2e       	mov	r11, r24
 85e:	09 c0       	rjmp	.+18     	; 0x872 <vfprintf+0x256>
 860:	24 ff       	sbrs	r18, 4
 862:	0a c0       	rjmp	.+20     	; 0x878 <vfprintf+0x25c>
 864:	9f 2f       	mov	r25, r31
 866:	96 60       	ori	r25, 0x06	; 6
 868:	b9 2e       	mov	r11, r25
 86a:	06 c0       	rjmp	.+12     	; 0x878 <vfprintf+0x25c>
 86c:	28 e0       	ldi	r18, 0x08	; 8
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	05 c0       	rjmp	.+10     	; 0x87c <vfprintf+0x260>
 872:	20 e1       	ldi	r18, 0x10	; 16
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	02 c0       	rjmp	.+4      	; 0x87c <vfprintf+0x260>
 878:	20 e1       	ldi	r18, 0x10	; 16
 87a:	32 e0       	ldi	r19, 0x02	; 2
 87c:	f8 01       	movw	r30, r16
 87e:	b7 fe       	sbrs	r11, 7
 880:	07 c0       	rjmp	.+14     	; 0x890 <vfprintf+0x274>
 882:	60 81       	ld	r22, Z
 884:	71 81       	ldd	r23, Z+1	; 0x01
 886:	82 81       	ldd	r24, Z+2	; 0x02
 888:	93 81       	ldd	r25, Z+3	; 0x03
 88a:	0c 5f       	subi	r16, 0xFC	; 252
 88c:	1f 4f       	sbci	r17, 0xFF	; 255
 88e:	06 c0       	rjmp	.+12     	; 0x89c <vfprintf+0x280>
 890:	60 81       	ld	r22, Z
 892:	71 81       	ldd	r23, Z+1	; 0x01
 894:	80 e0       	ldi	r24, 0x00	; 0
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	0e 5f       	subi	r16, 0xFE	; 254
 89a:	1f 4f       	sbci	r17, 0xFF	; 255
 89c:	a4 01       	movw	r20, r8
 89e:	0e 94 72 06 	call	0xce4	; 0xce4 <__ultoa_invert>
 8a2:	a8 2e       	mov	r10, r24
 8a4:	a8 18       	sub	r10, r8
 8a6:	fb 2d       	mov	r31, r11
 8a8:	ff 77       	andi	r31, 0x7F	; 127
 8aa:	bf 2e       	mov	r11, r31
 8ac:	b6 fe       	sbrs	r11, 6
 8ae:	0b c0       	rjmp	.+22     	; 0x8c6 <vfprintf+0x2aa>
 8b0:	2b 2d       	mov	r18, r11
 8b2:	2e 7f       	andi	r18, 0xFE	; 254
 8b4:	a5 14       	cp	r10, r5
 8b6:	50 f4       	brcc	.+20     	; 0x8cc <vfprintf+0x2b0>
 8b8:	b4 fe       	sbrs	r11, 4
 8ba:	0a c0       	rjmp	.+20     	; 0x8d0 <vfprintf+0x2b4>
 8bc:	b2 fc       	sbrc	r11, 2
 8be:	08 c0       	rjmp	.+16     	; 0x8d0 <vfprintf+0x2b4>
 8c0:	2b 2d       	mov	r18, r11
 8c2:	2e 7e       	andi	r18, 0xEE	; 238
 8c4:	05 c0       	rjmp	.+10     	; 0x8d0 <vfprintf+0x2b4>
 8c6:	7a 2c       	mov	r7, r10
 8c8:	2b 2d       	mov	r18, r11
 8ca:	03 c0       	rjmp	.+6      	; 0x8d2 <vfprintf+0x2b6>
 8cc:	7a 2c       	mov	r7, r10
 8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <vfprintf+0x2b6>
 8d0:	75 2c       	mov	r7, r5
 8d2:	24 ff       	sbrs	r18, 4
 8d4:	0d c0       	rjmp	.+26     	; 0x8f0 <vfprintf+0x2d4>
 8d6:	fe 01       	movw	r30, r28
 8d8:	ea 0d       	add	r30, r10
 8da:	f1 1d       	adc	r31, r1
 8dc:	80 81       	ld	r24, Z
 8de:	80 33       	cpi	r24, 0x30	; 48
 8e0:	11 f4       	brne	.+4      	; 0x8e6 <vfprintf+0x2ca>
 8e2:	29 7e       	andi	r18, 0xE9	; 233
 8e4:	09 c0       	rjmp	.+18     	; 0x8f8 <vfprintf+0x2dc>
 8e6:	22 ff       	sbrs	r18, 2
 8e8:	06 c0       	rjmp	.+12     	; 0x8f6 <vfprintf+0x2da>
 8ea:	73 94       	inc	r7
 8ec:	73 94       	inc	r7
 8ee:	04 c0       	rjmp	.+8      	; 0x8f8 <vfprintf+0x2dc>
 8f0:	82 2f       	mov	r24, r18
 8f2:	86 78       	andi	r24, 0x86	; 134
 8f4:	09 f0       	breq	.+2      	; 0x8f8 <vfprintf+0x2dc>
 8f6:	73 94       	inc	r7
 8f8:	23 fd       	sbrc	r18, 3
 8fa:	13 c0       	rjmp	.+38     	; 0x922 <vfprintf+0x306>
 8fc:	20 ff       	sbrs	r18, 0
 8fe:	06 c0       	rjmp	.+12     	; 0x90c <vfprintf+0x2f0>
 900:	5a 2c       	mov	r5, r10
 902:	73 14       	cp	r7, r3
 904:	18 f4       	brcc	.+6      	; 0x90c <vfprintf+0x2f0>
 906:	53 0c       	add	r5, r3
 908:	57 18       	sub	r5, r7
 90a:	73 2c       	mov	r7, r3
 90c:	73 14       	cp	r7, r3
 90e:	68 f4       	brcc	.+26     	; 0x92a <vfprintf+0x30e>
 910:	b7 01       	movw	r22, r14
 912:	80 e2       	ldi	r24, 0x20	; 32
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	2c 87       	std	Y+12, r18	; 0x0c
 918:	0e 94 40 06 	call	0xc80	; 0xc80 <fputc>
 91c:	73 94       	inc	r7
 91e:	2c 85       	ldd	r18, Y+12	; 0x0c
 920:	f5 cf       	rjmp	.-22     	; 0x90c <vfprintf+0x2f0>
 922:	73 14       	cp	r7, r3
 924:	10 f4       	brcc	.+4      	; 0x92a <vfprintf+0x30e>
 926:	37 18       	sub	r3, r7
 928:	01 c0       	rjmp	.+2      	; 0x92c <vfprintf+0x310>
 92a:	31 2c       	mov	r3, r1
 92c:	24 ff       	sbrs	r18, 4
 92e:	12 c0       	rjmp	.+36     	; 0x954 <vfprintf+0x338>
 930:	b7 01       	movw	r22, r14
 932:	80 e3       	ldi	r24, 0x30	; 48
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	2c 87       	std	Y+12, r18	; 0x0c
 938:	0e 94 40 06 	call	0xc80	; 0xc80 <fputc>
 93c:	2c 85       	ldd	r18, Y+12	; 0x0c
 93e:	22 ff       	sbrs	r18, 2
 940:	17 c0       	rjmp	.+46     	; 0x970 <vfprintf+0x354>
 942:	21 ff       	sbrs	r18, 1
 944:	03 c0       	rjmp	.+6      	; 0x94c <vfprintf+0x330>
 946:	88 e5       	ldi	r24, 0x58	; 88
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	02 c0       	rjmp	.+4      	; 0x950 <vfprintf+0x334>
 94c:	88 e7       	ldi	r24, 0x78	; 120
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	b7 01       	movw	r22, r14
 952:	0c c0       	rjmp	.+24     	; 0x96c <vfprintf+0x350>
 954:	82 2f       	mov	r24, r18
 956:	86 78       	andi	r24, 0x86	; 134
 958:	59 f0       	breq	.+22     	; 0x970 <vfprintf+0x354>
 95a:	21 fd       	sbrc	r18, 1
 95c:	02 c0       	rjmp	.+4      	; 0x962 <vfprintf+0x346>
 95e:	80 e2       	ldi	r24, 0x20	; 32
 960:	01 c0       	rjmp	.+2      	; 0x964 <vfprintf+0x348>
 962:	8b e2       	ldi	r24, 0x2B	; 43
 964:	27 fd       	sbrc	r18, 7
 966:	8d e2       	ldi	r24, 0x2D	; 45
 968:	b7 01       	movw	r22, r14
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	0e 94 40 06 	call	0xc80	; 0xc80 <fputc>
 970:	a5 14       	cp	r10, r5
 972:	38 f4       	brcc	.+14     	; 0x982 <vfprintf+0x366>
 974:	b7 01       	movw	r22, r14
 976:	80 e3       	ldi	r24, 0x30	; 48
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	0e 94 40 06 	call	0xc80	; 0xc80 <fputc>
 97e:	5a 94       	dec	r5
 980:	f7 cf       	rjmp	.-18     	; 0x970 <vfprintf+0x354>
 982:	aa 94       	dec	r10
 984:	f4 01       	movw	r30, r8
 986:	ea 0d       	add	r30, r10
 988:	f1 1d       	adc	r31, r1
 98a:	80 81       	ld	r24, Z
 98c:	b7 01       	movw	r22, r14
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	0e 94 40 06 	call	0xc80	; 0xc80 <fputc>
 994:	a1 10       	cpse	r10, r1
 996:	f5 cf       	rjmp	.-22     	; 0x982 <vfprintf+0x366>
 998:	33 20       	and	r3, r3
 99a:	09 f4       	brne	.+2      	; 0x99e <vfprintf+0x382>
 99c:	51 ce       	rjmp	.-862    	; 0x640 <vfprintf+0x24>
 99e:	b7 01       	movw	r22, r14
 9a0:	80 e2       	ldi	r24, 0x20	; 32
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	0e 94 40 06 	call	0xc80	; 0xc80 <fputc>
 9a8:	3a 94       	dec	r3
 9aa:	f6 cf       	rjmp	.-20     	; 0x998 <vfprintf+0x37c>
 9ac:	f7 01       	movw	r30, r14
 9ae:	86 81       	ldd	r24, Z+6	; 0x06
 9b0:	97 81       	ldd	r25, Z+7	; 0x07
 9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <vfprintf+0x39c>
 9b4:	8f ef       	ldi	r24, 0xFF	; 255
 9b6:	9f ef       	ldi	r25, 0xFF	; 255
 9b8:	2c 96       	adiw	r28, 0x0c	; 12
 9ba:	e2 e1       	ldi	r30, 0x12	; 18
 9bc:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__epilogue_restores__>

000009c0 <calloc>:
 9c0:	0f 93       	push	r16
 9c2:	1f 93       	push	r17
 9c4:	cf 93       	push	r28
 9c6:	df 93       	push	r29
 9c8:	86 9f       	mul	r24, r22
 9ca:	80 01       	movw	r16, r0
 9cc:	87 9f       	mul	r24, r23
 9ce:	10 0d       	add	r17, r0
 9d0:	96 9f       	mul	r25, r22
 9d2:	10 0d       	add	r17, r0
 9d4:	11 24       	eor	r1, r1
 9d6:	c8 01       	movw	r24, r16
 9d8:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <malloc>
 9dc:	ec 01       	movw	r28, r24
 9de:	00 97       	sbiw	r24, 0x00	; 0
 9e0:	29 f0       	breq	.+10     	; 0x9ec <calloc+0x2c>
 9e2:	a8 01       	movw	r20, r16
 9e4:	60 e0       	ldi	r22, 0x00	; 0
 9e6:	70 e0       	ldi	r23, 0x00	; 0
 9e8:	0e 94 2e 06 	call	0xc5c	; 0xc5c <memset>
 9ec:	ce 01       	movw	r24, r28
 9ee:	df 91       	pop	r29
 9f0:	cf 91       	pop	r28
 9f2:	1f 91       	pop	r17
 9f4:	0f 91       	pop	r16
 9f6:	08 95       	ret

000009f8 <malloc>:
 9f8:	cf 93       	push	r28
 9fa:	df 93       	push	r29
 9fc:	82 30       	cpi	r24, 0x02	; 2
 9fe:	91 05       	cpc	r25, r1
 a00:	10 f4       	brcc	.+4      	; 0xa06 <malloc+0xe>
 a02:	82 e0       	ldi	r24, 0x02	; 2
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	e0 91 60 01 	lds	r30, 0x0160
 a0a:	f0 91 61 01 	lds	r31, 0x0161
 a0e:	20 e0       	ldi	r18, 0x00	; 0
 a10:	30 e0       	ldi	r19, 0x00	; 0
 a12:	a0 e0       	ldi	r26, 0x00	; 0
 a14:	b0 e0       	ldi	r27, 0x00	; 0
 a16:	30 97       	sbiw	r30, 0x00	; 0
 a18:	39 f1       	breq	.+78     	; 0xa68 <malloc+0x70>
 a1a:	40 81       	ld	r20, Z
 a1c:	51 81       	ldd	r21, Z+1	; 0x01
 a1e:	48 17       	cp	r20, r24
 a20:	59 07       	cpc	r21, r25
 a22:	b8 f0       	brcs	.+46     	; 0xa52 <malloc+0x5a>
 a24:	48 17       	cp	r20, r24
 a26:	59 07       	cpc	r21, r25
 a28:	71 f4       	brne	.+28     	; 0xa46 <malloc+0x4e>
 a2a:	82 81       	ldd	r24, Z+2	; 0x02
 a2c:	93 81       	ldd	r25, Z+3	; 0x03
 a2e:	10 97       	sbiw	r26, 0x00	; 0
 a30:	29 f0       	breq	.+10     	; 0xa3c <malloc+0x44>
 a32:	13 96       	adiw	r26, 0x03	; 3
 a34:	9c 93       	st	X, r25
 a36:	8e 93       	st	-X, r24
 a38:	12 97       	sbiw	r26, 0x02	; 2
 a3a:	2c c0       	rjmp	.+88     	; 0xa94 <malloc+0x9c>
 a3c:	90 93 61 01 	sts	0x0161, r25
 a40:	80 93 60 01 	sts	0x0160, r24
 a44:	27 c0       	rjmp	.+78     	; 0xa94 <malloc+0x9c>
 a46:	21 15       	cp	r18, r1
 a48:	31 05       	cpc	r19, r1
 a4a:	31 f0       	breq	.+12     	; 0xa58 <malloc+0x60>
 a4c:	42 17       	cp	r20, r18
 a4e:	53 07       	cpc	r21, r19
 a50:	18 f0       	brcs	.+6      	; 0xa58 <malloc+0x60>
 a52:	a9 01       	movw	r20, r18
 a54:	db 01       	movw	r26, r22
 a56:	01 c0       	rjmp	.+2      	; 0xa5a <malloc+0x62>
 a58:	ef 01       	movw	r28, r30
 a5a:	9a 01       	movw	r18, r20
 a5c:	bd 01       	movw	r22, r26
 a5e:	df 01       	movw	r26, r30
 a60:	02 80       	ldd	r0, Z+2	; 0x02
 a62:	f3 81       	ldd	r31, Z+3	; 0x03
 a64:	e0 2d       	mov	r30, r0
 a66:	d7 cf       	rjmp	.-82     	; 0xa16 <malloc+0x1e>
 a68:	21 15       	cp	r18, r1
 a6a:	31 05       	cpc	r19, r1
 a6c:	f9 f0       	breq	.+62     	; 0xaac <malloc+0xb4>
 a6e:	28 1b       	sub	r18, r24
 a70:	39 0b       	sbc	r19, r25
 a72:	24 30       	cpi	r18, 0x04	; 4
 a74:	31 05       	cpc	r19, r1
 a76:	80 f4       	brcc	.+32     	; 0xa98 <malloc+0xa0>
 a78:	8a 81       	ldd	r24, Y+2	; 0x02
 a7a:	9b 81       	ldd	r25, Y+3	; 0x03
 a7c:	61 15       	cp	r22, r1
 a7e:	71 05       	cpc	r23, r1
 a80:	21 f0       	breq	.+8      	; 0xa8a <malloc+0x92>
 a82:	fb 01       	movw	r30, r22
 a84:	93 83       	std	Z+3, r25	; 0x03
 a86:	82 83       	std	Z+2, r24	; 0x02
 a88:	04 c0       	rjmp	.+8      	; 0xa92 <malloc+0x9a>
 a8a:	90 93 61 01 	sts	0x0161, r25
 a8e:	80 93 60 01 	sts	0x0160, r24
 a92:	fe 01       	movw	r30, r28
 a94:	32 96       	adiw	r30, 0x02	; 2
 a96:	44 c0       	rjmp	.+136    	; 0xb20 <malloc+0x128>
 a98:	fe 01       	movw	r30, r28
 a9a:	e2 0f       	add	r30, r18
 a9c:	f3 1f       	adc	r31, r19
 a9e:	81 93       	st	Z+, r24
 aa0:	91 93       	st	Z+, r25
 aa2:	22 50       	subi	r18, 0x02	; 2
 aa4:	31 09       	sbc	r19, r1
 aa6:	39 83       	std	Y+1, r19	; 0x01
 aa8:	28 83       	st	Y, r18
 aaa:	3a c0       	rjmp	.+116    	; 0xb20 <malloc+0x128>
 aac:	20 91 5e 01 	lds	r18, 0x015E
 ab0:	30 91 5f 01 	lds	r19, 0x015F
 ab4:	23 2b       	or	r18, r19
 ab6:	41 f4       	brne	.+16     	; 0xac8 <malloc+0xd0>
 ab8:	20 91 02 01 	lds	r18, 0x0102
 abc:	30 91 03 01 	lds	r19, 0x0103
 ac0:	30 93 5f 01 	sts	0x015F, r19
 ac4:	20 93 5e 01 	sts	0x015E, r18
 ac8:	20 91 00 01 	lds	r18, 0x0100
 acc:	30 91 01 01 	lds	r19, 0x0101
 ad0:	21 15       	cp	r18, r1
 ad2:	31 05       	cpc	r19, r1
 ad4:	41 f4       	brne	.+16     	; 0xae6 <malloc+0xee>
 ad6:	2d b7       	in	r18, 0x3d	; 61
 ad8:	3e b7       	in	r19, 0x3e	; 62
 ada:	40 91 04 01 	lds	r20, 0x0104
 ade:	50 91 05 01 	lds	r21, 0x0105
 ae2:	24 1b       	sub	r18, r20
 ae4:	35 0b       	sbc	r19, r21
 ae6:	e0 91 5e 01 	lds	r30, 0x015E
 aea:	f0 91 5f 01 	lds	r31, 0x015F
 aee:	e2 17       	cp	r30, r18
 af0:	f3 07       	cpc	r31, r19
 af2:	a0 f4       	brcc	.+40     	; 0xb1c <malloc+0x124>
 af4:	2e 1b       	sub	r18, r30
 af6:	3f 0b       	sbc	r19, r31
 af8:	28 17       	cp	r18, r24
 afa:	39 07       	cpc	r19, r25
 afc:	78 f0       	brcs	.+30     	; 0xb1c <malloc+0x124>
 afe:	ac 01       	movw	r20, r24
 b00:	4e 5f       	subi	r20, 0xFE	; 254
 b02:	5f 4f       	sbci	r21, 0xFF	; 255
 b04:	24 17       	cp	r18, r20
 b06:	35 07       	cpc	r19, r21
 b08:	48 f0       	brcs	.+18     	; 0xb1c <malloc+0x124>
 b0a:	4e 0f       	add	r20, r30
 b0c:	5f 1f       	adc	r21, r31
 b0e:	50 93 5f 01 	sts	0x015F, r21
 b12:	40 93 5e 01 	sts	0x015E, r20
 b16:	81 93       	st	Z+, r24
 b18:	91 93       	st	Z+, r25
 b1a:	02 c0       	rjmp	.+4      	; 0xb20 <malloc+0x128>
 b1c:	e0 e0       	ldi	r30, 0x00	; 0
 b1e:	f0 e0       	ldi	r31, 0x00	; 0
 b20:	cf 01       	movw	r24, r30
 b22:	df 91       	pop	r29
 b24:	cf 91       	pop	r28
 b26:	08 95       	ret

00000b28 <free>:
 b28:	cf 93       	push	r28
 b2a:	df 93       	push	r29
 b2c:	00 97       	sbiw	r24, 0x00	; 0
 b2e:	09 f4       	brne	.+2      	; 0xb32 <free+0xa>
 b30:	87 c0       	rjmp	.+270    	; 0xc40 <free+0x118>
 b32:	fc 01       	movw	r30, r24
 b34:	32 97       	sbiw	r30, 0x02	; 2
 b36:	13 82       	std	Z+3, r1	; 0x03
 b38:	12 82       	std	Z+2, r1	; 0x02
 b3a:	c0 91 60 01 	lds	r28, 0x0160
 b3e:	d0 91 61 01 	lds	r29, 0x0161
 b42:	20 97       	sbiw	r28, 0x00	; 0
 b44:	81 f4       	brne	.+32     	; 0xb66 <free+0x3e>
 b46:	20 81       	ld	r18, Z
 b48:	31 81       	ldd	r19, Z+1	; 0x01
 b4a:	28 0f       	add	r18, r24
 b4c:	39 1f       	adc	r19, r25
 b4e:	80 91 5e 01 	lds	r24, 0x015E
 b52:	90 91 5f 01 	lds	r25, 0x015F
 b56:	82 17       	cp	r24, r18
 b58:	93 07       	cpc	r25, r19
 b5a:	79 f5       	brne	.+94     	; 0xbba <free+0x92>
 b5c:	f0 93 5f 01 	sts	0x015F, r31
 b60:	e0 93 5e 01 	sts	0x015E, r30
 b64:	6d c0       	rjmp	.+218    	; 0xc40 <free+0x118>
 b66:	de 01       	movw	r26, r28
 b68:	20 e0       	ldi	r18, 0x00	; 0
 b6a:	30 e0       	ldi	r19, 0x00	; 0
 b6c:	ae 17       	cp	r26, r30
 b6e:	bf 07       	cpc	r27, r31
 b70:	50 f4       	brcc	.+20     	; 0xb86 <free+0x5e>
 b72:	12 96       	adiw	r26, 0x02	; 2
 b74:	4d 91       	ld	r20, X+
 b76:	5c 91       	ld	r21, X
 b78:	13 97       	sbiw	r26, 0x03	; 3
 b7a:	9d 01       	movw	r18, r26
 b7c:	41 15       	cp	r20, r1
 b7e:	51 05       	cpc	r21, r1
 b80:	09 f1       	breq	.+66     	; 0xbc4 <free+0x9c>
 b82:	da 01       	movw	r26, r20
 b84:	f3 cf       	rjmp	.-26     	; 0xb6c <free+0x44>
 b86:	b3 83       	std	Z+3, r27	; 0x03
 b88:	a2 83       	std	Z+2, r26	; 0x02
 b8a:	40 81       	ld	r20, Z
 b8c:	51 81       	ldd	r21, Z+1	; 0x01
 b8e:	84 0f       	add	r24, r20
 b90:	95 1f       	adc	r25, r21
 b92:	8a 17       	cp	r24, r26
 b94:	9b 07       	cpc	r25, r27
 b96:	71 f4       	brne	.+28     	; 0xbb4 <free+0x8c>
 b98:	8d 91       	ld	r24, X+
 b9a:	9c 91       	ld	r25, X
 b9c:	11 97       	sbiw	r26, 0x01	; 1
 b9e:	84 0f       	add	r24, r20
 ba0:	95 1f       	adc	r25, r21
 ba2:	02 96       	adiw	r24, 0x02	; 2
 ba4:	91 83       	std	Z+1, r25	; 0x01
 ba6:	80 83       	st	Z, r24
 ba8:	12 96       	adiw	r26, 0x02	; 2
 baa:	8d 91       	ld	r24, X+
 bac:	9c 91       	ld	r25, X
 bae:	13 97       	sbiw	r26, 0x03	; 3
 bb0:	93 83       	std	Z+3, r25	; 0x03
 bb2:	82 83       	std	Z+2, r24	; 0x02
 bb4:	21 15       	cp	r18, r1
 bb6:	31 05       	cpc	r19, r1
 bb8:	29 f4       	brne	.+10     	; 0xbc4 <free+0x9c>
 bba:	f0 93 61 01 	sts	0x0161, r31
 bbe:	e0 93 60 01 	sts	0x0160, r30
 bc2:	3e c0       	rjmp	.+124    	; 0xc40 <free+0x118>
 bc4:	d9 01       	movw	r26, r18
 bc6:	13 96       	adiw	r26, 0x03	; 3
 bc8:	fc 93       	st	X, r31
 bca:	ee 93       	st	-X, r30
 bcc:	12 97       	sbiw	r26, 0x02	; 2
 bce:	4d 91       	ld	r20, X+
 bd0:	5d 91       	ld	r21, X+
 bd2:	a4 0f       	add	r26, r20
 bd4:	b5 1f       	adc	r27, r21
 bd6:	ea 17       	cp	r30, r26
 bd8:	fb 07       	cpc	r31, r27
 bda:	79 f4       	brne	.+30     	; 0xbfa <free+0xd2>
 bdc:	80 81       	ld	r24, Z
 bde:	91 81       	ldd	r25, Z+1	; 0x01
 be0:	84 0f       	add	r24, r20
 be2:	95 1f       	adc	r25, r21
 be4:	02 96       	adiw	r24, 0x02	; 2
 be6:	d9 01       	movw	r26, r18
 be8:	11 96       	adiw	r26, 0x01	; 1
 bea:	9c 93       	st	X, r25
 bec:	8e 93       	st	-X, r24
 bee:	82 81       	ldd	r24, Z+2	; 0x02
 bf0:	93 81       	ldd	r25, Z+3	; 0x03
 bf2:	13 96       	adiw	r26, 0x03	; 3
 bf4:	9c 93       	st	X, r25
 bf6:	8e 93       	st	-X, r24
 bf8:	12 97       	sbiw	r26, 0x02	; 2
 bfa:	e0 e0       	ldi	r30, 0x00	; 0
 bfc:	f0 e0       	ldi	r31, 0x00	; 0
 bfe:	8a 81       	ldd	r24, Y+2	; 0x02
 c00:	9b 81       	ldd	r25, Y+3	; 0x03
 c02:	00 97       	sbiw	r24, 0x00	; 0
 c04:	19 f0       	breq	.+6      	; 0xc0c <free+0xe4>
 c06:	fe 01       	movw	r30, r28
 c08:	ec 01       	movw	r28, r24
 c0a:	f9 cf       	rjmp	.-14     	; 0xbfe <free+0xd6>
 c0c:	ce 01       	movw	r24, r28
 c0e:	02 96       	adiw	r24, 0x02	; 2
 c10:	28 81       	ld	r18, Y
 c12:	39 81       	ldd	r19, Y+1	; 0x01
 c14:	82 0f       	add	r24, r18
 c16:	93 1f       	adc	r25, r19
 c18:	20 91 5e 01 	lds	r18, 0x015E
 c1c:	30 91 5f 01 	lds	r19, 0x015F
 c20:	28 17       	cp	r18, r24
 c22:	39 07       	cpc	r19, r25
 c24:	69 f4       	brne	.+26     	; 0xc40 <free+0x118>
 c26:	30 97       	sbiw	r30, 0x00	; 0
 c28:	29 f4       	brne	.+10     	; 0xc34 <free+0x10c>
 c2a:	10 92 61 01 	sts	0x0161, r1
 c2e:	10 92 60 01 	sts	0x0160, r1
 c32:	02 c0       	rjmp	.+4      	; 0xc38 <free+0x110>
 c34:	13 82       	std	Z+3, r1	; 0x03
 c36:	12 82       	std	Z+2, r1	; 0x02
 c38:	d0 93 5f 01 	sts	0x015F, r29
 c3c:	c0 93 5e 01 	sts	0x015E, r28
 c40:	df 91       	pop	r29
 c42:	cf 91       	pop	r28
 c44:	08 95       	ret

00000c46 <strnlen_P>:
 c46:	fc 01       	movw	r30, r24
 c48:	05 90       	lpm	r0, Z+
 c4a:	61 50       	subi	r22, 0x01	; 1
 c4c:	70 40       	sbci	r23, 0x00	; 0
 c4e:	01 10       	cpse	r0, r1
 c50:	d8 f7       	brcc	.-10     	; 0xc48 <strnlen_P+0x2>
 c52:	80 95       	com	r24
 c54:	90 95       	com	r25
 c56:	8e 0f       	add	r24, r30
 c58:	9f 1f       	adc	r25, r31
 c5a:	08 95       	ret

00000c5c <memset>:
 c5c:	dc 01       	movw	r26, r24
 c5e:	01 c0       	rjmp	.+2      	; 0xc62 <memset+0x6>
 c60:	6d 93       	st	X+, r22
 c62:	41 50       	subi	r20, 0x01	; 1
 c64:	50 40       	sbci	r21, 0x00	; 0
 c66:	e0 f7       	brcc	.-8      	; 0xc60 <memset+0x4>
 c68:	08 95       	ret

00000c6a <strnlen>:
 c6a:	fc 01       	movw	r30, r24
 c6c:	61 50       	subi	r22, 0x01	; 1
 c6e:	70 40       	sbci	r23, 0x00	; 0
 c70:	01 90       	ld	r0, Z+
 c72:	01 10       	cpse	r0, r1
 c74:	d8 f7       	brcc	.-10     	; 0xc6c <strnlen+0x2>
 c76:	80 95       	com	r24
 c78:	90 95       	com	r25
 c7a:	8e 0f       	add	r24, r30
 c7c:	9f 1f       	adc	r25, r31
 c7e:	08 95       	ret

00000c80 <fputc>:
 c80:	0f 93       	push	r16
 c82:	1f 93       	push	r17
 c84:	cf 93       	push	r28
 c86:	df 93       	push	r29
 c88:	18 2f       	mov	r17, r24
 c8a:	09 2f       	mov	r16, r25
 c8c:	eb 01       	movw	r28, r22
 c8e:	8b 81       	ldd	r24, Y+3	; 0x03
 c90:	81 fd       	sbrc	r24, 1
 c92:	03 c0       	rjmp	.+6      	; 0xc9a <fputc+0x1a>
 c94:	8f ef       	ldi	r24, 0xFF	; 255
 c96:	9f ef       	ldi	r25, 0xFF	; 255
 c98:	20 c0       	rjmp	.+64     	; 0xcda <fputc+0x5a>
 c9a:	82 ff       	sbrs	r24, 2
 c9c:	10 c0       	rjmp	.+32     	; 0xcbe <fputc+0x3e>
 c9e:	4e 81       	ldd	r20, Y+6	; 0x06
 ca0:	5f 81       	ldd	r21, Y+7	; 0x07
 ca2:	2c 81       	ldd	r18, Y+4	; 0x04
 ca4:	3d 81       	ldd	r19, Y+5	; 0x05
 ca6:	42 17       	cp	r20, r18
 ca8:	53 07       	cpc	r21, r19
 caa:	7c f4       	brge	.+30     	; 0xcca <fputc+0x4a>
 cac:	e8 81       	ld	r30, Y
 cae:	f9 81       	ldd	r31, Y+1	; 0x01
 cb0:	9f 01       	movw	r18, r30
 cb2:	2f 5f       	subi	r18, 0xFF	; 255
 cb4:	3f 4f       	sbci	r19, 0xFF	; 255
 cb6:	39 83       	std	Y+1, r19	; 0x01
 cb8:	28 83       	st	Y, r18
 cba:	10 83       	st	Z, r17
 cbc:	06 c0       	rjmp	.+12     	; 0xcca <fputc+0x4a>
 cbe:	e8 85       	ldd	r30, Y+8	; 0x08
 cc0:	f9 85       	ldd	r31, Y+9	; 0x09
 cc2:	81 2f       	mov	r24, r17
 cc4:	09 95       	icall
 cc6:	89 2b       	or	r24, r25
 cc8:	29 f7       	brne	.-54     	; 0xc94 <fputc+0x14>
 cca:	2e 81       	ldd	r18, Y+6	; 0x06
 ccc:	3f 81       	ldd	r19, Y+7	; 0x07
 cce:	2f 5f       	subi	r18, 0xFF	; 255
 cd0:	3f 4f       	sbci	r19, 0xFF	; 255
 cd2:	3f 83       	std	Y+7, r19	; 0x07
 cd4:	2e 83       	std	Y+6, r18	; 0x06
 cd6:	81 2f       	mov	r24, r17
 cd8:	90 2f       	mov	r25, r16
 cda:	df 91       	pop	r29
 cdc:	cf 91       	pop	r28
 cde:	1f 91       	pop	r17
 ce0:	0f 91       	pop	r16
 ce2:	08 95       	ret

00000ce4 <__ultoa_invert>:
 ce4:	fa 01       	movw	r30, r20
 ce6:	aa 27       	eor	r26, r26
 ce8:	28 30       	cpi	r18, 0x08	; 8
 cea:	51 f1       	breq	.+84     	; 0xd40 <__ultoa_invert+0x5c>
 cec:	20 31       	cpi	r18, 0x10	; 16
 cee:	81 f1       	breq	.+96     	; 0xd50 <__ultoa_invert+0x6c>
 cf0:	e8 94       	clt
 cf2:	6f 93       	push	r22
 cf4:	6e 7f       	andi	r22, 0xFE	; 254
 cf6:	6e 5f       	subi	r22, 0xFE	; 254
 cf8:	7f 4f       	sbci	r23, 0xFF	; 255
 cfa:	8f 4f       	sbci	r24, 0xFF	; 255
 cfc:	9f 4f       	sbci	r25, 0xFF	; 255
 cfe:	af 4f       	sbci	r26, 0xFF	; 255
 d00:	b1 e0       	ldi	r27, 0x01	; 1
 d02:	3e d0       	rcall	.+124    	; 0xd80 <__ultoa_invert+0x9c>
 d04:	b4 e0       	ldi	r27, 0x04	; 4
 d06:	3c d0       	rcall	.+120    	; 0xd80 <__ultoa_invert+0x9c>
 d08:	67 0f       	add	r22, r23
 d0a:	78 1f       	adc	r23, r24
 d0c:	89 1f       	adc	r24, r25
 d0e:	9a 1f       	adc	r25, r26
 d10:	a1 1d       	adc	r26, r1
 d12:	68 0f       	add	r22, r24
 d14:	79 1f       	adc	r23, r25
 d16:	8a 1f       	adc	r24, r26
 d18:	91 1d       	adc	r25, r1
 d1a:	a1 1d       	adc	r26, r1
 d1c:	6a 0f       	add	r22, r26
 d1e:	71 1d       	adc	r23, r1
 d20:	81 1d       	adc	r24, r1
 d22:	91 1d       	adc	r25, r1
 d24:	a1 1d       	adc	r26, r1
 d26:	20 d0       	rcall	.+64     	; 0xd68 <__ultoa_invert+0x84>
 d28:	09 f4       	brne	.+2      	; 0xd2c <__ultoa_invert+0x48>
 d2a:	68 94       	set
 d2c:	3f 91       	pop	r19
 d2e:	2a e0       	ldi	r18, 0x0A	; 10
 d30:	26 9f       	mul	r18, r22
 d32:	11 24       	eor	r1, r1
 d34:	30 19       	sub	r19, r0
 d36:	30 5d       	subi	r19, 0xD0	; 208
 d38:	31 93       	st	Z+, r19
 d3a:	de f6       	brtc	.-74     	; 0xcf2 <__ultoa_invert+0xe>
 d3c:	cf 01       	movw	r24, r30
 d3e:	08 95       	ret
 d40:	46 2f       	mov	r20, r22
 d42:	47 70       	andi	r20, 0x07	; 7
 d44:	40 5d       	subi	r20, 0xD0	; 208
 d46:	41 93       	st	Z+, r20
 d48:	b3 e0       	ldi	r27, 0x03	; 3
 d4a:	0f d0       	rcall	.+30     	; 0xd6a <__ultoa_invert+0x86>
 d4c:	c9 f7       	brne	.-14     	; 0xd40 <__ultoa_invert+0x5c>
 d4e:	f6 cf       	rjmp	.-20     	; 0xd3c <__ultoa_invert+0x58>
 d50:	46 2f       	mov	r20, r22
 d52:	4f 70       	andi	r20, 0x0F	; 15
 d54:	40 5d       	subi	r20, 0xD0	; 208
 d56:	4a 33       	cpi	r20, 0x3A	; 58
 d58:	18 f0       	brcs	.+6      	; 0xd60 <__ultoa_invert+0x7c>
 d5a:	49 5d       	subi	r20, 0xD9	; 217
 d5c:	31 fd       	sbrc	r19, 1
 d5e:	40 52       	subi	r20, 0x20	; 32
 d60:	41 93       	st	Z+, r20
 d62:	02 d0       	rcall	.+4      	; 0xd68 <__ultoa_invert+0x84>
 d64:	a9 f7       	brne	.-22     	; 0xd50 <__ultoa_invert+0x6c>
 d66:	ea cf       	rjmp	.-44     	; 0xd3c <__ultoa_invert+0x58>
 d68:	b4 e0       	ldi	r27, 0x04	; 4
 d6a:	a6 95       	lsr	r26
 d6c:	97 95       	ror	r25
 d6e:	87 95       	ror	r24
 d70:	77 95       	ror	r23
 d72:	67 95       	ror	r22
 d74:	ba 95       	dec	r27
 d76:	c9 f7       	brne	.-14     	; 0xd6a <__ultoa_invert+0x86>
 d78:	00 97       	sbiw	r24, 0x00	; 0
 d7a:	61 05       	cpc	r22, r1
 d7c:	71 05       	cpc	r23, r1
 d7e:	08 95       	ret
 d80:	9b 01       	movw	r18, r22
 d82:	ac 01       	movw	r20, r24
 d84:	0a 2e       	mov	r0, r26
 d86:	06 94       	lsr	r0
 d88:	57 95       	ror	r21
 d8a:	47 95       	ror	r20
 d8c:	37 95       	ror	r19
 d8e:	27 95       	ror	r18
 d90:	ba 95       	dec	r27
 d92:	c9 f7       	brne	.-14     	; 0xd86 <__ultoa_invert+0xa2>
 d94:	62 0f       	add	r22, r18
 d96:	73 1f       	adc	r23, r19
 d98:	84 1f       	adc	r24, r20
 d9a:	95 1f       	adc	r25, r21
 d9c:	a0 1d       	adc	r26, r0
 d9e:	08 95       	ret

00000da0 <__prologue_saves__>:
 da0:	2f 92       	push	r2
 da2:	3f 92       	push	r3
 da4:	4f 92       	push	r4
 da6:	5f 92       	push	r5
 da8:	6f 92       	push	r6
 daa:	7f 92       	push	r7
 dac:	8f 92       	push	r8
 dae:	9f 92       	push	r9
 db0:	af 92       	push	r10
 db2:	bf 92       	push	r11
 db4:	cf 92       	push	r12
 db6:	df 92       	push	r13
 db8:	ef 92       	push	r14
 dba:	ff 92       	push	r15
 dbc:	0f 93       	push	r16
 dbe:	1f 93       	push	r17
 dc0:	cf 93       	push	r28
 dc2:	df 93       	push	r29
 dc4:	cd b7       	in	r28, 0x3d	; 61
 dc6:	de b7       	in	r29, 0x3e	; 62
 dc8:	ca 1b       	sub	r28, r26
 dca:	db 0b       	sbc	r29, r27
 dcc:	0f b6       	in	r0, 0x3f	; 63
 dce:	f8 94       	cli
 dd0:	de bf       	out	0x3e, r29	; 62
 dd2:	0f be       	out	0x3f, r0	; 63
 dd4:	cd bf       	out	0x3d, r28	; 61
 dd6:	09 94       	ijmp

00000dd8 <__epilogue_restores__>:
 dd8:	2a 88       	ldd	r2, Y+18	; 0x12
 dda:	39 88       	ldd	r3, Y+17	; 0x11
 ddc:	48 88       	ldd	r4, Y+16	; 0x10
 dde:	5f 84       	ldd	r5, Y+15	; 0x0f
 de0:	6e 84       	ldd	r6, Y+14	; 0x0e
 de2:	7d 84       	ldd	r7, Y+13	; 0x0d
 de4:	8c 84       	ldd	r8, Y+12	; 0x0c
 de6:	9b 84       	ldd	r9, Y+11	; 0x0b
 de8:	aa 84       	ldd	r10, Y+10	; 0x0a
 dea:	b9 84       	ldd	r11, Y+9	; 0x09
 dec:	c8 84       	ldd	r12, Y+8	; 0x08
 dee:	df 80       	ldd	r13, Y+7	; 0x07
 df0:	ee 80       	ldd	r14, Y+6	; 0x06
 df2:	fd 80       	ldd	r15, Y+5	; 0x05
 df4:	0c 81       	ldd	r16, Y+4	; 0x04
 df6:	1b 81       	ldd	r17, Y+3	; 0x03
 df8:	aa 81       	ldd	r26, Y+2	; 0x02
 dfa:	b9 81       	ldd	r27, Y+1	; 0x01
 dfc:	ce 0f       	add	r28, r30
 dfe:	d1 1d       	adc	r29, r1
 e00:	0f b6       	in	r0, 0x3f	; 63
 e02:	f8 94       	cli
 e04:	de bf       	out	0x3e, r29	; 62
 e06:	0f be       	out	0x3f, r0	; 63
 e08:	cd bf       	out	0x3d, r28	; 61
 e0a:	ed 01       	movw	r28, r26
 e0c:	08 95       	ret

00000e0e <_exit>:
 e0e:	f8 94       	cli

00000e10 <__stop_program>:
 e10:	ff cf       	rjmp	.-2      	; 0xe10 <__stop_program>
