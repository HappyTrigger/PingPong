
PingPongApplication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00000e64  00000ef8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800158  00800158  00000f50  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000300  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003dc8  00000000  00000000  000012ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001145  00000000  00000000  00005074  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000125a  00000000  00000000  000061b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000008a4  00000000  00000000  00007414  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008fc  00000000  00000000  00007cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000020d0  00000000  00000000  000085b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000280  00000000  00000000  0000a684  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e4 e6       	ldi	r30, 0x64	; 100
  84:	fe e0       	ldi	r31, 0x0E	; 14
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 35       	cpi	r26, 0x58	; 88
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a8 e5       	ldi	r26, 0x58	; 88
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a2 36       	cpi	r26, 0x62	; 98
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 21 02 	call	0x442	; 0x442 <main>
  a6:	0c 94 30 07 	jmp	0xe60	; 0xe60 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <read_adc>:
****************************************************************************/
int read_adc(char channel)
{
	volatile char *ext_adc = (char *) ADC_BASE_ADDR;
	
	*ext_adc = channel;
  ae:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	89 ef       	ldi	r24, 0xF9	; 249
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <read_adc+0x8>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <read_adc+0xe>
  bc:	00 00       	nop
	_delay_ms(1);
	return *ext_adc;
  be:	80 91 00 14 	lds	r24, 0x1400
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	08 95       	ret

000000c6 <CAN_init>:
//#include <avr/interrupt.h>
//#include <avr/delay.h>

void CAN_init()
{
	mcp_init();
  c6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <mcp_init>
	/* Turn off mask/filters, receive any message, rollover enabled */
	mcp_modify_bit(MCP_RXB0CTRL, 0b01100100, 0xFF);
  ca:	4f ef       	ldi	r20, 0xFF	; 255
  cc:	64 e6       	ldi	r22, 0x64	; 100
  ce:	80 e6       	ldi	r24, 0x60	; 96
  d0:	0e 94 97 01 	call	0x32e	; 0x32e <mcp_modify_bit>
	/* Loopback mode enabled */
	mcp_modify_bit(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	60 ee       	ldi	r22, 0xE0	; 224
  d8:	8f e0       	ldi	r24, 0x0F	; 15
  da:	0e 94 97 01 	call	0x32e	; 0x32e <mcp_modify_bit>
  de:	08 95       	ret

000000e0 <CAN_send_message>:
	*/
}


uint8_t CAN_send_message(CANMessage message)
{
  e0:	bf 92       	push	r11
  e2:	cf 92       	push	r12
  e4:	df 92       	push	r13
  e6:	ef 92       	push	r14
  e8:	ff 92       	push	r15
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	2a 97       	sbiw	r28, 0x0a	; 10
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	f8 94       	cli
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	0f be       	out	0x3f, r0	; 63
 100:	cd bf       	out	0x3d, r28	; 61
 102:	09 83       	std	Y+1, r16	; 0x01
 104:	c1 2e       	mov	r12, r17
 106:	1a 83       	std	Y+2, r17	; 0x02
 108:	2b 83       	std	Y+3, r18	; 0x03
 10a:	3c 83       	std	Y+4, r19	; 0x04
 10c:	4d 83       	std	Y+5, r20	; 0x05
 10e:	5e 83       	std	Y+6, r21	; 0x06
 110:	6f 83       	std	Y+7, r22	; 0x07
 112:	78 87       	std	Y+8, r23	; 0x08
 114:	89 87       	std	Y+9, r24	; 0x09
 116:	9a 87       	std	Y+10, r25	; 0x0a
 118:	10 2f       	mov	r17, r16
	uint8_t ctrl = mcp_read(MCP_TXB0CTRL);
 11a:	80 e3       	ldi	r24, 0x30	; 48
 11c:	0e 94 57 01 	call	0x2ae	; 0x2ae <mcp_read>
	
	if (test_bit(ctrl, TXREQ))
 120:	98 2f       	mov	r25, r24
 122:	98 70       	andi	r25, 0x08	; 8
 124:	b9 2e       	mov	r11, r25
 126:	83 fd       	sbrc	r24, 3
 128:	2d c0       	rjmp	.+90     	; 0x184 <CAN_send_message+0xa4>
	{
		return MESSAGE_PENDING;
	}
	/* Use lower 8bits of ID */
	mcp_write_byte(MCP_TXB0SIDL, (uint8_t)(message.ID << 5));
 12a:	61 2f       	mov	r22, r17
 12c:	62 95       	swap	r22
 12e:	66 0f       	add	r22, r22
 130:	60 7e       	andi	r22, 0xE0	; 224
 132:	82 e3       	ldi	r24, 0x32	; 50
 134:	0e 94 83 01 	call	0x306	; 0x306 <mcp_write_byte>
	mcp_write_byte(MCP_TXB0SIDH, (uint8_t)(message.ID >> 3));
 138:	61 2f       	mov	r22, r17
 13a:	66 95       	lsr	r22
 13c:	66 95       	lsr	r22
 13e:	66 95       	lsr	r22
 140:	81 e3       	ldi	r24, 0x31	; 49
 142:	0e 94 83 01 	call	0x306	; 0x306 <mcp_write_byte>
	
	mcp_write_byte(MCP_TXB0DLC, (message.length) & 0x0F);
 146:	6c 2d       	mov	r22, r12
 148:	6f 70       	andi	r22, 0x0F	; 15
 14a:	85 e3       	ldi	r24, 0x35	; 53
 14c:	0e 94 83 01 	call	0x306	; 0x306 <mcp_write_byte>
	
	for (int i = 0; i < message.length; i++)
 150:	d1 2c       	mov	r13, r1
 152:	1c 14       	cp	r1, r12
 154:	1d 04       	cpc	r1, r13
 156:	94 f4       	brge	.+36     	; 0x17c <CAN_send_message+0x9c>
 158:	7e 01       	movw	r14, r28
 15a:	e3 e0       	ldi	r30, 0x03	; 3
 15c:	ee 0e       	add	r14, r30
 15e:	f1 1c       	adc	r15, r1
 160:	00 e0       	ldi	r16, 0x00	; 0
 162:	10 e0       	ldi	r17, 0x00	; 0
	{
		mcp_write_byte(MCP_TXB0D0 + i, message.data_array[i]);
 164:	f7 01       	movw	r30, r14
 166:	61 91       	ld	r22, Z+
 168:	7f 01       	movw	r14, r30
 16a:	86 e3       	ldi	r24, 0x36	; 54
 16c:	80 0f       	add	r24, r16
 16e:	0e 94 83 01 	call	0x306	; 0x306 <mcp_write_byte>
	mcp_write_byte(MCP_TXB0SIDL, (uint8_t)(message.ID << 5));
	mcp_write_byte(MCP_TXB0SIDH, (uint8_t)(message.ID >> 3));
	
	mcp_write_byte(MCP_TXB0DLC, (message.length) & 0x0F);
	
	for (int i = 0; i < message.length; i++)
 172:	0f 5f       	subi	r16, 0xFF	; 255
 174:	1f 4f       	sbci	r17, 0xFF	; 255
 176:	0c 15       	cp	r16, r12
 178:	1d 05       	cpc	r17, r13
 17a:	a4 f3       	brlt	.-24     	; 0x164 <CAN_send_message+0x84>
	{
		mcp_write_byte(MCP_TXB0D0 + i, message.data_array[i]);
	}
	
	mcp_request_to_send(1);
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 b1 01 	call	0x362	; 0x362 <mcp_request_to_send>

	return SUCCESS;
 182:	02 c0       	rjmp	.+4      	; 0x188 <CAN_send_message+0xa8>
{
	uint8_t ctrl = mcp_read(MCP_TXB0CTRL);
	
	if (test_bit(ctrl, TXREQ))
	{
		return MESSAGE_PENDING;
 184:	bb 24       	eor	r11, r11
 186:	b3 94       	inc	r11
	}
	
	mcp_request_to_send(1);

	return SUCCESS;
}
 188:	8b 2d       	mov	r24, r11
 18a:	2a 96       	adiw	r28, 0x0a	; 10
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	f8 94       	cli
 190:	de bf       	out	0x3e, r29	; 62
 192:	0f be       	out	0x3f, r0	; 63
 194:	cd bf       	out	0x3d, r28	; 61
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	ff 90       	pop	r15
 1a0:	ef 90       	pop	r14
 1a2:	df 90       	pop	r13
 1a4:	cf 90       	pop	r12
 1a6:	bf 90       	pop	r11
 1a8:	08 95       	ret

000001aa <send_joystick_possition>:
#include "CAN_DRIVER.h"
#include "JOYSTICK_DRIVER.h"


uint8_t send_joystick_possition(JoystickPosition joystick_position)
{
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
 1b6:	2a 97       	sbiw	r28, 0x0a	; 10
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	f8 94       	cli
 1bc:	de bf       	out	0x3e, r29	; 62
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	cd bf       	out	0x3d, r28	; 61
	message.length = 2;
	
	message.data_array[0] = (uint8_t) (joystick_position.xaxis);	
	message.data_array[1] = (uint8_t) (joystick_position.yaxis);	
	
	return CAN_send_message(message);
 1c2:	01 e0       	ldi	r16, 0x01	; 1
 1c4:	12 e0       	ldi	r17, 0x02	; 2
 1c6:	28 2f       	mov	r18, r24
 1c8:	39 2f       	mov	r19, r25
 1ca:	4d 81       	ldd	r20, Y+5	; 0x05
 1cc:	5e 81       	ldd	r21, Y+6	; 0x06
 1ce:	6f 81       	ldd	r22, Y+7	; 0x07
 1d0:	78 85       	ldd	r23, Y+8	; 0x08
 1d2:	89 85       	ldd	r24, Y+9	; 0x09
 1d4:	9a 85       	ldd	r25, Y+10	; 0x0a
 1d6:	0e 94 70 00 	call	0xe0	; 0xe0 <CAN_send_message>
}
 1da:	2a 96       	adiw	r28, 0x0a	; 10
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	f8 94       	cli
 1e0:	de bf       	out	0x3e, r29	; 62
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	cd bf       	out	0x3d, r28	; 61
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	0f 91       	pop	r16
 1ee:	08 95       	ret

000001f0 <send_touchpad_possition>:

uint8_t send_touchpad_possition(TouchpadData touchpad_data)
{
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
 1fc:	2a 97       	sbiw	r28, 0x0a	; 10
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	de bf       	out	0x3e, r29	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	cd bf       	out	0x3d, r28	; 61
 208:	26 2f       	mov	r18, r22
 20a:	37 2f       	mov	r19, r23
	message.length = 2;
	
	message.data_array[0] = (uint8_t) (touchpad_data.rightTouchPad);
	message.data_array[1] = (uint8_t) (touchpad_data.leftTouchPad);
	
	return CAN_send_message(message);
 20c:	02 e0       	ldi	r16, 0x02	; 2
 20e:	12 e0       	ldi	r17, 0x02	; 2
 210:	4d 81       	ldd	r20, Y+5	; 0x05
 212:	5e 81       	ldd	r21, Y+6	; 0x06
 214:	6f 81       	ldd	r22, Y+7	; 0x07
 216:	78 85       	ldd	r23, Y+8	; 0x08
 218:	89 85       	ldd	r24, Y+9	; 0x09
 21a:	9a 85       	ldd	r25, Y+10	; 0x0a
 21c:	0e 94 70 00 	call	0xe0	; 0xe0 <CAN_send_message>
}
 220:	2a 96       	adiw	r28, 0x0a	; 10
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	de bf       	out	0x3e, r29	; 62
 228:	0f be       	out	0x3f, r0	; 63
 22a:	cd bf       	out	0x3d, r28	; 61
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	08 95       	ret

00000236 <read_joystick_position>:
*
* \param in calibration data
* \return Joystick position
****************************************************************************/
JoystickPosition read_joystick_position(JoystickPosition calibration)
{
 236:	cf 93       	push	r28
	JoystickPosition position;

	position.xaxis = read_adc(ADC_CH2);
 238:	85 e0       	ldi	r24, 0x05	; 5
 23a:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
 23e:	c8 2f       	mov	r28, r24
	//position.xaxis = ((((position.xaxis - calibration.xaxis)*100)/255)-50)*2;

	position.yaxis = read_adc(ADC_CH1);
 240:	84 e0       	ldi	r24, 0x04	; 4
 242:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
 246:	98 2f       	mov	r25, r24
	//position.yaxis = ((((position.yaxis - calibration.yaxis)*100)/255)-50)*2;
	
	return position;
}
 248:	8c 2f       	mov	r24, r28
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <joystick_calibration>:
* \brief Calibrate joystick
*
* \return Joystick calibration data
****************************************************************************/
JoystickPosition joystick_calibration()
{
 24e:	cf 93       	push	r28
	
	JoystickPosition position;
	position.xaxis = read_adc(ADC_CH2);
 250:	85 e0       	ldi	r24, 0x05	; 5
 252:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
 256:	c8 2f       	mov	r28, r24
	position.yaxis = read_adc(ADC_CH1);
 258:	84 e0       	ldi	r24, 0x04	; 4
 25a:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
	position.xaxis -= 127;
	position.yaxis -= 127;
 25e:	91 e8       	ldi	r25, 0x81	; 129
 260:	98 0f       	add	r25, r24

	return position;	
}
 262:	81 e8       	ldi	r24, 0x81	; 129
 264:	8c 0f       	add	r24, r28
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <read_touchpad_data>:
* \brief Read Touchpad data
*
* \return Touchpad data
****************************************************************************/
TouchpadData read_touchpad_data()
{
 26a:	cf 93       	push	r28
	TouchpadData touchpad;
	touchpad.rightTouchPad = read_adc(ADC_CH3);
 26c:	86 e0       	ldi	r24, 0x06	; 6
 26e:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
 272:	c8 2f       	mov	r28, r24
	touchpad.leftTouchPad = read_adc(ADC_CH4);
 274:	87 e0       	ldi	r24, 0x07	; 7
 276:	0e 94 57 00 	call	0xae	; 0xae <read_adc>
 27a:	78 2f       	mov	r23, r24
	
	if(test_bit(BUTTON_PORT, LEFT_BUTTON_PIN))
 27c:	85 9b       	sbis	0x10, 5	; 16
 27e:	02 c0       	rjmp	.+4      	; 0x284 <read_touchpad_data+0x1a>
	{
		touchpad.leftButton = 1;
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	01 c0       	rjmp	.+2      	; 0x286 <read_touchpad_data+0x1c>
	}
	else
	{
		touchpad.leftButton = 0;
 284:	90 e0       	ldi	r25, 0x00	; 0
	}
	if(test_bit(BUTTON_PORT, RIGHT_BUTTON_PIN))
 286:	84 9b       	sbis	0x10, 4	; 16
 288:	02 c0       	rjmp	.+4      	; 0x28e <read_touchpad_data+0x24>
	{
		touchpad.rightButton = 1;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	01 c0       	rjmp	.+2      	; 0x290 <read_touchpad_data+0x26>
	}
	else
	{
		touchpad.rightButton = 0;	
 28e:	80 e0       	ldi	r24, 0x00	; 0
	}
	return touchpad;
}
 290:	6c 2f       	mov	r22, r28
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <mcp_turn_on>:
* \brief Enable communication with CAN controller 
*
****************************************************************************/
void mcp_turn_on()
{
	PORTB &= ~(1 << DD_CS);
 296:	c4 98       	cbi	0x18, 4	; 24
 298:	08 95       	ret

0000029a <mcp_turn_off>:
* \brief Disable communication with CAN controller
*
****************************************************************************/
void mcp_turn_off()
{
	PORTB |= (1 << DD_CS);
 29a:	c4 9a       	sbi	0x18, 4	; 24
 29c:	08 95       	ret

0000029e <mcp_reset>:
* \brief Reset the CAN controller
*
****************************************************************************/
void mcp_reset()
{
	mcp_turn_on();
 29e:	0e 94 4b 01 	call	0x296	; 0x296 <mcp_turn_on>
	
	SPI_write(MCP_RESET);
 2a2:	80 ec       	ldi	r24, 0xC0	; 192
 2a4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_write>
	
	mcp_turn_off();
 2a8:	0e 94 4d 01 	call	0x29a	; 0x29a <mcp_turn_off>
 2ac:	08 95       	ret

000002ae <mcp_read>:
*
* \param in address from which shall be read
* \return data
****************************************************************************/
uint8_t mcp_read(uint8_t address)
{
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	1f 92       	push	r1
 2b6:	cd b7       	in	r28, 0x3d	; 61
 2b8:	de b7       	in	r29, 0x3e	; 62
 2ba:	18 2f       	mov	r17, r24
	volatile uint8_t retVal;
	
	mcp_turn_on();
 2bc:	0e 94 4b 01 	call	0x296	; 0x296 <mcp_turn_on>
	
	SPI_write(MCP_READ);
 2c0:	83 e0       	ldi	r24, 0x03	; 3
 2c2:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_write>
	SPI_write(address);
 2c6:	81 2f       	mov	r24, r17
 2c8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_write>
	
	retVal = SPI_read();
 2cc:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SPI_read>
 2d0:	89 83       	std	Y+1, r24	; 0x01
	
	mcp_turn_off();
 2d2:	0e 94 4d 01 	call	0x29a	; 0x29a <mcp_turn_off>
	
	return retVal;
 2d6:	89 81       	ldd	r24, Y+1	; 0x01
}
 2d8:	0f 90       	pop	r0
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	1f 91       	pop	r17
 2e0:	08 95       	ret

000002e2 <mcp_init>:
****************************************************************************/
uint8_t mcp_init()
{
	uint8_t tmp;
	
	SPI_init();
 2e2:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_init>
	mcp_reset();
 2e6:	0e 94 4f 01 	call	0x29e	; 0x29e <mcp_reset>
	
	tmp = mcp_read(MCP_CANSTAT);
 2ea:	8e e0       	ldi	r24, 0x0E	; 14
 2ec:	0e 94 57 01 	call	0x2ae	; 0x2ae <mcp_read>
	
	if ((tmp & MODE_MASK) != MODE_CONFIG)
 2f0:	80 7e       	andi	r24, 0xE0	; 224
 2f2:	80 38       	cpi	r24, 0x80	; 128
 2f4:	31 f0       	breq	.+12     	; 0x302 <mcp_init+0x20>
	{
		printf("MCP2515 NOT configured properly\n");
 2f6:	86 e0       	ldi	r24, 0x06	; 6
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	0e 94 0a 03 	call	0x614	; 0x614 <puts>
		return 1;
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	08 95       	ret
	}
	
	return 0;
 302:	80 e0       	ldi	r24, 0x00	; 0
}
 304:	08 95       	ret

00000306 <mcp_write_byte>:
*
* \param in address to which shall be write
* \return data
****************************************************************************/
void mcp_write_byte(uint8_t address, uint8_t byte)
{
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	d8 2f       	mov	r29, r24
 30c:	c6 2f       	mov	r28, r22
	mcp_turn_on();
 30e:	0e 94 4b 01 	call	0x296	; 0x296 <mcp_turn_on>
	SPI_write(MCP_WRITE);
 312:	82 e0       	ldi	r24, 0x02	; 2
 314:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_write>
	SPI_write(address);
 318:	8d 2f       	mov	r24, r29
 31a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_write>
	SPI_write(byte);
 31e:	8c 2f       	mov	r24, r28
 320:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_write>
	mcp_turn_off();
 324:	0e 94 4d 01 	call	0x29a	; 0x29a <mcp_turn_off>
}
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	08 95       	ret

0000032e <mcp_modify_bit>:
* \param in address of the register
* \param in bit mask
* \param in new value of the register
****************************************************************************/
void mcp_modify_bit(uint8_t address, uint8_t mask, uint8_t byte)
{
 32e:	1f 93       	push	r17
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	18 2f       	mov	r17, r24
 336:	d6 2f       	mov	r29, r22
 338:	c4 2f       	mov	r28, r20
	mcp_turn_on();
 33a:	0e 94 4b 01 	call	0x296	; 0x296 <mcp_turn_on>
	SPI_write(MCP_BITMOD);
 33e:	85 e0       	ldi	r24, 0x05	; 5
 340:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_write>
	SPI_write(address);
 344:	81 2f       	mov	r24, r17
 346:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_write>
	SPI_write(mask);
 34a:	8d 2f       	mov	r24, r29
 34c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_write>
	SPI_write(byte);
 350:	8c 2f       	mov	r24, r28
 352:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_write>
	mcp_turn_off();
 356:	0e 94 4d 01 	call	0x29a	; 0x29a <mcp_turn_off>
}
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	08 95       	ret

00000362 <mcp_request_to_send>:
* \brief Request to send particular buffer
*
* \param in address of the buffer
****************************************************************************/
void mcp_request_to_send(uint8_t bits)
{
 362:	cf 93       	push	r28
 364:	c8 2f       	mov	r28, r24
	mcp_turn_on();
 366:	0e 94 4b 01 	call	0x296	; 0x296 <mcp_turn_on>
	SPI_write(MCP_RTS | (bits & 0b00000111));
 36a:	8c 2f       	mov	r24, r28
 36c:	87 70       	andi	r24, 0x07	; 7
 36e:	80 68       	ori	r24, 0x80	; 128
 370:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_write>
	mcp_turn_off();
 374:	0e 94 4d 01 	call	0x29a	; 0x29a <mcp_turn_off>
}
 378:	cf 91       	pop	r28
 37a:	08 95       	ret

0000037c <init_oled>:
*
****************************************************************************/
void write_c(char command)
{
	volatile char *ext_oled = (char *) OLED_COMMAND_BASE_ADDR;
	ext_oled[0] = command;
 37c:	e0 e0       	ldi	r30, 0x00	; 0
 37e:	f0 e1       	ldi	r31, 0x10	; 16
 380:	8e ea       	ldi	r24, 0xAE	; 174
 382:	80 83       	st	Z, r24
 384:	81 ea       	ldi	r24, 0xA1	; 161
 386:	80 83       	st	Z, r24
 388:	8a ed       	ldi	r24, 0xDA	; 218
 38a:	80 83       	st	Z, r24
 38c:	82 e1       	ldi	r24, 0x12	; 18
 38e:	80 83       	st	Z, r24
 390:	88 ec       	ldi	r24, 0xC8	; 200
 392:	80 83       	st	Z, r24
 394:	88 ea       	ldi	r24, 0xA8	; 168
 396:	80 83       	st	Z, r24
 398:	8f e3       	ldi	r24, 0x3F	; 63
 39a:	80 83       	st	Z, r24
 39c:	85 ed       	ldi	r24, 0xD5	; 213
 39e:	80 83       	st	Z, r24
 3a0:	80 e8       	ldi	r24, 0x80	; 128
 3a2:	80 83       	st	Z, r24
 3a4:	81 e8       	ldi	r24, 0x81	; 129
 3a6:	80 83       	st	Z, r24
 3a8:	80 e5       	ldi	r24, 0x50	; 80
 3aa:	80 83       	st	Z, r24
 3ac:	89 ed       	ldi	r24, 0xD9	; 217
 3ae:	80 83       	st	Z, r24
 3b0:	81 e2       	ldi	r24, 0x21	; 33
 3b2:	80 83       	st	Z, r24
 3b4:	80 e2       	ldi	r24, 0x20	; 32
 3b6:	80 83       	st	Z, r24
 3b8:	10 82       	st	Z, r1
 3ba:	8b ed       	ldi	r24, 0xDB	; 219
 3bc:	80 83       	st	Z, r24
 3be:	80 e3       	ldi	r24, 0x30	; 48
 3c0:	80 83       	st	Z, r24
 3c2:	8d ea       	ldi	r24, 0xAD	; 173
 3c4:	80 83       	st	Z, r24
 3c6:	10 82       	st	Z, r1
 3c8:	84 ea       	ldi	r24, 0xA4	; 164
 3ca:	80 83       	st	Z, r24
 3cc:	86 ea       	ldi	r24, 0xA6	; 166
 3ce:	80 83       	st	Z, r24
 3d0:	8f ea       	ldi	r24, 0xAF	; 175
 3d2:	80 83       	st	Z, r24
 3d4:	08 95       	ret

000003d6 <reset_position>:
 3d6:	e0 e0       	ldi	r30, 0x00	; 0
 3d8:	f0 e1       	ldi	r31, 0x10	; 16
 3da:	81 e2       	ldi	r24, 0x21	; 33
 3dc:	80 83       	st	Z, r24
 3de:	10 82       	st	Z, r1
 3e0:	8f e7       	ldi	r24, 0x7F	; 127
 3e2:	80 83       	st	Z, r24
 3e4:	82 e2       	ldi	r24, 0x22	; 34
 3e6:	80 83       	st	Z, r24
 3e8:	10 82       	st	Z, r1
 3ea:	87 e0       	ldi	r24, 0x07	; 7
 3ec:	80 83       	st	Z, r24
 3ee:	08 95       	ret

000003f0 <refresh_oled>:
* \brief Refresh OLED by rewriting all data from SRAM to OLED
*
****************************************************************************/
void refresh_oled()
{
	reset_position();
 3f0:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <reset_position>
 3f4:	e0 e0       	ldi	r30, 0x00	; 0
 3f6:	f8 e1       	ldi	r31, 0x18	; 24
*
****************************************************************************/
void write_d(char data)
{
	volatile char *ext_oled = (char *) OLED_DATA_BASE_ADDR;
	ext_oled[0] = data;
 3f8:	a0 e0       	ldi	r26, 0x00	; 0
 3fa:	b2 e1       	ldi	r27, 0x12	; 18
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	unsigned char oled_value;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
	{
		oled_value = ext_ram[i];
 3fc:	81 91       	ld	r24, Z+
*
****************************************************************************/
void write_d(char data)
{
	volatile char *ext_oled = (char *) OLED_DATA_BASE_ADDR;
	ext_oled[0] = data;
 3fe:	8c 93       	st	X, r24
{
	reset_position();
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	unsigned char oled_value;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
 400:	e1 15       	cp	r30, r1
 402:	8c e1       	ldi	r24, 0x1C	; 28
 404:	f8 07       	cpc	r31, r24
 406:	d1 f7       	brne	.-12     	; 0x3fc <refresh_oled+0xc>
	{
		oled_value = ext_ram[i];
		write_d(oled_value);
	}
}
 408:	08 95       	ret

0000040a <clear_oled>:
/****************************************************************************
* \brief Clear OLED display
*
****************************************************************************/
void clear_oled()
{
 40a:	e0 e0       	ldi	r30, 0x00	; 0
 40c:	f8 e1       	ldi	r31, 0x18	; 24
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
	{
		ext_ram[i] = 0x00;
 40e:	11 92       	st	Z+, r1
****************************************************************************/
void clear_oled()
{
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
 410:	e1 15       	cp	r30, r1
 412:	8c e1       	ldi	r24, 0x1C	; 28
 414:	f8 07       	cpc	r31, r24
 416:	d9 f7       	brne	.-10     	; 0x40e <clear_oled+0x4>
	{
		ext_ram[i] = 0x00;
	}
}
 418:	08 95       	ret

0000041a <init>:
* \brief Initialize all important peripherals and pins
*
****************************************************************************/
void init()
{
	USART_init(MYUBBR);
 41a:	8f e1       	ldi	r24, 0x1F	; 31
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 8d 02 	call	0x51a	; 0x51a <USART_init>
	/* Enables standard IO functions */	
	fdevopen(USART_putchar, USART_getchar);
 422:	6a e9       	ldi	r22, 0x9A	; 154
 424:	72 e0       	ldi	r23, 0x02	; 2
 426:	84 e9       	ldi	r24, 0x94	; 148
 428:	92 e0       	ldi	r25, 0x02	; 2
 42a:	0e 94 ab 02 	call	0x556	; 0x556 <fdevopen>
	/* Enables external memory*/
	set_bit(MCUCR, SRE);
 42e:	85 b7       	in	r24, 0x35	; 53
 430:	80 68       	ori	r24, 0x80	; 128
 432:	85 bf       	out	0x35, r24	; 53
	/* Pin 1 is set to output for the LED*/
	set_bit(DDRB, PB0);
 434:	b8 9a       	sbi	0x17, 0	; 23
	/* Pin is now driven LOW*/
	clear_bit(PORTB, PB0);
 436:	c0 98       	cbi	0x18, 0	; 24
	/* Initialize OLED display */
	init_oled();
 438:	0e 94 be 01 	call	0x37c	; 0x37c <init_oled>
	interface_init();
 43c:	0e 94 9f 02 	call	0x53e	; 0x53e <interface_init>
 440:	08 95       	ret

00000442 <main>:




int main(void)
{	
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	1f 92       	push	r1
 448:	cd b7       	in	r28, 0x3d	; 61
 44a:	de b7       	in	r29, 0x3e	; 62

	clear_bit(DDRD, PD3);
 44c:	8b 98       	cbi	0x11, 3	; 17
	clear_bit(DDRD, PD2);
 44e:	8a 98       	cbi	0x11, 2	; 17
	
	init();
 450:	0e 94 0d 02 	call	0x41a	; 0x41a <init>
	volatile char SPIdata = 0;
 454:	19 82       	std	Y+1, r1	; 0x01
	JoystickPosition position;
	JoystickPosition calibration;
	JoystickDirection direction;
	JoystickDirection change_y, change_x;
	ScreenName screen_name = 0;
	calibration = joystick_calibration();
 456:	0e 94 27 01 	call	0x24e	; 0x24e <joystick_calibration>
 45a:	6c 01       	movw	r12, r24
	CANMessage canMessage, canMessage2;
	
	//SRAM_test();
	
	CAN_init();
 45c:	0e 94 63 00 	call	0xc6	; 0xc6 <CAN_init>
	
	clear_oled();
 460:	0e 94 05 02 	call	0x40a	; 0x40a <clear_oled>
	reset_position();
 464:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <reset_position>
	
	clear_oled();
 468:	0e 94 05 02 	call	0x40a	; 0x40a <clear_oled>
	refresh_oled();
 46c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <refresh_oled>
	canMessage.data_array[0] = 0x10;
	
	canMessage2.ID = 0;
	canMessage2.length = 0;
	
	printf("start\n");
 470:	86 e2       	ldi	r24, 0x26	; 38
 472:	91 e0       	ldi	r25, 0x01	; 1
 474:	0e 94 0a 03 	call	0x614	; 0x614 <puts>
		//interface_state_machine(calibration);
	
		position = read_joystick_position(calibration);
		data = read_touchpad_data();
		
		printf("The x-axis is: %d  ", position.xaxis);
 478:	0f 2e       	mov	r0, r31
 47a:	fc e2       	ldi	r31, 0x2C	; 44
 47c:	ef 2e       	mov	r14, r31
 47e:	f1 e0       	ldi	r31, 0x01	; 1
 480:	ff 2e       	mov	r15, r31
 482:	f0 2d       	mov	r31, r0
		printf("  The y-axis is: %d \n ", position.yaxis);
 484:	00 e4       	ldi	r16, 0x40	; 64
 486:	11 e0       	ldi	r17, 0x01	; 1
		
		//_delay_ms(200);
		
		//interface_state_machine(calibration);
	
		position = read_joystick_position(calibration);
 488:	c6 01       	movw	r24, r12
 48a:	0e 94 1b 01 	call	0x236	; 0x236 <read_joystick_position>
 48e:	68 2e       	mov	r6, r24
 490:	79 2e       	mov	r7, r25
		data = read_touchpad_data();
 492:	0e 94 35 01 	call	0x26a	; 0x26a <read_touchpad_data>
 496:	4b 01       	movw	r8, r22
 498:	5c 01       	movw	r10, r24
		
		printf("The x-axis is: %d  ", position.xaxis);
 49a:	1f 92       	push	r1
 49c:	6f 92       	push	r6
 49e:	ff 92       	push	r15
 4a0:	ef 92       	push	r14
 4a2:	0e 94 f6 02 	call	0x5ec	; 0x5ec <printf>
		printf("  The y-axis is: %d \n ", position.yaxis);
 4a6:	1f 92       	push	r1
 4a8:	7f 92       	push	r7
 4aa:	1f 93       	push	r17
 4ac:	0f 93       	push	r16
 4ae:	0e 94 f6 02 	call	0x5ec	; 0x5ec <printf>
		//_delay_ms(100);
		send_joystick_possition(position);
 4b2:	86 2d       	mov	r24, r6
 4b4:	97 2d       	mov	r25, r7
 4b6:	0e 94 d5 00 	call	0x1aa	; 0x1aa <send_joystick_possition>
 4ba:	8c ec       	ldi	r24, 0xCC	; 204
 4bc:	94 e0       	ldi	r25, 0x04	; 4
 4be:	01 97       	sbiw	r24, 0x01	; 1
 4c0:	f1 f7       	brne	.-4      	; 0x4be <main+0x7c>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <main+0x82>
 4c4:	00 00       	nop
		_delay_ms(1);
		send_touchpad_possition(data);
 4c6:	c5 01       	movw	r24, r10
 4c8:	b4 01       	movw	r22, r8
 4ca:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <send_touchpad_possition>
 4ce:	8c ec       	ldi	r24, 0xCC	; 204
 4d0:	94 e0       	ldi	r25, 0x04	; 4
 4d2:	01 97       	sbiw	r24, 0x01	; 1
 4d4:	f1 f7       	brne	.-4      	; 0x4d2 <main+0x90>
 4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <main+0x96>
 4d8:	00 00       	nop
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	f8 94       	cli
 4de:	de bf       	out	0x3e, r29	; 62
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	cd bf       	out	0x3d, r28	; 61
 4e4:	d1 cf       	rjmp	.-94     	; 0x488 <main+0x46>

000004e6 <SPI_init>:
*
****************************************************************************/
void SPI_init()
{
	/* Drive MOSI, SCK and CS HIGH*/
	DDR_SPI |= (1 << DD_MOSI) | (1 << DD_SCK) | (1 << DD_CS);
 4e6:	87 b3       	in	r24, 0x17	; 23
 4e8:	80 6b       	ori	r24, 0xB0	; 176
 4ea:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master mode, clock rate fck/16*/
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 4ec:	81 e5       	ldi	r24, 0x51	; 81
 4ee:	8d b9       	out	0x0d, r24	; 13
 4f0:	08 95       	ret

000004f2 <SPI_write>:
*
* \param in byte to be written
****************************************************************************/
void SPI_write(uint8_t data)
{
	SPDR = data;
 4f2:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1 << SPIF)));
 4f4:	77 9b       	sbis	0x0e, 7	; 14
 4f6:	fe cf       	rjmp	.-4      	; 0x4f4 <SPI_write+0x2>
}
 4f8:	08 95       	ret

000004fa <SPI_read>:
* \brief Read data from slave unit
*
* \return Read data
****************************************************************************/
uint8_t SPI_read()
{
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	1f 92       	push	r1
 500:	cd b7       	in	r28, 0x3d	; 61
 502:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t retVal;
	SPDR = 0xFF;
 504:	8f ef       	ldi	r24, 0xFF	; 255
 506:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1 << SPIF)));
 508:	77 9b       	sbis	0x0e, 7	; 14
 50a:	fe cf       	rjmp	.-4      	; 0x508 <__stack+0x9>
	
	retVal = SPDR;
 50c:	8f b1       	in	r24, 0x0f	; 15
 50e:	89 83       	std	Y+1, r24	; 0x01
	
	return retVal;
 510:	89 81       	ldd	r24, Y+1	; 0x01
 512:	0f 90       	pop	r0
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	08 95       	ret

0000051a <USART_init>:
 * \param ubrr Desired baud rate.
 ****************************************************************************/
void USART_init(unsigned int ubrr)
{
	//Set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
 51a:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
 51c:	89 b9       	out	0x09, r24	; 9
	// Enable receiver and transmitter
	UCSR0B = (1<< RXEN0) | (1<<TXEN0) | (1<<RXCIE0) | (1<<TXCIE0);
 51e:	88 ed       	ldi	r24, 0xD8	; 216
 520:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 2 stop bit
	UCSR0C = (1<<URSEL0) | (3<<UCSZ00) ;
 522:	86 e8       	ldi	r24, 0x86	; 134
 524:	80 bd       	out	0x20, r24	; 32
 526:	08 95       	ret

00000528 <USART_putchar>:
 * \param c Char to be sent.
 * \return Always 0.
 ****************************************************************************/
int USART_putchar(char c)
{
	loop_until_bit_is_set(UCSR0A, UDRE0);
 528:	5d 9b       	sbis	0x0b, 5	; 11
 52a:	fe cf       	rjmp	.-4      	; 0x528 <USART_putchar>
	UDR0 = c;
 52c:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	08 95       	ret

00000534 <USART_getchar>:
 * \return Received char.
 ****************************************************************************/
int USART_getchar()
{
	char c;
	loop_until_bit_is_set(UCSR0A, RXC0);
 534:	5f 9b       	sbis	0x0b, 7	; 11
 536:	fe cf       	rjmp	.-4      	; 0x534 <USART_getchar>
	c = UDR0;
 538:	8c b1       	in	r24, 0x0c	; 12
	return c;
}
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	08 95       	ret

0000053e <interface_init>:
	volatile char *ext_ram = (char *) SRAM_USERNAME_ADDR;
	volatile char *eeprom = (char *) EEPROM_HIGH_SCORES_BASE_ADDR;

	for(int i = 0; i < SRAM_USERNAME_ADDR_LENGTH; i++)
	{
		ext_ram[i] = 'A';
 53e:	81 e4       	ldi	r24, 0x41	; 65
 540:	80 93 00 1c 	sts	0x1C00, r24
 544:	80 93 01 1c 	sts	0x1C01, r24
 548:	80 93 02 1c 	sts	0x1C02, r24
 54c:	80 93 03 1c 	sts	0x1C03, r24
 550:	80 93 04 1c 	sts	0x1C04, r24
 554:	08 95       	ret

00000556 <fdevopen>:
 556:	0f 93       	push	r16
 558:	1f 93       	push	r17
 55a:	cf 93       	push	r28
 55c:	df 93       	push	r29
 55e:	ec 01       	movw	r28, r24
 560:	8b 01       	movw	r16, r22
 562:	00 97       	sbiw	r24, 0x00	; 0
 564:	31 f4       	brne	.+12     	; 0x572 <fdevopen+0x1c>
 566:	61 15       	cp	r22, r1
 568:	71 05       	cpc	r23, r1
 56a:	19 f4       	brne	.+6      	; 0x572 <fdevopen+0x1c>
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	38 c0       	rjmp	.+112    	; 0x5e2 <fdevopen+0x8c>
 572:	6e e0       	ldi	r22, 0x0E	; 14
 574:	70 e0       	ldi	r23, 0x00	; 0
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	0e 94 09 05 	call	0xa12	; 0xa12 <calloc>
 57e:	fc 01       	movw	r30, r24
 580:	00 97       	sbiw	r24, 0x00	; 0
 582:	a1 f3       	breq	.-24     	; 0x56c <fdevopen+0x16>
 584:	80 e8       	ldi	r24, 0x80	; 128
 586:	83 83       	std	Z+3, r24	; 0x03
 588:	01 15       	cp	r16, r1
 58a:	11 05       	cpc	r17, r1
 58c:	71 f0       	breq	.+28     	; 0x5aa <fdevopen+0x54>
 58e:	13 87       	std	Z+11, r17	; 0x0b
 590:	02 87       	std	Z+10, r16	; 0x0a
 592:	81 e8       	ldi	r24, 0x81	; 129
 594:	83 83       	std	Z+3, r24	; 0x03
 596:	80 91 58 01 	lds	r24, 0x0158
 59a:	90 91 59 01 	lds	r25, 0x0159
 59e:	89 2b       	or	r24, r25
 5a0:	21 f4       	brne	.+8      	; 0x5aa <fdevopen+0x54>
 5a2:	f0 93 59 01 	sts	0x0159, r31
 5a6:	e0 93 58 01 	sts	0x0158, r30
 5aa:	20 97       	sbiw	r28, 0x00	; 0
 5ac:	c9 f0       	breq	.+50     	; 0x5e0 <fdevopen+0x8a>
 5ae:	d1 87       	std	Z+9, r29	; 0x09
 5b0:	c0 87       	std	Z+8, r28	; 0x08
 5b2:	83 81       	ldd	r24, Z+3	; 0x03
 5b4:	82 60       	ori	r24, 0x02	; 2
 5b6:	83 83       	std	Z+3, r24	; 0x03
 5b8:	80 91 5a 01 	lds	r24, 0x015A
 5bc:	90 91 5b 01 	lds	r25, 0x015B
 5c0:	89 2b       	or	r24, r25
 5c2:	71 f4       	brne	.+28     	; 0x5e0 <fdevopen+0x8a>
 5c4:	f0 93 5b 01 	sts	0x015B, r31
 5c8:	e0 93 5a 01 	sts	0x015A, r30
 5cc:	80 91 5c 01 	lds	r24, 0x015C
 5d0:	90 91 5d 01 	lds	r25, 0x015D
 5d4:	89 2b       	or	r24, r25
 5d6:	21 f4       	brne	.+8      	; 0x5e0 <fdevopen+0x8a>
 5d8:	f0 93 5d 01 	sts	0x015D, r31
 5dc:	e0 93 5c 01 	sts	0x015C, r30
 5e0:	cf 01       	movw	r24, r30
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	1f 91       	pop	r17
 5e8:	0f 91       	pop	r16
 5ea:	08 95       	ret

000005ec <printf>:
 5ec:	a0 e0       	ldi	r26, 0x00	; 0
 5ee:	b0 e0       	ldi	r27, 0x00	; 0
 5f0:	ec ef       	ldi	r30, 0xFC	; 252
 5f2:	f2 e0       	ldi	r31, 0x02	; 2
 5f4:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__prologue_saves__+0x20>
 5f8:	fe 01       	movw	r30, r28
 5fa:	35 96       	adiw	r30, 0x05	; 5
 5fc:	61 91       	ld	r22, Z+
 5fe:	71 91       	ld	r23, Z+
 600:	af 01       	movw	r20, r30
 602:	80 91 5a 01 	lds	r24, 0x015A
 606:	90 91 5b 01 	lds	r25, 0x015B
 60a:	0e 94 37 03 	call	0x66e	; 0x66e <vfprintf>
 60e:	e2 e0       	ldi	r30, 0x02	; 2
 610:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__epilogue_restores__+0x20>

00000614 <puts>:
 614:	0f 93       	push	r16
 616:	1f 93       	push	r17
 618:	cf 93       	push	r28
 61a:	df 93       	push	r29
 61c:	e0 91 5a 01 	lds	r30, 0x015A
 620:	f0 91 5b 01 	lds	r31, 0x015B
 624:	23 81       	ldd	r18, Z+3	; 0x03
 626:	21 ff       	sbrs	r18, 1
 628:	1b c0       	rjmp	.+54     	; 0x660 <puts+0x4c>
 62a:	ec 01       	movw	r28, r24
 62c:	00 e0       	ldi	r16, 0x00	; 0
 62e:	10 e0       	ldi	r17, 0x00	; 0
 630:	89 91       	ld	r24, Y+
 632:	60 91 5a 01 	lds	r22, 0x015A
 636:	70 91 5b 01 	lds	r23, 0x015B
 63a:	db 01       	movw	r26, r22
 63c:	18 96       	adiw	r26, 0x08	; 8
 63e:	ed 91       	ld	r30, X+
 640:	fc 91       	ld	r31, X
 642:	19 97       	sbiw	r26, 0x09	; 9
 644:	88 23       	and	r24, r24
 646:	31 f0       	breq	.+12     	; 0x654 <puts+0x40>
 648:	09 95       	icall
 64a:	89 2b       	or	r24, r25
 64c:	89 f3       	breq	.-30     	; 0x630 <puts+0x1c>
 64e:	0f ef       	ldi	r16, 0xFF	; 255
 650:	1f ef       	ldi	r17, 0xFF	; 255
 652:	ee cf       	rjmp	.-36     	; 0x630 <puts+0x1c>
 654:	8a e0       	ldi	r24, 0x0A	; 10
 656:	09 95       	icall
 658:	89 2b       	or	r24, r25
 65a:	11 f4       	brne	.+4      	; 0x660 <puts+0x4c>
 65c:	c8 01       	movw	r24, r16
 65e:	02 c0       	rjmp	.+4      	; 0x664 <puts+0x50>
 660:	8f ef       	ldi	r24, 0xFF	; 255
 662:	9f ef       	ldi	r25, 0xFF	; 255
 664:	df 91       	pop	r29
 666:	cf 91       	pop	r28
 668:	1f 91       	pop	r17
 66a:	0f 91       	pop	r16
 66c:	08 95       	ret

0000066e <vfprintf>:
 66e:	ac e0       	ldi	r26, 0x0C	; 12
 670:	b0 e0       	ldi	r27, 0x00	; 0
 672:	ed e3       	ldi	r30, 0x3D	; 61
 674:	f3 e0       	ldi	r31, 0x03	; 3
 676:	0c 94 f9 06 	jmp	0xdf2	; 0xdf2 <__prologue_saves__>
 67a:	7c 01       	movw	r14, r24
 67c:	6b 01       	movw	r12, r22
 67e:	8a 01       	movw	r16, r20
 680:	fc 01       	movw	r30, r24
 682:	17 82       	std	Z+7, r1	; 0x07
 684:	16 82       	std	Z+6, r1	; 0x06
 686:	83 81       	ldd	r24, Z+3	; 0x03
 688:	81 ff       	sbrs	r24, 1
 68a:	bd c1       	rjmp	.+890    	; 0xa06 <vfprintf+0x398>
 68c:	ce 01       	movw	r24, r28
 68e:	01 96       	adiw	r24, 0x01	; 1
 690:	4c 01       	movw	r8, r24
 692:	f7 01       	movw	r30, r14
 694:	93 81       	ldd	r25, Z+3	; 0x03
 696:	f6 01       	movw	r30, r12
 698:	93 fd       	sbrc	r25, 3
 69a:	85 91       	lpm	r24, Z+
 69c:	93 ff       	sbrs	r25, 3
 69e:	81 91       	ld	r24, Z+
 6a0:	6f 01       	movw	r12, r30
 6a2:	88 23       	and	r24, r24
 6a4:	09 f4       	brne	.+2      	; 0x6a8 <vfprintf+0x3a>
 6a6:	ab c1       	rjmp	.+854    	; 0x9fe <vfprintf+0x390>
 6a8:	85 32       	cpi	r24, 0x25	; 37
 6aa:	39 f4       	brne	.+14     	; 0x6ba <vfprintf+0x4c>
 6ac:	93 fd       	sbrc	r25, 3
 6ae:	85 91       	lpm	r24, Z+
 6b0:	93 ff       	sbrs	r25, 3
 6b2:	81 91       	ld	r24, Z+
 6b4:	6f 01       	movw	r12, r30
 6b6:	85 32       	cpi	r24, 0x25	; 37
 6b8:	29 f4       	brne	.+10     	; 0x6c4 <vfprintf+0x56>
 6ba:	b7 01       	movw	r22, r14
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	0e 94 69 06 	call	0xcd2	; 0xcd2 <fputc>
 6c2:	e7 cf       	rjmp	.-50     	; 0x692 <vfprintf+0x24>
 6c4:	51 2c       	mov	r5, r1
 6c6:	31 2c       	mov	r3, r1
 6c8:	20 e0       	ldi	r18, 0x00	; 0
 6ca:	20 32       	cpi	r18, 0x20	; 32
 6cc:	a0 f4       	brcc	.+40     	; 0x6f6 <vfprintf+0x88>
 6ce:	8b 32       	cpi	r24, 0x2B	; 43
 6d0:	69 f0       	breq	.+26     	; 0x6ec <vfprintf+0x7e>
 6d2:	30 f4       	brcc	.+12     	; 0x6e0 <vfprintf+0x72>
 6d4:	80 32       	cpi	r24, 0x20	; 32
 6d6:	59 f0       	breq	.+22     	; 0x6ee <vfprintf+0x80>
 6d8:	83 32       	cpi	r24, 0x23	; 35
 6da:	69 f4       	brne	.+26     	; 0x6f6 <vfprintf+0x88>
 6dc:	20 61       	ori	r18, 0x10	; 16
 6de:	2c c0       	rjmp	.+88     	; 0x738 <vfprintf+0xca>
 6e0:	8d 32       	cpi	r24, 0x2D	; 45
 6e2:	39 f0       	breq	.+14     	; 0x6f2 <vfprintf+0x84>
 6e4:	80 33       	cpi	r24, 0x30	; 48
 6e6:	39 f4       	brne	.+14     	; 0x6f6 <vfprintf+0x88>
 6e8:	21 60       	ori	r18, 0x01	; 1
 6ea:	26 c0       	rjmp	.+76     	; 0x738 <vfprintf+0xca>
 6ec:	22 60       	ori	r18, 0x02	; 2
 6ee:	24 60       	ori	r18, 0x04	; 4
 6f0:	23 c0       	rjmp	.+70     	; 0x738 <vfprintf+0xca>
 6f2:	28 60       	ori	r18, 0x08	; 8
 6f4:	21 c0       	rjmp	.+66     	; 0x738 <vfprintf+0xca>
 6f6:	27 fd       	sbrc	r18, 7
 6f8:	27 c0       	rjmp	.+78     	; 0x748 <vfprintf+0xda>
 6fa:	30 ed       	ldi	r19, 0xD0	; 208
 6fc:	38 0f       	add	r19, r24
 6fe:	3a 30       	cpi	r19, 0x0A	; 10
 700:	78 f4       	brcc	.+30     	; 0x720 <vfprintf+0xb2>
 702:	26 ff       	sbrs	r18, 6
 704:	06 c0       	rjmp	.+12     	; 0x712 <vfprintf+0xa4>
 706:	fa e0       	ldi	r31, 0x0A	; 10
 708:	5f 9e       	mul	r5, r31
 70a:	30 0d       	add	r19, r0
 70c:	11 24       	eor	r1, r1
 70e:	53 2e       	mov	r5, r19
 710:	13 c0       	rjmp	.+38     	; 0x738 <vfprintf+0xca>
 712:	8a e0       	ldi	r24, 0x0A	; 10
 714:	38 9e       	mul	r3, r24
 716:	30 0d       	add	r19, r0
 718:	11 24       	eor	r1, r1
 71a:	33 2e       	mov	r3, r19
 71c:	20 62       	ori	r18, 0x20	; 32
 71e:	0c c0       	rjmp	.+24     	; 0x738 <vfprintf+0xca>
 720:	8e 32       	cpi	r24, 0x2E	; 46
 722:	21 f4       	brne	.+8      	; 0x72c <vfprintf+0xbe>
 724:	26 fd       	sbrc	r18, 6
 726:	6b c1       	rjmp	.+726    	; 0x9fe <vfprintf+0x390>
 728:	20 64       	ori	r18, 0x40	; 64
 72a:	06 c0       	rjmp	.+12     	; 0x738 <vfprintf+0xca>
 72c:	8c 36       	cpi	r24, 0x6C	; 108
 72e:	11 f4       	brne	.+4      	; 0x734 <vfprintf+0xc6>
 730:	20 68       	ori	r18, 0x80	; 128
 732:	02 c0       	rjmp	.+4      	; 0x738 <vfprintf+0xca>
 734:	88 36       	cpi	r24, 0x68	; 104
 736:	41 f4       	brne	.+16     	; 0x748 <vfprintf+0xda>
 738:	f6 01       	movw	r30, r12
 73a:	93 fd       	sbrc	r25, 3
 73c:	85 91       	lpm	r24, Z+
 73e:	93 ff       	sbrs	r25, 3
 740:	81 91       	ld	r24, Z+
 742:	6f 01       	movw	r12, r30
 744:	81 11       	cpse	r24, r1
 746:	c1 cf       	rjmp	.-126    	; 0x6ca <vfprintf+0x5c>
 748:	98 2f       	mov	r25, r24
 74a:	9f 7d       	andi	r25, 0xDF	; 223
 74c:	95 54       	subi	r25, 0x45	; 69
 74e:	93 30       	cpi	r25, 0x03	; 3
 750:	28 f4       	brcc	.+10     	; 0x75c <vfprintf+0xee>
 752:	0c 5f       	subi	r16, 0xFC	; 252
 754:	1f 4f       	sbci	r17, 0xFF	; 255
 756:	ff e3       	ldi	r31, 0x3F	; 63
 758:	f9 83       	std	Y+1, r31	; 0x01
 75a:	0d c0       	rjmp	.+26     	; 0x776 <vfprintf+0x108>
 75c:	83 36       	cpi	r24, 0x63	; 99
 75e:	31 f0       	breq	.+12     	; 0x76c <vfprintf+0xfe>
 760:	83 37       	cpi	r24, 0x73	; 115
 762:	71 f0       	breq	.+28     	; 0x780 <vfprintf+0x112>
 764:	83 35       	cpi	r24, 0x53	; 83
 766:	09 f0       	breq	.+2      	; 0x76a <vfprintf+0xfc>
 768:	5b c0       	rjmp	.+182    	; 0x820 <vfprintf+0x1b2>
 76a:	22 c0       	rjmp	.+68     	; 0x7b0 <vfprintf+0x142>
 76c:	f8 01       	movw	r30, r16
 76e:	80 81       	ld	r24, Z
 770:	89 83       	std	Y+1, r24	; 0x01
 772:	0e 5f       	subi	r16, 0xFE	; 254
 774:	1f 4f       	sbci	r17, 0xFF	; 255
 776:	44 24       	eor	r4, r4
 778:	43 94       	inc	r4
 77a:	51 2c       	mov	r5, r1
 77c:	54 01       	movw	r10, r8
 77e:	15 c0       	rjmp	.+42     	; 0x7aa <vfprintf+0x13c>
 780:	38 01       	movw	r6, r16
 782:	f2 e0       	ldi	r31, 0x02	; 2
 784:	6f 0e       	add	r6, r31
 786:	71 1c       	adc	r7, r1
 788:	f8 01       	movw	r30, r16
 78a:	a0 80       	ld	r10, Z
 78c:	b1 80       	ldd	r11, Z+1	; 0x01
 78e:	26 ff       	sbrs	r18, 6
 790:	03 c0       	rjmp	.+6      	; 0x798 <vfprintf+0x12a>
 792:	65 2d       	mov	r22, r5
 794:	70 e0       	ldi	r23, 0x00	; 0
 796:	02 c0       	rjmp	.+4      	; 0x79c <vfprintf+0x12e>
 798:	6f ef       	ldi	r22, 0xFF	; 255
 79a:	7f ef       	ldi	r23, 0xFF	; 255
 79c:	c5 01       	movw	r24, r10
 79e:	2c 87       	std	Y+12, r18	; 0x0c
 7a0:	0e 94 5e 06 	call	0xcbc	; 0xcbc <strnlen>
 7a4:	2c 01       	movw	r4, r24
 7a6:	83 01       	movw	r16, r6
 7a8:	2c 85       	ldd	r18, Y+12	; 0x0c
 7aa:	2f 77       	andi	r18, 0x7F	; 127
 7ac:	22 2e       	mov	r2, r18
 7ae:	17 c0       	rjmp	.+46     	; 0x7de <vfprintf+0x170>
 7b0:	38 01       	movw	r6, r16
 7b2:	f2 e0       	ldi	r31, 0x02	; 2
 7b4:	6f 0e       	add	r6, r31
 7b6:	71 1c       	adc	r7, r1
 7b8:	f8 01       	movw	r30, r16
 7ba:	a0 80       	ld	r10, Z
 7bc:	b1 80       	ldd	r11, Z+1	; 0x01
 7be:	26 ff       	sbrs	r18, 6
 7c0:	03 c0       	rjmp	.+6      	; 0x7c8 <vfprintf+0x15a>
 7c2:	65 2d       	mov	r22, r5
 7c4:	70 e0       	ldi	r23, 0x00	; 0
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <vfprintf+0x15e>
 7c8:	6f ef       	ldi	r22, 0xFF	; 255
 7ca:	7f ef       	ldi	r23, 0xFF	; 255
 7cc:	c5 01       	movw	r24, r10
 7ce:	2c 87       	std	Y+12, r18	; 0x0c
 7d0:	0e 94 4c 06 	call	0xc98	; 0xc98 <strnlen_P>
 7d4:	2c 01       	movw	r4, r24
 7d6:	2c 85       	ldd	r18, Y+12	; 0x0c
 7d8:	20 68       	ori	r18, 0x80	; 128
 7da:	22 2e       	mov	r2, r18
 7dc:	83 01       	movw	r16, r6
 7de:	23 fc       	sbrc	r2, 3
 7e0:	1b c0       	rjmp	.+54     	; 0x818 <vfprintf+0x1aa>
 7e2:	83 2d       	mov	r24, r3
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	48 16       	cp	r4, r24
 7e8:	59 06       	cpc	r5, r25
 7ea:	b0 f4       	brcc	.+44     	; 0x818 <vfprintf+0x1aa>
 7ec:	b7 01       	movw	r22, r14
 7ee:	80 e2       	ldi	r24, 0x20	; 32
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	0e 94 69 06 	call	0xcd2	; 0xcd2 <fputc>
 7f6:	3a 94       	dec	r3
 7f8:	f4 cf       	rjmp	.-24     	; 0x7e2 <vfprintf+0x174>
 7fa:	f5 01       	movw	r30, r10
 7fc:	27 fc       	sbrc	r2, 7
 7fe:	85 91       	lpm	r24, Z+
 800:	27 fe       	sbrs	r2, 7
 802:	81 91       	ld	r24, Z+
 804:	5f 01       	movw	r10, r30
 806:	b7 01       	movw	r22, r14
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <fputc>
 80e:	31 10       	cpse	r3, r1
 810:	3a 94       	dec	r3
 812:	f1 e0       	ldi	r31, 0x01	; 1
 814:	4f 1a       	sub	r4, r31
 816:	51 08       	sbc	r5, r1
 818:	41 14       	cp	r4, r1
 81a:	51 04       	cpc	r5, r1
 81c:	71 f7       	brne	.-36     	; 0x7fa <vfprintf+0x18c>
 81e:	e5 c0       	rjmp	.+458    	; 0x9ea <vfprintf+0x37c>
 820:	84 36       	cpi	r24, 0x64	; 100
 822:	11 f0       	breq	.+4      	; 0x828 <vfprintf+0x1ba>
 824:	89 36       	cpi	r24, 0x69	; 105
 826:	39 f5       	brne	.+78     	; 0x876 <vfprintf+0x208>
 828:	f8 01       	movw	r30, r16
 82a:	27 ff       	sbrs	r18, 7
 82c:	07 c0       	rjmp	.+14     	; 0x83c <vfprintf+0x1ce>
 82e:	60 81       	ld	r22, Z
 830:	71 81       	ldd	r23, Z+1	; 0x01
 832:	82 81       	ldd	r24, Z+2	; 0x02
 834:	93 81       	ldd	r25, Z+3	; 0x03
 836:	0c 5f       	subi	r16, 0xFC	; 252
 838:	1f 4f       	sbci	r17, 0xFF	; 255
 83a:	08 c0       	rjmp	.+16     	; 0x84c <vfprintf+0x1de>
 83c:	60 81       	ld	r22, Z
 83e:	71 81       	ldd	r23, Z+1	; 0x01
 840:	88 27       	eor	r24, r24
 842:	77 fd       	sbrc	r23, 7
 844:	80 95       	com	r24
 846:	98 2f       	mov	r25, r24
 848:	0e 5f       	subi	r16, 0xFE	; 254
 84a:	1f 4f       	sbci	r17, 0xFF	; 255
 84c:	2f 76       	andi	r18, 0x6F	; 111
 84e:	b2 2e       	mov	r11, r18
 850:	97 ff       	sbrs	r25, 7
 852:	09 c0       	rjmp	.+18     	; 0x866 <vfprintf+0x1f8>
 854:	90 95       	com	r25
 856:	80 95       	com	r24
 858:	70 95       	com	r23
 85a:	61 95       	neg	r22
 85c:	7f 4f       	sbci	r23, 0xFF	; 255
 85e:	8f 4f       	sbci	r24, 0xFF	; 255
 860:	9f 4f       	sbci	r25, 0xFF	; 255
 862:	20 68       	ori	r18, 0x80	; 128
 864:	b2 2e       	mov	r11, r18
 866:	2a e0       	ldi	r18, 0x0A	; 10
 868:	30 e0       	ldi	r19, 0x00	; 0
 86a:	a4 01       	movw	r20, r8
 86c:	0e 94 9b 06 	call	0xd36	; 0xd36 <__ultoa_invert>
 870:	a8 2e       	mov	r10, r24
 872:	a8 18       	sub	r10, r8
 874:	44 c0       	rjmp	.+136    	; 0x8fe <vfprintf+0x290>
 876:	85 37       	cpi	r24, 0x75	; 117
 878:	29 f4       	brne	.+10     	; 0x884 <vfprintf+0x216>
 87a:	2f 7e       	andi	r18, 0xEF	; 239
 87c:	b2 2e       	mov	r11, r18
 87e:	2a e0       	ldi	r18, 0x0A	; 10
 880:	30 e0       	ldi	r19, 0x00	; 0
 882:	25 c0       	rjmp	.+74     	; 0x8ce <vfprintf+0x260>
 884:	f2 2f       	mov	r31, r18
 886:	f9 7f       	andi	r31, 0xF9	; 249
 888:	bf 2e       	mov	r11, r31
 88a:	8f 36       	cpi	r24, 0x6F	; 111
 88c:	c1 f0       	breq	.+48     	; 0x8be <vfprintf+0x250>
 88e:	18 f4       	brcc	.+6      	; 0x896 <vfprintf+0x228>
 890:	88 35       	cpi	r24, 0x58	; 88
 892:	79 f0       	breq	.+30     	; 0x8b2 <vfprintf+0x244>
 894:	b4 c0       	rjmp	.+360    	; 0x9fe <vfprintf+0x390>
 896:	80 37       	cpi	r24, 0x70	; 112
 898:	19 f0       	breq	.+6      	; 0x8a0 <vfprintf+0x232>
 89a:	88 37       	cpi	r24, 0x78	; 120
 89c:	21 f0       	breq	.+8      	; 0x8a6 <vfprintf+0x238>
 89e:	af c0       	rjmp	.+350    	; 0x9fe <vfprintf+0x390>
 8a0:	2f 2f       	mov	r18, r31
 8a2:	20 61       	ori	r18, 0x10	; 16
 8a4:	b2 2e       	mov	r11, r18
 8a6:	b4 fe       	sbrs	r11, 4
 8a8:	0d c0       	rjmp	.+26     	; 0x8c4 <vfprintf+0x256>
 8aa:	8b 2d       	mov	r24, r11
 8ac:	84 60       	ori	r24, 0x04	; 4
 8ae:	b8 2e       	mov	r11, r24
 8b0:	09 c0       	rjmp	.+18     	; 0x8c4 <vfprintf+0x256>
 8b2:	24 ff       	sbrs	r18, 4
 8b4:	0a c0       	rjmp	.+20     	; 0x8ca <vfprintf+0x25c>
 8b6:	9f 2f       	mov	r25, r31
 8b8:	96 60       	ori	r25, 0x06	; 6
 8ba:	b9 2e       	mov	r11, r25
 8bc:	06 c0       	rjmp	.+12     	; 0x8ca <vfprintf+0x25c>
 8be:	28 e0       	ldi	r18, 0x08	; 8
 8c0:	30 e0       	ldi	r19, 0x00	; 0
 8c2:	05 c0       	rjmp	.+10     	; 0x8ce <vfprintf+0x260>
 8c4:	20 e1       	ldi	r18, 0x10	; 16
 8c6:	30 e0       	ldi	r19, 0x00	; 0
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <vfprintf+0x260>
 8ca:	20 e1       	ldi	r18, 0x10	; 16
 8cc:	32 e0       	ldi	r19, 0x02	; 2
 8ce:	f8 01       	movw	r30, r16
 8d0:	b7 fe       	sbrs	r11, 7
 8d2:	07 c0       	rjmp	.+14     	; 0x8e2 <vfprintf+0x274>
 8d4:	60 81       	ld	r22, Z
 8d6:	71 81       	ldd	r23, Z+1	; 0x01
 8d8:	82 81       	ldd	r24, Z+2	; 0x02
 8da:	93 81       	ldd	r25, Z+3	; 0x03
 8dc:	0c 5f       	subi	r16, 0xFC	; 252
 8de:	1f 4f       	sbci	r17, 0xFF	; 255
 8e0:	06 c0       	rjmp	.+12     	; 0x8ee <vfprintf+0x280>
 8e2:	60 81       	ld	r22, Z
 8e4:	71 81       	ldd	r23, Z+1	; 0x01
 8e6:	80 e0       	ldi	r24, 0x00	; 0
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	0e 5f       	subi	r16, 0xFE	; 254
 8ec:	1f 4f       	sbci	r17, 0xFF	; 255
 8ee:	a4 01       	movw	r20, r8
 8f0:	0e 94 9b 06 	call	0xd36	; 0xd36 <__ultoa_invert>
 8f4:	a8 2e       	mov	r10, r24
 8f6:	a8 18       	sub	r10, r8
 8f8:	fb 2d       	mov	r31, r11
 8fa:	ff 77       	andi	r31, 0x7F	; 127
 8fc:	bf 2e       	mov	r11, r31
 8fe:	b6 fe       	sbrs	r11, 6
 900:	0b c0       	rjmp	.+22     	; 0x918 <vfprintf+0x2aa>
 902:	2b 2d       	mov	r18, r11
 904:	2e 7f       	andi	r18, 0xFE	; 254
 906:	a5 14       	cp	r10, r5
 908:	50 f4       	brcc	.+20     	; 0x91e <vfprintf+0x2b0>
 90a:	b4 fe       	sbrs	r11, 4
 90c:	0a c0       	rjmp	.+20     	; 0x922 <vfprintf+0x2b4>
 90e:	b2 fc       	sbrc	r11, 2
 910:	08 c0       	rjmp	.+16     	; 0x922 <vfprintf+0x2b4>
 912:	2b 2d       	mov	r18, r11
 914:	2e 7e       	andi	r18, 0xEE	; 238
 916:	05 c0       	rjmp	.+10     	; 0x922 <vfprintf+0x2b4>
 918:	7a 2c       	mov	r7, r10
 91a:	2b 2d       	mov	r18, r11
 91c:	03 c0       	rjmp	.+6      	; 0x924 <vfprintf+0x2b6>
 91e:	7a 2c       	mov	r7, r10
 920:	01 c0       	rjmp	.+2      	; 0x924 <vfprintf+0x2b6>
 922:	75 2c       	mov	r7, r5
 924:	24 ff       	sbrs	r18, 4
 926:	0d c0       	rjmp	.+26     	; 0x942 <vfprintf+0x2d4>
 928:	fe 01       	movw	r30, r28
 92a:	ea 0d       	add	r30, r10
 92c:	f1 1d       	adc	r31, r1
 92e:	80 81       	ld	r24, Z
 930:	80 33       	cpi	r24, 0x30	; 48
 932:	11 f4       	brne	.+4      	; 0x938 <vfprintf+0x2ca>
 934:	29 7e       	andi	r18, 0xE9	; 233
 936:	09 c0       	rjmp	.+18     	; 0x94a <vfprintf+0x2dc>
 938:	22 ff       	sbrs	r18, 2
 93a:	06 c0       	rjmp	.+12     	; 0x948 <vfprintf+0x2da>
 93c:	73 94       	inc	r7
 93e:	73 94       	inc	r7
 940:	04 c0       	rjmp	.+8      	; 0x94a <vfprintf+0x2dc>
 942:	82 2f       	mov	r24, r18
 944:	86 78       	andi	r24, 0x86	; 134
 946:	09 f0       	breq	.+2      	; 0x94a <vfprintf+0x2dc>
 948:	73 94       	inc	r7
 94a:	23 fd       	sbrc	r18, 3
 94c:	13 c0       	rjmp	.+38     	; 0x974 <vfprintf+0x306>
 94e:	20 ff       	sbrs	r18, 0
 950:	06 c0       	rjmp	.+12     	; 0x95e <vfprintf+0x2f0>
 952:	5a 2c       	mov	r5, r10
 954:	73 14       	cp	r7, r3
 956:	18 f4       	brcc	.+6      	; 0x95e <vfprintf+0x2f0>
 958:	53 0c       	add	r5, r3
 95a:	57 18       	sub	r5, r7
 95c:	73 2c       	mov	r7, r3
 95e:	73 14       	cp	r7, r3
 960:	68 f4       	brcc	.+26     	; 0x97c <vfprintf+0x30e>
 962:	b7 01       	movw	r22, r14
 964:	80 e2       	ldi	r24, 0x20	; 32
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	2c 87       	std	Y+12, r18	; 0x0c
 96a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <fputc>
 96e:	73 94       	inc	r7
 970:	2c 85       	ldd	r18, Y+12	; 0x0c
 972:	f5 cf       	rjmp	.-22     	; 0x95e <vfprintf+0x2f0>
 974:	73 14       	cp	r7, r3
 976:	10 f4       	brcc	.+4      	; 0x97c <vfprintf+0x30e>
 978:	37 18       	sub	r3, r7
 97a:	01 c0       	rjmp	.+2      	; 0x97e <vfprintf+0x310>
 97c:	31 2c       	mov	r3, r1
 97e:	24 ff       	sbrs	r18, 4
 980:	12 c0       	rjmp	.+36     	; 0x9a6 <vfprintf+0x338>
 982:	b7 01       	movw	r22, r14
 984:	80 e3       	ldi	r24, 0x30	; 48
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	2c 87       	std	Y+12, r18	; 0x0c
 98a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <fputc>
 98e:	2c 85       	ldd	r18, Y+12	; 0x0c
 990:	22 ff       	sbrs	r18, 2
 992:	17 c0       	rjmp	.+46     	; 0x9c2 <vfprintf+0x354>
 994:	21 ff       	sbrs	r18, 1
 996:	03 c0       	rjmp	.+6      	; 0x99e <vfprintf+0x330>
 998:	88 e5       	ldi	r24, 0x58	; 88
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	02 c0       	rjmp	.+4      	; 0x9a2 <vfprintf+0x334>
 99e:	88 e7       	ldi	r24, 0x78	; 120
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	b7 01       	movw	r22, r14
 9a4:	0c c0       	rjmp	.+24     	; 0x9be <vfprintf+0x350>
 9a6:	82 2f       	mov	r24, r18
 9a8:	86 78       	andi	r24, 0x86	; 134
 9aa:	59 f0       	breq	.+22     	; 0x9c2 <vfprintf+0x354>
 9ac:	21 fd       	sbrc	r18, 1
 9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <vfprintf+0x346>
 9b0:	80 e2       	ldi	r24, 0x20	; 32
 9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <vfprintf+0x348>
 9b4:	8b e2       	ldi	r24, 0x2B	; 43
 9b6:	27 fd       	sbrc	r18, 7
 9b8:	8d e2       	ldi	r24, 0x2D	; 45
 9ba:	b7 01       	movw	r22, r14
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	0e 94 69 06 	call	0xcd2	; 0xcd2 <fputc>
 9c2:	a5 14       	cp	r10, r5
 9c4:	38 f4       	brcc	.+14     	; 0x9d4 <vfprintf+0x366>
 9c6:	b7 01       	movw	r22, r14
 9c8:	80 e3       	ldi	r24, 0x30	; 48
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	0e 94 69 06 	call	0xcd2	; 0xcd2 <fputc>
 9d0:	5a 94       	dec	r5
 9d2:	f7 cf       	rjmp	.-18     	; 0x9c2 <vfprintf+0x354>
 9d4:	aa 94       	dec	r10
 9d6:	f4 01       	movw	r30, r8
 9d8:	ea 0d       	add	r30, r10
 9da:	f1 1d       	adc	r31, r1
 9dc:	80 81       	ld	r24, Z
 9de:	b7 01       	movw	r22, r14
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	0e 94 69 06 	call	0xcd2	; 0xcd2 <fputc>
 9e6:	a1 10       	cpse	r10, r1
 9e8:	f5 cf       	rjmp	.-22     	; 0x9d4 <vfprintf+0x366>
 9ea:	33 20       	and	r3, r3
 9ec:	09 f4       	brne	.+2      	; 0x9f0 <vfprintf+0x382>
 9ee:	51 ce       	rjmp	.-862    	; 0x692 <vfprintf+0x24>
 9f0:	b7 01       	movw	r22, r14
 9f2:	80 e2       	ldi	r24, 0x20	; 32
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	0e 94 69 06 	call	0xcd2	; 0xcd2 <fputc>
 9fa:	3a 94       	dec	r3
 9fc:	f6 cf       	rjmp	.-20     	; 0x9ea <vfprintf+0x37c>
 9fe:	f7 01       	movw	r30, r14
 a00:	86 81       	ldd	r24, Z+6	; 0x06
 a02:	97 81       	ldd	r25, Z+7	; 0x07
 a04:	02 c0       	rjmp	.+4      	; 0xa0a <vfprintf+0x39c>
 a06:	8f ef       	ldi	r24, 0xFF	; 255
 a08:	9f ef       	ldi	r25, 0xFF	; 255
 a0a:	2c 96       	adiw	r28, 0x0c	; 12
 a0c:	e2 e1       	ldi	r30, 0x12	; 18
 a0e:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__epilogue_restores__>

00000a12 <calloc>:
 a12:	0f 93       	push	r16
 a14:	1f 93       	push	r17
 a16:	cf 93       	push	r28
 a18:	df 93       	push	r29
 a1a:	86 9f       	mul	r24, r22
 a1c:	80 01       	movw	r16, r0
 a1e:	87 9f       	mul	r24, r23
 a20:	10 0d       	add	r17, r0
 a22:	96 9f       	mul	r25, r22
 a24:	10 0d       	add	r17, r0
 a26:	11 24       	eor	r1, r1
 a28:	c8 01       	movw	r24, r16
 a2a:	0e 94 25 05 	call	0xa4a	; 0xa4a <malloc>
 a2e:	ec 01       	movw	r28, r24
 a30:	00 97       	sbiw	r24, 0x00	; 0
 a32:	29 f0       	breq	.+10     	; 0xa3e <calloc+0x2c>
 a34:	a8 01       	movw	r20, r16
 a36:	60 e0       	ldi	r22, 0x00	; 0
 a38:	70 e0       	ldi	r23, 0x00	; 0
 a3a:	0e 94 57 06 	call	0xcae	; 0xcae <memset>
 a3e:	ce 01       	movw	r24, r28
 a40:	df 91       	pop	r29
 a42:	cf 91       	pop	r28
 a44:	1f 91       	pop	r17
 a46:	0f 91       	pop	r16
 a48:	08 95       	ret

00000a4a <malloc>:
 a4a:	cf 93       	push	r28
 a4c:	df 93       	push	r29
 a4e:	82 30       	cpi	r24, 0x02	; 2
 a50:	91 05       	cpc	r25, r1
 a52:	10 f4       	brcc	.+4      	; 0xa58 <malloc+0xe>
 a54:	82 e0       	ldi	r24, 0x02	; 2
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	e0 91 60 01 	lds	r30, 0x0160
 a5c:	f0 91 61 01 	lds	r31, 0x0161
 a60:	20 e0       	ldi	r18, 0x00	; 0
 a62:	30 e0       	ldi	r19, 0x00	; 0
 a64:	a0 e0       	ldi	r26, 0x00	; 0
 a66:	b0 e0       	ldi	r27, 0x00	; 0
 a68:	30 97       	sbiw	r30, 0x00	; 0
 a6a:	39 f1       	breq	.+78     	; 0xaba <malloc+0x70>
 a6c:	40 81       	ld	r20, Z
 a6e:	51 81       	ldd	r21, Z+1	; 0x01
 a70:	48 17       	cp	r20, r24
 a72:	59 07       	cpc	r21, r25
 a74:	b8 f0       	brcs	.+46     	; 0xaa4 <malloc+0x5a>
 a76:	48 17       	cp	r20, r24
 a78:	59 07       	cpc	r21, r25
 a7a:	71 f4       	brne	.+28     	; 0xa98 <malloc+0x4e>
 a7c:	82 81       	ldd	r24, Z+2	; 0x02
 a7e:	93 81       	ldd	r25, Z+3	; 0x03
 a80:	10 97       	sbiw	r26, 0x00	; 0
 a82:	29 f0       	breq	.+10     	; 0xa8e <malloc+0x44>
 a84:	13 96       	adiw	r26, 0x03	; 3
 a86:	9c 93       	st	X, r25
 a88:	8e 93       	st	-X, r24
 a8a:	12 97       	sbiw	r26, 0x02	; 2
 a8c:	2c c0       	rjmp	.+88     	; 0xae6 <malloc+0x9c>
 a8e:	90 93 61 01 	sts	0x0161, r25
 a92:	80 93 60 01 	sts	0x0160, r24
 a96:	27 c0       	rjmp	.+78     	; 0xae6 <malloc+0x9c>
 a98:	21 15       	cp	r18, r1
 a9a:	31 05       	cpc	r19, r1
 a9c:	31 f0       	breq	.+12     	; 0xaaa <malloc+0x60>
 a9e:	42 17       	cp	r20, r18
 aa0:	53 07       	cpc	r21, r19
 aa2:	18 f0       	brcs	.+6      	; 0xaaa <malloc+0x60>
 aa4:	a9 01       	movw	r20, r18
 aa6:	db 01       	movw	r26, r22
 aa8:	01 c0       	rjmp	.+2      	; 0xaac <malloc+0x62>
 aaa:	ef 01       	movw	r28, r30
 aac:	9a 01       	movw	r18, r20
 aae:	bd 01       	movw	r22, r26
 ab0:	df 01       	movw	r26, r30
 ab2:	02 80       	ldd	r0, Z+2	; 0x02
 ab4:	f3 81       	ldd	r31, Z+3	; 0x03
 ab6:	e0 2d       	mov	r30, r0
 ab8:	d7 cf       	rjmp	.-82     	; 0xa68 <malloc+0x1e>
 aba:	21 15       	cp	r18, r1
 abc:	31 05       	cpc	r19, r1
 abe:	f9 f0       	breq	.+62     	; 0xafe <malloc+0xb4>
 ac0:	28 1b       	sub	r18, r24
 ac2:	39 0b       	sbc	r19, r25
 ac4:	24 30       	cpi	r18, 0x04	; 4
 ac6:	31 05       	cpc	r19, r1
 ac8:	80 f4       	brcc	.+32     	; 0xaea <malloc+0xa0>
 aca:	8a 81       	ldd	r24, Y+2	; 0x02
 acc:	9b 81       	ldd	r25, Y+3	; 0x03
 ace:	61 15       	cp	r22, r1
 ad0:	71 05       	cpc	r23, r1
 ad2:	21 f0       	breq	.+8      	; 0xadc <malloc+0x92>
 ad4:	fb 01       	movw	r30, r22
 ad6:	93 83       	std	Z+3, r25	; 0x03
 ad8:	82 83       	std	Z+2, r24	; 0x02
 ada:	04 c0       	rjmp	.+8      	; 0xae4 <malloc+0x9a>
 adc:	90 93 61 01 	sts	0x0161, r25
 ae0:	80 93 60 01 	sts	0x0160, r24
 ae4:	fe 01       	movw	r30, r28
 ae6:	32 96       	adiw	r30, 0x02	; 2
 ae8:	44 c0       	rjmp	.+136    	; 0xb72 <malloc+0x128>
 aea:	fe 01       	movw	r30, r28
 aec:	e2 0f       	add	r30, r18
 aee:	f3 1f       	adc	r31, r19
 af0:	81 93       	st	Z+, r24
 af2:	91 93       	st	Z+, r25
 af4:	22 50       	subi	r18, 0x02	; 2
 af6:	31 09       	sbc	r19, r1
 af8:	39 83       	std	Y+1, r19	; 0x01
 afa:	28 83       	st	Y, r18
 afc:	3a c0       	rjmp	.+116    	; 0xb72 <malloc+0x128>
 afe:	20 91 5e 01 	lds	r18, 0x015E
 b02:	30 91 5f 01 	lds	r19, 0x015F
 b06:	23 2b       	or	r18, r19
 b08:	41 f4       	brne	.+16     	; 0xb1a <malloc+0xd0>
 b0a:	20 91 02 01 	lds	r18, 0x0102
 b0e:	30 91 03 01 	lds	r19, 0x0103
 b12:	30 93 5f 01 	sts	0x015F, r19
 b16:	20 93 5e 01 	sts	0x015E, r18
 b1a:	20 91 00 01 	lds	r18, 0x0100
 b1e:	30 91 01 01 	lds	r19, 0x0101
 b22:	21 15       	cp	r18, r1
 b24:	31 05       	cpc	r19, r1
 b26:	41 f4       	brne	.+16     	; 0xb38 <malloc+0xee>
 b28:	2d b7       	in	r18, 0x3d	; 61
 b2a:	3e b7       	in	r19, 0x3e	; 62
 b2c:	40 91 04 01 	lds	r20, 0x0104
 b30:	50 91 05 01 	lds	r21, 0x0105
 b34:	24 1b       	sub	r18, r20
 b36:	35 0b       	sbc	r19, r21
 b38:	e0 91 5e 01 	lds	r30, 0x015E
 b3c:	f0 91 5f 01 	lds	r31, 0x015F
 b40:	e2 17       	cp	r30, r18
 b42:	f3 07       	cpc	r31, r19
 b44:	a0 f4       	brcc	.+40     	; 0xb6e <malloc+0x124>
 b46:	2e 1b       	sub	r18, r30
 b48:	3f 0b       	sbc	r19, r31
 b4a:	28 17       	cp	r18, r24
 b4c:	39 07       	cpc	r19, r25
 b4e:	78 f0       	brcs	.+30     	; 0xb6e <malloc+0x124>
 b50:	ac 01       	movw	r20, r24
 b52:	4e 5f       	subi	r20, 0xFE	; 254
 b54:	5f 4f       	sbci	r21, 0xFF	; 255
 b56:	24 17       	cp	r18, r20
 b58:	35 07       	cpc	r19, r21
 b5a:	48 f0       	brcs	.+18     	; 0xb6e <malloc+0x124>
 b5c:	4e 0f       	add	r20, r30
 b5e:	5f 1f       	adc	r21, r31
 b60:	50 93 5f 01 	sts	0x015F, r21
 b64:	40 93 5e 01 	sts	0x015E, r20
 b68:	81 93       	st	Z+, r24
 b6a:	91 93       	st	Z+, r25
 b6c:	02 c0       	rjmp	.+4      	; 0xb72 <malloc+0x128>
 b6e:	e0 e0       	ldi	r30, 0x00	; 0
 b70:	f0 e0       	ldi	r31, 0x00	; 0
 b72:	cf 01       	movw	r24, r30
 b74:	df 91       	pop	r29
 b76:	cf 91       	pop	r28
 b78:	08 95       	ret

00000b7a <free>:
 b7a:	cf 93       	push	r28
 b7c:	df 93       	push	r29
 b7e:	00 97       	sbiw	r24, 0x00	; 0
 b80:	09 f4       	brne	.+2      	; 0xb84 <free+0xa>
 b82:	87 c0       	rjmp	.+270    	; 0xc92 <free+0x118>
 b84:	fc 01       	movw	r30, r24
 b86:	32 97       	sbiw	r30, 0x02	; 2
 b88:	13 82       	std	Z+3, r1	; 0x03
 b8a:	12 82       	std	Z+2, r1	; 0x02
 b8c:	c0 91 60 01 	lds	r28, 0x0160
 b90:	d0 91 61 01 	lds	r29, 0x0161
 b94:	20 97       	sbiw	r28, 0x00	; 0
 b96:	81 f4       	brne	.+32     	; 0xbb8 <free+0x3e>
 b98:	20 81       	ld	r18, Z
 b9a:	31 81       	ldd	r19, Z+1	; 0x01
 b9c:	28 0f       	add	r18, r24
 b9e:	39 1f       	adc	r19, r25
 ba0:	80 91 5e 01 	lds	r24, 0x015E
 ba4:	90 91 5f 01 	lds	r25, 0x015F
 ba8:	82 17       	cp	r24, r18
 baa:	93 07       	cpc	r25, r19
 bac:	79 f5       	brne	.+94     	; 0xc0c <free+0x92>
 bae:	f0 93 5f 01 	sts	0x015F, r31
 bb2:	e0 93 5e 01 	sts	0x015E, r30
 bb6:	6d c0       	rjmp	.+218    	; 0xc92 <free+0x118>
 bb8:	de 01       	movw	r26, r28
 bba:	20 e0       	ldi	r18, 0x00	; 0
 bbc:	30 e0       	ldi	r19, 0x00	; 0
 bbe:	ae 17       	cp	r26, r30
 bc0:	bf 07       	cpc	r27, r31
 bc2:	50 f4       	brcc	.+20     	; 0xbd8 <free+0x5e>
 bc4:	12 96       	adiw	r26, 0x02	; 2
 bc6:	4d 91       	ld	r20, X+
 bc8:	5c 91       	ld	r21, X
 bca:	13 97       	sbiw	r26, 0x03	; 3
 bcc:	9d 01       	movw	r18, r26
 bce:	41 15       	cp	r20, r1
 bd0:	51 05       	cpc	r21, r1
 bd2:	09 f1       	breq	.+66     	; 0xc16 <free+0x9c>
 bd4:	da 01       	movw	r26, r20
 bd6:	f3 cf       	rjmp	.-26     	; 0xbbe <free+0x44>
 bd8:	b3 83       	std	Z+3, r27	; 0x03
 bda:	a2 83       	std	Z+2, r26	; 0x02
 bdc:	40 81       	ld	r20, Z
 bde:	51 81       	ldd	r21, Z+1	; 0x01
 be0:	84 0f       	add	r24, r20
 be2:	95 1f       	adc	r25, r21
 be4:	8a 17       	cp	r24, r26
 be6:	9b 07       	cpc	r25, r27
 be8:	71 f4       	brne	.+28     	; 0xc06 <free+0x8c>
 bea:	8d 91       	ld	r24, X+
 bec:	9c 91       	ld	r25, X
 bee:	11 97       	sbiw	r26, 0x01	; 1
 bf0:	84 0f       	add	r24, r20
 bf2:	95 1f       	adc	r25, r21
 bf4:	02 96       	adiw	r24, 0x02	; 2
 bf6:	91 83       	std	Z+1, r25	; 0x01
 bf8:	80 83       	st	Z, r24
 bfa:	12 96       	adiw	r26, 0x02	; 2
 bfc:	8d 91       	ld	r24, X+
 bfe:	9c 91       	ld	r25, X
 c00:	13 97       	sbiw	r26, 0x03	; 3
 c02:	93 83       	std	Z+3, r25	; 0x03
 c04:	82 83       	std	Z+2, r24	; 0x02
 c06:	21 15       	cp	r18, r1
 c08:	31 05       	cpc	r19, r1
 c0a:	29 f4       	brne	.+10     	; 0xc16 <free+0x9c>
 c0c:	f0 93 61 01 	sts	0x0161, r31
 c10:	e0 93 60 01 	sts	0x0160, r30
 c14:	3e c0       	rjmp	.+124    	; 0xc92 <free+0x118>
 c16:	d9 01       	movw	r26, r18
 c18:	13 96       	adiw	r26, 0x03	; 3
 c1a:	fc 93       	st	X, r31
 c1c:	ee 93       	st	-X, r30
 c1e:	12 97       	sbiw	r26, 0x02	; 2
 c20:	4d 91       	ld	r20, X+
 c22:	5d 91       	ld	r21, X+
 c24:	a4 0f       	add	r26, r20
 c26:	b5 1f       	adc	r27, r21
 c28:	ea 17       	cp	r30, r26
 c2a:	fb 07       	cpc	r31, r27
 c2c:	79 f4       	brne	.+30     	; 0xc4c <free+0xd2>
 c2e:	80 81       	ld	r24, Z
 c30:	91 81       	ldd	r25, Z+1	; 0x01
 c32:	84 0f       	add	r24, r20
 c34:	95 1f       	adc	r25, r21
 c36:	02 96       	adiw	r24, 0x02	; 2
 c38:	d9 01       	movw	r26, r18
 c3a:	11 96       	adiw	r26, 0x01	; 1
 c3c:	9c 93       	st	X, r25
 c3e:	8e 93       	st	-X, r24
 c40:	82 81       	ldd	r24, Z+2	; 0x02
 c42:	93 81       	ldd	r25, Z+3	; 0x03
 c44:	13 96       	adiw	r26, 0x03	; 3
 c46:	9c 93       	st	X, r25
 c48:	8e 93       	st	-X, r24
 c4a:	12 97       	sbiw	r26, 0x02	; 2
 c4c:	e0 e0       	ldi	r30, 0x00	; 0
 c4e:	f0 e0       	ldi	r31, 0x00	; 0
 c50:	8a 81       	ldd	r24, Y+2	; 0x02
 c52:	9b 81       	ldd	r25, Y+3	; 0x03
 c54:	00 97       	sbiw	r24, 0x00	; 0
 c56:	19 f0       	breq	.+6      	; 0xc5e <free+0xe4>
 c58:	fe 01       	movw	r30, r28
 c5a:	ec 01       	movw	r28, r24
 c5c:	f9 cf       	rjmp	.-14     	; 0xc50 <free+0xd6>
 c5e:	ce 01       	movw	r24, r28
 c60:	02 96       	adiw	r24, 0x02	; 2
 c62:	28 81       	ld	r18, Y
 c64:	39 81       	ldd	r19, Y+1	; 0x01
 c66:	82 0f       	add	r24, r18
 c68:	93 1f       	adc	r25, r19
 c6a:	20 91 5e 01 	lds	r18, 0x015E
 c6e:	30 91 5f 01 	lds	r19, 0x015F
 c72:	28 17       	cp	r18, r24
 c74:	39 07       	cpc	r19, r25
 c76:	69 f4       	brne	.+26     	; 0xc92 <free+0x118>
 c78:	30 97       	sbiw	r30, 0x00	; 0
 c7a:	29 f4       	brne	.+10     	; 0xc86 <free+0x10c>
 c7c:	10 92 61 01 	sts	0x0161, r1
 c80:	10 92 60 01 	sts	0x0160, r1
 c84:	02 c0       	rjmp	.+4      	; 0xc8a <free+0x110>
 c86:	13 82       	std	Z+3, r1	; 0x03
 c88:	12 82       	std	Z+2, r1	; 0x02
 c8a:	d0 93 5f 01 	sts	0x015F, r29
 c8e:	c0 93 5e 01 	sts	0x015E, r28
 c92:	df 91       	pop	r29
 c94:	cf 91       	pop	r28
 c96:	08 95       	ret

00000c98 <strnlen_P>:
 c98:	fc 01       	movw	r30, r24
 c9a:	05 90       	lpm	r0, Z+
 c9c:	61 50       	subi	r22, 0x01	; 1
 c9e:	70 40       	sbci	r23, 0x00	; 0
 ca0:	01 10       	cpse	r0, r1
 ca2:	d8 f7       	brcc	.-10     	; 0xc9a <strnlen_P+0x2>
 ca4:	80 95       	com	r24
 ca6:	90 95       	com	r25
 ca8:	8e 0f       	add	r24, r30
 caa:	9f 1f       	adc	r25, r31
 cac:	08 95       	ret

00000cae <memset>:
 cae:	dc 01       	movw	r26, r24
 cb0:	01 c0       	rjmp	.+2      	; 0xcb4 <memset+0x6>
 cb2:	6d 93       	st	X+, r22
 cb4:	41 50       	subi	r20, 0x01	; 1
 cb6:	50 40       	sbci	r21, 0x00	; 0
 cb8:	e0 f7       	brcc	.-8      	; 0xcb2 <memset+0x4>
 cba:	08 95       	ret

00000cbc <strnlen>:
 cbc:	fc 01       	movw	r30, r24
 cbe:	61 50       	subi	r22, 0x01	; 1
 cc0:	70 40       	sbci	r23, 0x00	; 0
 cc2:	01 90       	ld	r0, Z+
 cc4:	01 10       	cpse	r0, r1
 cc6:	d8 f7       	brcc	.-10     	; 0xcbe <strnlen+0x2>
 cc8:	80 95       	com	r24
 cca:	90 95       	com	r25
 ccc:	8e 0f       	add	r24, r30
 cce:	9f 1f       	adc	r25, r31
 cd0:	08 95       	ret

00000cd2 <fputc>:
 cd2:	0f 93       	push	r16
 cd4:	1f 93       	push	r17
 cd6:	cf 93       	push	r28
 cd8:	df 93       	push	r29
 cda:	18 2f       	mov	r17, r24
 cdc:	09 2f       	mov	r16, r25
 cde:	eb 01       	movw	r28, r22
 ce0:	8b 81       	ldd	r24, Y+3	; 0x03
 ce2:	81 fd       	sbrc	r24, 1
 ce4:	03 c0       	rjmp	.+6      	; 0xcec <fputc+0x1a>
 ce6:	8f ef       	ldi	r24, 0xFF	; 255
 ce8:	9f ef       	ldi	r25, 0xFF	; 255
 cea:	20 c0       	rjmp	.+64     	; 0xd2c <fputc+0x5a>
 cec:	82 ff       	sbrs	r24, 2
 cee:	10 c0       	rjmp	.+32     	; 0xd10 <fputc+0x3e>
 cf0:	4e 81       	ldd	r20, Y+6	; 0x06
 cf2:	5f 81       	ldd	r21, Y+7	; 0x07
 cf4:	2c 81       	ldd	r18, Y+4	; 0x04
 cf6:	3d 81       	ldd	r19, Y+5	; 0x05
 cf8:	42 17       	cp	r20, r18
 cfa:	53 07       	cpc	r21, r19
 cfc:	7c f4       	brge	.+30     	; 0xd1c <fputc+0x4a>
 cfe:	e8 81       	ld	r30, Y
 d00:	f9 81       	ldd	r31, Y+1	; 0x01
 d02:	9f 01       	movw	r18, r30
 d04:	2f 5f       	subi	r18, 0xFF	; 255
 d06:	3f 4f       	sbci	r19, 0xFF	; 255
 d08:	39 83       	std	Y+1, r19	; 0x01
 d0a:	28 83       	st	Y, r18
 d0c:	10 83       	st	Z, r17
 d0e:	06 c0       	rjmp	.+12     	; 0xd1c <fputc+0x4a>
 d10:	e8 85       	ldd	r30, Y+8	; 0x08
 d12:	f9 85       	ldd	r31, Y+9	; 0x09
 d14:	81 2f       	mov	r24, r17
 d16:	09 95       	icall
 d18:	89 2b       	or	r24, r25
 d1a:	29 f7       	brne	.-54     	; 0xce6 <fputc+0x14>
 d1c:	2e 81       	ldd	r18, Y+6	; 0x06
 d1e:	3f 81       	ldd	r19, Y+7	; 0x07
 d20:	2f 5f       	subi	r18, 0xFF	; 255
 d22:	3f 4f       	sbci	r19, 0xFF	; 255
 d24:	3f 83       	std	Y+7, r19	; 0x07
 d26:	2e 83       	std	Y+6, r18	; 0x06
 d28:	81 2f       	mov	r24, r17
 d2a:	90 2f       	mov	r25, r16
 d2c:	df 91       	pop	r29
 d2e:	cf 91       	pop	r28
 d30:	1f 91       	pop	r17
 d32:	0f 91       	pop	r16
 d34:	08 95       	ret

00000d36 <__ultoa_invert>:
 d36:	fa 01       	movw	r30, r20
 d38:	aa 27       	eor	r26, r26
 d3a:	28 30       	cpi	r18, 0x08	; 8
 d3c:	51 f1       	breq	.+84     	; 0xd92 <__ultoa_invert+0x5c>
 d3e:	20 31       	cpi	r18, 0x10	; 16
 d40:	81 f1       	breq	.+96     	; 0xda2 <__ultoa_invert+0x6c>
 d42:	e8 94       	clt
 d44:	6f 93       	push	r22
 d46:	6e 7f       	andi	r22, 0xFE	; 254
 d48:	6e 5f       	subi	r22, 0xFE	; 254
 d4a:	7f 4f       	sbci	r23, 0xFF	; 255
 d4c:	8f 4f       	sbci	r24, 0xFF	; 255
 d4e:	9f 4f       	sbci	r25, 0xFF	; 255
 d50:	af 4f       	sbci	r26, 0xFF	; 255
 d52:	b1 e0       	ldi	r27, 0x01	; 1
 d54:	3e d0       	rcall	.+124    	; 0xdd2 <__ultoa_invert+0x9c>
 d56:	b4 e0       	ldi	r27, 0x04	; 4
 d58:	3c d0       	rcall	.+120    	; 0xdd2 <__ultoa_invert+0x9c>
 d5a:	67 0f       	add	r22, r23
 d5c:	78 1f       	adc	r23, r24
 d5e:	89 1f       	adc	r24, r25
 d60:	9a 1f       	adc	r25, r26
 d62:	a1 1d       	adc	r26, r1
 d64:	68 0f       	add	r22, r24
 d66:	79 1f       	adc	r23, r25
 d68:	8a 1f       	adc	r24, r26
 d6a:	91 1d       	adc	r25, r1
 d6c:	a1 1d       	adc	r26, r1
 d6e:	6a 0f       	add	r22, r26
 d70:	71 1d       	adc	r23, r1
 d72:	81 1d       	adc	r24, r1
 d74:	91 1d       	adc	r25, r1
 d76:	a1 1d       	adc	r26, r1
 d78:	20 d0       	rcall	.+64     	; 0xdba <__ultoa_invert+0x84>
 d7a:	09 f4       	brne	.+2      	; 0xd7e <__ultoa_invert+0x48>
 d7c:	68 94       	set
 d7e:	3f 91       	pop	r19
 d80:	2a e0       	ldi	r18, 0x0A	; 10
 d82:	26 9f       	mul	r18, r22
 d84:	11 24       	eor	r1, r1
 d86:	30 19       	sub	r19, r0
 d88:	30 5d       	subi	r19, 0xD0	; 208
 d8a:	31 93       	st	Z+, r19
 d8c:	de f6       	brtc	.-74     	; 0xd44 <__ultoa_invert+0xe>
 d8e:	cf 01       	movw	r24, r30
 d90:	08 95       	ret
 d92:	46 2f       	mov	r20, r22
 d94:	47 70       	andi	r20, 0x07	; 7
 d96:	40 5d       	subi	r20, 0xD0	; 208
 d98:	41 93       	st	Z+, r20
 d9a:	b3 e0       	ldi	r27, 0x03	; 3
 d9c:	0f d0       	rcall	.+30     	; 0xdbc <__ultoa_invert+0x86>
 d9e:	c9 f7       	brne	.-14     	; 0xd92 <__ultoa_invert+0x5c>
 da0:	f6 cf       	rjmp	.-20     	; 0xd8e <__ultoa_invert+0x58>
 da2:	46 2f       	mov	r20, r22
 da4:	4f 70       	andi	r20, 0x0F	; 15
 da6:	40 5d       	subi	r20, 0xD0	; 208
 da8:	4a 33       	cpi	r20, 0x3A	; 58
 daa:	18 f0       	brcs	.+6      	; 0xdb2 <__ultoa_invert+0x7c>
 dac:	49 5d       	subi	r20, 0xD9	; 217
 dae:	31 fd       	sbrc	r19, 1
 db0:	40 52       	subi	r20, 0x20	; 32
 db2:	41 93       	st	Z+, r20
 db4:	02 d0       	rcall	.+4      	; 0xdba <__ultoa_invert+0x84>
 db6:	a9 f7       	brne	.-22     	; 0xda2 <__ultoa_invert+0x6c>
 db8:	ea cf       	rjmp	.-44     	; 0xd8e <__ultoa_invert+0x58>
 dba:	b4 e0       	ldi	r27, 0x04	; 4
 dbc:	a6 95       	lsr	r26
 dbe:	97 95       	ror	r25
 dc0:	87 95       	ror	r24
 dc2:	77 95       	ror	r23
 dc4:	67 95       	ror	r22
 dc6:	ba 95       	dec	r27
 dc8:	c9 f7       	brne	.-14     	; 0xdbc <__ultoa_invert+0x86>
 dca:	00 97       	sbiw	r24, 0x00	; 0
 dcc:	61 05       	cpc	r22, r1
 dce:	71 05       	cpc	r23, r1
 dd0:	08 95       	ret
 dd2:	9b 01       	movw	r18, r22
 dd4:	ac 01       	movw	r20, r24
 dd6:	0a 2e       	mov	r0, r26
 dd8:	06 94       	lsr	r0
 dda:	57 95       	ror	r21
 ddc:	47 95       	ror	r20
 dde:	37 95       	ror	r19
 de0:	27 95       	ror	r18
 de2:	ba 95       	dec	r27
 de4:	c9 f7       	brne	.-14     	; 0xdd8 <__ultoa_invert+0xa2>
 de6:	62 0f       	add	r22, r18
 de8:	73 1f       	adc	r23, r19
 dea:	84 1f       	adc	r24, r20
 dec:	95 1f       	adc	r25, r21
 dee:	a0 1d       	adc	r26, r0
 df0:	08 95       	ret

00000df2 <__prologue_saves__>:
 df2:	2f 92       	push	r2
 df4:	3f 92       	push	r3
 df6:	4f 92       	push	r4
 df8:	5f 92       	push	r5
 dfa:	6f 92       	push	r6
 dfc:	7f 92       	push	r7
 dfe:	8f 92       	push	r8
 e00:	9f 92       	push	r9
 e02:	af 92       	push	r10
 e04:	bf 92       	push	r11
 e06:	cf 92       	push	r12
 e08:	df 92       	push	r13
 e0a:	ef 92       	push	r14
 e0c:	ff 92       	push	r15
 e0e:	0f 93       	push	r16
 e10:	1f 93       	push	r17
 e12:	cf 93       	push	r28
 e14:	df 93       	push	r29
 e16:	cd b7       	in	r28, 0x3d	; 61
 e18:	de b7       	in	r29, 0x3e	; 62
 e1a:	ca 1b       	sub	r28, r26
 e1c:	db 0b       	sbc	r29, r27
 e1e:	0f b6       	in	r0, 0x3f	; 63
 e20:	f8 94       	cli
 e22:	de bf       	out	0x3e, r29	; 62
 e24:	0f be       	out	0x3f, r0	; 63
 e26:	cd bf       	out	0x3d, r28	; 61
 e28:	09 94       	ijmp

00000e2a <__epilogue_restores__>:
 e2a:	2a 88       	ldd	r2, Y+18	; 0x12
 e2c:	39 88       	ldd	r3, Y+17	; 0x11
 e2e:	48 88       	ldd	r4, Y+16	; 0x10
 e30:	5f 84       	ldd	r5, Y+15	; 0x0f
 e32:	6e 84       	ldd	r6, Y+14	; 0x0e
 e34:	7d 84       	ldd	r7, Y+13	; 0x0d
 e36:	8c 84       	ldd	r8, Y+12	; 0x0c
 e38:	9b 84       	ldd	r9, Y+11	; 0x0b
 e3a:	aa 84       	ldd	r10, Y+10	; 0x0a
 e3c:	b9 84       	ldd	r11, Y+9	; 0x09
 e3e:	c8 84       	ldd	r12, Y+8	; 0x08
 e40:	df 80       	ldd	r13, Y+7	; 0x07
 e42:	ee 80       	ldd	r14, Y+6	; 0x06
 e44:	fd 80       	ldd	r15, Y+5	; 0x05
 e46:	0c 81       	ldd	r16, Y+4	; 0x04
 e48:	1b 81       	ldd	r17, Y+3	; 0x03
 e4a:	aa 81       	ldd	r26, Y+2	; 0x02
 e4c:	b9 81       	ldd	r27, Y+1	; 0x01
 e4e:	ce 0f       	add	r28, r30
 e50:	d1 1d       	adc	r29, r1
 e52:	0f b6       	in	r0, 0x3f	; 63
 e54:	f8 94       	cli
 e56:	de bf       	out	0x3e, r29	; 62
 e58:	0f be       	out	0x3f, r0	; 63
 e5a:	cd bf       	out	0x3d, r28	; 61
 e5c:	ed 01       	movw	r28, r26
 e5e:	08 95       	ret

00000e60 <_exit>:
 e60:	f8 94       	cli

00000e62 <__stop_program>:
 e62:	ff cf       	rjmp	.-2      	; 0xe62 <__stop_program>
