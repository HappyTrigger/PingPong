
PingPongApplication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000031a  00800100  000028fc  00002990  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080041a  0080041a  00002caa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002caa  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003a8  00000000  00000000  00002d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004932  00000000  00000000  000030ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001244  00000000  00000000  000079e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001812  00000000  00000000  00008c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b4c  00000000  00000000  0000a438  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b2f  00000000  00000000  0000af84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002d1b  00000000  00000000  0000bab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002f0  00000000  00000000  0000e7ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 01 	jmp	0x266	; 0x266 <__ctors_end>
       4:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
       8:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
       c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      10:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      14:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      18:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      1c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      20:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      24:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      28:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      2c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      30:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      34:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__vector_13>
      38:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      3c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      40:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      44:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      48:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      4c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      50:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      54:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      58:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      5c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      60:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      64:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      68:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      6c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      70:	4a 0f       	add	r20, r26
      72:	4f 0f       	add	r20, r31
      74:	54 0f       	add	r21, r20
      76:	5c 0f       	add	r21, r28
      78:	65 0f       	add	r22, r21
      7a:	6e 0f       	add	r22, r30
      7c:	77 0f       	add	r23, r23
      7e:	85 0f       	add	r24, r21
      80:	80 0f       	add	r24, r16
      82:	8a 0f       	add	r24, r26
      84:	8f 0f       	add	r24, r31
      86:	94 0f       	add	r25, r20
      88:	99 0f       	add	r25, r25

0000008a <__trampolines_end>:
      8a:	00 00       	nop
      8c:	00 00       	nop
      8e:	00 00       	nop
      90:	00 5e       	subi	r16, 0xE0	; 224
      92:	00 00       	nop
      94:	00 0e       	add	r0, r16
      96:	00 0e       	add	r0, r16
      98:	00 28       	or	r0, r0
      9a:	7c 28       	or	r7, r12
      9c:	7c 28       	or	r7, r12
      9e:	08 54       	subi	r16, 0x48	; 72
      a0:	7c 54       	subi	r23, 0x4C	; 76
      a2:	20 26       	eor	r2, r16
      a4:	10 08       	sbc	r1, r0
      a6:	64 00       	.word	0x0064	; ????
      a8:	28 54       	subi	r18, 0x48	; 72
      aa:	28 40       	sbci	r18, 0x08	; 8
      ac:	00 00       	nop
      ae:	00 0e       	add	r0, r16
      b0:	00 00       	nop
      b2:	00 3c       	cpi	r16, 0xC0	; 192
      b4:	42 00       	.word	0x0042	; ????
      b6:	00 00       	nop
      b8:	42 3c       	cpi	r20, 0xC2	; 194
      ba:	00 00       	nop
      bc:	00 54       	subi	r16, 0x40	; 64
      be:	38 54       	subi	r19, 0x48	; 72
      c0:	00 10       	cpse	r0, r0
      c2:	10 7c       	andi	r17, 0xC0	; 192
      c4:	10 10       	cpse	r1, r0
      c6:	00 80       	ld	r0, Z
      c8:	60 20       	and	r6, r0
      ca:	00 10       	cpse	r0, r0
      cc:	10 10       	cpse	r1, r0
      ce:	10 00       	.word	0x0010	; ????
      d0:	00 60       	ori	r16, 0x00	; 0
      d2:	60 00       	.word	0x0060	; ????
      d4:	00 20       	and	r0, r0
      d6:	10 08       	sbc	r1, r0
      d8:	04 00       	.word	0x0004	; ????
      da:	00 3c       	cpi	r16, 0xC0	; 192
      dc:	42 3c       	cpi	r20, 0xC2	; 194
      de:	00 00       	nop
      e0:	44 7e       	andi	r20, 0xE4	; 228
      e2:	40 00       	.word	0x0040	; ????
      e4:	44 62       	ori	r20, 0x24	; 36
      e6:	52 4c       	sbci	r21, 0xC2	; 194
      e8:	00 22       	and	r0, r16
      ea:	4a 4a       	sbci	r20, 0xAA	; 170
      ec:	36 00       	.word	0x0036	; ????
      ee:	18 14       	cp	r1, r8
      f0:	7e 10       	cpse	r7, r14
      f2:	00 2e       	mov	r0, r16
      f4:	4a 4a       	sbci	r20, 0xAA	; 170
      f6:	32 00       	.word	0x0032	; ????
      f8:	3c 4a       	sbci	r19, 0xAC	; 172
      fa:	4a 30       	cpi	r20, 0x0A	; 10
      fc:	00 02       	muls	r16, r16
      fe:	62 1a       	sub	r6, r18
     100:	06 00       	.word	0x0006	; ????
     102:	34 4a       	sbci	r19, 0xA4	; 164
     104:	4a 34       	cpi	r20, 0x4A	; 74
     106:	00 0c       	add	r0, r0
     108:	52 52       	subi	r21, 0x22	; 34
     10a:	3c 00       	.word	0x003c	; ????
     10c:	00 6c       	ori	r16, 0xC0	; 192
     10e:	6c 00       	.word	0x006c	; ????
     110:	00 80       	ld	r0, Z
     112:	6c 2c       	mov	r6, r12
     114:	00 00       	nop
     116:	00 10       	cpse	r0, r0
     118:	28 44       	sbci	r18, 0x48	; 72
     11a:	00 28       	or	r0, r0
     11c:	28 28       	or	r2, r8
     11e:	28 00       	.word	0x0028	; ????
     120:	00 44       	sbci	r16, 0x40	; 64
     122:	28 10       	cpse	r2, r8
     124:	00 00       	nop
     126:	04 52       	subi	r16, 0x24	; 36
     128:	0c 00       	.word	0x000c	; ????
     12a:	3c 42       	sbci	r19, 0x2C	; 44
     12c:	5a 1c       	adc	r5, r10
     12e:	00 7c       	andi	r16, 0xC0	; 192
     130:	12 12       	cpse	r1, r18
     132:	7c 00       	.word	0x007c	; ????
     134:	7e 4a       	sbci	r23, 0xAE	; 174
     136:	4a 34       	cpi	r20, 0x4A	; 74
     138:	00 3c       	cpi	r16, 0xC0	; 192
     13a:	42 42       	sbci	r20, 0x22	; 34
     13c:	24 00       	.word	0x0024	; ????
     13e:	7e 42       	sbci	r23, 0x2E	; 46
     140:	42 3c       	cpi	r20, 0xC2	; 194
     142:	00 7e       	andi	r16, 0xE0	; 224
     144:	4a 4a       	sbci	r20, 0xAA	; 170
     146:	42 00       	.word	0x0042	; ????
     148:	7e 0a       	sbc	r7, r30
     14a:	0a 02       	muls	r16, r26
     14c:	00 3c       	cpi	r16, 0xC0	; 192
     14e:	42 52       	subi	r20, 0x22	; 34
     150:	74 00       	.word	0x0074	; ????
     152:	7e 08       	sbc	r7, r14
     154:	08 7e       	andi	r16, 0xE8	; 232
     156:	00 00       	nop
     158:	42 7e       	andi	r20, 0xE2	; 226
     15a:	42 00       	.word	0x0042	; ????
     15c:	20 40       	sbci	r18, 0x00	; 0
     15e:	40 3e       	cpi	r20, 0xE0	; 224
     160:	00 7e       	andi	r16, 0xE0	; 224
     162:	18 24       	eor	r1, r8
     164:	42 00       	.word	0x0042	; ????
     166:	7e 40       	sbci	r23, 0x0E	; 14
     168:	40 40       	sbci	r20, 0x00	; 0
     16a:	00 7e       	andi	r16, 0xE0	; 224
     16c:	0c 0c       	add	r0, r12
     16e:	7e 00       	.word	0x007e	; ????
     170:	7e 0c       	add	r7, r14
     172:	30 7e       	andi	r19, 0xE0	; 224
     174:	00 3c       	cpi	r16, 0xC0	; 192
     176:	42 42       	sbci	r20, 0x22	; 34
     178:	3c 00       	.word	0x003c	; ????
     17a:	7e 12       	cpse	r7, r30
     17c:	12 0c       	add	r1, r2
     17e:	00 3c       	cpi	r16, 0xC0	; 192
     180:	62 42       	sbci	r22, 0x22	; 34
     182:	bc 00       	.word	0x00bc	; ????
     184:	7e 12       	cpse	r7, r30
     186:	32 4c       	sbci	r19, 0xC2	; 194
     188:	00 24       	eor	r0, r0
     18a:	4a 52       	subi	r20, 0x2A	; 42
     18c:	24 00       	.word	0x0024	; ????
     18e:	00 02       	muls	r16, r16
     190:	7e 02       	muls	r23, r30
     192:	00 3e       	cpi	r16, 0xE0	; 224
     194:	40 40       	sbci	r20, 0x00	; 0
     196:	3e 00       	.word	0x003e	; ????
     198:	1e 60       	ori	r17, 0x0E	; 14
     19a:	60 1e       	adc	r6, r16
     19c:	00 7e       	andi	r16, 0xE0	; 224
     19e:	30 30       	cpi	r19, 0x00	; 0
     1a0:	7e 00       	.word	0x007e	; ????
     1a2:	66 18       	sub	r6, r6
     1a4:	18 66       	ori	r17, 0x68	; 104
     1a6:	00 00       	nop
     1a8:	0e 70       	andi	r16, 0x0E	; 14
     1aa:	0e 00       	.word	0x000e	; ????
     1ac:	62 52       	subi	r22, 0x22	; 34
     1ae:	4a 46       	sbci	r20, 0x6A	; 106
     1b0:	00 00       	nop
     1b2:	7e 42       	sbci	r23, 0x2E	; 46
     1b4:	42 00       	.word	0x0042	; ????
     1b6:	04 08       	sbc	r0, r4
     1b8:	10 20       	and	r1, r0
     1ba:	00 00       	nop
     1bc:	42 42       	sbci	r20, 0x22	; 34
     1be:	7e 00       	.word	0x007e	; ????
     1c0:	00 04       	cpc	r0, r0
     1c2:	02 04       	cpc	r0, r2
     1c4:	00 40       	sbci	r16, 0x00	; 0
     1c6:	40 40       	sbci	r20, 0x00	; 0
     1c8:	40 00       	.word	0x0040	; ????
     1ca:	00 02       	muls	r16, r16
     1cc:	04 00       	.word	0x0004	; ????
     1ce:	00 30       	cpi	r16, 0x00	; 0
     1d0:	48 28       	or	r4, r8
     1d2:	78 00       	.word	0x0078	; ????
     1d4:	7e 48       	sbci	r23, 0x8E	; 142
     1d6:	48 30       	cpi	r20, 0x08	; 8
     1d8:	00 30       	cpi	r16, 0x00	; 0
     1da:	48 48       	sbci	r20, 0x88	; 136
     1dc:	00 00       	nop
     1de:	30 48       	sbci	r19, 0x80	; 128
     1e0:	48 7e       	andi	r20, 0xE8	; 232
     1e2:	00 30       	cpi	r16, 0x00	; 0
     1e4:	68 58       	subi	r22, 0x88	; 136
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	10 7c       	andi	r17, 0xC0	; 192
     1ea:	12 04       	cpc	r1, r2
     1ec:	00 50       	subi	r16, 0x00	; 0
     1ee:	a8 a8       	ldd	r10, Y+48	; 0x30
     1f0:	98 00       	.word	0x0098	; ????
     1f2:	7e 08       	sbc	r7, r14
     1f4:	08 70       	andi	r16, 0x08	; 8
     1f6:	00 00       	nop
     1f8:	48 7a       	andi	r20, 0xA8	; 168
     1fa:	40 00       	.word	0x0040	; ????
     1fc:	00 40       	sbci	r16, 0x00	; 0
     1fe:	80 7a       	andi	r24, 0xA0	; 160
     200:	00 7e       	andi	r16, 0xE0	; 224
     202:	10 28       	or	r1, r0
     204:	40 00       	.word	0x0040	; ????
     206:	00 42       	sbci	r16, 0x20	; 32
     208:	7e 40       	sbci	r23, 0x0E	; 14
     20a:	00 78       	andi	r16, 0x80	; 128
     20c:	10 18       	sub	r1, r0
     20e:	70 00       	.word	0x0070	; ????
     210:	78 08       	sbc	r7, r8
     212:	08 70       	andi	r16, 0x08	; 8
     214:	00 30       	cpi	r16, 0x00	; 0
     216:	48 48       	sbci	r20, 0x88	; 136
     218:	30 00       	.word	0x0030	; ????
     21a:	f8 48       	sbci	r31, 0x88	; 136
     21c:	48 30       	cpi	r20, 0x08	; 8
     21e:	00 30       	cpi	r16, 0x00	; 0
     220:	48 48       	sbci	r20, 0x88	; 136
     222:	f8 00       	.word	0x00f8	; ????
     224:	78 08       	sbc	r7, r8
     226:	08 10       	cpse	r0, r8
     228:	00 50       	subi	r16, 0x00	; 0
     22a:	58 68       	ori	r21, 0x88	; 136
     22c:	28 00       	.word	0x0028	; ????
     22e:	08 3e       	cpi	r16, 0xE8	; 232
     230:	48 40       	sbci	r20, 0x08	; 8
     232:	00 38       	cpi	r16, 0x80	; 128
     234:	40 40       	sbci	r20, 0x00	; 0
     236:	78 00       	.word	0x0078	; ????
     238:	00 38       	cpi	r16, 0x80	; 128
     23a:	40 38       	cpi	r20, 0x80	; 128
     23c:	00 78       	andi	r16, 0x80	; 128
     23e:	60 60       	ori	r22, 0x00	; 0
     240:	78 00       	.word	0x0078	; ????
     242:	48 30       	cpi	r20, 0x08	; 8
     244:	30 48       	sbci	r19, 0x80	; 128
     246:	00 18       	sub	r0, r0
     248:	a0 40       	sbci	r26, 0x00	; 0
     24a:	38 00       	.word	0x0038	; ????
     24c:	48 68       	ori	r20, 0x88	; 136
     24e:	58 48       	sbci	r21, 0x88	; 136
     250:	00 00       	nop
     252:	08 3c       	cpi	r16, 0xC8	; 200
     254:	42 00       	.word	0x0042	; ????
     256:	00 00       	nop
     258:	7e 00       	.word	0x007e	; ????
     25a:	00 00       	nop
     25c:	42 3c       	cpi	r20, 0xC2	; 194
     25e:	08 00       	.word	0x0008	; ????
     260:	04 02       	muls	r16, r20
     262:	04 02       	muls	r16, r20
	...

00000266 <__ctors_end>:
     266:	11 24       	eor	r1, r1
     268:	1f be       	out	0x3f, r1	; 63
     26a:	cf ef       	ldi	r28, 0xFF	; 255
     26c:	d4 e0       	ldi	r29, 0x04	; 4
     26e:	de bf       	out	0x3e, r29	; 62
     270:	cd bf       	out	0x3d, r28	; 61

00000272 <__do_copy_data>:
     272:	14 e0       	ldi	r17, 0x04	; 4
     274:	a0 e0       	ldi	r26, 0x00	; 0
     276:	b1 e0       	ldi	r27, 0x01	; 1
     278:	ec ef       	ldi	r30, 0xFC	; 252
     27a:	f8 e2       	ldi	r31, 0x28	; 40
     27c:	02 c0       	rjmp	.+4      	; 0x282 <__do_copy_data+0x10>
     27e:	05 90       	lpm	r0, Z+
     280:	0d 92       	st	X+, r0
     282:	aa 31       	cpi	r26, 0x1A	; 26
     284:	b1 07       	cpc	r27, r17
     286:	d9 f7       	brne	.-10     	; 0x27e <__do_copy_data+0xc>

00000288 <__do_clear_bss>:
     288:	24 e0       	ldi	r18, 0x04	; 4
     28a:	aa e1       	ldi	r26, 0x1A	; 26
     28c:	b4 e0       	ldi	r27, 0x04	; 4
     28e:	01 c0       	rjmp	.+2      	; 0x292 <.do_clear_bss_start>

00000290 <.do_clear_bss_loop>:
     290:	1d 92       	st	X+, r1

00000292 <.do_clear_bss_start>:
     292:	a2 33       	cpi	r26, 0x32	; 50
     294:	b2 07       	cpc	r27, r18
     296:	e1 f7       	brne	.-8      	; 0x290 <.do_clear_bss_loop>
     298:	0e 94 7e 07 	call	0xefc	; 0xefc <main>
     29c:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <_exit>

000002a0 <__bad_interrupt>:
     2a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002a4 <ADC_read>:
****************************************************************************/
uint8_t ADC_read(uint8_t channel)
{
	volatile uint8_t* ext_adc = (uint8_t*) ADC_BASE_ADDR;
	
	*ext_adc = channel;
     2a4:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2a8:	89 ef       	ldi	r24, 0xF9	; 249
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <ADC_read+0x8>
     2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <ADC_read+0xe>
     2b2:	00 00       	nop
	_delay_ms(1);
	return *ext_adc;
     2b4:	80 91 00 14 	lds	r24, 0x1400
     2b8:	08 95       	ret

000002ba <CAN_init>:
* \brief Initialize CAN communication with node 2
*
****************************************************************************/
void CAN_init()
{
	mcp_init();
     2ba:	0e 94 15 03 	call	0x62a	; 0x62a <mcp_init>
	/* Turn off mask/filters, receive any message, rollover enabled */
	mcp_modify_bit(MCP_RXB0CTRL, 0b01100100, 0xFF);
     2be:	4f ef       	ldi	r20, 0xFF	; 255
     2c0:	64 e6       	ldi	r22, 0x64	; 100
     2c2:	80 e6       	ldi	r24, 0x60	; 96
     2c4:	0e 94 3b 03 	call	0x676	; 0x676 <mcp_modify_bit>
	/* Loopback mode enabled */
	mcp_modify_bit(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     2c8:	40 e0       	ldi	r20, 0x00	; 0
     2ca:	60 ee       	ldi	r22, 0xE0	; 224
     2cc:	8f e0       	ldi	r24, 0x0F	; 15
     2ce:	0e 94 3b 03 	call	0x676	; 0x676 <mcp_modify_bit>
     2d2:	08 95       	ret

000002d4 <CAN_send_message>:
*
* \param in message
* \return result of the CAN operation
****************************************************************************/
uint8_t CAN_send_message(CANMessage message)
{
     2d4:	df 92       	push	r13
     2d6:	ef 92       	push	r14
     2d8:	ff 92       	push	r15
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
     2e6:	2a 97       	sbiw	r28, 0x0a	; 10
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	f8 94       	cli
     2ec:	de bf       	out	0x3e, r29	; 62
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	cd bf       	out	0x3d, r28	; 61
     2f2:	09 83       	std	Y+1, r16	; 0x01
     2f4:	e1 2e       	mov	r14, r17
     2f6:	1a 83       	std	Y+2, r17	; 0x02
     2f8:	2b 83       	std	Y+3, r18	; 0x03
     2fa:	3c 83       	std	Y+4, r19	; 0x04
     2fc:	4d 83       	std	Y+5, r20	; 0x05
     2fe:	5e 83       	std	Y+6, r21	; 0x06
     300:	6f 83       	std	Y+7, r22	; 0x07
     302:	78 87       	std	Y+8, r23	; 0x08
     304:	89 87       	std	Y+9, r24	; 0x09
     306:	9a 87       	std	Y+10, r25	; 0x0a
	uint8_t i;
	uint8_t ctrl = mcp_read(MCP_TXB0CTRL);
     308:	80 e3       	ldi	r24, 0x30	; 48
     30a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <mcp_read>
	
	if (test_bit(ctrl, TXREQ))
     30e:	98 2f       	mov	r25, r24
     310:	98 70       	andi	r25, 0x08	; 8
     312:	d9 2e       	mov	r13, r25
     314:	83 fd       	sbrc	r24, 3
     316:	2b c0       	rjmp	.+86     	; 0x36e <CAN_send_message+0x9a>
	{
		return MESSAGE_PENDING;
	}
	/* Use lower 8bits of ID */
	mcp_write_byte(MCP_TXB0SIDL, (uint8_t)(message.ID << 5));
     318:	60 2f       	mov	r22, r16
     31a:	62 95       	swap	r22
     31c:	66 0f       	add	r22, r22
     31e:	60 7e       	andi	r22, 0xE0	; 224
     320:	82 e3       	ldi	r24, 0x32	; 50
     322:	0e 94 27 03 	call	0x64e	; 0x64e <mcp_write_byte>
	mcp_write_byte(MCP_TXB0SIDH, (uint8_t)(message.ID >> 3));
     326:	60 2f       	mov	r22, r16
     328:	66 95       	lsr	r22
     32a:	66 95       	lsr	r22
     32c:	66 95       	lsr	r22
     32e:	81 e3       	ldi	r24, 0x31	; 49
     330:	0e 94 27 03 	call	0x64e	; 0x64e <mcp_write_byte>
	
	mcp_write_byte(MCP_TXB0DLC, (message.length) & 0x0F);
     334:	6e 2d       	mov	r22, r14
     336:	6f 70       	andi	r22, 0x0F	; 15
     338:	85 e3       	ldi	r24, 0x35	; 53
     33a:	0e 94 27 03 	call	0x64e	; 0x64e <mcp_write_byte>
	
	for (i = 0; i < message.length; i++)
     33e:	ee 20       	and	r14, r14
     340:	91 f0       	breq	.+36     	; 0x366 <CAN_send_message+0x92>
     342:	8e 01       	movw	r16, r28
     344:	0d 5f       	subi	r16, 0xFD	; 253
     346:	1f 4f       	sbci	r17, 0xFF	; 255
     348:	e6 e3       	ldi	r30, 0x36	; 54
     34a:	ee 0e       	add	r14, r30
     34c:	0f 2e       	mov	r0, r31
     34e:	f6 e3       	ldi	r31, 0x36	; 54
     350:	ff 2e       	mov	r15, r31
     352:	f0 2d       	mov	r31, r0
	{
		mcp_write_byte(MCP_TXB0D0 + i, message.data_array[i]);
     354:	f8 01       	movw	r30, r16
     356:	61 91       	ld	r22, Z+
     358:	8f 01       	movw	r16, r30
     35a:	8f 2d       	mov	r24, r15
     35c:	0e 94 27 03 	call	0x64e	; 0x64e <mcp_write_byte>
     360:	f3 94       	inc	r15
	mcp_write_byte(MCP_TXB0SIDL, (uint8_t)(message.ID << 5));
	mcp_write_byte(MCP_TXB0SIDH, (uint8_t)(message.ID >> 3));
	
	mcp_write_byte(MCP_TXB0DLC, (message.length) & 0x0F);
	
	for (i = 0; i < message.length; i++)
     362:	fe 10       	cpse	r15, r14
     364:	f7 cf       	rjmp	.-18     	; 0x354 <CAN_send_message+0x80>
	{
		mcp_write_byte(MCP_TXB0D0 + i, message.data_array[i]);
	}
	
	mcp_request_to_send(1);
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	0e 94 55 03 	call	0x6aa	; 0x6aa <mcp_request_to_send>

	return SUCCESS;
     36c:	02 c0       	rjmp	.+4      	; 0x372 <CAN_send_message+0x9e>
	uint8_t i;
	uint8_t ctrl = mcp_read(MCP_TXB0CTRL);
	
	if (test_bit(ctrl, TXREQ))
	{
		return MESSAGE_PENDING;
     36e:	dd 24       	eor	r13, r13
     370:	d3 94       	inc	r13
	}
	
	mcp_request_to_send(1);

	return SUCCESS;
}
     372:	8d 2d       	mov	r24, r13
     374:	2a 96       	adiw	r28, 0x0a	; 10
     376:	0f b6       	in	r0, 0x3f	; 63
     378:	f8 94       	cli
     37a:	de bf       	out	0x3e, r29	; 62
     37c:	0f be       	out	0x3f, r0	; 63
     37e:	cd bf       	out	0x3d, r28	; 61
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	df 90       	pop	r13
     38e:	08 95       	ret

00000390 <CAN_receive_message>:
*
* \param out message
* \return result of the CAN operation
****************************************************************************/
uint8_t CAN_receive_message(CANMessage* message)
{
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	ec 01       	movw	r28, r24
	uint8_t i = 0;
	uint8_t received = mcp_read(MCP_CANINTF) & (0x01);
     398:	8c e2       	ldi	r24, 0x2C	; 44
     39a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <mcp_read>
	if (received)
     39e:	80 ff       	sbrs	r24, 0
     3a0:	2a c0       	rjmp	.+84     	; 0x3f6 <CAN_receive_message+0x66>
	{
		mcp_modify_bit(MCP_CANINTF, 0x01, 0);
     3a2:	40 e0       	ldi	r20, 0x00	; 0
     3a4:	61 e0       	ldi	r22, 0x01	; 1
     3a6:	8c e2       	ldi	r24, 0x2C	; 44
     3a8:	0e 94 3b 03 	call	0x676	; 0x676 <mcp_modify_bit>
		message->ID = (mcp_read(MCP_RXB0SIDH) << 3);
     3ac:	81 e6       	ldi	r24, 0x61	; 97
     3ae:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <mcp_read>
     3b2:	18 2f       	mov	r17, r24
     3b4:	11 0f       	add	r17, r17
     3b6:	11 0f       	add	r17, r17
     3b8:	11 0f       	add	r17, r17
     3ba:	18 83       	st	Y, r17
		message->ID |= (mcp_read(MCP_RXB0SIDL) >> 5);
     3bc:	82 e6       	ldi	r24, 0x62	; 98
     3be:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <mcp_read>
     3c2:	82 95       	swap	r24
     3c4:	86 95       	lsr	r24
     3c6:	87 70       	andi	r24, 0x07	; 7
     3c8:	18 2b       	or	r17, r24
     3ca:	18 83       	st	Y, r17
		
		message->length = mcp_read(MCP_RXB0DLC) & (0x0F);
     3cc:	85 e6       	ldi	r24, 0x65	; 101
     3ce:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <mcp_read>
     3d2:	8f 70       	andi	r24, 0x0F	; 15
     3d4:	89 83       	std	Y+1, r24	; 0x01
		
		for (i = 0; i < message->length; i++)
     3d6:	88 23       	and	r24, r24
     3d8:	81 f0       	breq	.+32     	; 0x3fa <CAN_receive_message+0x6a>
     3da:	10 e0       	ldi	r17, 0x00	; 0
		{
			message->data_array[i] = mcp_read(MCP_RXB0D0 + i);
     3dc:	86 e6       	ldi	r24, 0x66	; 102
     3de:	81 0f       	add	r24, r17
     3e0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <mcp_read>
     3e4:	fe 01       	movw	r30, r28
     3e6:	e1 0f       	add	r30, r17
     3e8:	f1 1d       	adc	r31, r1
     3ea:	82 83       	std	Z+2, r24	; 0x02
		message->ID = (mcp_read(MCP_RXB0SIDH) << 3);
		message->ID |= (mcp_read(MCP_RXB0SIDL) >> 5);
		
		message->length = mcp_read(MCP_RXB0DLC) & (0x0F);
		
		for (i = 0; i < message->length; i++)
     3ec:	1f 5f       	subi	r17, 0xFF	; 255
     3ee:	89 81       	ldd	r24, Y+1	; 0x01
     3f0:	18 17       	cp	r17, r24
     3f2:	a0 f3       	brcs	.-24     	; 0x3dc <CAN_receive_message+0x4c>
     3f4:	04 c0       	rjmp	.+8      	; 0x3fe <CAN_receive_message+0x6e>
			message->data_array[i] = mcp_read(MCP_RXB0D0 + i);
		}
	}
	else
	{
		return NO_NEW_MESSAGE;
     3f6:	82 e0       	ldi	r24, 0x02	; 2
     3f8:	03 c0       	rjmp	.+6      	; 0x400 <CAN_receive_message+0x70>
	}
	
	return SUCCESS;
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	01 c0       	rjmp	.+2      	; 0x400 <CAN_receive_message+0x70>
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	08 95       	ret

00000408 <send_joystick_possition>:
* \param in joystick position
* \param in touchpad data
* \return result of the CAN send operation
****************************************************************************/
uint8_t send_joystick_possition(JoystickPosition joystick_position, TouchpadData touchpad_data)
{
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
     414:	2a 97       	sbiw	r28, 0x0a	; 10
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	f8 94       	cli
     41a:	de bf       	out	0x3e, r29	; 62
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	cd bf       	out	0x3d, r28	; 61
	message.data_array[3] = (uint8_t) (touchpad_data.leftTouchPad);
	
	message.data_array[4] = (uint8_t) (touchpad_data.rightButton);
	message.data_array[5] = (uint8_t) (touchpad_data.leftButton);
	
	return CAN_send_message(message);
     420:	01 e0       	ldi	r16, 0x01	; 1
     422:	16 e0       	ldi	r17, 0x06	; 6
     424:	28 2f       	mov	r18, r24
     426:	39 2f       	mov	r19, r25
     428:	89 85       	ldd	r24, Y+9	; 0x09
     42a:	9a 85       	ldd	r25, Y+10	; 0x0a
     42c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <CAN_send_message>
}
     430:	2a 96       	adiw	r28, 0x0a	; 10
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	f8 94       	cli
     436:	de bf       	out	0x3e, r29	; 62
     438:	0f be       	out	0x3f, r0	; 63
     43a:	cd bf       	out	0x3d, r28	; 61
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	1f 91       	pop	r17
     442:	0f 91       	pop	r16
     444:	08 95       	ret

00000446 <send_game_mode>:
*
* \param in game mode
* \return result of the CAN send operation
****************************************************************************/
uint8_t send_game_mode(GameModes mode)
{
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
     452:	2a 97       	sbiw	r28, 0x0a	; 10
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
	message.ID = 0x02;
	message.length = 1;
	
	message.data_array[0]= (uint8_t) (mode);
	
	return CAN_send_message(message);
     45e:	02 e0       	ldi	r16, 0x02	; 2
     460:	11 e0       	ldi	r17, 0x01	; 1
     462:	28 2f       	mov	r18, r24
     464:	3c 81       	ldd	r19, Y+4	; 0x04
     466:	4d 81       	ldd	r20, Y+5	; 0x05
     468:	5e 81       	ldd	r21, Y+6	; 0x06
     46a:	6f 81       	ldd	r22, Y+7	; 0x07
     46c:	78 85       	ldd	r23, Y+8	; 0x08
     46e:	89 85       	ldd	r24, Y+9	; 0x09
     470:	9a 85       	ldd	r25, Y+10	; 0x0a
     472:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <CAN_send_message>
}
     476:	2a 96       	adiw	r28, 0x0a	; 10
     478:	0f b6       	in	r0, 0x3f	; 63
     47a:	f8 94       	cli
     47c:	de bf       	out	0x3e, r29	; 62
     47e:	0f be       	out	0x3f, r0	; 63
     480:	cd bf       	out	0x3d, r28	; 61
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	1f 91       	pop	r17
     488:	0f 91       	pop	r16
     48a:	08 95       	ret

0000048c <EEPROM_write>:
#include <stdio.h>

void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
     48c:	e1 99       	sbic	0x1c, 1	; 28
     48e:	fe cf       	rjmp	.-4      	; 0x48c <EEPROM_write>
	/* Set up address and data registers */
	EEAR = uiAddress;
     490:	9f bb       	out	0x1f, r25	; 31
     492:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
     494:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
     496:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
     498:	e1 9a       	sbi	0x1c, 1	; 28
     49a:	08 95       	ret

0000049c <EEPROM_read>:
}

uint8_t EEPROM_read(uint16_t uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
     49c:	e1 99       	sbic	0x1c, 1	; 28
     49e:	fe cf       	rjmp	.-4      	; 0x49c <EEPROM_read>
	/* Set up address register */
	EEAR = uiAddress;
     4a0:	9f bb       	out	0x1f, r25	; 31
     4a2:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
     4a4:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     4a6:	8d b3       	in	r24, 0x1d	; 29
     4a8:	08 95       	ret

000004aa <read_joystick_position>:
*
* \param in calibration data
* \return Joystick position
****************************************************************************/
JoystickPosition read_joystick_position()
{
     4aa:	cf 93       	push	r28
	JoystickPosition position;

	position.xaxis = ADC_read(ADC_CH2);
     4ac:	85 e0       	ldi	r24, 0x05	; 5
     4ae:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_read>
     4b2:	c8 2f       	mov	r28, r24
	//position.xaxis = ((((position.xaxis - calibration.xaxis)*100)/255)-50)*2;

	position.yaxis = ADC_read(ADC_CH1);
     4b4:	84 e0       	ldi	r24, 0x04	; 4
     4b6:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_read>
     4ba:	98 2f       	mov	r25, r24
	//position.yaxis = ((((position.yaxis - calibration.yaxis)*100)/255)-50)*2;
	
	return position;
}
     4bc:	8c 2f       	mov	r24, r28
     4be:	cf 91       	pop	r28
     4c0:	08 95       	ret

000004c2 <read_joystick_direction>:
* \brief Read joystick direction according to joystick position data
*
* \return Joystick direction
****************************************************************************/
JoystickDirection read_joystick_direction(JoystickPosition joystickPos)
{
     4c2:	68 2f       	mov	r22, r24
	JoystickDirection xAxes, yAxes, retVal;
	
	if (joystickPos.xaxis > 220)
     4c4:	8d 3d       	cpi	r24, 0xDD	; 221
     4c6:	20 f4       	brcc	.+8      	; 0x4d0 <read_joystick_direction+0xe>
	{
		xAxes = Right;
	}
	else if (joystickPos.xaxis < 20)
     4c8:	84 31       	cpi	r24, 0x14	; 20
     4ca:	20 f4       	brcc	.+8      	; 0x4d4 <read_joystick_direction+0x12>
	{
		xAxes = Left;
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	03 c0       	rjmp	.+6      	; 0x4d6 <read_joystick_direction+0x14>
{
	JoystickDirection xAxes, yAxes, retVal;
	
	if (joystickPos.xaxis > 220)
	{
		xAxes = Right;
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <read_joystick_direction+0x14>
	{
		xAxes = Left;
	}
	else
	{
		xAxes = Neutral;
     4d4:	84 e0       	ldi	r24, 0x04	; 4
	}
	
	if (joystickPos.yaxis > 220)
     4d6:	9d 3d       	cpi	r25, 0xDD	; 221
     4d8:	20 f4       	brcc	.+8      	; 0x4e2 <read_joystick_direction+0x20>
	{
		yAxes = Up;
	}
	else if (joystickPos.yaxis < 20)
     4da:	94 31       	cpi	r25, 0x14	; 20
     4dc:	20 f4       	brcc	.+8      	; 0x4e6 <read_joystick_direction+0x24>
	{
		yAxes = Down;
     4de:	e3 e0       	ldi	r30, 0x03	; 3
     4e0:	03 c0       	rjmp	.+6      	; 0x4e8 <read_joystick_direction+0x26>
		xAxes = Neutral;
	}
	
	if (joystickPos.yaxis > 220)
	{
		yAxes = Up;
     4e2:	e2 e0       	ldi	r30, 0x02	; 2
     4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <read_joystick_direction+0x26>
	else if (joystickPos.yaxis < 20)
	{
		yAxes = Down;
	}
	else{
		yAxes = Neutral;
     4e6:	e4 e0       	ldi	r30, 0x04	; 4
	}
	
	if(abs(joystickPos.yaxis-145) > abs(joystickPos.xaxis-135))
     4e8:	29 2f       	mov	r18, r25
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	21 59       	subi	r18, 0x91	; 145
     4ee:	31 09       	sbc	r19, r1
     4f0:	a9 01       	movw	r20, r18
     4f2:	33 23       	and	r19, r19
     4f4:	24 f4       	brge	.+8      	; 0x4fe <read_joystick_direction+0x3c>
     4f6:	44 27       	eor	r20, r20
     4f8:	55 27       	eor	r21, r21
     4fa:	42 1b       	sub	r20, r18
     4fc:	53 0b       	sbc	r21, r19
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	67 58       	subi	r22, 0x87	; 135
     502:	71 09       	sbc	r23, r1
     504:	9b 01       	movw	r18, r22
     506:	77 23       	and	r23, r23
     508:	24 f4       	brge	.+8      	; 0x512 <__stack+0x13>
     50a:	22 27       	eor	r18, r18
     50c:	33 27       	eor	r19, r19
     50e:	26 1b       	sub	r18, r22
     510:	37 0b       	sbc	r19, r23
     512:	24 17       	cp	r18, r20
     514:	35 07       	cpc	r19, r21
     516:	0c f4       	brge	.+2      	; 0x51a <__stack+0x1b>
	{
		retVal = yAxes;
     518:	8e 2f       	mov	r24, r30
	{
		retVal = xAxes;
	}
	
	return retVal;
}
     51a:	08 95       	ret

0000051c <read_touchpad_data>:
* \brief Read Touchpad data
*
* \return Touchpad data
****************************************************************************/
TouchpadData read_touchpad_data()
{
     51c:	cf 93       	push	r28
	TouchpadData touchpad;
	touchpad.rightTouchPad = ADC_read(ADC_CH3);
     51e:	86 e0       	ldi	r24, 0x06	; 6
     520:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_read>
     524:	c8 2f       	mov	r28, r24
	touchpad.leftTouchPad = ADC_read(ADC_CH4);
     526:	87 e0       	ldi	r24, 0x07	; 7
     528:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_read>
     52c:	78 2f       	mov	r23, r24
	
	if(test_bit(BUTTON_PORT, LEFT_BUTTON_PIN))
     52e:	85 9b       	sbis	0x10, 5	; 16
     530:	02 c0       	rjmp	.+4      	; 0x536 <read_touchpad_data+0x1a>
	{
		touchpad.leftButton = 1;
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	01 c0       	rjmp	.+2      	; 0x538 <read_touchpad_data+0x1c>
	}
	else
	{
		touchpad.leftButton = 0;
     536:	90 e0       	ldi	r25, 0x00	; 0
	}
	if(test_bit(BUTTON_PORT, RIGHT_BUTTON_PIN))
     538:	84 9b       	sbis	0x10, 4	; 16
     53a:	02 c0       	rjmp	.+4      	; 0x540 <read_touchpad_data+0x24>
	{
		touchpad.rightButton = 1;
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	01 c0       	rjmp	.+2      	; 0x542 <read_touchpad_data+0x26>
	}
	else
	{
		touchpad.rightButton = 0;
     540:	80 e0       	ldi	r24, 0x00	; 0
	}
	return touchpad;
}
     542:	6c 2f       	mov	r22, r28
     544:	cf 91       	pop	r28
     546:	08 95       	ret

00000548 <change_xaxis>:
***********************************************************************************/
JoystickDirection change_xaxis(JoystickDirection direction)
{
	static JoystickDirection old_x_direction = Neutral;
	
	if(direction!= Right && direction != Left)
     548:	82 30       	cpi	r24, 0x02	; 2
     54a:	20 f0       	brcs	.+8      	; 0x554 <change_xaxis+0xc>
	{
		old_x_direction = Neutral;
     54c:	84 e0       	ldi	r24, 0x04	; 4
     54e:	80 93 07 01 	sts	0x0107, r24
		return Neutral;
     552:	08 95       	ret
	}
	
	if (old_x_direction != direction)
     554:	90 91 07 01 	lds	r25, 0x0107
     558:	98 17       	cp	r25, r24
     55a:	19 f0       	breq	.+6      	; 0x562 <change_xaxis+0x1a>
	{
		old_x_direction = direction;
     55c:	80 93 07 01 	sts	0x0107, r24
		return direction;
     560:	08 95       	ret
	}
	
	old_x_direction = direction;
	return Neutral;
     562:	84 e0       	ldi	r24, 0x04	; 4
}
     564:	08 95       	ret

00000566 <change_yaxis>:
***********************************************************************************/
JoystickDirection change_yaxis(JoystickDirection direction)
{
	static JoystickDirection old_y_direction = Neutral;
	
	if(direction!= Up && direction != Down)
     566:	9e ef       	ldi	r25, 0xFE	; 254
     568:	98 0f       	add	r25, r24
     56a:	92 30       	cpi	r25, 0x02	; 2
     56c:	20 f0       	brcs	.+8      	; 0x576 <change_yaxis+0x10>
	{
		old_y_direction = Neutral;
     56e:	84 e0       	ldi	r24, 0x04	; 4
     570:	80 93 06 01 	sts	0x0106, r24
		return Neutral;
     574:	08 95       	ret
	}
	
	if (old_y_direction != direction)
     576:	90 91 06 01 	lds	r25, 0x0106
     57a:	98 17       	cp	r25, r24
     57c:	19 f0       	breq	.+6      	; 0x584 <change_yaxis+0x1e>
	{
		old_y_direction = direction;
     57e:	80 93 06 01 	sts	0x0106, r24
		return direction;
     582:	08 95       	ret
	}
	
	old_y_direction = direction;
	return Neutral;
     584:	84 e0       	ldi	r24, 0x04	; 4
}
     586:	08 95       	ret

00000588 <change_touchpad_data>:
	ChangeTouchpadData ret_val;
	
	ret_val.rightButton = 0;
	ret_val.leftButton = 0;
	
	if (old_touchpad_data.leftButton == 0 && new_touchpad_data.leftButton == 1)
     588:	20 91 1d 04 	lds	r18, 0x041D
     58c:	21 11       	cpse	r18, r1
     58e:	05 c0       	rjmp	.+10     	; 0x59a <change_touchpad_data+0x12>
     590:	91 30       	cpi	r25, 0x01	; 1
     592:	19 f4       	brne	.+6      	; 0x59a <change_touchpad_data+0x12>
	{
		old_touchpad_data.leftButton = 1;
     594:	90 93 1d 04 	sts	0x041D, r25
		ret_val.leftButton = 1;
     598:	0c c0       	rjmp	.+24     	; 0x5b2 <change_touchpad_data+0x2a>
	}
	else if (old_touchpad_data.leftButton == 1 && new_touchpad_data.leftButton == 0)
     59a:	20 91 1d 04 	lds	r18, 0x041D
     59e:	21 30       	cpi	r18, 0x01	; 1
     5a0:	29 f4       	brne	.+10     	; 0x5ac <change_touchpad_data+0x24>
     5a2:	91 11       	cpse	r25, r1
     5a4:	05 c0       	rjmp	.+10     	; 0x5b0 <change_touchpad_data+0x28>
	{
		old_touchpad_data.leftButton = 0;
     5a6:	10 92 1d 04 	sts	0x041D, r1
     5aa:	03 c0       	rjmp	.+6      	; 0x5b2 <change_touchpad_data+0x2a>
{
	static TouchpadData old_touchpad_data;
	ChangeTouchpadData ret_val;
	
	ret_val.rightButton = 0;
	ret_val.leftButton = 0;
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	01 c0       	rjmp	.+2      	; 0x5b2 <change_touchpad_data+0x2a>
     5b0:	90 e0       	ldi	r25, 0x00	; 0
	else if (old_touchpad_data.leftButton == 1 && new_touchpad_data.leftButton == 0)
	{
		old_touchpad_data.leftButton = 0;
	}
	
	if (old_touchpad_data.rightButton == 0 && new_touchpad_data.rightButton == 1)
     5b2:	20 91 1c 04 	lds	r18, 0x041C
     5b6:	21 11       	cpse	r18, r1
     5b8:	05 c0       	rjmp	.+10     	; 0x5c4 <change_touchpad_data+0x3c>
     5ba:	81 30       	cpi	r24, 0x01	; 1
     5bc:	19 f4       	brne	.+6      	; 0x5c4 <change_touchpad_data+0x3c>
	{
		old_touchpad_data.rightButton = 1;
     5be:	80 93 1c 04 	sts	0x041C, r24
		ret_val.rightButton = 1;
     5c2:	08 95       	ret
	}
	else if (old_touchpad_data.rightButton == 1 && new_touchpad_data.rightButton == 0)
     5c4:	20 91 1c 04 	lds	r18, 0x041C
     5c8:	21 30       	cpi	r18, 0x01	; 1
     5ca:	29 f4       	brne	.+10     	; 0x5d6 <change_touchpad_data+0x4e>
     5cc:	81 11       	cpse	r24, r1
     5ce:	05 c0       	rjmp	.+10     	; 0x5da <change_touchpad_data+0x52>
	{
		old_touchpad_data.rightButton = 0;
     5d0:	10 92 1c 04 	sts	0x041C, r1
     5d4:	08 95       	ret
ChangeTouchpadData change_touchpad_data(TouchpadData new_touchpad_data)
{
	static TouchpadData old_touchpad_data;
	ChangeTouchpadData ret_val;
	
	ret_val.rightButton = 0;
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	08 95       	ret
     5da:	80 e0       	ldi	r24, 0x00	; 0
	{
		old_touchpad_data.rightButton = 0;
	}
	
	return ret_val;
     5dc:	08 95       	ret

000005de <mcp_turn_on>:
* \brief Enable communication with CAN controller
*
****************************************************************************/
void mcp_turn_on()
{
	PORTB &= ~(1 << DD_CS);
     5de:	c4 98       	cbi	0x18, 4	; 24
     5e0:	08 95       	ret

000005e2 <mcp_turn_off>:
* \brief Disable communication with CAN controller
*
****************************************************************************/
void mcp_turn_off()
{
	PORTB |= (1 << DD_CS);
     5e2:	c4 9a       	sbi	0x18, 4	; 24
     5e4:	08 95       	ret

000005e6 <mcp_reset>:
* \brief Reset the CAN controller
*
****************************************************************************/
void mcp_reset()
{
	mcp_turn_on();
     5e6:	0e 94 ef 02 	call	0x5de	; 0x5de <mcp_turn_on>
	
	SPI_write(MCP_RESET);
     5ea:	80 ec       	ldi	r24, 0xC0	; 192
     5ec:	0e 94 8d 07 	call	0xf1a	; 0xf1a <SPI_write>
	
	mcp_turn_off();
     5f0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <mcp_turn_off>
     5f4:	08 95       	ret

000005f6 <mcp_read>:
*
* \param in address from which shall be read
* \return data
****************************************************************************/
uint8_t mcp_read(uint8_t address)
{
     5f6:	1f 93       	push	r17
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	1f 92       	push	r1
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
     602:	18 2f       	mov	r17, r24
	volatile uint8_t retVal;
	
	mcp_turn_on();
     604:	0e 94 ef 02 	call	0x5de	; 0x5de <mcp_turn_on>
	
	SPI_write(MCP_READ);
     608:	83 e0       	ldi	r24, 0x03	; 3
     60a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <SPI_write>
	SPI_write(address);
     60e:	81 2f       	mov	r24, r17
     610:	0e 94 8d 07 	call	0xf1a	; 0xf1a <SPI_write>
	
	retVal = SPI_read();
     614:	0e 94 91 07 	call	0xf22	; 0xf22 <SPI_read>
     618:	89 83       	std	Y+1, r24	; 0x01
	
	mcp_turn_off();
     61a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <mcp_turn_off>
	
	return retVal;
     61e:	89 81       	ldd	r24, Y+1	; 0x01
}
     620:	0f 90       	pop	r0
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	1f 91       	pop	r17
     628:	08 95       	ret

0000062a <mcp_init>:
****************************************************************************/
uint8_t mcp_init()
{
	uint8_t tmp;
	
	SPI_init();
     62a:	0e 94 87 07 	call	0xf0e	; 0xf0e <SPI_init>
	mcp_reset();
     62e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <mcp_reset>
	
	tmp = mcp_read(MCP_CANSTAT);
     632:	8e e0       	ldi	r24, 0x0E	; 14
     634:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <mcp_read>
	
	if ((tmp & MODE_MASK) != MODE_CONFIG)
     638:	80 7e       	andi	r24, 0xE0	; 224
     63a:	80 38       	cpi	r24, 0x80	; 128
     63c:	31 f0       	breq	.+12     	; 0x64a <mcp_init+0x20>
	{
		printf("MCP2515 NOT configured properly\n");
     63e:	8f e0       	ldi	r24, 0x0F	; 15
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	0e 94 26 10 	call	0x204c	; 0x204c <puts>
		return 1;
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	08 95       	ret
	}
	
	return 0;
     64a:	80 e0       	ldi	r24, 0x00	; 0
}
     64c:	08 95       	ret

0000064e <mcp_write_byte>:
*
* \param in address to which shall be write
* \return data
****************************************************************************/
void mcp_write_byte(uint8_t address, uint8_t byte)
{
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	d8 2f       	mov	r29, r24
     654:	c6 2f       	mov	r28, r22
	mcp_turn_on();
     656:	0e 94 ef 02 	call	0x5de	; 0x5de <mcp_turn_on>
	SPI_write(MCP_WRITE);
     65a:	82 e0       	ldi	r24, 0x02	; 2
     65c:	0e 94 8d 07 	call	0xf1a	; 0xf1a <SPI_write>
	SPI_write(address);
     660:	8d 2f       	mov	r24, r29
     662:	0e 94 8d 07 	call	0xf1a	; 0xf1a <SPI_write>
	SPI_write(byte);
     666:	8c 2f       	mov	r24, r28
     668:	0e 94 8d 07 	call	0xf1a	; 0xf1a <SPI_write>
	mcp_turn_off();
     66c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <mcp_turn_off>
}
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	08 95       	ret

00000676 <mcp_modify_bit>:
* \param in address of the register
* \param in bit mask
* \param in new value of the register
****************************************************************************/
void mcp_modify_bit(uint8_t address, uint8_t mask, uint8_t byte)
{
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	18 2f       	mov	r17, r24
     67e:	d6 2f       	mov	r29, r22
     680:	c4 2f       	mov	r28, r20
	mcp_turn_on();
     682:	0e 94 ef 02 	call	0x5de	; 0x5de <mcp_turn_on>
	SPI_write(MCP_BITMOD);
     686:	85 e0       	ldi	r24, 0x05	; 5
     688:	0e 94 8d 07 	call	0xf1a	; 0xf1a <SPI_write>
	SPI_write(address);
     68c:	81 2f       	mov	r24, r17
     68e:	0e 94 8d 07 	call	0xf1a	; 0xf1a <SPI_write>
	SPI_write(mask);
     692:	8d 2f       	mov	r24, r29
     694:	0e 94 8d 07 	call	0xf1a	; 0xf1a <SPI_write>
	SPI_write(byte);
     698:	8c 2f       	mov	r24, r28
     69a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <SPI_write>
	mcp_turn_off();
     69e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <mcp_turn_off>
}
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	08 95       	ret

000006aa <mcp_request_to_send>:
* \brief Request to send particular buffer
*
* \param in address of the buffer
****************************************************************************/
void mcp_request_to_send(uint8_t bits)
{
     6aa:	cf 93       	push	r28
     6ac:	c8 2f       	mov	r28, r24
	mcp_turn_on();
     6ae:	0e 94 ef 02 	call	0x5de	; 0x5de <mcp_turn_on>
	SPI_write(MCP_RTS | (bits & 0b00000111));
     6b2:	8c 2f       	mov	r24, r28
     6b4:	87 70       	andi	r24, 0x07	; 7
     6b6:	80 68       	ori	r24, 0x80	; 128
     6b8:	0e 94 8d 07 	call	0xf1a	; 0xf1a <SPI_write>
	mcp_turn_off();
     6bc:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <mcp_turn_off>
     6c0:	cf 91       	pop	r28
     6c2:	08 95       	ret

000006c4 <init_oled>:
*
****************************************************************************/
void write_c(uint8_t command)
{
	volatile uint8_t *ext_oled = (uint8_t *) OLED_COMMAND_BASE_ADDR;
	ext_oled[0] = command;
     6c4:	e0 e0       	ldi	r30, 0x00	; 0
     6c6:	f0 e1       	ldi	r31, 0x10	; 16
     6c8:	8e ea       	ldi	r24, 0xAE	; 174
     6ca:	80 83       	st	Z, r24
     6cc:	81 ea       	ldi	r24, 0xA1	; 161
     6ce:	80 83       	st	Z, r24
     6d0:	8a ed       	ldi	r24, 0xDA	; 218
     6d2:	80 83       	st	Z, r24
     6d4:	82 e1       	ldi	r24, 0x12	; 18
     6d6:	80 83       	st	Z, r24
     6d8:	88 ec       	ldi	r24, 0xC8	; 200
     6da:	80 83       	st	Z, r24
     6dc:	88 ea       	ldi	r24, 0xA8	; 168
     6de:	80 83       	st	Z, r24
     6e0:	8f e3       	ldi	r24, 0x3F	; 63
     6e2:	80 83       	st	Z, r24
     6e4:	85 ed       	ldi	r24, 0xD5	; 213
     6e6:	80 83       	st	Z, r24
     6e8:	80 e8       	ldi	r24, 0x80	; 128
     6ea:	80 83       	st	Z, r24
     6ec:	81 e8       	ldi	r24, 0x81	; 129
     6ee:	80 83       	st	Z, r24
     6f0:	80 e5       	ldi	r24, 0x50	; 80
     6f2:	80 83       	st	Z, r24
     6f4:	89 ed       	ldi	r24, 0xD9	; 217
     6f6:	80 83       	st	Z, r24
     6f8:	81 e2       	ldi	r24, 0x21	; 33
     6fa:	80 83       	st	Z, r24
     6fc:	80 e2       	ldi	r24, 0x20	; 32
     6fe:	80 83       	st	Z, r24
     700:	10 82       	st	Z, r1
     702:	8b ed       	ldi	r24, 0xDB	; 219
     704:	80 83       	st	Z, r24
     706:	80 e3       	ldi	r24, 0x30	; 48
     708:	80 83       	st	Z, r24
     70a:	8d ea       	ldi	r24, 0xAD	; 173
     70c:	80 83       	st	Z, r24
     70e:	10 82       	st	Z, r1
     710:	84 ea       	ldi	r24, 0xA4	; 164
     712:	80 83       	st	Z, r24
     714:	86 ea       	ldi	r24, 0xA6	; 166
     716:	80 83       	st	Z, r24
     718:	8f ea       	ldi	r24, 0xAF	; 175
     71a:	80 83       	st	Z, r24
     71c:	08 95       	ret

0000071e <reset_position>:
     71e:	e0 e0       	ldi	r30, 0x00	; 0
     720:	f0 e1       	ldi	r31, 0x10	; 16
     722:	81 e2       	ldi	r24, 0x21	; 33
     724:	80 83       	st	Z, r24
     726:	10 82       	st	Z, r1
     728:	8f e7       	ldi	r24, 0x7F	; 127
     72a:	80 83       	st	Z, r24
     72c:	82 e2       	ldi	r24, 0x22	; 34
     72e:	80 83       	st	Z, r24
     730:	10 82       	st	Z, r1
     732:	87 e0       	ldi	r24, 0x07	; 7
     734:	80 83       	st	Z, r24
     736:	08 95       	ret

00000738 <refresh_oled>:
*
****************************************************************************/
void refresh_oled()
{
	uint16_t i;
	reset_position();
     738:	0e 94 8f 03 	call	0x71e	; 0x71e <reset_position>
     73c:	e0 e0       	ldi	r30, 0x00	; 0
     73e:	f8 e1       	ldi	r31, 0x18	; 24
*
****************************************************************************/
void write_d(uint8_t data)
{
	volatile uint8_t *ext_oled = (uint8_t *) OLED_DATA_BASE_ADDR;
	ext_oled[0] = data;
     740:	a0 e0       	ldi	r26, 0x00	; 0
     742:	b2 e1       	ldi	r27, 0x12	; 18
	volatile uint8_t *ext_ram = (uint8_t *) OLED_BASE_SRAM_ADDRESS;
	uint8_t oled_value;
	
	for (i = 0; i < OLED_ADDR_SPACE_LEN; i++)
	{
		oled_value = ext_ram[i];
     744:	81 91       	ld	r24, Z+
*
****************************************************************************/
void write_d(uint8_t data)
{
	volatile uint8_t *ext_oled = (uint8_t *) OLED_DATA_BASE_ADDR;
	ext_oled[0] = data;
     746:	8c 93       	st	X, r24
	uint16_t i;
	reset_position();
	volatile uint8_t *ext_ram = (uint8_t *) OLED_BASE_SRAM_ADDRESS;
	uint8_t oled_value;
	
	for (i = 0; i < OLED_ADDR_SPACE_LEN; i++)
     748:	e1 15       	cp	r30, r1
     74a:	8c e1       	ldi	r24, 0x1C	; 28
     74c:	f8 07       	cpc	r31, r24
     74e:	d1 f7       	brne	.-12     	; 0x744 <refresh_oled+0xc>
	{
		oled_value = ext_ram[i];
		write_d(oled_value);
	}
}
     750:	08 95       	ret

00000752 <clear_oled>:
/****************************************************************************
* \brief Clear OLED display
*
****************************************************************************/
void clear_oled()
{
     752:	e0 e0       	ldi	r30, 0x00	; 0
     754:	f8 e1       	ldi	r31, 0x18	; 24
	uint16_t i;
	volatile uint8_t *ext_ram = (uint8_t *) OLED_BASE_SRAM_ADDRESS;
	
	for (i = 0; i < OLED_ADDR_SPACE_LEN; i++)
	{
		ext_ram[i] = 0x00;
     756:	11 92       	st	Z+, r1
void clear_oled()
{
	uint16_t i;
	volatile uint8_t *ext_ram = (uint8_t *) OLED_BASE_SRAM_ADDRESS;
	
	for (i = 0; i < OLED_ADDR_SPACE_LEN; i++)
     758:	e1 15       	cp	r30, r1
     75a:	8c e1       	ldi	r24, 0x1C	; 28
     75c:	f8 07       	cpc	r31, r24
     75e:	d9 f7       	brne	.-10     	; 0x756 <clear_oled+0x4>
	{
		ext_ram[i] = 0x00;
	}
}
     760:	08 95       	ret

00000762 <set_pixel>:
****************************************************************************/
uint8_t set_pixel(uint8_t x,uint8_t y)
{
	volatile uint8_t *ext_ram = (uint8_t *) OLED_BASE_SRAM_ADDRESS;
	
	if (x > 127)
     762:	88 23       	and	r24, r24
     764:	e4 f0       	brlt	.+56     	; 0x79e <set_pixel+0x3c>
	{
		return 1;
	}
	else if (y > 64)
     766:	61 34       	cpi	r22, 0x41	; 65
     768:	e0 f4       	brcc	.+56     	; 0x7a2 <set_pixel+0x40>
	{
		return 1;
	}
	else
	{
		uint16_t page = y/8;
     76a:	e6 2f       	mov	r30, r22
     76c:	e6 95       	lsr	r30
     76e:	e6 95       	lsr	r30
     770:	e6 95       	lsr	r30
		uint16_t coloumn = page*128 + x;
     772:	40 e8       	ldi	r20, 0x80	; 128
     774:	e4 9f       	mul	r30, r20
     776:	f0 01       	movw	r30, r0
     778:	11 24       	eor	r1, r1
     77a:	e8 0f       	add	r30, r24
     77c:	f1 1d       	adc	r31, r1
		ext_ram[coloumn] |= (1 << (y % 8));
     77e:	f8 5e       	subi	r31, 0xE8	; 232
     780:	20 81       	ld	r18, Z
     782:	67 70       	andi	r22, 0x07	; 7
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	ac 01       	movw	r20, r24
     78a:	02 c0       	rjmp	.+4      	; 0x790 <set_pixel+0x2e>
     78c:	44 0f       	add	r20, r20
     78e:	55 1f       	adc	r21, r21
     790:	6a 95       	dec	r22
     792:	e2 f7       	brpl	.-8      	; 0x78c <set_pixel+0x2a>
     794:	ba 01       	movw	r22, r20
     796:	62 2b       	or	r22, r18
     798:	60 83       	st	Z, r22
	}
	return 0;
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	08 95       	ret
{
	volatile uint8_t *ext_ram = (uint8_t *) OLED_BASE_SRAM_ADDRESS;
	
	if (x > 127)
	{
		return 1;
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	08 95       	ret
	}
	else if (y > 64)
	{
		return 1;
     7a2:	81 e0       	ldi	r24, 0x01	; 1
		uint16_t page = y/8;
		uint16_t coloumn = page*128 + x;
		ext_ram[coloumn] |= (1 << (y % 8));
	}
	return 0;
}
     7a4:	08 95       	ret

000007a6 <unset_pixel>:
****************************************************************************/
uint8_t unset_pixel(uint8_t x, uint8_t y)
{
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	
	if (x > 127)
     7a6:	88 23       	and	r24, r24
     7a8:	ec f0       	brlt	.+58     	; 0x7e4 <unset_pixel+0x3e>
	{
		return 1;
	}
	else if (y > 64)
     7aa:	61 34       	cpi	r22, 0x41	; 65
     7ac:	e8 f4       	brcc	.+58     	; 0x7e8 <unset_pixel+0x42>
	{
		return 1;
	}
	else
	{
		uint16_t page = y/8;
     7ae:	e6 2f       	mov	r30, r22
     7b0:	e6 95       	lsr	r30
     7b2:	e6 95       	lsr	r30
     7b4:	e6 95       	lsr	r30
		uint16_t column = page * 128 + x;
     7b6:	40 e8       	ldi	r20, 0x80	; 128
     7b8:	e4 9f       	mul	r30, r20
     7ba:	f0 01       	movw	r30, r0
     7bc:	11 24       	eor	r1, r1
     7be:	e8 0f       	add	r30, r24
     7c0:	f1 1d       	adc	r31, r1
		ext_ram[column] &= ~(1 << (y % 8));
     7c2:	f8 5e       	subi	r31, 0xE8	; 232
     7c4:	20 81       	ld	r18, Z
     7c6:	67 70       	andi	r22, 0x07	; 7
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	ac 01       	movw	r20, r24
     7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <unset_pixel+0x2e>
     7d0:	44 0f       	add	r20, r20
     7d2:	55 1f       	adc	r21, r21
     7d4:	6a 95       	dec	r22
     7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <unset_pixel+0x2a>
     7d8:	ba 01       	movw	r22, r20
     7da:	60 95       	com	r22
     7dc:	62 23       	and	r22, r18
     7de:	60 83       	st	Z, r22
	}
	return 0;
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	08 95       	ret
{
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	
	if (x > 127)
	{
		return 1;
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	08 95       	ret
	}
	else if (y > 64)
	{
		return 1;
     7e8:	81 e0       	ldi	r24, 0x01	; 1
		uint16_t page = y/8;
		uint16_t column = page * 128 + x;
		ext_ram[column] &= ~(1 << (y % 8));
	}
	return 0;
}
     7ea:	08 95       	ret

000007ec <print_char>:
* \brief Print character on current position on OLED display
*
* \param in x Position of pixel that should be set
****************************************************************************/
void print_char(char character)
{
     7ec:	60 91 1e 04 	lds	r22, 0x041E
     7f0:	70 91 1f 04 	lds	r23, 0x041F
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	80 97       	sbiw	r24, 0x20	; 32
     7f8:	9c 01       	movw	r18, r24
     7fa:	22 0f       	add	r18, r18
     7fc:	33 1f       	adc	r19, r19
     7fe:	22 0f       	add	r18, r18
     800:	33 1f       	adc	r19, r19
     802:	82 0f       	add	r24, r18
     804:	93 1f       	adc	r25, r19
     806:	86 57       	subi	r24, 0x76	; 118
     808:	9f 4f       	sbci	r25, 0xFF	; 255
     80a:	db 01       	movw	r26, r22
     80c:	b8 5e       	subi	r27, 0xE8	; 232
     80e:	ab 01       	movw	r20, r22
     810:	4c 5f       	subi	r20, 0xFC	; 252
     812:	57 4e       	sbci	r21, 0xE7	; 231
	uint8_t i;
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
	
	for(i = 0; i < 4; i++)
	{
		ext_ram[position] = pgm_read_word_near(&(font[character-32][i]));
     814:	fc 01       	movw	r30, r24
     816:	25 91       	lpm	r18, Z+
     818:	34 91       	lpm	r19, Z
     81a:	2d 93       	st	X+, r18
     81c:	01 96       	adiw	r24, 0x01	; 1
void print_char(char character)
{
	uint8_t i;
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
	
	for(i = 0; i < 4; i++)
     81e:	a4 17       	cp	r26, r20
     820:	b5 07       	cpc	r27, r21
     822:	c1 f7       	brne	.-16     	; 0x814 <print_char+0x28>
     824:	6c 5f       	subi	r22, 0xFC	; 252
     826:	7f 4f       	sbci	r23, 0xFF	; 255
     828:	70 93 1f 04 	sts	0x041F, r23
     82c:	60 93 1e 04 	sts	0x041E, r22
     830:	08 95       	ret

00000832 <print_inverted_char>:
* \brief Print inverted character on current position on OLED display
*
* \param in x Position of pixel that should be set
****************************************************************************/
void print_inverted_char(char character)
{
     832:	60 91 1e 04 	lds	r22, 0x041E
     836:	70 91 1f 04 	lds	r23, 0x041F
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	80 97       	sbiw	r24, 0x20	; 32
     83e:	9c 01       	movw	r18, r24
     840:	22 0f       	add	r18, r18
     842:	33 1f       	adc	r19, r19
     844:	22 0f       	add	r18, r18
     846:	33 1f       	adc	r19, r19
     848:	82 0f       	add	r24, r18
     84a:	93 1f       	adc	r25, r19
     84c:	86 57       	subi	r24, 0x76	; 118
     84e:	9f 4f       	sbci	r25, 0xFF	; 255
     850:	db 01       	movw	r26, r22
     852:	b8 5e       	subi	r27, 0xE8	; 232
     854:	ab 01       	movw	r20, r22
     856:	4c 5f       	subi	r20, 0xFC	; 252
     858:	57 4e       	sbci	r21, 0xE7	; 231
	uint8_t i;
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
	
	for(i = 0; i < 4; i++)
	{
		ext_ram[position] = ~pgm_read_word_near(&(font[character-32][i]));
     85a:	fc 01       	movw	r30, r24
     85c:	25 91       	lpm	r18, Z+
     85e:	34 91       	lpm	r19, Z
     860:	20 95       	com	r18
     862:	2d 93       	st	X+, r18
     864:	01 96       	adiw	r24, 0x01	; 1
void print_inverted_char(char character)
{
	uint8_t i;
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
	
	for(i = 0; i < 4; i++)
     866:	a4 17       	cp	r26, r20
     868:	b5 07       	cpc	r27, r21
     86a:	b9 f7       	brne	.-18     	; 0x85a <print_inverted_char+0x28>
     86c:	6c 5f       	subi	r22, 0xFC	; 252
     86e:	7f 4f       	sbci	r23, 0xFF	; 255
     870:	70 93 1f 04 	sts	0x041F, r23
     874:	60 93 1e 04 	sts	0x041E, r22
     878:	08 95       	ret

0000087a <set_position>:
* \param in page Row on Y-axis
* \return Success/Failure
****************************************************************************/
uint8_t set_position(uint8_t column, uint8_t page)
{
	if (column > 32)
     87a:	81 32       	cpi	r24, 0x21	; 33
     87c:	90 f4       	brcc	.+36     	; 0x8a2 <set_position+0x28>
	{
		return 1;
	}
	else if (page > 8)
     87e:	69 30       	cpi	r22, 0x09	; 9
     880:	90 f4       	brcc	.+36     	; 0x8a6 <set_position+0x2c>
	{
		return 1;
	}
	
	position = page * 128 + column * 4;
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	20 e2       	ldi	r18, 0x20	; 32
     886:	62 9f       	mul	r22, r18
     888:	80 0d       	add	r24, r0
     88a:	91 1d       	adc	r25, r1
     88c:	11 24       	eor	r1, r1
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	88 0f       	add	r24, r24
     894:	99 1f       	adc	r25, r25
     896:	90 93 1f 04 	sts	0x041F, r25
     89a:	80 93 1e 04 	sts	0x041E, r24
	
	return 0;
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	08 95       	ret
****************************************************************************/
uint8_t set_position(uint8_t column, uint8_t page)
{
	if (column > 32)
	{
		return 1;
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	08 95       	ret
	}
	else if (page > 8)
	{
		return 1;
     8a6:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	position = page * 128 + column * 4;
	
	return 0;
}
     8a8:	08 95       	ret

000008aa <print_string>:
*
* \param in String that shall be printed
* \return Success/Failure
****************************************************************************/
uint8_t print_string(char* string)
{
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
	uint8_t i;
	uint8_t lenght  = strlen(string);
     8b2:	fc 01       	movw	r30, r24
     8b4:	01 90       	ld	r0, Z+
     8b6:	00 20       	and	r0, r0
     8b8:	e9 f7       	brne	.-6      	; 0x8b4 <print_string+0xa>
     8ba:	31 97       	sbiw	r30, 0x01	; 1
     8bc:	1e 2f       	mov	r17, r30
     8be:	18 1b       	sub	r17, r24
	for(i = 0; i < lenght; i++)
     8c0:	51 f0       	breq	.+20     	; 0x8d6 <print_string+0x2c>
     8c2:	08 2f       	mov	r16, r24
     8c4:	c0 2f       	mov	r28, r16
     8c6:	d9 2f       	mov	r29, r25
	{
		print_char(string[i]);
     8c8:	89 91       	ld	r24, Y+
     8ca:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
     8ce:	8c 2f       	mov	r24, r28
     8d0:	80 1b       	sub	r24, r16
****************************************************************************/
uint8_t print_string(char* string)
{
	uint8_t i;
	uint8_t lenght  = strlen(string);
	for(i = 0; i < lenght; i++)
     8d2:	81 17       	cp	r24, r17
     8d4:	c8 f3       	brcs	.-14     	; 0x8c8 <print_string+0x1e>
	{
		print_char(string[i]);
	}
	return 0;
}
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	08 95       	ret

000008e2 <revert_colour_line>:
void revert_colour_line(uint8_t line)
{
	uint8_t i;
	volatile uint8_t* ext_ram = (uint8_t*) OLED_BASE_SRAM_ADDRESS;
	
	for(i = (line * OLED_LINE_LENGTH_COLUMNS) + 2; i < ((line + 1) * OLED_LINE_LENGTH_COLUMNS); i++)
     8e2:	48 2f       	mov	r20, r24
     8e4:	47 95       	ror	r20
     8e6:	44 27       	eor	r20, r20
     8e8:	47 95       	ror	r20
     8ea:	4e 5f       	subi	r20, 0xFE	; 254
     8ec:	28 2f       	mov	r18, r24
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	2f 5f       	subi	r18, 0xFF	; 255
     8f2:	3f 4f       	sbci	r19, 0xFF	; 255
     8f4:	36 95       	lsr	r19
     8f6:	32 2f       	mov	r19, r18
     8f8:	22 27       	eor	r18, r18
     8fa:	37 95       	ror	r19
     8fc:	27 95       	ror	r18
     8fe:	84 2f       	mov	r24, r20
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	82 17       	cp	r24, r18
     904:	93 07       	cpc	r25, r19
     906:	6c f4       	brge	.+26     	; 0x922 <revert_colour_line+0x40>
	{
		ext_ram[i-1] = ~ext_ram[i-1];
     908:	e4 2f       	mov	r30, r20
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	e1 50       	subi	r30, 0x01	; 1
     90e:	f8 4e       	sbci	r31, 0xE8	; 232
     910:	80 81       	ld	r24, Z
     912:	80 95       	com	r24
     914:	80 83       	st	Z, r24
void revert_colour_line(uint8_t line)
{
	uint8_t i;
	volatile uint8_t* ext_ram = (uint8_t*) OLED_BASE_SRAM_ADDRESS;
	
	for(i = (line * OLED_LINE_LENGTH_COLUMNS) + 2; i < ((line + 1) * OLED_LINE_LENGTH_COLUMNS); i++)
     916:	4f 5f       	subi	r20, 0xFF	; 255
     918:	84 2f       	mov	r24, r20
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	82 17       	cp	r24, r18
     91e:	93 07       	cpc	r25, r19
     920:	9c f3       	brlt	.-26     	; 0x908 <revert_colour_line+0x26>
     922:	08 95       	ret

00000924 <end_game_animation>:
* \brief Make a end game animation
*
* \param in direction of the animation
****************************************************************************/
void end_game_animation(uint8_t dir)
{
     924:	ff 92       	push	r15
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	f8 2e       	mov	r15, r24
	uint8_t i;
	uint8_t start, end;
	start = dir == 0 ? 0 : OLED_WIDTH;
     930:	88 23       	and	r24, r24
     932:	19 f1       	breq	.+70     	; 0x97a <end_game_animation+0x56>
     934:	d0 e8       	ldi	r29, 0x80	; 128
	end = dir == 0 ? OLED_WIDTH : 0;
     936:	00 e0       	ldi	r16, 0x00	; 0
     938:	22 c0       	rjmp	.+68     	; 0x97e <end_game_animation+0x5a>
	
	while (start != end)
	{
		for (i = 0; i < OLED_HEIGHT; i++)
		{
			set_pixel(start, i);
     93a:	6c 2f       	mov	r22, r28
     93c:	8d 2f       	mov	r24, r29
     93e:	0e 94 b1 03 	call	0x762	; 0x762 <set_pixel>
	start = dir == 0 ? 0 : OLED_WIDTH;
	end = dir == 0 ? OLED_WIDTH : 0;
	
	while (start != end)
	{
		for (i = 0; i < OLED_HEIGHT; i++)
     942:	cf 5f       	subi	r28, 0xFF	; 255
     944:	c0 34       	cpi	r28, 0x40	; 64
     946:	c9 f7       	brne	.-14     	; 0x93a <end_game_animation+0x16>
		{
			set_pixel(start, i);
		}
		refresh_oled();
     948:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
		for (i = 0; i < OLED_HEIGHT; i++)
     94c:	c1 2f       	mov	r28, r17
		{
			unset_pixel(start, i);
     94e:	6c 2f       	mov	r22, r28
     950:	8d 2f       	mov	r24, r29
     952:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <unset_pixel>
		for (i = 0; i < OLED_HEIGHT; i++)
		{
			set_pixel(start, i);
		}
		refresh_oled();
		for (i = 0; i < OLED_HEIGHT; i++)
     956:	cf 5f       	subi	r28, 0xFF	; 255
     958:	c0 34       	cpi	r28, 0x40	; 64
     95a:	c9 f7       	brne	.-14     	; 0x94e <end_game_animation+0x2a>
		{
			unset_pixel(start, i);
		}
		start = dir == 0 ? start + 1 : start - 1;
     95c:	f1 10       	cpse	r15, r1
     95e:	02 c0       	rjmp	.+4      	; 0x964 <end_game_animation+0x40>
     960:	df 5f       	subi	r29, 0xFF	; 255
     962:	01 c0       	rjmp	.+2      	; 0x966 <end_game_animation+0x42>
     964:	d1 50       	subi	r29, 0x01	; 1
     966:	83 ec       	ldi	r24, 0xC3	; 195
     968:	99 e0       	ldi	r25, 0x09	; 9
     96a:	01 97       	sbiw	r24, 0x01	; 1
     96c:	f1 f7       	brne	.-4      	; 0x96a <end_game_animation+0x46>
     96e:	00 c0       	rjmp	.+0      	; 0x970 <end_game_animation+0x4c>
     970:	00 00       	nop
	uint8_t i;
	uint8_t start, end;
	start = dir == 0 ? 0 : OLED_WIDTH;
	end = dir == 0 ? OLED_WIDTH : 0;
	
	while (start != end)
     972:	0d 17       	cp	r16, r29
     974:	31 f0       	breq	.+12     	; 0x982 <end_game_animation+0x5e>
* \brief Make a end game animation
*
* \param in direction of the animation
****************************************************************************/
void end_game_animation(uint8_t dir)
{
     976:	c1 2f       	mov	r28, r17
     978:	e0 cf       	rjmp	.-64     	; 0x93a <end_game_animation+0x16>
	uint8_t i;
	uint8_t start, end;
	start = dir == 0 ? 0 : OLED_WIDTH;
     97a:	d0 e0       	ldi	r29, 0x00	; 0
	end = dir == 0 ? OLED_WIDTH : 0;
     97c:	00 e8       	ldi	r16, 0x80	; 128
* \brief Make a end game animation
*
* \param in direction of the animation
****************************************************************************/
void end_game_animation(uint8_t dir)
{
     97e:	10 e0       	ldi	r17, 0x00	; 0
     980:	fa cf       	rjmp	.-12     	; 0x976 <end_game_animation+0x52>
			unset_pixel(start, i);
		}
		start = dir == 0 ? start + 1 : start - 1;
		_delay_ms(10);
	}
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16
     98a:	ff 90       	pop	r15
     98c:	08 95       	ret

0000098e <init>:
* \brief Initialize all important peripherals and pins
*
****************************************************************************/
void init()
{
	USART_init(MYUBBR);
     98e:	8f e1       	ldi	r24, 0x1F	; 31
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <USART_init>
	/* Enables standard IO functions */
	fdevopen(USART_putchar, USART_getchar);
     996:	65 ef       	ldi	r22, 0xF5	; 245
     998:	77 e0       	ldi	r23, 0x07	; 7
     99a:	80 ef       	ldi	r24, 0xF0	; 240
     99c:	97 e0       	ldi	r25, 0x07	; 7
     99e:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <fdevopen>
	/* Enables external memory*/
	set_bit(MCUCR, SRE);
     9a2:	85 b7       	in	r24, 0x35	; 53
     9a4:	80 68       	ori	r24, 0x80	; 128
     9a6:	85 bf       	out	0x35, r24	; 53
	/* Pin 1 is set to output for the LED*/
	set_bit(DDRB, PB0);
     9a8:	b8 9a       	sbi	0x17, 0	; 23
	/* Pin is now driven LOW*/
	clear_bit(PORTB, PB0);
     9aa:	c0 98       	cbi	0x18, 0	; 24
	/* Initialize OLED display */
	init_oled();
     9ac:	0e 94 62 03 	call	0x6c4	; 0x6c4 <init_oled>
	timer1_init();
     9b0:	0e 94 a1 07 	call	0xf42	; 0xf42 <timer1_init>
	CAN_init();
     9b4:	0e 94 5d 01 	call	0x2ba	; 0x2ba <CAN_init>
	interface_init();
     9b8:	0e 94 f9 07 	call	0xff2	; 0xff2 <interface_init>
	clear_oled();
     9bc:	0e 94 a9 03 	call	0x752	; 0x752 <clear_oled>
	reset_position();
     9c0:	0e 94 8f 03 	call	0x71e	; 0x71e <reset_position>
	refresh_oled();
     9c4:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	sei();
     9c8:	78 94       	sei
     9ca:	08 95       	ret

000009cc <led_toggle>:
* \brief Toggles the led connected to pin 1 (PORTB, PB0)
*
****************************************************************************/
void led_toggle()
{
	if (test_bit(PINB, PB0))
     9cc:	b0 9b       	sbis	0x16, 0	; 22
     9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <led_toggle+0x8>
	{
		clear_bit(PORTB, PB0);
     9d0:	c0 98       	cbi	0x18, 0	; 24
     9d2:	08 95       	ret
	}
	else
	{
		set_bit(PORTB, PB0);
     9d4:	c0 9a       	sbi	0x18, 0	; 24
     9d6:	08 95       	ret

000009d8 <high_score_read>:
/****************************************************************************
* \brief Read high scores from EEPROM
*
****************************************************************************/
high_score high_score_read()
{
     9d8:	8f 92       	push	r8
     9da:	9f 92       	push	r9
     9dc:	af 92       	push	r10
     9de:	bf 92       	push	r11
     9e0:	cf 92       	push	r12
     9e2:	df 92       	push	r13
     9e4:	ef 92       	push	r14
     9e6:	ff 92       	push	r15
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	cd b7       	in	r28, 0x3d	; 61
     9f2:	de b7       	in	r29, 0x3e	; 62
     9f4:	a3 97       	sbiw	r28, 0x23	; 35
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	f8 94       	cli
     9fa:	de bf       	out	0x3e, r29	; 62
     9fc:	0f be       	out	0x3f, r0	; 63
     9fe:	cd bf       	out	0x3d, r28	; 61
     a00:	5c 01       	movw	r10, r24
     a02:	c1 2c       	mov	r12, r1
     a04:	d1 2c       	mov	r13, r1
     a06:	81 2c       	mov	r8, r1
     a08:	91 2c       	mov	r9, r1
     a0a:	14 c0       	rjmp	.+40     	; 0xa34 <high_score_read+0x5c>
	// Read usernames
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
	{
		for (j = 0; j < USERNAME_LENGTH; j++)
		{
			scores.username[i][j] = EEPROM_read(EEPROM_HIGH_SCORES_BASE_ADDR + i * USERNAME_LENGTH + j);
     a0c:	c8 01       	movw	r24, r16
     a0e:	8c 0d       	add	r24, r12
     a10:	9d 1d       	adc	r25, r13
     a12:	0e 94 4e 02 	call	0x49c	; 0x49c <EEPROM_read>
     a16:	f7 01       	movw	r30, r14
     a18:	81 93       	st	Z+, r24
     a1a:	7f 01       	movw	r14, r30
     a1c:	0f 5f       	subi	r16, 0xFF	; 255
     a1e:	1f 4f       	sbci	r17, 0xFF	; 255
	high_score scores;
	uint8_t i, j;
	// Read usernames
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
	{
		for (j = 0; j < USERNAME_LENGTH; j++)
     a20:	05 30       	cpi	r16, 0x05	; 5
     a22:	11 05       	cpc	r17, r1
     a24:	99 f7       	brne	.-26     	; 0xa0c <high_score_read+0x34>
     a26:	f5 e0       	ldi	r31, 0x05	; 5
     a28:	cf 0e       	add	r12, r31
     a2a:	d1 1c       	adc	r13, r1
high_score high_score_read()
{
	high_score scores;
	uint8_t i, j;
	// Read usernames
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
     a2c:	89 e1       	ldi	r24, 0x19	; 25
     a2e:	c8 16       	cp	r12, r24
     a30:	d1 04       	cpc	r13, r1
     a32:	51 f0       	breq	.+20     	; 0xa48 <high_score_read+0x70>
     a34:	ee 24       	eor	r14, r14
     a36:	e3 94       	inc	r14
     a38:	f1 2c       	mov	r15, r1
     a3a:	ec 0e       	add	r14, r28
     a3c:	fd 1e       	adc	r15, r29
     a3e:	ec 0c       	add	r14, r12
     a40:	fd 1c       	adc	r15, r13
/****************************************************************************
* \brief Read high scores from EEPROM
*
****************************************************************************/
high_score high_score_read()
{
     a42:	08 2d       	mov	r16, r8
     a44:	19 2d       	mov	r17, r9
     a46:	e2 cf       	rjmp	.-60     	; 0xa0c <high_score_read+0x34>
     a48:	7e 01       	movw	r14, r28
     a4a:	ea e1       	ldi	r30, 0x1A	; 26
     a4c:	ee 0e       	add	r14, r30
     a4e:	f1 1c       	adc	r15, r1
	high_score scores;
	uint8_t i, j;
	// Read usernames
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
     a50:	09 e1       	ldi	r16, 0x19	; 25
     a52:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	// Read high scores
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
	{
		scores.score[i] = (uint16_t) EEPROM_read(EEPROM_HIGH_SCORES_BASE_ADDR + HIGH_SCORES_TABLE_LENGTH * USERNAME_LENGTH + (2 * i));
     a54:	c8 01       	movw	r24, r16
     a56:	0e 94 4e 02 	call	0x49c	; 0x49c <EEPROM_read>
     a5a:	d8 2e       	mov	r13, r24
		scores.score[i] <<= 8;
		scores.score[i] |= (uint16_t) EEPROM_read(EEPROM_HIGH_SCORES_BASE_ADDR + HIGH_SCORES_TABLE_LENGTH * USERNAME_LENGTH + (2 * i) + 1);
     a5c:	c8 01       	movw	r24, r16
     a5e:	01 96       	adiw	r24, 0x01	; 1
     a60:	0e 94 4e 02 	call	0x49c	; 0x49c <EEPROM_read>
		}
	}
	// Read high scores
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
	{
		scores.score[i] = (uint16_t) EEPROM_read(EEPROM_HIGH_SCORES_BASE_ADDR + HIGH_SCORES_TABLE_LENGTH * USERNAME_LENGTH + (2 * i));
     a64:	2d 2d       	mov	r18, r13
     a66:	30 e0       	ldi	r19, 0x00	; 0
		scores.score[i] <<= 8;
     a68:	32 2f       	mov	r19, r18
     a6a:	22 27       	eor	r18, r18
		scores.score[i] |= (uint16_t) EEPROM_read(EEPROM_HIGH_SCORES_BASE_ADDR + HIGH_SCORES_TABLE_LENGTH * USERNAME_LENGTH + (2 * i) + 1);
     a6c:	28 2b       	or	r18, r24
     a6e:	f7 01       	movw	r30, r14
     a70:	21 93       	st	Z+, r18
     a72:	31 93       	st	Z+, r19
     a74:	7f 01       	movw	r14, r30
     a76:	0e 5f       	subi	r16, 0xFE	; 254
     a78:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			scores.username[i][j] = EEPROM_read(EEPROM_HIGH_SCORES_BASE_ADDR + i * USERNAME_LENGTH + j);
		}
	}
	// Read high scores
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
     a7a:	03 32       	cpi	r16, 0x23	; 35
     a7c:	11 05       	cpc	r17, r1
     a7e:	51 f7       	brne	.-44     	; 0xa54 <high_score_read+0x7c>
		scores.score[i] = (uint16_t) EEPROM_read(EEPROM_HIGH_SCORES_BASE_ADDR + HIGH_SCORES_TABLE_LENGTH * USERNAME_LENGTH + (2 * i));
		scores.score[i] <<= 8;
		scores.score[i] |= (uint16_t) EEPROM_read(EEPROM_HIGH_SCORES_BASE_ADDR + HIGH_SCORES_TABLE_LENGTH * USERNAME_LENGTH + (2 * i) + 1);
	}
	
	return scores;
     a80:	83 e2       	ldi	r24, 0x23	; 35
     a82:	fe 01       	movw	r30, r28
     a84:	31 96       	adiw	r30, 0x01	; 1
     a86:	d5 01       	movw	r26, r10
     a88:	01 90       	ld	r0, Z+
     a8a:	0d 92       	st	X+, r0
     a8c:	8a 95       	dec	r24
     a8e:	e1 f7       	brne	.-8      	; 0xa88 <high_score_read+0xb0>
}
     a90:	c5 01       	movw	r24, r10
     a92:	a3 96       	adiw	r28, 0x23	; 35
     a94:	0f b6       	in	r0, 0x3f	; 63
     a96:	f8 94       	cli
     a98:	de bf       	out	0x3e, r29	; 62
     a9a:	0f be       	out	0x3f, r0	; 63
     a9c:	cd bf       	out	0x3d, r28	; 61
     a9e:	df 91       	pop	r29
     aa0:	cf 91       	pop	r28
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	df 90       	pop	r13
     aac:	cf 90       	pop	r12
     aae:	bf 90       	pop	r11
     ab0:	af 90       	pop	r10
     ab2:	9f 90       	pop	r9
     ab4:	8f 90       	pop	r8
     ab6:	08 95       	ret

00000ab8 <high_score_write>:
* \brief Write high scores to EEPROM
* \param in High scores
*
****************************************************************************/
void high_score_write(high_score scores)
{
     ab8:	8f 92       	push	r8
     aba:	9f 92       	push	r9
     abc:	af 92       	push	r10
     abe:	bf 92       	push	r11
     ac0:	cf 92       	push	r12
     ac2:	df 92       	push	r13
     ac4:	ef 92       	push	r14
     ac6:	ff 92       	push	r15
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	cd b7       	in	r28, 0x3d	; 61
     ad2:	de b7       	in	r29, 0x3e	; 62
     ad4:	ce 01       	movw	r24, r28
     ad6:	0f 96       	adiw	r24, 0x0f	; 15
     ad8:	5c 01       	movw	r10, r24
     ada:	c1 2c       	mov	r12, r1
     adc:	d1 2c       	mov	r13, r1
     ade:	81 2c       	mov	r8, r1
     ae0:	91 2c       	mov	r9, r1
     ae2:	17 c0       	rjmp	.+46     	; 0xb12 <high_score_write+0x5a>
	// Write usernames
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
	{
		for (j = 0; j < USERNAME_LENGTH; j++)
		{
			EEPROM_write(EEPROM_HIGH_SCORES_BASE_ADDR + i * USERNAME_LENGTH + j, scores.username[i][j]);
     ae4:	f7 01       	movw	r30, r14
     ae6:	61 91       	ld	r22, Z+
     ae8:	7f 01       	movw	r14, r30
     aea:	c8 01       	movw	r24, r16
     aec:	8c 0d       	add	r24, r12
     aee:	9d 1d       	adc	r25, r13
     af0:	0e 94 46 02 	call	0x48c	; 0x48c <EEPROM_write>
     af4:	0f 5f       	subi	r16, 0xFF	; 255
     af6:	1f 4f       	sbci	r17, 0xFF	; 255
{
	uint8_t i, j;
	// Write usernames
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
	{
		for (j = 0; j < USERNAME_LENGTH; j++)
     af8:	05 30       	cpi	r16, 0x05	; 5
     afa:	11 05       	cpc	r17, r1
     afc:	99 f7       	brne	.-26     	; 0xae4 <high_score_write+0x2c>
     afe:	f5 e0       	ldi	r31, 0x05	; 5
     b00:	af 0e       	add	r10, r31
     b02:	b1 1c       	adc	r11, r1
     b04:	85 e0       	ldi	r24, 0x05	; 5
     b06:	c8 0e       	add	r12, r24
     b08:	d1 1c       	adc	r13, r1
****************************************************************************/
void high_score_write(high_score scores)
{
	uint8_t i, j;
	// Write usernames
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
     b0a:	99 e1       	ldi	r25, 0x19	; 25
     b0c:	c9 16       	cp	r12, r25
     b0e:	d1 04       	cpc	r13, r1
     b10:	21 f0       	breq	.+8      	; 0xb1a <high_score_write+0x62>
* \brief Write high scores to EEPROM
* \param in High scores
*
****************************************************************************/
void high_score_write(high_score scores)
{
     b12:	75 01       	movw	r14, r10
     b14:	08 2d       	mov	r16, r8
     b16:	19 2d       	mov	r17, r9
     b18:	e5 cf       	rjmp	.-54     	; 0xae4 <high_score_write+0x2c>
     b1a:	7e 01       	movw	r14, r28
     b1c:	e8 e2       	ldi	r30, 0x28	; 40
     b1e:	ee 0e       	add	r14, r30
     b20:	f1 1c       	adc	r15, r1
	uint8_t i, j;
	// Write usernames
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
     b22:	09 e1       	ldi	r16, 0x19	; 25
     b24:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	// Write high scores
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
	{
		EEPROM_write(EEPROM_HIGH_SCORES_BASE_ADDR + HIGH_SCORES_TABLE_LENGTH * USERNAME_LENGTH + (2 * i), (uint8_t) ((scores.score[i] >> 8) & 0xFF));
     b26:	f7 01       	movw	r30, r14
     b28:	d0 80       	ld	r13, Z
     b2a:	61 81       	ldd	r22, Z+1	; 0x01
     b2c:	f2 e0       	ldi	r31, 0x02	; 2
     b2e:	ef 0e       	add	r14, r31
     b30:	f1 1c       	adc	r15, r1
     b32:	c8 01       	movw	r24, r16
     b34:	0e 94 46 02 	call	0x48c	; 0x48c <EEPROM_write>
		EEPROM_write(EEPROM_HIGH_SCORES_BASE_ADDR + HIGH_SCORES_TABLE_LENGTH * USERNAME_LENGTH + (2 * i) + 1, (uint8_t) (scores.score[i] & 0xFF));
     b38:	6d 2d       	mov	r22, r13
     b3a:	c8 01       	movw	r24, r16
     b3c:	01 96       	adiw	r24, 0x01	; 1
     b3e:	0e 94 46 02 	call	0x48c	; 0x48c <EEPROM_write>
     b42:	0e 5f       	subi	r16, 0xFE	; 254
     b44:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			EEPROM_write(EEPROM_HIGH_SCORES_BASE_ADDR + i * USERNAME_LENGTH + j, scores.username[i][j]);
		}
	}
	// Write high scores
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
     b46:	03 32       	cpi	r16, 0x23	; 35
     b48:	11 05       	cpc	r17, r1
     b4a:	69 f7       	brne	.-38     	; 0xb26 <high_score_write+0x6e>
	{
		EEPROM_write(EEPROM_HIGH_SCORES_BASE_ADDR + HIGH_SCORES_TABLE_LENGTH * USERNAME_LENGTH + (2 * i), (uint8_t) ((scores.score[i] >> 8) & 0xFF));
		EEPROM_write(EEPROM_HIGH_SCORES_BASE_ADDR + HIGH_SCORES_TABLE_LENGTH * USERNAME_LENGTH + (2 * i) + 1, (uint8_t) (scores.score[i] & 0xFF));
	}
}
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	ff 90       	pop	r15
     b56:	ef 90       	pop	r14
     b58:	df 90       	pop	r13
     b5a:	cf 90       	pop	r12
     b5c:	bf 90       	pop	r11
     b5e:	af 90       	pop	r10
     b60:	9f 90       	pop	r9
     b62:	8f 90       	pop	r8
     b64:	08 95       	ret

00000b66 <SRAM_high_score_write>:
/****************************************************************************
* \brief Rewrite high scores from EEPROM to SRAM
*
****************************************************************************/
void SRAM_high_score_write()
{
     b66:	2f 92       	push	r2
     b68:	3f 92       	push	r3
     b6a:	4f 92       	push	r4
     b6c:	5f 92       	push	r5
     b6e:	6f 92       	push	r6
     b70:	7f 92       	push	r7
     b72:	8f 92       	push	r8
     b74:	9f 92       	push	r9
     b76:	af 92       	push	r10
     b78:	bf 92       	push	r11
     b7a:	cf 92       	push	r12
     b7c:	df 92       	push	r13
     b7e:	ef 92       	push	r14
     b80:	ff 92       	push	r15
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
     b8e:	ac 97       	sbiw	r28, 0x2c	; 44
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	f8 94       	cli
     b94:	de bf       	out	0x3e, r29	; 62
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	cd bf       	out	0x3d, r28	; 61
	volatile uint8_t* high_scores_sram = (uint8_t*) SRAM_HIGH_SCORES_ADDR;
	char buffer[6];
	uint8_t len, i, j;
	high_score scores = high_score_read();
     b9a:	ce 01       	movw	r24, r28
     b9c:	07 96       	adiw	r24, 0x07	; 7
     b9e:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <high_score_read>
     ba2:	3e 01       	movw	r6, r28
     ba4:	20 e2       	ldi	r18, 0x20	; 32
     ba6:	62 0e       	add	r6, r18
     ba8:	71 1c       	adc	r7, r1
     baa:	ce 01       	movw	r24, r28
     bac:	07 96       	adiw	r24, 0x07	; 7
     bae:	2c 01       	movw	r4, r24
     bb0:	c1 2c       	mov	r12, r1
     bb2:	d1 2c       	mov	r13, r1
     bb4:	08 e0       	ldi	r16, 0x08	; 8
     bb6:	10 e0       	ldi	r17, 0x00	; 0
	
	for(i = 0; i < HIGH_SCORES_TABLE_LENGTH; i ++)
	{
		snprintf(buffer, 6, "%u", scores.score[i]);
     bb8:	de 01       	movw	r26, r28
     bba:	11 96       	adiw	r26, 0x01	; 1
     bbc:	7d 01       	movw	r14, r26
		len = strlen(buffer);
     bbe:	a1 2c       	mov	r10, r1
     bc0:	91 2c       	mov	r9, r1
		for (j = 0; j < USERNAME_LENGTH; j++)
		{
			high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + j] = scores.username[i][j];
		}
		
		high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH] = ' ';
     bc2:	68 94       	set
     bc4:	bb 24       	eor	r11, r11
     bc6:	b5 f8       	bld	r11, 5
		high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH + 1] = ' ';
		high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH + 2] = ' ';
		
		for (j = 0; j < (5 - len); j ++)
     bc8:	0f 2e       	mov	r0, r31
     bca:	f5 e0       	ldi	r31, 0x05	; 5
     bcc:	2f 2e       	mov	r2, r31
     bce:	31 2c       	mov	r3, r1
     bd0:	f0 2d       	mov	r31, r0
		{
			high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH + 3 + j] = ' ';
		}
		
		
		for (j = 0; j < len; j++)
     bd2:	ac a7       	std	Y+44, r26	; 0x2c
     bd4:	8f 2c       	mov	r8, r15
     bd6:	8d e0       	ldi	r24, 0x0D	; 13
     bd8:	9c e1       	ldi	r25, 0x1C	; 28
     bda:	fc 01       	movw	r30, r24
     bdc:	ea 1b       	sub	r30, r26
     bde:	fb 0b       	sbc	r31, r27
     be0:	fb a7       	std	Y+43, r31	; 0x2b
     be2:	ea a7       	std	Y+42, r30	; 0x2a
	uint8_t len, i, j;
	high_score scores = high_score_read();
	
	for(i = 0; i < HIGH_SCORES_TABLE_LENGTH; i ++)
	{
		snprintf(buffer, 6, "%u", scores.score[i]);
     be4:	d3 01       	movw	r26, r6
     be6:	8c 91       	ld	r24, X
     be8:	11 96       	adiw	r26, 0x01	; 1
     bea:	9c 91       	ld	r25, X
     bec:	b2 e0       	ldi	r27, 0x02	; 2
     bee:	6b 0e       	add	r6, r27
     bf0:	71 1c       	adc	r7, r1
     bf2:	9f 93       	push	r25
     bf4:	8f 93       	push	r24
     bf6:	a5 e1       	ldi	r26, 0x15	; 21
     bf8:	b2 e0       	ldi	r27, 0x02	; 2
     bfa:	bf 93       	push	r27
     bfc:	af 93       	push	r26
     bfe:	1f 92       	push	r1
     c00:	f6 e0       	ldi	r31, 0x06	; 6
     c02:	ff 93       	push	r31
     c04:	ff 92       	push	r15
     c06:	ef 92       	push	r14
     c08:	0e 94 53 10 	call	0x20a6	; 0x20a6 <snprintf>
		len = strlen(buffer);
     c0c:	f7 01       	movw	r30, r14
     c0e:	01 90       	ld	r0, Z+
     c10:	00 20       	and	r0, r0
     c12:	e9 f7       	brne	.-6      	; 0xc0e <SRAM_high_score_write+0xa8>
     c14:	31 97       	sbiw	r30, 0x01	; 1
     c16:	af 01       	movw	r20, r30
     c18:	4e 19       	sub	r20, r14
     c1a:	5f 09       	sbc	r21, r15
     c1c:	64 2f       	mov	r22, r20
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	f8 94       	cli
     c22:	de bf       	out	0x3e, r29	; 62
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	cd bf       	out	0x3d, r28	; 61
     c28:	f2 01       	movw	r30, r4
     c2a:	8a 2d       	mov	r24, r10
     c2c:	99 2d       	mov	r25, r9
     c2e:	96 01       	movw	r18, r12
     c30:	2b 5f       	subi	r18, 0xFB	; 251
     c32:	33 4e       	sbci	r19, 0xE3	; 227
     c34:	d9 01       	movw	r26, r18
     c36:	a8 0f       	add	r26, r24
     c38:	b9 1f       	adc	r27, r25
		
		for (j = 0; j < USERNAME_LENGTH; j++)
		{
			high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + j] = scores.username[i][j];
     c3a:	71 91       	ld	r23, Z+
     c3c:	7c 93       	st	X, r23
     c3e:	01 96       	adiw	r24, 0x01	; 1
	for(i = 0; i < HIGH_SCORES_TABLE_LENGTH; i ++)
	{
		snprintf(buffer, 6, "%u", scores.score[i]);
		len = strlen(buffer);
		
		for (j = 0; j < USERNAME_LENGTH; j++)
     c40:	85 30       	cpi	r24, 0x05	; 5
     c42:	91 05       	cpc	r25, r1
     c44:	b9 f7       	brne	.-18     	; 0xc34 <SRAM_high_score_write+0xce>
     c46:	f6 01       	movw	r30, r12
     c48:	e6 5f       	subi	r30, 0xF6	; 246
     c4a:	f3 4e       	sbci	r31, 0xE3	; 227
		{
			high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + j] = scores.username[i][j];
		}
		
		high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH] = ' ';
     c4c:	b0 82       	st	Z, r11
     c4e:	31 96       	adiw	r30, 0x01	; 1
		high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH + 1] = ' ';
     c50:	b0 82       	st	Z, r11
     c52:	31 96       	adiw	r30, 0x01	; 1
		high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH + 2] = ' ';
     c54:	b0 82       	st	Z, r11
		
		for (j = 0; j < (5 - len); j ++)
     c56:	c1 01       	movw	r24, r2
     c58:	84 1b       	sub	r24, r20
     c5a:	91 09       	sbc	r25, r1
     c5c:	18 16       	cp	r1, r24
     c5e:	19 06       	cpc	r1, r25
     c60:	7c f4       	brge	.+30     	; 0xc80 <SRAM_high_score_write+0x11a>
     c62:	2a 2d       	mov	r18, r10
     c64:	39 2d       	mov	r19, r9
     c66:	40 e0       	ldi	r20, 0x00	; 0
		{
			high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH + 3 + j] = ' ';
     c68:	20 0f       	add	r18, r16
     c6a:	31 1f       	adc	r19, r17
     c6c:	f9 01       	movw	r30, r18
     c6e:	eb 5f       	subi	r30, 0xFB	; 251
     c70:	f3 4e       	sbci	r31, 0xE3	; 227
     c72:	b0 82       	st	Z, r11
		
		high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH] = ' ';
		high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH + 1] = ' ';
		high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH + 2] = ' ';
		
		for (j = 0; j < (5 - len); j ++)
     c74:	4f 5f       	subi	r20, 0xFF	; 255
     c76:	24 2f       	mov	r18, r20
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	28 17       	cp	r18, r24
     c7c:	39 07       	cpc	r19, r25
     c7e:	a4 f3       	brlt	.-24     	; 0xc68 <SRAM_high_score_write+0x102>
		{
			high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH + 3 + j] = ' ';
		}
		
		
		for (j = 0; j < len; j++)
     c80:	66 23       	and	r22, r22
     c82:	89 f0       	breq	.+34     	; 0xca6 <SRAM_high_score_write+0x140>
     c84:	ec a5       	ldd	r30, Y+44	; 0x2c
     c86:	f8 2d       	mov	r31, r8
     c88:	2a a5       	ldd	r18, Y+42	; 0x2a
     c8a:	3b a5       	ldd	r19, Y+43	; 0x2b
     c8c:	2c 0d       	add	r18, r12
     c8e:	3d 1d       	adc	r19, r13
     c90:	82 0f       	add	r24, r18
     c92:	93 1f       	adc	r25, r19
     c94:	dc 01       	movw	r26, r24
     c96:	ae 0f       	add	r26, r30
     c98:	bf 1f       	adc	r27, r31
		{
			high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH + 3 + (5 - len) + j] = buffer[j];
     c9a:	21 91       	ld	r18, Z+
     c9c:	2c 93       	st	X, r18
     c9e:	2e 2f       	mov	r18, r30
     ca0:	2e 19       	sub	r18, r14
		{
			high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH + 3 + j] = ' ';
		}
		
		
		for (j = 0; j < len; j++)
     ca2:	26 17       	cp	r18, r22
     ca4:	b8 f3       	brcs	.-18     	; 0xc94 <SRAM_high_score_write+0x12e>
     ca6:	03 5f       	subi	r16, 0xF3	; 243
     ca8:	1f 4f       	sbci	r17, 0xFF	; 255
     caa:	3d e0       	ldi	r19, 0x0D	; 13
     cac:	c3 0e       	add	r12, r19
     cae:	d1 1c       	adc	r13, r1
     cb0:	85 e0       	ldi	r24, 0x05	; 5
     cb2:	48 0e       	add	r4, r24
     cb4:	51 1c       	adc	r5, r1
	volatile uint8_t* high_scores_sram = (uint8_t*) SRAM_HIGH_SCORES_ADDR;
	char buffer[6];
	uint8_t len, i, j;
	high_score scores = high_score_read();
	
	for(i = 0; i < HIGH_SCORES_TABLE_LENGTH; i ++)
     cb6:	91 e4       	ldi	r25, 0x41	; 65
     cb8:	c9 16       	cp	r12, r25
     cba:	d1 04       	cpc	r13, r1
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <SRAM_high_score_write+0x15a>
     cbe:	92 cf       	rjmp	.-220    	; 0xbe4 <SRAM_high_score_write+0x7e>
		for (j = 0; j < len; j++)
		{
			high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH + 3 + (5 - len) + j] = buffer[j];
		}
	}
}
     cc0:	ac 96       	adiw	r28, 0x2c	; 44
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	f8 94       	cli
     cc6:	de bf       	out	0x3e, r29	; 62
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	cd bf       	out	0x3d, r28	; 61
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	1f 91       	pop	r17
     cd2:	0f 91       	pop	r16
     cd4:	ff 90       	pop	r15
     cd6:	ef 90       	pop	r14
     cd8:	df 90       	pop	r13
     cda:	cf 90       	pop	r12
     cdc:	bf 90       	pop	r11
     cde:	af 90       	pop	r10
     ce0:	9f 90       	pop	r9
     ce2:	8f 90       	pop	r8
     ce4:	7f 90       	pop	r7
     ce6:	6f 90       	pop	r6
     ce8:	5f 90       	pop	r5
     cea:	4f 90       	pop	r4
     cec:	3f 90       	pop	r3
     cee:	2f 90       	pop	r2
     cf0:	08 95       	ret

00000cf2 <high_score_add>:
* \param in Username
* \param in Score
* \param out 0 if addition wasn't successful else position of new high score
****************************************************************************/
uint8_t high_score_add(char* name, uint16_t new_score)
{
     cf2:	bf 92       	push	r11
     cf4:	cf 92       	push	r12
     cf6:	df 92       	push	r13
     cf8:	ef 92       	push	r14
     cfa:	ff 92       	push	r15
     cfc:	0f 93       	push	r16
     cfe:	1f 93       	push	r17
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
     d08:	a3 97       	sbiw	r28, 0x23	; 35
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	f8 94       	cli
     d0e:	de bf       	out	0x3e, r29	; 62
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	cd bf       	out	0x3d, r28	; 61
     d14:	d8 2e       	mov	r13, r24
     d16:	e9 2e       	mov	r14, r25
     d18:	8b 01       	movw	r16, r22
	uint8_t i, j, k;
	high_score scores = high_score_read();
     d1a:	ce 01       	movw	r24, r28
     d1c:	01 96       	adiw	r24, 0x01	; 1
     d1e:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <high_score_read>
	
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
	{
		if (new_score > scores.score[i])
     d22:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d24:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d26:	80 17       	cp	r24, r16
     d28:	91 07       	cpc	r25, r17
     d2a:	88 f4       	brcc	.+34     	; 0xd4e <high_score_add+0x5c>
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	90 e0       	ldi	r25, 0x00	; 0
uint8_t high_score_add(char* name, uint16_t new_score)
{
	uint8_t i, j, k;
	high_score scores = high_score_read();
	
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
     d30:	f1 2c       	mov	r15, r1
     d32:	ae 01       	movw	r20, r28
     d34:	4e 5d       	subi	r20, 0xDE	; 222
     d36:	5f 4f       	sbci	r21, 0xFF	; 255
     d38:	9e 01       	movw	r18, r28
     d3a:	20 5f       	subi	r18, 0xF0	; 240
     d3c:	3f 4f       	sbci	r19, 0xFF	; 255
     d3e:	68 94       	set
     d40:	cc 24       	eor	r12, r12
     d42:	c2 f8       	bld	r12, 2
	{
		if (new_score > scores.score[i])
		{
			for (j = HIGH_SCORES_TABLE_LENGTH - 1; j > i; j--)
			{
				scores.score[j] = scores.score[j - 1];
     d44:	0f 2e       	mov	r0, r31
     d46:	f5 e0       	ldi	r31, 0x05	; 5
     d48:	bf 2e       	mov	r11, r31
     d4a:	f0 2d       	mov	r31, r0
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <high_score_add+0x7c>
     d4e:	fe 01       	movw	r30, r28
     d50:	7c 96       	adiw	r30, 0x1c	; 28
	uint8_t i, j, k;
	high_score scores = high_score_read();
	
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
	{
		if (new_score > scores.score[i])
     d52:	21 e0       	ldi	r18, 0x01	; 1
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	f2 2e       	mov	r15, r18
     d58:	c9 01       	movw	r24, r18
     d5a:	41 91       	ld	r20, Z+
     d5c:	51 91       	ld	r21, Z+
     d5e:	40 17       	cp	r20, r16
     d60:	51 07       	cpc	r21, r17
     d62:	08 f0       	brcs	.+2      	; 0xd66 <high_score_add+0x74>
     d64:	51 c0       	rjmp	.+162    	; 0xe08 <high_score_add+0x116>
		{
			for (j = HIGH_SCORES_TABLE_LENGTH - 1; j > i; j--)
     d66:	23 e0       	ldi	r18, 0x03	; 3
     d68:	2f 15       	cp	r18, r15
     d6a:	18 f7       	brcc	.-58     	; 0xd32 <high_score_add+0x40>
     d6c:	13 c0       	rjmp	.+38     	; 0xd94 <high_score_add+0xa2>
			{
				scores.score[j] = scores.score[j - 1];
     d6e:	fa 01       	movw	r30, r20
     d70:	72 91       	ld	r23, -Z
     d72:	62 91       	ld	r22, -Z
     d74:	af 01       	movw	r20, r30
     d76:	73 83       	std	Z+3, r23	; 0x03
     d78:	62 83       	std	Z+2, r22	; 0x02
     d7a:	d9 01       	movw	r26, r18
     d7c:	15 96       	adiw	r26, 0x05	; 5
     d7e:	f9 01       	movw	r30, r18
     d80:	6b 2d       	mov	r22, r11
				for (k = 0; k < USERNAME_LENGTH; k++)
				{
					scores.username[j][k] = scores.username[j - 1][k];
     d82:	71 91       	ld	r23, Z+
     d84:	7d 93       	st	X+, r23
     d86:	61 50       	subi	r22, 0x01	; 1
		if (new_score > scores.score[i])
		{
			for (j = HIGH_SCORES_TABLE_LENGTH - 1; j > i; j--)
			{
				scores.score[j] = scores.score[j - 1];
				for (k = 0; k < USERNAME_LENGTH; k++)
     d88:	e1 f7       	brne	.-8      	; 0xd82 <high_score_add+0x90>
	
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
	{
		if (new_score > scores.score[i])
		{
			for (j = HIGH_SCORES_TABLE_LENGTH - 1; j > i; j--)
     d8a:	ca 94       	dec	r12
     d8c:	25 50       	subi	r18, 0x05	; 5
     d8e:	31 09       	sbc	r19, r1
     d90:	fc 14       	cp	r15, r12
     d92:	68 f3       	brcs	.-38     	; 0xd6e <high_score_add+0x7c>
				for (k = 0; k < USERNAME_LENGTH; k++)
				{
					scores.username[j][k] = scores.username[j - 1][k];
				}
			}
			scores.score[i] = new_score;
     d94:	fc 01       	movw	r30, r24
     d96:	ee 0f       	add	r30, r30
     d98:	ff 1f       	adc	r31, r31
     d9a:	21 e0       	ldi	r18, 0x01	; 1
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	2c 0f       	add	r18, r28
     da0:	3d 1f       	adc	r19, r29
     da2:	e2 0f       	add	r30, r18
     da4:	f3 1f       	adc	r31, r19
     da6:	12 8f       	std	Z+26, r17	; 0x1a
     da8:	01 8f       	std	Z+25, r16	; 0x19
     daa:	ed 2d       	mov	r30, r13
     dac:	fe 2d       	mov	r31, r14
     dae:	dc 01       	movw	r26, r24
     db0:	aa 0f       	add	r26, r26
     db2:	bb 1f       	adc	r27, r27
     db4:	aa 0f       	add	r26, r26
     db6:	bb 1f       	adc	r27, r27
     db8:	8a 0f       	add	r24, r26
     dba:	9b 1f       	adc	r25, r27
     dbc:	d9 01       	movw	r26, r18
     dbe:	a8 0f       	add	r26, r24
     dc0:	b9 1f       	adc	r27, r25
     dc2:	85 e0       	ldi	r24, 0x05	; 5
			for (k = 0; k < USERNAME_LENGTH; k++)
			{
				scores.username[i][k] = name[k];
     dc4:	91 91       	ld	r25, Z+
     dc6:	9d 93       	st	X+, r25
     dc8:	81 50       	subi	r24, 0x01	; 1
				{
					scores.username[j][k] = scores.username[j - 1][k];
				}
			}
			scores.score[i] = new_score;
			for (k = 0; k < USERNAME_LENGTH; k++)
     dca:	e1 f7       	brne	.-8      	; 0xdc4 <high_score_add+0xd2>
			{
				scores.username[i][k] = name[k];
			}
			high_score_write(scores);
     dcc:	8d b7       	in	r24, 0x3d	; 61
     dce:	9e b7       	in	r25, 0x3e	; 62
     dd0:	83 97       	sbiw	r24, 0x23	; 35
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	f8 94       	cli
     dd6:	9e bf       	out	0x3e, r25	; 62
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	8d bf       	out	0x3d, r24	; 61
     ddc:	ad b7       	in	r26, 0x3d	; 61
     dde:	be b7       	in	r27, 0x3e	; 62
     de0:	11 96       	adiw	r26, 0x01	; 1
     de2:	83 e2       	ldi	r24, 0x23	; 35
     de4:	fe 01       	movw	r30, r28
     de6:	31 96       	adiw	r30, 0x01	; 1
     de8:	01 90       	ld	r0, Z+
     dea:	0d 92       	st	X+, r0
     dec:	8a 95       	dec	r24
     dee:	e1 f7       	brne	.-8      	; 0xde8 <high_score_add+0xf6>
     df0:	0e 94 5c 05 	call	0xab8	; 0xab8 <high_score_write>
			SRAM_high_score_write();
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	cd bf       	out	0x3d, r28	; 61
     dfe:	0e 94 b3 05 	call	0xb66	; 0xb66 <SRAM_high_score_write>
			return i + 1;
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	8f 0d       	add	r24, r15
     e06:	07 c0       	rjmp	.+14     	; 0xe16 <high_score_add+0x124>
     e08:	2f 5f       	subi	r18, 0xFF	; 255
     e0a:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t high_score_add(char* name, uint16_t new_score)
{
	uint8_t i, j, k;
	high_score scores = high_score_read();
	
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
     e0c:	25 30       	cpi	r18, 0x05	; 5
     e0e:	31 05       	cpc	r19, r1
     e10:	09 f0       	breq	.+2      	; 0xe14 <high_score_add+0x122>
     e12:	a1 cf       	rjmp	.-190    	; 0xd56 <high_score_add+0x64>
			SRAM_high_score_write();
			return i + 1;
		}
	}
	
	return 0;
     e14:	80 e0       	ldi	r24, 0x00	; 0
}
     e16:	a3 96       	adiw	r28, 0x23	; 35
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	de bf       	out	0x3e, r29	; 62
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	cd bf       	out	0x3d, r28	; 61
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	1f 91       	pop	r17
     e28:	0f 91       	pop	r16
     e2a:	ff 90       	pop	r15
     e2c:	ef 90       	pop	r14
     e2e:	df 90       	pop	r13
     e30:	cf 90       	pop	r12
     e32:	bf 90       	pop	r11
     e34:	08 95       	ret

00000e36 <high_score_clear>:


void high_score_clear()
{
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	a3 97       	sbiw	r28, 0x23	; 35
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	f8 94       	cli
     e44:	de bf       	out	0x3e, r29	; 62
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	cd bf       	out	0x3d, r28	; 61
	
	high_score scores;
	strncpy ( scores.username[0], "     \0", 6 );
     e4a:	86 e0       	ldi	r24, 0x06	; 6
     e4c:	e8 e0       	ldi	r30, 0x08	; 8
     e4e:	f1 e0       	ldi	r31, 0x01	; 1
     e50:	de 01       	movw	r26, r28
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	01 90       	ld	r0, Z+
     e56:	0d 92       	st	X+, r0
     e58:	8a 95       	dec	r24
     e5a:	e1 f7       	brne	.-8      	; 0xe54 <high_score_clear+0x1e>
	strncpy ( scores.username[1], "     \0", 6 );
     e5c:	86 e0       	ldi	r24, 0x06	; 6
     e5e:	e8 e0       	ldi	r30, 0x08	; 8
     e60:	f1 e0       	ldi	r31, 0x01	; 1
     e62:	de 01       	movw	r26, r28
     e64:	16 96       	adiw	r26, 0x06	; 6
     e66:	01 90       	ld	r0, Z+
     e68:	0d 92       	st	X+, r0
     e6a:	8a 95       	dec	r24
     e6c:	e1 f7       	brne	.-8      	; 0xe66 <high_score_clear+0x30>
	strncpy ( scores.username[2], "     \0", 6 );
     e6e:	86 e0       	ldi	r24, 0x06	; 6
     e70:	e8 e0       	ldi	r30, 0x08	; 8
     e72:	f1 e0       	ldi	r31, 0x01	; 1
     e74:	de 01       	movw	r26, r28
     e76:	1b 96       	adiw	r26, 0x0b	; 11
     e78:	01 90       	ld	r0, Z+
     e7a:	0d 92       	st	X+, r0
     e7c:	8a 95       	dec	r24
     e7e:	e1 f7       	brne	.-8      	; 0xe78 <high_score_clear+0x42>
	strncpy ( scores.username[3], "     \0", 6 );
     e80:	86 e0       	ldi	r24, 0x06	; 6
     e82:	e8 e0       	ldi	r30, 0x08	; 8
     e84:	f1 e0       	ldi	r31, 0x01	; 1
     e86:	de 01       	movw	r26, r28
     e88:	50 96       	adiw	r26, 0x10	; 16
     e8a:	01 90       	ld	r0, Z+
     e8c:	0d 92       	st	X+, r0
     e8e:	8a 95       	dec	r24
     e90:	e1 f7       	brne	.-8      	; 0xe8a <high_score_clear+0x54>
	strncpy ( scores.username[4], "     \0", 6 );
     e92:	86 e0       	ldi	r24, 0x06	; 6
     e94:	e8 e0       	ldi	r30, 0x08	; 8
     e96:	f1 e0       	ldi	r31, 0x01	; 1
     e98:	de 01       	movw	r26, r28
     e9a:	55 96       	adiw	r26, 0x15	; 21
     e9c:	01 90       	ld	r0, Z+
     e9e:	0d 92       	st	X+, r0
     ea0:	8a 95       	dec	r24
     ea2:	e1 f7       	brne	.-8      	; 0xe9c <high_score_clear+0x66>
	scores.score[0] = 0x0000;
     ea4:	1b 8e       	std	Y+27, r1	; 0x1b
     ea6:	1a 8e       	std	Y+26, r1	; 0x1a
	scores.score[1] = 0x0000;
     ea8:	1d 8e       	std	Y+29, r1	; 0x1d
     eaa:	1c 8e       	std	Y+28, r1	; 0x1c
	scores.score[2] = 0x0000;
     eac:	1f 8e       	std	Y+31, r1	; 0x1f
     eae:	1e 8e       	std	Y+30, r1	; 0x1e
	scores.score[3] = 0x0000;
     eb0:	19 a2       	std	Y+33, r1	; 0x21
     eb2:	18 a2       	std	Y+32, r1	; 0x20
	scores.score[4] = 0x0000;
     eb4:	1b a2       	std	Y+35, r1	; 0x23
     eb6:	1a a2       	std	Y+34, r1	; 0x22
	high_score_write(scores);
     eb8:	8d b7       	in	r24, 0x3d	; 61
     eba:	9e b7       	in	r25, 0x3e	; 62
     ebc:	83 97       	sbiw	r24, 0x23	; 35
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	9e bf       	out	0x3e, r25	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	8d bf       	out	0x3d, r24	; 61
     ec8:	ad b7       	in	r26, 0x3d	; 61
     eca:	be b7       	in	r27, 0x3e	; 62
     ecc:	11 96       	adiw	r26, 0x01	; 1
     ece:	83 e2       	ldi	r24, 0x23	; 35
     ed0:	fe 01       	movw	r30, r28
     ed2:	31 96       	adiw	r30, 0x01	; 1
     ed4:	01 90       	ld	r0, Z+
     ed6:	0d 92       	st	X+, r0
     ed8:	8a 95       	dec	r24
     eda:	e1 f7       	brne	.-8      	; 0xed4 <high_score_clear+0x9e>
     edc:	0e 94 5c 05 	call	0xab8	; 0xab8 <high_score_write>
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	cd bf       	out	0x3d, r28	; 61
     eea:	a3 96       	adiw	r28, 0x23	; 35
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	cd bf       	out	0x3d, r28	; 61
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <main>:
#include <stdio.h>
#include "USER_INTERFACE.h"

int main(void)
{	
	init();
     efc:	0e 94 c7 04 	call	0x98e	; 0x98e <init>
	printf("Main system up and functional\n");
     f00:	88 e1       	ldi	r24, 0x18	; 24
     f02:	92 e0       	ldi	r25, 0x02	; 2
     f04:	0e 94 26 10 	call	0x204c	; 0x204c <puts>
	
	while(1)
	{
		interface_state_machine();
     f08:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <interface_state_machine>
     f0c:	fd cf       	rjmp	.-6      	; 0xf08 <main+0xc>

00000f0e <SPI_init>:
*
****************************************************************************/
void SPI_init()
{
	/* Drive MOSI, SCK and CS HIGH*/
	DDR_SPI |= (1 << DD_MOSI) | (1 << DD_SCK) | (1 << DD_CS);
     f0e:	87 b3       	in	r24, 0x17	; 23
     f10:	80 6b       	ori	r24, 0xB0	; 176
     f12:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master mode, clock rate fck/16*/
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     f14:	81 e5       	ldi	r24, 0x51	; 81
     f16:	8d b9       	out	0x0d, r24	; 13
     f18:	08 95       	ret

00000f1a <SPI_write>:
*
* \param in byte to be written
****************************************************************************/
void SPI_write(uint8_t data)
{
	SPDR = data;
     f1a:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1 << SPIF)));
     f1c:	77 9b       	sbis	0x0e, 7	; 14
     f1e:	fe cf       	rjmp	.-4      	; 0xf1c <SPI_write+0x2>
}
     f20:	08 95       	ret

00000f22 <SPI_read>:
* \brief Read data from slave unit
*
* \return Read data
****************************************************************************/
uint8_t SPI_read()
{
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	1f 92       	push	r1
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t retVal;
	SPDR = 0xFF;
     f2c:	8f ef       	ldi	r24, 0xFF	; 255
     f2e:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1 << SPIF)));
     f30:	77 9b       	sbis	0x0e, 7	; 14
     f32:	fe cf       	rjmp	.-4      	; 0xf30 <SPI_read+0xe>
	
	retVal = SPDR;
     f34:	8f b1       	in	r24, 0x0f	; 15
     f36:	89 83       	std	Y+1, r24	; 0x01
	
	return retVal;
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	0f 90       	pop	r0
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	08 95       	ret

00000f42 <timer1_init>:
#include "TIME_DRIVER.h"
#include <avr/io.h>

void timer1_init()
{
	TCCR1A = 0x00; // normal mode, no force output, CTC mode
     f42:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00001101; // no noise canceling, CTC mode, 1024 prescaler
     f44:	8d e0       	ldi	r24, 0x0D	; 13
     f46:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0x00; // value of the timer/counter
     f48:	1d bc       	out	0x2d, r1	; 45
     f4a:	1c bc       	out	0x2c, r1	; 44
	OCR1A = 4800; // interrupt trigger value (trigger frequency is 0.999Hz)
     f4c:	80 ec       	ldi	r24, 0xC0	; 192
     f4e:	92 e1       	ldi	r25, 0x12	; 18
     f50:	9b bd       	out	0x2b, r25	; 43
     f52:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= 0b01000000; // interrupt enable
     f54:	89 b7       	in	r24, 0x39	; 57
     f56:	80 64       	ori	r24, 0x40	; 64
     f58:	89 bf       	out	0x39, r24	; 57
     f5a:	08 95       	ret

00000f5c <timer1_reset>:
}

void timer1_reset()
{
	current_time = 0;
     f5c:	10 92 21 04 	sts	0x0421, r1
     f60:	10 92 20 04 	sts	0x0420, r1
     f64:	08 95       	ret

00000f66 <timer1_get_time>:
}

uint16_t timer1_get_time()
{
	return current_time;
     f66:	80 91 20 04 	lds	r24, 0x0420
     f6a:	90 91 21 04 	lds	r25, 0x0421
}
     f6e:	08 95       	ret

00000f70 <__vector_13>:

ISR(TIMER1_COMPA_vect)
{
     f70:	1f 92       	push	r1
     f72:	0f 92       	push	r0
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	0f 92       	push	r0
     f78:	11 24       	eor	r1, r1
     f7a:	2f 93       	push	r18
     f7c:	3f 93       	push	r19
     f7e:	4f 93       	push	r20
     f80:	5f 93       	push	r21
     f82:	6f 93       	push	r22
     f84:	7f 93       	push	r23
     f86:	8f 93       	push	r24
     f88:	9f 93       	push	r25
     f8a:	af 93       	push	r26
     f8c:	bf 93       	push	r27
     f8e:	ef 93       	push	r30
     f90:	ff 93       	push	r31
	cli();
     f92:	f8 94       	cli
	current_time++;
     f94:	80 91 20 04 	lds	r24, 0x0420
     f98:	90 91 21 04 	lds	r25, 0x0421
     f9c:	01 96       	adiw	r24, 0x01	; 1
     f9e:	90 93 21 04 	sts	0x0421, r25
     fa2:	80 93 20 04 	sts	0x0420, r24
	TCNT1 = 0x00;
     fa6:	1d bc       	out	0x2d, r1	; 45
     fa8:	1c bc       	out	0x2c, r1	; 44
	led_toggle();
     faa:	0e 94 e6 04 	call	0x9cc	; 0x9cc <led_toggle>
	sei();
     fae:	78 94       	sei
     fb0:	ff 91       	pop	r31
     fb2:	ef 91       	pop	r30
     fb4:	bf 91       	pop	r27
     fb6:	af 91       	pop	r26
     fb8:	9f 91       	pop	r25
     fba:	8f 91       	pop	r24
     fbc:	7f 91       	pop	r23
     fbe:	6f 91       	pop	r22
     fc0:	5f 91       	pop	r21
     fc2:	4f 91       	pop	r20
     fc4:	3f 91       	pop	r19
     fc6:	2f 91       	pop	r18
     fc8:	0f 90       	pop	r0
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	0f 90       	pop	r0
     fce:	1f 90       	pop	r1
     fd0:	18 95       	reti

00000fd2 <USART_init>:
 * \param ubrr Desired baud rate.
 ****************************************************************************/
void USART_init(uint16_t ubrr)
{
	//Set baud rate
	UBRR0H = (uint8_t) (ubrr>>8);
     fd2:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (uint8_t) ubrr;
     fd4:	89 b9       	out	0x09, r24	; 9
	// Enable receiver and transmitter
	UCSR0B = (1<< RXEN0) | (1<<TXEN0);
     fd6:	88 e1       	ldi	r24, 0x18	; 24
     fd8:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 2 stop bit
	UCSR0C = (1<<URSEL0) | (3<<UCSZ00) ;
     fda:	86 e8       	ldi	r24, 0x86	; 134
     fdc:	80 bd       	out	0x20, r24	; 32
     fde:	08 95       	ret

00000fe0 <USART_putchar>:
 * \param c Char to be sent.
 * \return Always 0.
 ****************************************************************************/
uint8_t USART_putchar(char c)
{
	loop_until_bit_is_set(UCSR0A, UDRE0);
     fe0:	5d 9b       	sbis	0x0b, 5	; 11
     fe2:	fe cf       	rjmp	.-4      	; 0xfe0 <USART_putchar>
	UDR0 = c;
     fe4:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	08 95       	ret

00000fea <USART_getchar>:
 * \return Received char.
 ****************************************************************************/
char USART_getchar()
{
	char c;
	loop_until_bit_is_set(UCSR0A, RXC0);
     fea:	5f 9b       	sbis	0x0b, 7	; 11
     fec:	fe cf       	rjmp	.-4      	; 0xfea <USART_getchar>
	c = UDR0;
     fee:	8c b1       	in	r24, 0x0c	; 12
	return c;
}
     ff0:	08 95       	ret

00000ff2 <interface_init>:
	volatile char *ext_ram = (char *) SRAM_USERNAME_ADDR;
	uint8_t i;
	
	for(i = 0; i < USERNAME_LENGTH; i++)
	{
		ext_ram[i] = 'A';
     ff2:	81 e4       	ldi	r24, 0x41	; 65
     ff4:	80 93 00 1c 	sts	0x1C00, r24
     ff8:	80 93 01 1c 	sts	0x1C01, r24
     ffc:	80 93 02 1c 	sts	0x1C02, r24
    1000:	80 93 03 1c 	sts	0x1C03, r24
    1004:	80 93 04 1c 	sts	0x1C04, r24
	}
	
	SRAM_high_score_write();
    1008:	0e 94 b3 05 	call	0xb66	; 0xb66 <SRAM_high_score_write>
    100c:	08 95       	ret

0000100e <interface_username>:
* \brief Function call during the set username phase
*

****************************************************************************/
InterfaceState interface_username()
{
    100e:	4f 92       	push	r4
    1010:	5f 92       	push	r5
    1012:	6f 92       	push	r6
    1014:	7f 92       	push	r7
    1016:	8f 92       	push	r8
    1018:	9f 92       	push	r9
    101a:	af 92       	push	r10
    101c:	bf 92       	push	r11
    101e:	cf 92       	push	r12
    1020:	df 92       	push	r13
    1022:	ef 92       	push	r14
    1024:	ff 92       	push	r15
    1026:	0f 93       	push	r16
    1028:	1f 93       	push	r17
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	00 d0       	rcall	.+0      	; 0x1030 <interface_username+0x22>
    1030:	00 d0       	rcall	.+0      	; 0x1032 <interface_username+0x24>
    1032:	1f 92       	push	r1
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
	TouchpadData touch_data;
	char name[USERNAME_LENGTH];
	uint8_t index = 0;
	uint8_t i;
	
	clear_oled();
    1038:	0e 94 a9 03 	call	0x752	; 0x752 <clear_oled>
    103c:	ce 01       	movw	r24, r28
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	6c 01       	movw	r12, r24
    1042:	dc 01       	movw	r26, r24
    1044:	e0 e0       	ldi	r30, 0x00	; 0
    1046:	fc e1       	ldi	r31, 0x1C	; 28
	
	for(i=0; i<USERNAME_LENGTH;i++)
	{
		name[i] = ext_ram[i];
    1048:	81 91       	ld	r24, Z+
    104a:	8d 93       	st	X+, r24
	uint8_t index = 0;
	uint8_t i;
	
	clear_oled();
	
	for(i=0; i<USERNAME_LENGTH;i++)
    104c:	e5 30       	cpi	r30, 0x05	; 5
    104e:	9c e1       	ldi	r25, 0x1C	; 28
    1050:	f9 07       	cpc	r31, r25
    1052:	d1 f7       	brne	.-12     	; 0x1048 <interface_username+0x3a>
	{
		name[i] = ext_ram[i];
	}
	
	position = read_joystick_position();
    1054:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
	direction = read_joystick_direction(position);
    1058:	0e 94 61 02 	call	0x4c2	; 0x4c2 <read_joystick_direction>
    105c:	18 2f       	mov	r17, r24
	change_y = change_yaxis(direction);
    105e:	0e 94 b3 02 	call	0x566	; 0x566 <change_yaxis>
	change_x = change_xaxis(direction);
    1062:	81 2f       	mov	r24, r17
    1064:	0e 94 a4 02 	call	0x548	; 0x548 <change_xaxis>
	
	set_position(12, 0);
    1068:	60 e0       	ldi	r22, 0x00	; 0
    106a:	8c e0       	ldi	r24, 0x0C	; 12
    106c:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Username");
    1070:	80 e9       	ldi	r24, 0x90	; 144
    1072:	92 e0       	ldi	r25, 0x02	; 2
    1074:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	revert_colour_line(0);
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <revert_colour_line>
	
	set_position(4,4);
    107e:	64 e0       	ldi	r22, 0x04	; 4
    1080:	84 e0       	ldi	r24, 0x04	; 4
    1082:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	JoystickDirection direction;
	JoystickDirection change_y, change_x;
	ChangeTouchpadData change_touch_data;
	TouchpadData touch_data;
	char name[USERNAME_LENGTH];
	uint8_t index = 0;
    1086:	91 2c       	mov	r9, r1
		{
			index = (index + 1) % 5;
		}
		else if (change_x == Left)
		{
			index = index == 0 ? 4 : (index - 1);
    1088:	68 94       	set
    108a:	88 24       	eor	r8, r8
    108c:	82 f8       	bld	r8, 2
		change_y = change_yaxis(direction);
		change_x = change_xaxis(direction);
		
		if (change_x == Right)
		{
			index = (index + 1) % 5;
    108e:	0f 2e       	mov	r0, r31
    1090:	f5 e0       	ldi	r31, 0x05	; 5
    1092:	af 2e       	mov	r10, r31
    1094:	b1 2c       	mov	r11, r1
    1096:	f0 2d       	mov	r31, r0
		else if (change_y == Down)
		{
			name[index] = (name[index] == 'A') ? 'Z' : (name[index] - 1);
		}
		
		set_position(10, 4);
    1098:	5c 2c       	mov	r5, r12
    109a:	6d 2c       	mov	r6, r13
		for (i = 0; i < USERNAME_LENGTH; i++)
    109c:	71 2c       	mov	r7, r1
	
	set_position(4,4);
	
	while (1)
	{
		position = read_joystick_position();
    109e:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
		direction = read_joystick_direction(position);
    10a2:	0e 94 61 02 	call	0x4c2	; 0x4c2 <read_joystick_direction>
    10a6:	18 2f       	mov	r17, r24
		change_y = change_yaxis(direction);
    10a8:	0e 94 b3 02 	call	0x566	; 0x566 <change_yaxis>
    10ac:	08 2f       	mov	r16, r24
		change_x = change_xaxis(direction);
    10ae:	81 2f       	mov	r24, r17
    10b0:	0e 94 a4 02 	call	0x548	; 0x548 <change_xaxis>
		
		if (change_x == Right)
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	49 f4       	brne	.+18     	; 0x10ca <interface_username+0xbc>
		{
			index = (index + 1) % 5;
    10b8:	29 2d       	mov	r18, r9
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	c9 01       	movw	r24, r18
    10be:	01 96       	adiw	r24, 0x01	; 1
    10c0:	b5 01       	movw	r22, r10
    10c2:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__divmodhi4>
    10c6:	98 2e       	mov	r9, r24
    10c8:	07 c0       	rjmp	.+14     	; 0x10d8 <interface_username+0xca>
		}
		else if (change_x == Left)
    10ca:	81 11       	cpse	r24, r1
    10cc:	05 c0       	rjmp	.+10     	; 0x10d8 <interface_username+0xca>
		{
			index = index == 0 ? 4 : (index - 1);
    10ce:	99 20       	and	r9, r9
    10d0:	11 f0       	breq	.+4      	; 0x10d6 <interface_username+0xc8>
    10d2:	9a 94       	dec	r9
    10d4:	01 c0       	rjmp	.+2      	; 0x10d8 <interface_username+0xca>
    10d6:	98 2c       	mov	r9, r8
		}
		
		if (change_y == Up)
    10d8:	02 30       	cpi	r16, 0x02	; 2
    10da:	b1 f4       	brne	.+44     	; 0x1108 <interface_username+0xfa>
		{
			name[index] = (name[index] == 'Z') ? 'A' : (name[index] + 1);
    10dc:	89 2d       	mov	r24, r9
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	e1 e0       	ldi	r30, 0x01	; 1
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	ec 0f       	add	r30, r28
    10e6:	fd 1f       	adc	r31, r29
    10e8:	e8 0f       	add	r30, r24
    10ea:	f9 1f       	adc	r31, r25
    10ec:	20 81       	ld	r18, Z
    10ee:	2a 35       	cpi	r18, 0x5A	; 90
    10f0:	11 f0       	breq	.+4      	; 0x10f6 <interface_username+0xe8>
    10f2:	2f 5f       	subi	r18, 0xFF	; 255
    10f4:	01 c0       	rjmp	.+2      	; 0x10f8 <interface_username+0xea>
    10f6:	21 e4       	ldi	r18, 0x41	; 65
    10f8:	e1 e0       	ldi	r30, 0x01	; 1
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	ec 0f       	add	r30, r28
    10fe:	fd 1f       	adc	r31, r29
    1100:	e8 0f       	add	r30, r24
    1102:	f9 1f       	adc	r31, r25
    1104:	20 83       	st	Z, r18
    1106:	17 c0       	rjmp	.+46     	; 0x1136 <interface_username+0x128>
		}
		else if (change_y == Down)
    1108:	03 30       	cpi	r16, 0x03	; 3
    110a:	a9 f4       	brne	.+42     	; 0x1136 <interface_username+0x128>
		{
			name[index] = (name[index] == 'A') ? 'Z' : (name[index] - 1);
    110c:	89 2d       	mov	r24, r9
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	e1 e0       	ldi	r30, 0x01	; 1
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	ec 0f       	add	r30, r28
    1116:	fd 1f       	adc	r31, r29
    1118:	e8 0f       	add	r30, r24
    111a:	f9 1f       	adc	r31, r25
    111c:	20 81       	ld	r18, Z
    111e:	21 34       	cpi	r18, 0x41	; 65
    1120:	11 f0       	breq	.+4      	; 0x1126 <interface_username+0x118>
    1122:	21 50       	subi	r18, 0x01	; 1
    1124:	01 c0       	rjmp	.+2      	; 0x1128 <interface_username+0x11a>
    1126:	2a e5       	ldi	r18, 0x5A	; 90
    1128:	e1 e0       	ldi	r30, 0x01	; 1
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	ec 0f       	add	r30, r28
    112e:	fd 1f       	adc	r31, r29
    1130:	e8 0f       	add	r30, r24
    1132:	f9 1f       	adc	r31, r25
    1134:	20 83       	st	Z, r18
		}
		
		set_position(10, 4);
    1136:	68 2d       	mov	r22, r8
    1138:	8a e0       	ldi	r24, 0x0A	; 10
    113a:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
    113e:	05 2d       	mov	r16, r5
    1140:	16 2d       	mov	r17, r6
		for (i = 0; i < USERNAME_LENGTH; i++)
    1142:	47 2c       	mov	r4, r7
		{
			if (i == index)
			{
				print_inverted_char(name[i]);
    1144:	ee 24       	eor	r14, r14
    1146:	e3 94       	inc	r14
    1148:	f1 2c       	mov	r15, r1
    114a:	ec 0e       	add	r14, r28
    114c:	fd 1e       	adc	r15, r29
    114e:	e9 0c       	add	r14, r9
    1150:	f1 1c       	adc	r15, r1
		}
		
		set_position(10, 4);
		for (i = 0; i < USERNAME_LENGTH; i++)
		{
			if (i == index)
    1152:	49 10       	cpse	r4, r9
    1154:	05 c0       	rjmp	.+10     	; 0x1160 <interface_username+0x152>
			{
				print_inverted_char(name[i]);
    1156:	f7 01       	movw	r30, r14
    1158:	80 81       	ld	r24, Z
    115a:	0e 94 19 04 	call	0x832	; 0x832 <print_inverted_char>
    115e:	04 c0       	rjmp	.+8      	; 0x1168 <interface_username+0x15a>
			}
			else
			{
				print_char(name[i]);
    1160:	f8 01       	movw	r30, r16
    1162:	80 81       	ld	r24, Z
    1164:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
			}
			print_char(' ');
    1168:	80 e2       	ldi	r24, 0x20	; 32
    116a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
		{
			name[index] = (name[index] == 'A') ? 'Z' : (name[index] - 1);
		}
		
		set_position(10, 4);
		for (i = 0; i < USERNAME_LENGTH; i++)
    116e:	43 94       	inc	r4
    1170:	0f 5f       	subi	r16, 0xFF	; 255
    1172:	1f 4f       	sbci	r17, 0xFF	; 255
    1174:	f5 e0       	ldi	r31, 0x05	; 5
    1176:	4f 12       	cpse	r4, r31
    1178:	ec cf       	rjmp	.-40     	; 0x1152 <interface_username+0x144>
				print_char(name[i]);
			}
			print_char(' ');
		}
		
		refresh_oled();
    117a:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
		
		touch_data = read_touchpad_data();
    117e:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
    1182:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
		if (change_touch_data.rightButton)
    1186:	88 23       	and	r24, r24
    1188:	09 f4       	brne	.+2      	; 0x118c <interface_username+0x17e>
    118a:	89 cf       	rjmp	.-238    	; 0x109e <interface_username+0x90>
    118c:	d6 01       	movw	r26, r12
    118e:	e0 e0       	ldi	r30, 0x00	; 0
    1190:	fc e1       	ldi	r31, 0x1C	; 28
		{
			for(i = 0; i < USERNAME_LENGTH; i++)
			{
				ext_ram[i] = name[i];
    1192:	8d 91       	ld	r24, X+
    1194:	81 93       	st	Z+, r24
		
		touch_data = read_touchpad_data();
		change_touch_data = change_touchpad_data(touch_data);
		if (change_touch_data.rightButton)
		{
			for(i = 0; i < USERNAME_LENGTH; i++)
    1196:	e5 30       	cpi	r30, 0x05	; 5
    1198:	8c e1       	ldi	r24, 0x1C	; 28
    119a:	f8 07       	cpc	r31, r24
    119c:	d1 f7       	brne	.-12     	; 0x1192 <interface_username+0x184>
			}
			
			return State_NewGame;
		}
	}
}
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	1f 91       	pop	r17
    11b0:	0f 91       	pop	r16
    11b2:	ff 90       	pop	r15
    11b4:	ef 90       	pop	r14
    11b6:	df 90       	pop	r13
    11b8:	cf 90       	pop	r12
    11ba:	bf 90       	pop	r11
    11bc:	af 90       	pop	r10
    11be:	9f 90       	pop	r9
    11c0:	8f 90       	pop	r8
    11c2:	7f 90       	pop	r7
    11c4:	6f 90       	pop	r6
    11c6:	5f 90       	pop	r5
    11c8:	4f 90       	pop	r4
    11ca:	08 95       	ret

000011cc <interface_new_game>:
* \brief Function call during the set new game phase
*

****************************************************************************/
InterfaceState interface_new_game()
{
    11cc:	ef 92       	push	r14
    11ce:	ff 92       	push	r15
    11d0:	0f 93       	push	r16
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
	JoystickDirection change_y, change_x;
	ChangeTouchpadData change_touch_data;
	TouchpadData touch_data;
	uint8_t scr_position = 0;
	
	clear_oled();
    11d8:	0e 94 a9 03 	call	0x752	; 0x752 <clear_oled>
	
	position = read_joystick_position();
    11dc:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
	direction = read_joystick_direction(position);
    11e0:	0e 94 61 02 	call	0x4c2	; 0x4c2 <read_joystick_direction>
    11e4:	c8 2f       	mov	r28, r24
	change_y = change_yaxis(direction);
    11e6:	0e 94 b3 02 	call	0x566	; 0x566 <change_yaxis>
	change_x = change_xaxis(direction);
    11ea:	8c 2f       	mov	r24, r28
    11ec:	0e 94 a4 02 	call	0x548	; 0x548 <change_xaxis>
	
	set_position(13, 0);
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	8d e0       	ldi	r24, 0x0D	; 13
    11f4:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("New game");
    11f8:	86 e3       	ldi	r24, 0x36	; 54
    11fa:	92 e0       	ldi	r25, 0x02	; 2
    11fc:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	revert_colour_line(0);
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	0e 94 71 04 	call	0x8e2	; 0x8e2 <revert_colour_line>
	set_position(3, 2);
    1206:	62 e0       	ldi	r22, 0x02	; 2
    1208:	83 e0       	ldi	r24, 0x03	; 3
    120a:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Tutorial");
    120e:	8f e3       	ldi	r24, 0x3F	; 63
    1210:	92 e0       	ldi	r25, 0x02	; 2
    1212:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	set_position(3, 3);
    1216:	63 e0       	ldi	r22, 0x03	; 3
    1218:	83 e0       	ldi	r24, 0x03	; 3
    121a:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Easy");
    121e:	88 e4       	ldi	r24, 0x48	; 72
    1220:	92 e0       	ldi	r25, 0x02	; 2
    1222:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	set_position(3, 4);
    1226:	64 e0       	ldi	r22, 0x04	; 4
    1228:	83 e0       	ldi	r24, 0x03	; 3
    122a:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Normal");
    122e:	8d e4       	ldi	r24, 0x4D	; 77
    1230:	92 e0       	ldi	r25, 0x02	; 2
    1232:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	set_position(3, 5);
    1236:	65 e0       	ldi	r22, 0x05	; 5
    1238:	83 e0       	ldi	r24, 0x03	; 3
    123a:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Hard");
    123e:	84 e5       	ldi	r24, 0x54	; 84
    1240:	92 e0       	ldi	r25, 0x02	; 2
    1242:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	set_position(3, 6);
    1246:	66 e0       	ldi	r22, 0x06	; 6
    1248:	83 e0       	ldi	r24, 0x03	; 3
    124a:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Insane");
    124e:	89 e5       	ldi	r24, 0x59	; 89
    1250:	92 e0       	ldi	r25, 0x02	; 2
    1252:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	JoystickPosition position;
	JoystickDirection direction;
	JoystickDirection change_y, change_x;
	ChangeTouchpadData change_touch_data;
	TouchpadData touch_data;
	uint8_t scr_position = 0;
    1256:	c0 e0       	ldi	r28, 0x00	; 0
			set_position(1, (scr_position % 5) + 2);
			print_char(' ');
			scr_position = scr_position == 4 ? 0 : scr_position + 1;
		}
		
		set_position(1, (scr_position % 5) + 2);
    1258:	0d ec       	ldi	r16, 0xCD	; 205
		}
		else if (change_y == Down)
		{
			set_position(1, (scr_position % 5) + 2);
			print_char(' ');
			scr_position = scr_position == 4 ? 0 : scr_position + 1;
    125a:	f1 2c       	mov	r15, r1
		
		if (change_y == Up)
		{
			set_position(1, (scr_position % 5) + 2);
			print_char(' ');
			scr_position = scr_position == 0 ? 4 : scr_position - 1;
    125c:	68 94       	set
    125e:	ee 24       	eor	r14, r14
    1260:	e2 f8       	bld	r14, 2
	set_position(3, 6);
	print_string("Insane");
	
	while(1)
	{
		position = read_joystick_position();
    1262:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
		direction = read_joystick_direction(position);
    1266:	0e 94 61 02 	call	0x4c2	; 0x4c2 <read_joystick_direction>
    126a:	d8 2f       	mov	r29, r24
		change_y = change_yaxis(direction);
    126c:	0e 94 b3 02 	call	0x566	; 0x566 <change_yaxis>
    1270:	18 2f       	mov	r17, r24
		change_x = change_xaxis(direction);
    1272:	8d 2f       	mov	r24, r29
    1274:	0e 94 a4 02 	call	0x548	; 0x548 <change_xaxis>
		
		if (change_x == Right)
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	09 f4       	brne	.+2      	; 0x127e <interface_new_game+0xb2>
    127c:	75 c0       	rjmp	.+234    	; 0x1368 <interface_new_game+0x19c>
		{
			return State_Options;
		}
		else if (change_x == Left)
    127e:	88 23       	and	r24, r24
    1280:	09 f4       	brne	.+2      	; 0x1284 <interface_new_game+0xb8>
    1282:	74 c0       	rjmp	.+232    	; 0x136c <interface_new_game+0x1a0>
		{
			return State_HighScores;
		}
		
		if (change_y == Up)
    1284:	12 30       	cpi	r17, 0x02	; 2
    1286:	b9 f4       	brne	.+46     	; 0x12b6 <interface_new_game+0xea>
		{
			set_position(1, (scr_position % 5) + 2);
    1288:	c0 9f       	mul	r28, r16
    128a:	81 2d       	mov	r24, r1
    128c:	11 24       	eor	r1, r1
    128e:	86 95       	lsr	r24
    1290:	86 95       	lsr	r24
    1292:	98 2f       	mov	r25, r24
    1294:	99 0f       	add	r25, r25
    1296:	99 0f       	add	r25, r25
    1298:	89 0f       	add	r24, r25
    129a:	6c 2f       	mov	r22, r28
    129c:	68 1b       	sub	r22, r24
    129e:	6e 5f       	subi	r22, 0xFE	; 254
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
			print_char(' ');
    12a6:	80 e2       	ldi	r24, 0x20	; 32
    12a8:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
			scr_position = scr_position == 0 ? 4 : scr_position - 1;
    12ac:	cc 23       	and	r28, r28
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <interface_new_game+0xe6>
    12b0:	5f c0       	rjmp	.+190    	; 0x1370 <interface_new_game+0x1a4>
    12b2:	c1 50       	subi	r28, 0x01	; 1
    12b4:	18 c0       	rjmp	.+48     	; 0x12e6 <interface_new_game+0x11a>
		}
		else if (change_y == Down)
    12b6:	13 30       	cpi	r17, 0x03	; 3
    12b8:	b1 f4       	brne	.+44     	; 0x12e6 <interface_new_game+0x11a>
		{
			set_position(1, (scr_position % 5) + 2);
    12ba:	c0 9f       	mul	r28, r16
    12bc:	81 2d       	mov	r24, r1
    12be:	11 24       	eor	r1, r1
    12c0:	86 95       	lsr	r24
    12c2:	86 95       	lsr	r24
    12c4:	98 2f       	mov	r25, r24
    12c6:	99 0f       	add	r25, r25
    12c8:	99 0f       	add	r25, r25
    12ca:	89 0f       	add	r24, r25
    12cc:	6c 2f       	mov	r22, r28
    12ce:	68 1b       	sub	r22, r24
    12d0:	6e 5f       	subi	r22, 0xFE	; 254
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
			print_char(' ');
    12d8:	80 e2       	ldi	r24, 0x20	; 32
    12da:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
			scr_position = scr_position == 4 ? 0 : scr_position + 1;
    12de:	c4 30       	cpi	r28, 0x04	; 4
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <interface_new_game+0x118>
    12e2:	55 c0       	rjmp	.+170    	; 0x138e <interface_new_game+0x1c2>
    12e4:	cf 5f       	subi	r28, 0xFF	; 255
		}
		
		set_position(1, (scr_position % 5) + 2);
    12e6:	c0 9f       	mul	r28, r16
    12e8:	81 2d       	mov	r24, r1
    12ea:	11 24       	eor	r1, r1
    12ec:	86 95       	lsr	r24
    12ee:	86 95       	lsr	r24
    12f0:	98 2f       	mov	r25, r24
    12f2:	99 0f       	add	r25, r25
    12f4:	99 0f       	add	r25, r25
    12f6:	89 0f       	add	r24, r25
    12f8:	6c 2f       	mov	r22, r28
    12fa:	68 1b       	sub	r22, r24
    12fc:	6e 5f       	subi	r22, 0xFE	; 254
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
		print_char('#');
    1304:	83 e2       	ldi	r24, 0x23	; 35
    1306:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
		
		touch_data = read_touchpad_data();
    130a:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
    130e:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
		if (change_touch_data.rightButton)
    1312:	88 23       	and	r24, r24
    1314:	31 f1       	breq	.+76     	; 0x1362 <interface_new_game+0x196>
		{
			switch(scr_position)
    1316:	c2 30       	cpi	r28, 0x02	; 2
    1318:	a9 f0       	breq	.+42     	; 0x1344 <interface_new_game+0x178>
    131a:	28 f4       	brcc	.+10     	; 0x1326 <interface_new_game+0x15a>
    131c:	cc 23       	and	r28, r28
    131e:	41 f0       	breq	.+16     	; 0x1330 <interface_new_game+0x164>
    1320:	c1 30       	cpi	r28, 0x01	; 1
    1322:	59 f0       	breq	.+22     	; 0x133a <interface_new_game+0x16e>
    1324:	1e c0       	rjmp	.+60     	; 0x1362 <interface_new_game+0x196>
    1326:	c3 30       	cpi	r28, 0x03	; 3
    1328:	91 f0       	breq	.+36     	; 0x134e <interface_new_game+0x182>
    132a:	c4 30       	cpi	r28, 0x04	; 4
    132c:	a9 f0       	breq	.+42     	; 0x1358 <interface_new_game+0x18c>
    132e:	19 c0       	rjmp	.+50     	; 0x1362 <interface_new_game+0x196>
			{
				case 0:
				send_game_mode(Tutorial);
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	0e 94 23 02 	call	0x446	; 0x446 <send_game_mode>
				return State_Tutorial;
    1336:	82 e0       	ldi	r24, 0x02	; 2
    1338:	39 c0       	rjmp	.+114    	; 0x13ac <interface_new_game+0x1e0>
				case 1:
				send_game_mode(Easy);
    133a:	82 e0       	ldi	r24, 0x02	; 2
    133c:	0e 94 23 02 	call	0x446	; 0x446 <send_game_mode>
				return State_Easy;
    1340:	83 e0       	ldi	r24, 0x03	; 3
    1342:	34 c0       	rjmp	.+104    	; 0x13ac <interface_new_game+0x1e0>
				case 2:
				send_game_mode(Normal);
    1344:	83 e0       	ldi	r24, 0x03	; 3
    1346:	0e 94 23 02 	call	0x446	; 0x446 <send_game_mode>
				return State_Normal;
    134a:	84 e0       	ldi	r24, 0x04	; 4
    134c:	2f c0       	rjmp	.+94     	; 0x13ac <interface_new_game+0x1e0>
				case 3:
				send_game_mode(Hard);
    134e:	84 e0       	ldi	r24, 0x04	; 4
    1350:	0e 94 23 02 	call	0x446	; 0x446 <send_game_mode>
				return State_Hard;
    1354:	85 e0       	ldi	r24, 0x05	; 5
    1356:	2a c0       	rjmp	.+84     	; 0x13ac <interface_new_game+0x1e0>
				case 4:
				send_game_mode(Insane);
    1358:	85 e0       	ldi	r24, 0x05	; 5
    135a:	0e 94 23 02 	call	0x446	; 0x446 <send_game_mode>
				return State_Insane;
    135e:	86 e0       	ldi	r24, 0x06	; 6
    1360:	25 c0       	rjmp	.+74     	; 0x13ac <interface_new_game+0x1e0>
			}
		}
		refresh_oled();
    1362:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	}
    1366:	7d cf       	rjmp	.-262    	; 0x1262 <interface_new_game+0x96>
		change_y = change_yaxis(direction);
		change_x = change_xaxis(direction);
		
		if (change_x == Right)
		{
			return State_Options;
    1368:	87 e0       	ldi	r24, 0x07	; 7
    136a:	20 c0       	rjmp	.+64     	; 0x13ac <interface_new_game+0x1e0>
		}
		else if (change_x == Left)
		{
			return State_HighScores;
    136c:	88 e0       	ldi	r24, 0x08	; 8
    136e:	1e c0       	rjmp	.+60     	; 0x13ac <interface_new_game+0x1e0>
			set_position(1, (scr_position % 5) + 2);
			print_char(' ');
			scr_position = scr_position == 4 ? 0 : scr_position + 1;
		}
		
		set_position(1, (scr_position % 5) + 2);
    1370:	66 e0       	ldi	r22, 0x06	; 6
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
		print_char('#');
    1378:	83 e2       	ldi	r24, 0x23	; 35
    137a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
		
		touch_data = read_touchpad_data();
    137e:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
    1382:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
		if (change_touch_data.rightButton)
    1386:	81 11       	cpse	r24, r1
    1388:	e7 cf       	rjmp	.-50     	; 0x1358 <interface_new_game+0x18c>
		
		if (change_y == Up)
		{
			set_position(1, (scr_position % 5) + 2);
			print_char(' ');
			scr_position = scr_position == 0 ? 4 : scr_position - 1;
    138a:	ce 2d       	mov	r28, r14
    138c:	ea cf       	rjmp	.-44     	; 0x1362 <interface_new_game+0x196>
			set_position(1, (scr_position % 5) + 2);
			print_char(' ');
			scr_position = scr_position == 4 ? 0 : scr_position + 1;
		}
		
		set_position(1, (scr_position % 5) + 2);
    138e:	62 e0       	ldi	r22, 0x02	; 2
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
		print_char('#');
    1396:	83 e2       	ldi	r24, 0x23	; 35
    1398:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
		
		touch_data = read_touchpad_data();
    139c:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
    13a0:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
		if (change_touch_data.rightButton)
    13a4:	81 11       	cpse	r24, r1
    13a6:	c4 cf       	rjmp	.-120    	; 0x1330 <interface_new_game+0x164>
		}
		else if (change_y == Down)
		{
			set_position(1, (scr_position % 5) + 2);
			print_char(' ');
			scr_position = scr_position == 4 ? 0 : scr_position + 1;
    13a8:	cf 2d       	mov	r28, r15
    13aa:	db cf       	rjmp	.-74     	; 0x1362 <interface_new_game+0x196>
				return State_Insane;
			}
		}
		refresh_oled();
	}
}
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	1f 91       	pop	r17
    13b2:	0f 91       	pop	r16
    13b4:	ff 90       	pop	r15
    13b6:	ef 90       	pop	r14
    13b8:	08 95       	ret

000013ba <interface_high_scores>:
/****************************************************************************
* \brief Function call during the set show high scores phase
*
****************************************************************************/
InterfaceState interface_high_scores()
{
    13ba:	bf 92       	push	r11
    13bc:	cf 92       	push	r12
    13be:	df 92       	push	r13
    13c0:	ef 92       	push	r14
    13c2:	ff 92       	push	r15
    13c4:	0f 93       	push	r16
    13c6:	1f 93       	push	r17
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
	JoystickDirection direction;
	JoystickDirection change_x;
	uint8_t i, j;
	volatile char* high_scores_sram = (char*) SRAM_HIGH_SCORES_ADDR;
	
	clear_oled();
    13cc:	0e 94 a9 03 	call	0x752	; 0x752 <clear_oled>
	
	position = read_joystick_position();
    13d0:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
	direction = read_joystick_direction(position);
    13d4:	0e 94 61 02 	call	0x4c2	; 0x4c2 <read_joystick_direction>
	change_x = change_xaxis(direction);
    13d8:	0e 94 a4 02 	call	0x548	; 0x548 <change_xaxis>
	
	set_position(9,0);
    13dc:	60 e0       	ldi	r22, 0x00	; 0
    13de:	89 e0       	ldi	r24, 0x09	; 9
    13e0:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("High Scores");
    13e4:	80 e6       	ldi	r24, 0x60	; 96
    13e6:	92 e0       	ldi	r25, 0x02	; 2
    13e8:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	revert_colour_line(0);
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	0e 94 71 04 	call	0x8e2	; 0x8e2 <revert_colour_line>
    13f2:	e1 2c       	mov	r14, r1
    13f4:	f1 2c       	mov	r15, r1
    13f6:	68 94       	set
    13f8:	dd 24       	eor	r13, r13
    13fa:	d1 f8       	bld	r13, 1
	
	for(i = 0; i < (HIGH_SCORES_TABLE_LENGTH); i ++)
	{
		set_position(8, i + 2);
    13fc:	b1 2c       	mov	r11, r1
    13fe:	c1 2c       	mov	r12, r1
    1400:	6d 2d       	mov	r22, r13
    1402:	88 e0       	ldi	r24, 0x08	; 8
    1404:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
    1408:	cb 2d       	mov	r28, r11
    140a:	dc 2d       	mov	r29, r12
    140c:	87 01       	movw	r16, r14
    140e:	0b 5f       	subi	r16, 0xFB	; 251
    1410:	13 4e       	sbci	r17, 0xE3	; 227
    1412:	f8 01       	movw	r30, r16
    1414:	ec 0f       	add	r30, r28
    1416:	fd 1f       	adc	r31, r29
		for (j = 0; j < SRAM_HIGH_SCORE_LENGTH; j++)
		{
			print_char(high_scores_sram[i * SRAM_HIGH_SCORE_LENGTH + j]);
    1418:	80 81       	ld	r24, Z
    141a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
    141e:	21 96       	adiw	r28, 0x01	; 1
	revert_colour_line(0);
	
	for(i = 0; i < (HIGH_SCORES_TABLE_LENGTH); i ++)
	{
		set_position(8, i + 2);
		for (j = 0; j < SRAM_HIGH_SCORE_LENGTH; j++)
    1420:	cd 30       	cpi	r28, 0x0D	; 13
    1422:	d1 05       	cpc	r29, r1
    1424:	b1 f7       	brne	.-20     	; 0x1412 <interface_high_scores+0x58>
    1426:	d3 94       	inc	r13
    1428:	8d e0       	ldi	r24, 0x0D	; 13
    142a:	e8 0e       	add	r14, r24
    142c:	f1 1c       	adc	r15, r1
	
	set_position(9,0);
	print_string("High Scores");
	revert_colour_line(0);
	
	for(i = 0; i < (HIGH_SCORES_TABLE_LENGTH); i ++)
    142e:	87 e0       	ldi	r24, 0x07	; 7
    1430:	d8 12       	cpse	r13, r24
    1432:	e6 cf       	rjmp	.-52     	; 0x1400 <interface_high_scores+0x46>
		{
			print_char(high_scores_sram[i * SRAM_HIGH_SCORE_LENGTH + j]);
		}
	}
	
	refresh_oled();
    1434:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	
	while(1)
	{
		position = read_joystick_position();
    1438:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
		direction = read_joystick_direction(position);
    143c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <read_joystick_direction>
		change_x = change_xaxis(direction);
    1440:	0e 94 a4 02 	call	0x548	; 0x548 <change_xaxis>
		
		if (change_x == Right)
    1444:	81 30       	cpi	r24, 0x01	; 1
    1446:	19 f0       	breq	.+6      	; 0x144e <interface_high_scores+0x94>
		{
			return State_NewGame;
		}
		else if (change_x == Left)
    1448:	81 11       	cpse	r24, r1
    144a:	f6 cf       	rjmp	.-20     	; 0x1438 <interface_high_scores+0x7e>
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <interface_high_scores+0x98>
		direction = read_joystick_direction(position);
		change_x = change_xaxis(direction);
		
		if (change_x == Right)
		{
			return State_NewGame;
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	01 c0       	rjmp	.+2      	; 0x1454 <interface_high_scores+0x9a>
		}
		else if (change_x == Left)
		{
			return State_Options;
    1452:	87 e0       	ldi	r24, 0x07	; 7
		}
	}
	
}
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	1f 91       	pop	r17
    145a:	0f 91       	pop	r16
    145c:	ff 90       	pop	r15
    145e:	ef 90       	pop	r14
    1460:	df 90       	pop	r13
    1462:	cf 90       	pop	r12
    1464:	bf 90       	pop	r11
    1466:	08 95       	ret

00001468 <interface_options>:
* \brief Function call during the options phase
*

****************************************************************************/
InterfaceState interface_options( )
{
    1468:	ef 92       	push	r14
    146a:	ff 92       	push	r15
    146c:	0f 93       	push	r16
    146e:	1f 93       	push	r17
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
	JoystickDirection change_y, change_x;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	uint8_t scr_position = 0;
	
	clear_oled();
    1474:	0e 94 a9 03 	call	0x752	; 0x752 <clear_oled>
	
	position = read_joystick_position();
    1478:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
	direction = read_joystick_direction(position);
    147c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <read_joystick_direction>
    1480:	c8 2f       	mov	r28, r24
	change_y = change_yaxis(direction);
    1482:	0e 94 b3 02 	call	0x566	; 0x566 <change_yaxis>
	change_x = change_xaxis(direction);
    1486:	8c 2f       	mov	r24, r28
    1488:	0e 94 a4 02 	call	0x548	; 0x548 <change_xaxis>

	set_position(12,0);
    148c:	60 e0       	ldi	r22, 0x00	; 0
    148e:	8c e0       	ldi	r24, 0x0C	; 12
    1490:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Options");
    1494:	8c e6       	ldi	r24, 0x6C	; 108
    1496:	92 e0       	ldi	r25, 0x02	; 2
    1498:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	revert_colour_line(0);
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <revert_colour_line>
	set_position(3,3);
    14a2:	63 e0       	ldi	r22, 0x03	; 3
    14a4:	83 e0       	ldi	r24, 0x03	; 3
    14a6:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Mode");
    14aa:	84 e7       	ldi	r24, 0x74	; 116
    14ac:	92 e0       	ldi	r25, 0x02	; 2
    14ae:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	set_position(3,4);
    14b2:	64 e0       	ldi	r22, 0x04	; 4
    14b4:	83 e0       	ldi	r24, 0x03	; 3
    14b6:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Clear HighScore");
    14ba:	89 e7       	ldi	r24, 0x79	; 121
    14bc:	92 e0       	ldi	r25, 0x02	; 2
    14be:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	set_position(3,5);
    14c2:	65 e0       	ldi	r22, 0x05	; 5
    14c4:	83 e0       	ldi	r24, 0x03	; 3
    14c6:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Change Username");
    14ca:	89 e8       	ldi	r24, 0x89	; 137
    14cc:	92 e0       	ldi	r25, 0x02	; 2
    14ce:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	JoystickPosition position;
	JoystickDirection direction;
	JoystickDirection change_y, change_x;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	uint8_t scr_position = 0;
    14d2:	c0 e0       	ldi	r28, 0x00	; 0
			set_position(1, (scr_position % 3) + 3);
			print_char(' ');
			scr_position = scr_position == 2 ? 0 : scr_position + 1;
		}
		
		set_position(1, (scr_position % 3) + 3);
    14d4:	0b ea       	ldi	r16, 0xAB	; 171
		}
		else if (change_y == Down)
		{
			set_position(1, (scr_position % 3) + 3);
			print_char(' ');
			scr_position = scr_position == 2 ? 0 : scr_position + 1;
    14d6:	f1 2c       	mov	r15, r1
		
		if (change_y == Up)
		{
			set_position(1, (scr_position % 3) + 3);
			print_char(' ');
			scr_position = scr_position == 0 ? 2 : scr_position - 1;
    14d8:	68 94       	set
    14da:	ee 24       	eor	r14, r14
    14dc:	e1 f8       	bld	r14, 1
	set_position(3,5);
	print_string("Change Username");
	
	while(1)
	{
		position = read_joystick_position();
    14de:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
		direction = read_joystick_direction(position);
    14e2:	0e 94 61 02 	call	0x4c2	; 0x4c2 <read_joystick_direction>
    14e6:	d8 2f       	mov	r29, r24
		change_y = change_yaxis(direction);
    14e8:	0e 94 b3 02 	call	0x566	; 0x566 <change_yaxis>
    14ec:	18 2f       	mov	r17, r24
		change_x = change_xaxis(direction);
    14ee:	8d 2f       	mov	r24, r29
    14f0:	0e 94 a4 02 	call	0x548	; 0x548 <change_xaxis>
		
		if (change_x == Right)
    14f4:	81 30       	cpi	r24, 0x01	; 1
    14f6:	09 f4       	brne	.+2      	; 0x14fa <interface_options+0x92>
    14f8:	52 c0       	rjmp	.+164    	; 0x159e <interface_options+0x136>
		{
			return State_HighScores;
		}
		else if (change_x == Left)
    14fa:	88 23       	and	r24, r24
    14fc:	09 f4       	brne	.+2      	; 0x1500 <interface_options+0x98>
    14fe:	51 c0       	rjmp	.+162    	; 0x15a2 <interface_options+0x13a>
		{
			return State_NewGame;
		}
		
		if (change_y == Up)
    1500:	12 30       	cpi	r17, 0x02	; 2
    1502:	a9 f4       	brne	.+42     	; 0x152e <interface_options+0xc6>
		{
			set_position(1, (scr_position % 3) + 3);
    1504:	c0 9f       	mul	r28, r16
    1506:	81 2d       	mov	r24, r1
    1508:	11 24       	eor	r1, r1
    150a:	86 95       	lsr	r24
    150c:	98 2f       	mov	r25, r24
    150e:	99 0f       	add	r25, r25
    1510:	89 0f       	add	r24, r25
    1512:	6c 2f       	mov	r22, r28
    1514:	68 1b       	sub	r22, r24
    1516:	6d 5f       	subi	r22, 0xFD	; 253
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
			print_char(' ');
    151e:	80 e2       	ldi	r24, 0x20	; 32
    1520:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
			scr_position = scr_position == 0 ? 2 : scr_position - 1;
    1524:	cc 23       	and	r28, r28
    1526:	09 f4       	brne	.+2      	; 0x152a <interface_options+0xc2>
    1528:	42 c0       	rjmp	.+132    	; 0x15ae <interface_options+0x146>
    152a:	c1 50       	subi	r28, 0x01	; 1
    152c:	15 c0       	rjmp	.+42     	; 0x1558 <interface_options+0xf0>
		}
		else if (change_y == Down)
    152e:	13 30       	cpi	r17, 0x03	; 3
    1530:	99 f4       	brne	.+38     	; 0x1558 <interface_options+0xf0>
		{
			set_position(1, (scr_position % 3) + 3);
    1532:	c0 9f       	mul	r28, r16
    1534:	81 2d       	mov	r24, r1
    1536:	11 24       	eor	r1, r1
    1538:	86 95       	lsr	r24
    153a:	98 2f       	mov	r25, r24
    153c:	99 0f       	add	r25, r25
    153e:	89 0f       	add	r24, r25
    1540:	6c 2f       	mov	r22, r28
    1542:	68 1b       	sub	r22, r24
    1544:	6d 5f       	subi	r22, 0xFD	; 253
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
			print_char(' ');
    154c:	80 e2       	ldi	r24, 0x20	; 32
    154e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
			scr_position = scr_position == 2 ? 0 : scr_position + 1;
    1552:	c2 30       	cpi	r28, 0x02	; 2
    1554:	d9 f1       	breq	.+118    	; 0x15cc <interface_options+0x164>
    1556:	cf 5f       	subi	r28, 0xFF	; 255
		}
		
		set_position(1, (scr_position % 3) + 3);
    1558:	c0 9f       	mul	r28, r16
    155a:	81 2d       	mov	r24, r1
    155c:	11 24       	eor	r1, r1
    155e:	86 95       	lsr	r24
    1560:	98 2f       	mov	r25, r24
    1562:	99 0f       	add	r25, r25
    1564:	89 0f       	add	r24, r25
    1566:	6c 2f       	mov	r22, r28
    1568:	68 1b       	sub	r22, r24
    156a:	6d 5f       	subi	r22, 0xFD	; 253
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
		print_char('#');
    1572:	83 e2       	ldi	r24, 0x23	; 35
    1574:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
		
		touch_data = read_touchpad_data();
    1578:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
    157c:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
		if (change_touch_data.rightButton)
    1580:	88 23       	and	r24, r24
    1582:	51 f0       	breq	.+20     	; 0x1598 <interface_options+0x130>
		{
			switch(scr_position)
    1584:	c1 30       	cpi	r28, 0x01	; 1
    1586:	79 f0       	breq	.+30     	; 0x15a6 <interface_options+0x13e>
    1588:	18 f0       	brcs	.+6      	; 0x1590 <interface_options+0x128>
    158a:	c2 30       	cpi	r28, 0x02	; 2
    158c:	19 f0       	breq	.+6      	; 0x1594 <interface_options+0x12c>
    158e:	04 c0       	rjmp	.+8      	; 0x1598 <interface_options+0x130>
			{
				case 0:
				return State_Mode;
    1590:	8a e0       	ldi	r24, 0x0A	; 10
    1592:	2b c0       	rjmp	.+86     	; 0x15ea <interface_options+0x182>
				case 1:
				return State_Clear_HighScores;
				case 2:
				return State_Username;
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	29 c0       	rjmp	.+82     	; 0x15ea <interface_options+0x182>
			}
		}
		refresh_oled();
    1598:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	}
    159c:	a0 cf       	rjmp	.-192    	; 0x14de <interface_options+0x76>
		change_y = change_yaxis(direction);
		change_x = change_xaxis(direction);
		
		if (change_x == Right)
		{
			return State_HighScores;
    159e:	88 e0       	ldi	r24, 0x08	; 8
    15a0:	24 c0       	rjmp	.+72     	; 0x15ea <interface_options+0x182>
		}
		else if (change_x == Left)
		{
			return State_NewGame;
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	22 c0       	rjmp	.+68     	; 0x15ea <interface_options+0x182>
			switch(scr_position)
			{
				case 0:
				return State_Mode;
				case 1:
				return State_Clear_HighScores;
    15a6:	89 e0       	ldi	r24, 0x09	; 9
    15a8:	20 c0       	rjmp	.+64     	; 0x15ea <interface_options+0x182>
		if (change_touch_data.rightButton)
		{
			switch(scr_position)
			{
				case 0:
				return State_Mode;
    15aa:	8a e0       	ldi	r24, 0x0A	; 10
    15ac:	1e c0       	rjmp	.+60     	; 0x15ea <interface_options+0x182>
			set_position(1, (scr_position % 3) + 3);
			print_char(' ');
			scr_position = scr_position == 2 ? 0 : scr_position + 1;
		}
		
		set_position(1, (scr_position % 3) + 3);
    15ae:	65 e0       	ldi	r22, 0x05	; 5
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
		print_char('#');
    15b6:	83 e2       	ldi	r24, 0x23	; 35
    15b8:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
		
		touch_data = read_touchpad_data();
    15bc:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
    15c0:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
		if (change_touch_data.rightButton)
    15c4:	81 11       	cpse	r24, r1
    15c6:	e6 cf       	rjmp	.-52     	; 0x1594 <interface_options+0x12c>
		
		if (change_y == Up)
		{
			set_position(1, (scr_position % 3) + 3);
			print_char(' ');
			scr_position = scr_position == 0 ? 2 : scr_position - 1;
    15c8:	ce 2d       	mov	r28, r14
    15ca:	e6 cf       	rjmp	.-52     	; 0x1598 <interface_options+0x130>
			set_position(1, (scr_position % 3) + 3);
			print_char(' ');
			scr_position = scr_position == 2 ? 0 : scr_position + 1;
		}
		
		set_position(1, (scr_position % 3) + 3);
    15cc:	63 e0       	ldi	r22, 0x03	; 3
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
		print_char('#');
    15d4:	83 e2       	ldi	r24, 0x23	; 35
    15d6:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
		
		touch_data = read_touchpad_data();
    15da:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
    15de:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
		if (change_touch_data.rightButton)
    15e2:	81 11       	cpse	r24, r1
    15e4:	e2 cf       	rjmp	.-60     	; 0x15aa <interface_options+0x142>
		}
		else if (change_y == Down)
		{
			set_position(1, (scr_position % 3) + 3);
			print_char(' ');
			scr_position = scr_position == 2 ? 0 : scr_position + 1;
    15e6:	cf 2d       	mov	r28, r15
    15e8:	d7 cf       	rjmp	.-82     	; 0x1598 <interface_options+0x130>
				return State_Username;
			}
		}
		refresh_oled();
	}
}
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	1f 91       	pop	r17
    15f0:	0f 91       	pop	r16
    15f2:	ff 90       	pop	r15
    15f4:	ef 90       	pop	r14
    15f6:	08 95       	ret

000015f8 <interface_mode>:
* \brief Function call during the set mode phase
*

****************************************************************************/
InterfaceState interface_mode()
{
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
	JoystickDirection change_y;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	uint8_t scr_position = 0;
	
	clear_oled();
    15fc:	0e 94 a9 03 	call	0x752	; 0x752 <clear_oled>
	
	position = read_joystick_position();
    1600:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
	direction = read_joystick_direction(position);
    1604:	0e 94 61 02 	call	0x4c2	; 0x4c2 <read_joystick_direction>
	change_y = change_yaxis(direction);
    1608:	0e 94 b3 02 	call	0x566	; 0x566 <change_yaxis>

	set_position(14,0);
    160c:	60 e0       	ldi	r22, 0x00	; 0
    160e:	8e e0       	ldi	r24, 0x0E	; 14
    1610:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Mode");
    1614:	84 e7       	ldi	r24, 0x74	; 116
    1616:	92 e0       	ldi	r25, 0x02	; 2
    1618:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	revert_colour_line(0);
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <revert_colour_line>
	set_position(3,3);
    1622:	63 e0       	ldi	r22, 0x03	; 3
    1624:	83 e0       	ldi	r24, 0x03	; 3
    1626:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Reverse");
    162a:	89 e9       	ldi	r24, 0x99	; 153
    162c:	92 e0       	ldi	r25, 0x02	; 2
    162e:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	set_position(3,5);
    1632:	65 e0       	ldi	r22, 0x05	; 5
    1634:	83 e0       	ldi	r24, 0x03	; 3
    1636:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Normal");
    163a:	8d e4       	ldi	r24, 0x4D	; 77
    163c:	92 e0       	ldi	r25, 0x02	; 2
    163e:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	
	
	set_position(1, (scr_position % 2) * 2 + 3);
    1642:	63 e0       	ldi	r22, 0x03	; 3
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_char('#');
    164a:	83 e2       	ldi	r24, 0x23	; 35
    164c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
	JoystickPosition position;
	JoystickDirection direction;
	JoystickDirection change_y;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	uint8_t scr_position = 0;
    1650:	c0 e0       	ldi	r28, 0x00	; 0
		}
		else if (change_y == Down)
		{
			set_position(1, (scr_position % 2) * 2 + 3);
			print_char(' ');
			scr_position = scr_position == 1 ? 0 : 1;
    1652:	d0 e0       	ldi	r29, 0x00	; 0
	set_position(1, (scr_position % 2) * 2 + 3);
	print_char('#');
	
	while(1)
	{
		position = read_joystick_position();
    1654:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
		direction = read_joystick_direction(position);
    1658:	0e 94 61 02 	call	0x4c2	; 0x4c2 <read_joystick_direction>
		change_y = change_yaxis(direction);
    165c:	0e 94 b3 02 	call	0x566	; 0x566 <change_yaxis>
		
		if (change_y == Up)
    1660:	82 30       	cpi	r24, 0x02	; 2
    1662:	79 f4       	brne	.+30     	; 0x1682 <interface_mode+0x8a>
		{
			set_position(1, (scr_position % 2) * 2 + 3);
    1664:	6c 2f       	mov	r22, r28
    1666:	61 70       	andi	r22, 0x01	; 1
    1668:	66 0f       	add	r22, r22
    166a:	6d 5f       	subi	r22, 0xFD	; 253
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
			print_char(' ');
    1672:	80 e2       	ldi	r24, 0x20	; 32
    1674:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
			scr_position = scr_position == 0 ? 1 : 0;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	c1 11       	cpse	r28, r1
    167c:	8d 2f       	mov	r24, r29
    167e:	c8 2f       	mov	r28, r24
    1680:	11 c0       	rjmp	.+34     	; 0x16a4 <interface_mode+0xac>
		}
		else if (change_y == Down)
    1682:	83 30       	cpi	r24, 0x03	; 3
    1684:	79 f4       	brne	.+30     	; 0x16a4 <interface_mode+0xac>
		{
			set_position(1, (scr_position % 2) * 2 + 3);
    1686:	6c 2f       	mov	r22, r28
    1688:	61 70       	andi	r22, 0x01	; 1
    168a:	66 0f       	add	r22, r22
    168c:	6d 5f       	subi	r22, 0xFD	; 253
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
			print_char(' ');
    1694:	80 e2       	ldi	r24, 0x20	; 32
    1696:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
			scr_position = scr_position == 1 ? 0 : 1;
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	c1 30       	cpi	r28, 0x01	; 1
    169e:	09 f4       	brne	.+2      	; 0x16a2 <interface_mode+0xaa>
    16a0:	8d 2f       	mov	r24, r29
    16a2:	c8 2f       	mov	r28, r24
		}
		
		set_position(1, (scr_position % 2) * 2 + 3);
    16a4:	6c 2f       	mov	r22, r28
    16a6:	61 70       	andi	r22, 0x01	; 1
    16a8:	66 0f       	add	r22, r22
    16aa:	6d 5f       	subi	r22, 0xFD	; 253
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
		print_char('#');
    16b2:	83 e2       	ldi	r24, 0x23	; 35
    16b4:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
		
		touch_data = read_touchpad_data();
    16b8:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
    16bc:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
		if (change_touch_data.rightButton)
    16c0:	88 23       	and	r24, r24
    16c2:	a9 f0       	breq	.+42     	; 0x16ee <interface_mode+0xf6>
		{
			switch(scr_position)
    16c4:	cc 23       	and	r28, r28
    16c6:	19 f0       	breq	.+6      	; 0x16ce <interface_mode+0xd6>
    16c8:	c1 30       	cpi	r28, 0x01	; 1
    16ca:	49 f0       	breq	.+18     	; 0x16de <interface_mode+0xe6>
    16cc:	13 c0       	rjmp	.+38     	; 0x16f4 <interface_mode+0xfc>
			{
				case 0:
				send_game_mode(Reverse_settings);
    16ce:	87 e0       	ldi	r24, 0x07	; 7
    16d0:	0e 94 23 02 	call	0x446	; 0x446 <send_game_mode>
				printf("Normal\n");
    16d4:	8d e4       	ldi	r24, 0x4D	; 77
    16d6:	92 e0       	ldi	r25, 0x02	; 2
    16d8:	0e 94 26 10 	call	0x204c	; 0x204c <puts>
				break;
    16dc:	0b c0       	rjmp	.+22     	; 0x16f4 <interface_mode+0xfc>
				case 1:
				send_game_mode(Normal_settings);
    16de:	86 e0       	ldi	r24, 0x06	; 6
    16e0:	0e 94 23 02 	call	0x446	; 0x446 <send_game_mode>
				printf("Reverse\n");
    16e4:	89 e9       	ldi	r24, 0x99	; 153
    16e6:	92 e0       	ldi	r25, 0x02	; 2
    16e8:	0e 94 26 10 	call	0x204c	; 0x204c <puts>
				break;
    16ec:	03 c0       	rjmp	.+6      	; 0x16f4 <interface_mode+0xfc>
			}
			return State_Options;
		}
		refresh_oled();
    16ee:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	}
    16f2:	b0 cf       	rjmp	.-160    	; 0x1654 <interface_mode+0x5c>
}
    16f4:	87 e0       	ldi	r24, 0x07	; 7
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	08 95       	ret

000016fc <interface_clear_highscores>:
* \brief Function call during the set sound phase
*

****************************************************************************/
InterfaceState interface_clear_highscores()
{
    16fc:	cf 93       	push	r28
    16fe:	df 93       	push	r29
	JoystickDirection change_y;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	uint8_t scr_position = 0;
	
	clear_oled();
    1700:	0e 94 a9 03 	call	0x752	; 0x752 <clear_oled>
	
	position = read_joystick_position();
    1704:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
	direction = read_joystick_direction(position);
    1708:	0e 94 61 02 	call	0x4c2	; 0x4c2 <read_joystick_direction>
	change_y = change_yaxis(direction);
    170c:	0e 94 b3 02 	call	0x566	; 0x566 <change_yaxis>

	set_position(7,0);
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	87 e0       	ldi	r24, 0x07	; 7
    1714:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Clear HighScores");
    1718:	81 ea       	ldi	r24, 0xA1	; 161
    171a:	92 e0       	ldi	r25, 0x02	; 2
    171c:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	revert_colour_line(0);
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	0e 94 71 04 	call	0x8e2	; 0x8e2 <revert_colour_line>
	set_position(3,3);
    1726:	63 e0       	ldi	r22, 0x03	; 3
    1728:	83 e0       	ldi	r24, 0x03	; 3
    172a:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("YES");
    172e:	82 eb       	ldi	r24, 0xB2	; 178
    1730:	92 e0       	ldi	r25, 0x02	; 2
    1732:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	set_position(3,5);
    1736:	65 e0       	ldi	r22, 0x05	; 5
    1738:	83 e0       	ldi	r24, 0x03	; 3
    173a:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("NO");
    173e:	86 eb       	ldi	r24, 0xB6	; 182
    1740:	92 e0       	ldi	r25, 0x02	; 2
    1742:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	JoystickPosition position;
	JoystickDirection direction;
	JoystickDirection change_y;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	uint8_t scr_position = 0;
    1746:	c0 e0       	ldi	r28, 0x00	; 0
		}
		else if (change_y == Down)
		{
			set_position(1, (scr_position % 2) * 2 + 3);
			print_char(' ');
			scr_position = scr_position == 1 ? 0 : 1;
    1748:	d0 e0       	ldi	r29, 0x00	; 0
	set_position(3,5);
	print_string("NO");
	
	while(1)
	{
		position = read_joystick_position();
    174a:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
		direction = read_joystick_direction(position);
    174e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <read_joystick_direction>
		change_y = change_yaxis(direction);
    1752:	0e 94 b3 02 	call	0x566	; 0x566 <change_yaxis>
		
		if (change_y == Up)
    1756:	82 30       	cpi	r24, 0x02	; 2
    1758:	79 f4       	brne	.+30     	; 0x1778 <interface_clear_highscores+0x7c>
		{
			set_position(1, (scr_position % 2) * 2 + 3);
    175a:	6c 2f       	mov	r22, r28
    175c:	61 70       	andi	r22, 0x01	; 1
    175e:	66 0f       	add	r22, r22
    1760:	6d 5f       	subi	r22, 0xFD	; 253
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
			print_char(' ');
    1768:	80 e2       	ldi	r24, 0x20	; 32
    176a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
			scr_position = scr_position == 0 ? 1 : 0;
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	c1 11       	cpse	r28, r1
    1772:	8d 2f       	mov	r24, r29
    1774:	c8 2f       	mov	r28, r24
    1776:	11 c0       	rjmp	.+34     	; 0x179a <interface_clear_highscores+0x9e>
		}
		else if (change_y == Down)
    1778:	83 30       	cpi	r24, 0x03	; 3
    177a:	79 f4       	brne	.+30     	; 0x179a <interface_clear_highscores+0x9e>
		{
			set_position(1, (scr_position % 2) * 2 + 3);
    177c:	6c 2f       	mov	r22, r28
    177e:	61 70       	andi	r22, 0x01	; 1
    1780:	66 0f       	add	r22, r22
    1782:	6d 5f       	subi	r22, 0xFD	; 253
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
			print_char(' ');
    178a:	80 e2       	ldi	r24, 0x20	; 32
    178c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
			scr_position = scr_position == 1 ? 0 : 1;
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	c1 30       	cpi	r28, 0x01	; 1
    1794:	09 f4       	brne	.+2      	; 0x1798 <interface_clear_highscores+0x9c>
    1796:	8d 2f       	mov	r24, r29
    1798:	c8 2f       	mov	r28, r24
		}
		
		set_position(1, (scr_position % 2) * 2 + 3);
    179a:	6c 2f       	mov	r22, r28
    179c:	61 70       	andi	r22, 0x01	; 1
    179e:	66 0f       	add	r22, r22
    17a0:	6d 5f       	subi	r22, 0xFD	; 253
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
		print_char('#');
    17a8:	83 e2       	ldi	r24, 0x23	; 35
    17aa:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
		
		touch_data = read_touchpad_data();
    17ae:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
    17b2:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
		if (change_touch_data.rightButton)
    17b6:	88 23       	and	r24, r24
    17b8:	39 f0       	breq	.+14     	; 0x17c8 <interface_clear_highscores+0xcc>
		{
			switch(scr_position)
    17ba:	c1 11       	cpse	r28, r1
    17bc:	08 c0       	rjmp	.+16     	; 0x17ce <interface_clear_highscores+0xd2>
			{
				
				case 0:
					high_score_clear();
    17be:	0e 94 1b 07 	call	0xe36	; 0xe36 <high_score_clear>
					SRAM_high_score_write();
    17c2:	0e 94 b3 05 	call	0xb66	; 0xb66 <SRAM_high_score_write>
					break;
    17c6:	03 c0       	rjmp	.+6      	; 0x17ce <interface_clear_highscores+0xd2>
				case 1:
					break;
			}
			return State_Options;
		}
		refresh_oled();
    17c8:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	}
    17cc:	be cf       	rjmp	.-132    	; 0x174a <interface_clear_highscores+0x4e>
}
    17ce:	87 e0       	ldi	r24, 0x07	; 7
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	08 95       	ret

000017d6 <interface_tutorial>:
/****************************************************************************
* \brief Function call during the set sound phase
*
****************************************************************************/
InterfaceState interface_tutorial()
{
    17d6:	ef 92       	push	r14
    17d8:	ff 92       	push	r15
    17da:	0f 93       	push	r16
    17dc:	1f 93       	push	r17
    17de:	cf 93       	push	r28
    17e0:	df 93       	push	r29
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	JoystickPosition position;
	
	clear_oled();
    17e2:	0e 94 a9 03 	call	0x752	; 0x752 <clear_oled>
	
	set_position(14,0);
    17e6:	60 e0       	ldi	r22, 0x00	; 0
    17e8:	8e e0       	ldi	r24, 0x0E	; 14
    17ea:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Tutorial");
    17ee:	8f e3       	ldi	r24, 0x3F	; 63
    17f0:	92 e0       	ldi	r25, 0x02	; 2
    17f2:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	revert_colour_line(0);
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	0e 94 71 04 	call	0x8e2	; 0x8e2 <revert_colour_line>
	set_position(0,6);
    17fc:	66 e0       	ldi	r22, 0x06	; 6
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Press LEFT BUTTON to continue...");
    1804:	89 eb       	ldi	r24, 0xB9	; 185
    1806:	92 e0       	ldi	r25, 0x02	; 2
    1808:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	refresh_oled();
    180c:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	
	set_position(0,1);
    1810:	61 e0       	ldi	r22, 0x01	; 1
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("To move servo move joystick");
    1818:	8a ed       	ldi	r24, 0xDA	; 218
    181a:	92 e0       	ldi	r25, 0x02	; 2
    181c:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	refresh_oled();
    1820:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	while(! change_touch_data.leftButton)
	{
		position = read_joystick_position();
		position.yaxis = 137;
    1824:	19 e8       	ldi	r17, 0x89	; 137
	set_position(0,1);
	print_string("To move servo move joystick");
	refresh_oled();
	while(! change_touch_data.leftButton)
	{
		position = read_joystick_position();
    1826:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
    182a:	f8 2e       	mov	r15, r24
		position.yaxis = 137;
    182c:	e1 2e       	mov	r14, r17
		touch_data = read_touchpad_data();
    182e:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
    1832:	d7 2f       	mov	r29, r23
    1834:	c9 2f       	mov	r28, r25
		touch_data.rightTouchPad = 127;
		touch_data.rightButton = 0;
		send_joystick_possition(position, touch_data);
    1836:	4f e7       	ldi	r20, 0x7F	; 127
    1838:	57 2f       	mov	r21, r23
    183a:	60 e0       	ldi	r22, 0x00	; 0
    183c:	79 2f       	mov	r23, r25
    183e:	8f 2d       	mov	r24, r15
    1840:	91 2f       	mov	r25, r17
    1842:	0e 94 04 02 	call	0x408	; 0x408 <send_joystick_possition>
		change_touch_data = change_touchpad_data(touch_data);
    1846:	6f e7       	ldi	r22, 0x7F	; 127
    1848:	7d 2f       	mov	r23, r29
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	9c 2f       	mov	r25, r28
    184e:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
	refresh_oled();
	
	set_position(0,1);
	print_string("To move servo move joystick");
	refresh_oled();
	while(! change_touch_data.leftButton)
    1852:	99 23       	and	r25, r25
    1854:	41 f3       	breq	.-48     	; 0x1826 <interface_tutorial+0x50>
		send_joystick_possition(position, touch_data);
		change_touch_data = change_touchpad_data(touch_data);
	}
	change_touch_data.leftButton = 0;
	
	set_position(0,1);
    1856:	61 e0       	ldi	r22, 0x01	; 1
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("To move motor touch RIGHT SLIDER");
    185e:	86 ef       	ldi	r24, 0xF6	; 246
    1860:	92 e0       	ldi	r25, 0x02	; 2
    1862:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	refresh_oled();
    1866:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	
	while(! change_touch_data.leftButton)
	{
		touch_data = read_touchpad_data();
    186a:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
    186e:	06 2f       	mov	r16, r22
    1870:	d7 2f       	mov	r29, r23
    1872:	c9 2f       	mov	r28, r25
		touch_data.rightButton = 0;
		send_joystick_possition(position, touch_data);
    1874:	46 2f       	mov	r20, r22
    1876:	57 2f       	mov	r21, r23
    1878:	60 e0       	ldi	r22, 0x00	; 0
    187a:	79 2f       	mov	r23, r25
    187c:	8f 2d       	mov	r24, r15
    187e:	9e 2d       	mov	r25, r14
    1880:	0e 94 04 02 	call	0x408	; 0x408 <send_joystick_possition>
		change_touch_data = change_touchpad_data(touch_data);
    1884:	60 2f       	mov	r22, r16
    1886:	7d 2f       	mov	r23, r29
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	9c 2f       	mov	r25, r28
    188c:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
	
	set_position(0,1);
	print_string("To move motor touch RIGHT SLIDER");
	refresh_oled();
	
	while(! change_touch_data.leftButton)
    1890:	99 23       	and	r25, r25
    1892:	59 f3       	breq	.-42     	; 0x186a <interface_tutorial+0x94>
		send_joystick_possition(position, touch_data);
		change_touch_data = change_touchpad_data(touch_data);
	}
	change_touch_data.leftButton = 0;
	
	set_position(0,1);
    1894:	61 e0       	ldi	r22, 0x01	; 1
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("  To shoot touch RIGHT BUTTON   ");
    189c:	87 e1       	ldi	r24, 0x17	; 23
    189e:	93 e0       	ldi	r25, 0x03	; 3
    18a0:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	refresh_oled();
    18a4:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	
	while(! change_touch_data.leftButton)
	{
		touch_data = read_touchpad_data();
    18a8:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
    18ac:	d7 2f       	mov	r29, r23
    18ae:	18 2f       	mov	r17, r24
    18b0:	c9 2f       	mov	r28, r25
		touch_data.rightTouchPad = 127;
		send_joystick_possition(position, touch_data);
    18b2:	4f e7       	ldi	r20, 0x7F	; 127
    18b4:	57 2f       	mov	r21, r23
    18b6:	68 2f       	mov	r22, r24
    18b8:	79 2f       	mov	r23, r25
    18ba:	8f 2d       	mov	r24, r15
    18bc:	9e 2d       	mov	r25, r14
    18be:	0e 94 04 02 	call	0x408	; 0x408 <send_joystick_possition>
		change_touch_data = change_touchpad_data(touch_data);
    18c2:	6f e7       	ldi	r22, 0x7F	; 127
    18c4:	7d 2f       	mov	r23, r29
    18c6:	81 2f       	mov	r24, r17
    18c8:	9c 2f       	mov	r25, r28
    18ca:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
	
	set_position(0,1);
	print_string("  To shoot touch RIGHT BUTTON   ");
	refresh_oled();
	
	while(! change_touch_data.leftButton)
    18ce:	99 23       	and	r25, r25
    18d0:	59 f3       	breq	.-42     	; 0x18a8 <interface_tutorial+0xd2>
		send_joystick_possition(position, touch_data);
		change_touch_data = change_touchpad_data(touch_data);
	}
	change_touch_data.leftButton = 0;
	
	set_position(0,1);
    18d2:	61 e0       	ldi	r22, 0x01	; 1
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("    Try everything together     ");
    18da:	88 e3       	ldi	r24, 0x38	; 56
    18dc:	93 e0       	ldi	r25, 0x03	; 3
    18de:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	refresh_oled();
    18e2:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	
	while(! change_touch_data.leftButton)
	{
		touch_data = read_touchpad_data();
    18e6:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
    18ea:	06 2f       	mov	r16, r22
    18ec:	d7 2f       	mov	r29, r23
    18ee:	18 2f       	mov	r17, r24
    18f0:	c9 2f       	mov	r28, r25
		position = read_joystick_position();
    18f2:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
		send_joystick_possition(position, touch_data);
    18f6:	40 2f       	mov	r20, r16
    18f8:	5d 2f       	mov	r21, r29
    18fa:	61 2f       	mov	r22, r17
    18fc:	7c 2f       	mov	r23, r28
    18fe:	0e 94 04 02 	call	0x408	; 0x408 <send_joystick_possition>
		change_touch_data = change_touchpad_data(touch_data);
    1902:	60 2f       	mov	r22, r16
    1904:	7d 2f       	mov	r23, r29
    1906:	81 2f       	mov	r24, r17
    1908:	9c 2f       	mov	r25, r28
    190a:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
	
	set_position(0,1);
	print_string("    Try everything together     ");
	refresh_oled();
	
	while(! change_touch_data.leftButton)
    190e:	99 23       	and	r25, r25
    1910:	51 f3       	breq	.-44     	; 0x18e6 <interface_tutorial+0x110>
	}
	change_touch_data.leftButton = 0;
	change_touch_data.rightButton = 0;
	
	return State_NewGame;
}
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	df 91       	pop	r29
    1916:	cf 91       	pop	r28
    1918:	1f 91       	pop	r17
    191a:	0f 91       	pop	r16
    191c:	ff 90       	pop	r15
    191e:	ef 90       	pop	r14
    1920:	08 95       	ret

00001922 <interface_print_mode>:
*
* \param in game mode
****************************************************************************/
InterfaceState interface_print_mode(GameModes mode)
{
	current_mode = mode;
    1922:	80 93 23 04 	sts	0x0423, r24
	switch (mode)
    1926:	83 30       	cpi	r24, 0x03	; 3
    1928:	91 f0       	breq	.+36     	; 0x194e <interface_print_mode+0x2c>
    192a:	18 f4       	brcc	.+6      	; 0x1932 <interface_print_mode+0x10>
    192c:	82 30       	cpi	r24, 0x02	; 2
    192e:	31 f0       	breq	.+12     	; 0x193c <interface_print_mode+0x1a>
    1930:	28 c0       	rjmp	.+80     	; 0x1982 <interface_print_mode+0x60>
    1932:	84 30       	cpi	r24, 0x04	; 4
    1934:	a9 f0       	breq	.+42     	; 0x1960 <interface_print_mode+0x3e>
    1936:	85 30       	cpi	r24, 0x05	; 5
    1938:	e1 f0       	breq	.+56     	; 0x1972 <interface_print_mode+0x50>
    193a:	23 c0       	rjmp	.+70     	; 0x1982 <interface_print_mode+0x60>
	{
		case Easy :
		set_position(14,0);
    193c:	60 e0       	ldi	r22, 0x00	; 0
    193e:	8e e0       	ldi	r24, 0x0E	; 14
    1940:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
		print_string("Easy");
    1944:	88 e4       	ldi	r24, 0x48	; 72
    1946:	92 e0       	ldi	r25, 0x02	; 2
    1948:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
		break;
    194c:	1a c0       	rjmp	.+52     	; 0x1982 <interface_print_mode+0x60>
		
		case Normal :
		set_position(12,0);
    194e:	60 e0       	ldi	r22, 0x00	; 0
    1950:	8c e0       	ldi	r24, 0x0C	; 12
    1952:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
		print_string("Normal");
    1956:	8d e4       	ldi	r24, 0x4D	; 77
    1958:	92 e0       	ldi	r25, 0x02	; 2
    195a:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
		break;
    195e:	11 c0       	rjmp	.+34     	; 0x1982 <interface_print_mode+0x60>
		
		case Hard :
		set_position(12,0);
    1960:	60 e0       	ldi	r22, 0x00	; 0
    1962:	8c e0       	ldi	r24, 0x0C	; 12
    1964:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
		print_string("Hard");
    1968:	84 e5       	ldi	r24, 0x54	; 84
    196a:	92 e0       	ldi	r25, 0x02	; 2
    196c:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
		break;
    1970:	08 c0       	rjmp	.+16     	; 0x1982 <interface_print_mode+0x60>
		
		case Insane :
		set_position(12,0);
    1972:	60 e0       	ldi	r22, 0x00	; 0
    1974:	8c e0       	ldi	r24, 0x0C	; 12
    1976:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
		print_string("Insane");
    197a:	89 e5       	ldi	r24, 0x59	; 89
    197c:	92 e0       	ldi	r25, 0x02	; 2
    197e:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
		break;
		
		default :
		break;
	}
	revert_colour_line(0);
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	0e 94 71 04 	call	0x8e2	; 0x8e2 <revert_colour_line>
	//refresh_oled();
	
	return State_Playing;
	
}
    1988:	8b e0       	ldi	r24, 0x0B	; 11
    198a:	08 95       	ret

0000198c <inteface_end_game>:
* \brief Animations and high-scores handling
*
* 
****************************************************************************/
InterfaceState inteface_end_game()
{
    198c:	0f 93       	push	r16
    198e:	1f 93       	push	r17
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	61 97       	sbiw	r28, 0x11	; 17
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	de bf       	out	0x3e, r29	; 62
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	cd bf       	out	0x3d, r28	; 61
    19a4:	de 01       	movw	r26, r28
    19a6:	11 96       	adiw	r26, 0x01	; 1
    19a8:	e0 e0       	ldi	r30, 0x00	; 0
    19aa:	fc e1       	ldi	r31, 0x1C	; 28
	char position_info[11];
	uint8_t i;
	
	for(i = 0; i < USERNAME_LENGTH; i++)
	{
		name[i] = ext_ram[i];
    19ac:	81 91       	ld	r24, Z+
    19ae:	8d 93       	st	X+, r24
	volatile char *ext_ram = (char *) SRAM_USERNAME_ADDR;
	char name[USERNAME_LENGTH + 1];
	char position_info[11];
	uint8_t i;
	
	for(i = 0; i < USERNAME_LENGTH; i++)
    19b0:	e5 30       	cpi	r30, 0x05	; 5
    19b2:	8c e1       	ldi	r24, 0x1C	; 28
    19b4:	f8 07       	cpc	r31, r24
    19b6:	d1 f7       	brne	.-12     	; 0x19ac <inteface_end_game+0x20>
	{
		name[i] = ext_ram[i];
	}
	name[USERNAME_LENGTH] = '\0';
    19b8:	1e 82       	std	Y+6, r1	; 0x06
	
	position = high_score_add(name, current_score);
    19ba:	60 91 24 04 	lds	r22, 0x0424
    19be:	70 91 25 04 	lds	r23, 0x0425
    19c2:	ce 01       	movw	r24, r28
    19c4:	01 96       	adiw	r24, 0x01	; 1
    19c6:	0e 94 79 06 	call	0xcf2	; 0xcf2 <high_score_add>
    19ca:	18 2f       	mov	r17, r24
	
	end_game_animation(0);
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	0e 94 92 04 	call	0x924	; 0x924 <end_game_animation>
	clear_oled();
    19d2:	0e 94 a9 03 	call	0x752	; 0x752 <clear_oled>
	set_position(10,3);
    19d6:	63 e0       	ldi	r22, 0x03	; 3
    19d8:	8a e0       	ldi	r24, 0x0A	; 10
    19da:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("GAME OVER!");
    19de:	89 e5       	ldi	r24, 0x59	; 89
    19e0:	93 e0       	ldi	r25, 0x03	; 3
    19e2:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	if (position)
    19e6:	11 23       	and	r17, r17
    19e8:	e1 f0       	breq	.+56     	; 0x1a22 <inteface_end_game+0x96>
	{
		set_position(10,4);
    19ea:	64 e0       	ldi	r22, 0x04	; 4
    19ec:	8a e0       	ldi	r24, 0x0A	; 10
    19ee:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
		snprintf(position_info, 11, "You are #%d", position);
    19f2:	1f 92       	push	r1
    19f4:	1f 93       	push	r17
    19f6:	84 e6       	ldi	r24, 0x64	; 100
    19f8:	93 e0       	ldi	r25, 0x03	; 3
    19fa:	9f 93       	push	r25
    19fc:	8f 93       	push	r24
    19fe:	1f 92       	push	r1
    1a00:	8b e0       	ldi	r24, 0x0B	; 11
    1a02:	8f 93       	push	r24
    1a04:	8e 01       	movw	r16, r28
    1a06:	09 5f       	subi	r16, 0xF9	; 249
    1a08:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0a:	1f 93       	push	r17
    1a0c:	0f 93       	push	r16
    1a0e:	0e 94 53 10 	call	0x20a6	; 0x20a6 <snprintf>
		print_string(position_info);
    1a12:	c8 01       	movw	r24, r16
    1a14:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
    1a18:	0f b6       	in	r0, 0x3f	; 63
    1a1a:	f8 94       	cli
    1a1c:	de bf       	out	0x3e, r29	; 62
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	cd bf       	out	0x3d, r28	; 61
	}
	
	refresh_oled();
    1a22:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	
	old_time = current_time = timer1_get_time();
    1a26:	0e 94 b3 07 	call	0xf66	; 0xf66 <timer1_get_time>
    1a2a:	90 93 27 04 	sts	0x0427, r25
    1a2e:	80 93 26 04 	sts	0x0426, r24
	old_time += 3;
    1a32:	8c 01       	movw	r16, r24
    1a34:	0d 5f       	subi	r16, 0xFD	; 253
    1a36:	1f 4f       	sbci	r17, 0xFF	; 255
	while(current_time <= old_time)
    1a38:	80 91 26 04 	lds	r24, 0x0426
    1a3c:	90 91 27 04 	lds	r25, 0x0427
    1a40:	08 17       	cp	r16, r24
    1a42:	19 07       	cpc	r17, r25
    1a44:	68 f0       	brcs	.+26     	; 0x1a60 <inteface_end_game+0xd4>
	{
		current_time = timer1_get_time();
    1a46:	0e 94 b3 07 	call	0xf66	; 0xf66 <timer1_get_time>
    1a4a:	90 93 27 04 	sts	0x0427, r25
    1a4e:	80 93 26 04 	sts	0x0426, r24
	
	refresh_oled();
	
	old_time = current_time = timer1_get_time();
	old_time += 3;
	while(current_time <= old_time)
    1a52:	20 91 26 04 	lds	r18, 0x0426
    1a56:	30 91 27 04 	lds	r19, 0x0427
    1a5a:	02 17       	cp	r16, r18
    1a5c:	13 07       	cpc	r17, r19
    1a5e:	98 f7       	brcc	.-26     	; 0x1a46 <inteface_end_game+0xba>
	{
		current_time = timer1_get_time();
	}
	end_game_animation(1);
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	0e 94 92 04 	call	0x924	; 0x924 <end_game_animation>
	
	return State_HighScores;
}
    1a66:	88 e0       	ldi	r24, 0x08	; 8
    1a68:	61 96       	adiw	r28, 0x11	; 17
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	de bf       	out	0x3e, r29	; 62
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	cd bf       	out	0x3d, r28	; 61
    1a74:	df 91       	pop	r29
    1a76:	cf 91       	pop	r28
    1a78:	1f 91       	pop	r17
    1a7a:	0f 91       	pop	r16
    1a7c:	08 95       	ret

00001a7e <minigame_push_buttons>:

uint8_t minigame_push_buttons()
{
	TouchpadData touch_data;
	
	clear_oled();
    1a7e:	0e 94 a9 03 	call	0x752	; 0x752 <clear_oled>
	set_position(7,3);
    1a82:	63 e0       	ldi	r22, 0x03	; 3
    1a84:	87 e0       	ldi	r24, 0x07	; 7
    1a86:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("PUSH BOTH BUTTONS!");
    1a8a:	80 e7       	ldi	r24, 0x70	; 112
    1a8c:	93 e0       	ldi	r25, 0x03	; 3
    1a8e:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	refresh_oled();
    1a92:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	
	while (1)
	{	
		touch_data = read_touchpad_data();
    1a96:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
		if (touch_data.leftButton && touch_data.rightButton)
    1a9a:	99 23       	and	r25, r25
    1a9c:	e1 f3       	breq	.-8      	; 0x1a96 <minigame_push_buttons+0x18>
    1a9e:	88 23       	and	r24, r24
    1aa0:	d1 f3       	breq	.-12     	; 0x1a96 <minigame_push_buttons+0x18>
		{
			return 1;
		}
	}
	return 0;
}
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	08 95       	ret

00001aa6 <minigame_slide_left_slider_left>:
uint8_t minigame_slide_left_slider_left()
{
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
	TouchpadData touch_data;
	uint8_t been_right = 0;
	
	clear_oled();
    1aaa:	0e 94 a9 03 	call	0x752	; 0x752 <clear_oled>
	set_position(4,3);
    1aae:	63 e0       	ldi	r22, 0x03	; 3
    1ab0:	84 e0       	ldi	r24, 0x04	; 4
    1ab2:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("SLIDE LEFT SLIDER FROM");
    1ab6:	83 e8       	ldi	r24, 0x83	; 131
    1ab8:	93 e0       	ldi	r25, 0x03	; 3
    1aba:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	set_position(4,4);
    1abe:	64 e0       	ldi	r22, 0x04	; 4
    1ac0:	84 e0       	ldi	r24, 0x04	; 4
    1ac2:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("THE RIGHT TO THE LEFT!");
    1ac6:	8a e9       	ldi	r24, 0x9A	; 154
    1ac8:	93 e0       	ldi	r25, 0x03	; 3
    1aca:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	refresh_oled();
    1ace:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	return 0;
}
uint8_t minigame_slide_left_slider_left()
{
	TouchpadData touch_data;
	uint8_t been_right = 0;
    1ad2:	c0 e0       	ldi	r28, 0x00	; 0
	while (1)
	{
		touch_data = read_touchpad_data();
		if (!been_right && touch_data.leftTouchPad > 220)
		{
			been_right = 1;
    1ad4:	d1 e0       	ldi	r29, 0x01	; 1
	print_string("THE RIGHT TO THE LEFT!");
	refresh_oled();
	
	while (1)
	{
		touch_data = read_touchpad_data();
    1ad6:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
		if (!been_right && touch_data.leftTouchPad > 220)
    1ada:	c1 11       	cpse	r28, r1
    1adc:	03 c0       	rjmp	.+6      	; 0x1ae4 <minigame_slide_left_slider_left+0x3e>
    1ade:	7d 3d       	cpi	r23, 0xDD	; 221
    1ae0:	d0 f3       	brcs	.-12     	; 0x1ad6 <minigame_slide_left_slider_left+0x30>
		{
			been_right = 1;
    1ae2:	cd 2f       	mov	r28, r29
		}
		
		if (been_right && touch_data.leftTouchPad < 20)
    1ae4:	74 31       	cpi	r23, 0x14	; 20
    1ae6:	b8 f7       	brcc	.-18     	; 0x1ad6 <minigame_slide_left_slider_left+0x30>
		{
			return 1;
		}
	}
	return 0;
}
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	df 91       	pop	r29
    1aec:	cf 91       	pop	r28
    1aee:	08 95       	ret

00001af0 <minigame_slide_both_sliders_apart>:
uint8_t minigame_slide_both_sliders_apart()
{
    1af0:	0f 93       	push	r16
    1af2:	1f 93       	push	r17
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
	TouchpadData touch_data;
	uint8_t left_been_right = 0;
	uint8_t right_been_left = 0;
	
	clear_oled();
    1af8:	0e 94 a9 03 	call	0x752	; 0x752 <clear_oled>
	set_position(3,3);
    1afc:	63 e0       	ldi	r22, 0x03	; 3
    1afe:	83 e0       	ldi	r24, 0x03	; 3
    1b00:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("SLIDE BOTH SLIDERS APART!");
    1b04:	81 eb       	ldi	r24, 0xB1	; 177
    1b06:	93 e0       	ldi	r25, 0x03	; 3
    1b08:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	refresh_oled();
    1b0c:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
}
uint8_t minigame_slide_both_sliders_apart()
{
	TouchpadData touch_data;
	uint8_t left_been_right = 0;
	uint8_t right_been_left = 0;
    1b10:	d0 e0       	ldi	r29, 0x00	; 0
	return 0;
}
uint8_t minigame_slide_both_sliders_apart()
{
	TouchpadData touch_data;
	uint8_t left_been_right = 0;
    1b12:	c0 e0       	ldi	r28, 0x00	; 0
	refresh_oled();
	
	while (1)
	{
		touch_data = read_touchpad_data();
		if (!left_been_right && touch_data.leftTouchPad > 220)
    1b14:	11 e0       	ldi	r17, 0x01	; 1
    1b16:	00 e0       	ldi	r16, 0x00	; 0
	print_string("SLIDE BOTH SLIDERS APART!");
	refresh_oled();
	
	while (1)
	{
		touch_data = read_touchpad_data();
    1b18:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
		if (!left_been_right && touch_data.leftTouchPad > 220)
    1b1c:	c1 11       	cpse	r28, r1
    1b1e:	04 c0       	rjmp	.+8      	; 0x1b28 <minigame_slide_both_sliders_apart+0x38>
    1b20:	c1 2f       	mov	r28, r17
    1b22:	7d 3d       	cpi	r23, 0xDD	; 221
    1b24:	08 f4       	brcc	.+2      	; 0x1b28 <minigame_slide_both_sliders_apart+0x38>
    1b26:	c0 2f       	mov	r28, r16
		{
			left_been_right = 1;
		}
		
		if (!right_been_left && touch_data.rightTouchPad < 20)
    1b28:	d1 11       	cpse	r29, r1
    1b2a:	09 c0       	rjmp	.+18     	; 0x1b3e <minigame_slide_both_sliders_apart+0x4e>
    1b2c:	64 31       	cpi	r22, 0x14	; 20
    1b2e:	30 f0       	brcs	.+12     	; 0x1b3c <minigame_slide_both_sliders_apart+0x4c>
    1b30:	f3 cf       	rjmp	.-26     	; 0x1b18 <minigame_slide_both_sliders_apart+0x28>
		{
			right_been_left = 1;
		}
		
		if (left_been_right && right_been_left && (touch_data.leftTouchPad < 20) && (touch_data.rightTouchPad > 220))
    1b32:	74 31       	cpi	r23, 0x14	; 20
    1b34:	88 f7       	brcc	.-30     	; 0x1b18 <minigame_slide_both_sliders_apart+0x28>
    1b36:	6d 3d       	cpi	r22, 0xDD	; 221
    1b38:	78 f3       	brcs	.-34     	; 0x1b18 <minigame_slide_both_sliders_apart+0x28>
    1b3a:	04 c0       	rjmp	.+8      	; 0x1b44 <minigame_slide_both_sliders_apart+0x54>
			left_been_right = 1;
		}
		
		if (!right_been_left && touch_data.rightTouchPad < 20)
		{
			right_been_left = 1;
    1b3c:	d1 2f       	mov	r29, r17
		}
		
		if (left_been_right && right_been_left && (touch_data.leftTouchPad < 20) && (touch_data.rightTouchPad > 220))
    1b3e:	c1 11       	cpse	r28, r1
    1b40:	f8 cf       	rjmp	.-16     	; 0x1b32 <minigame_slide_both_sliders_apart+0x42>
    1b42:	ea cf       	rjmp	.-44     	; 0x1b18 <minigame_slide_both_sliders_apart+0x28>
		{
			return 1;
		}
	}
	return 0;
}
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	1f 91       	pop	r17
    1b4c:	0f 91       	pop	r16
    1b4e:	08 95       	ret

00001b50 <minigame_push_left_button_7x>:
uint8_t minigame_push_left_button_7x()
{
    1b50:	cf 93       	push	r28
	TouchpadData touch_data;
	ChangeTouchpadData change_data;
	uint8_t count = 7;
	
	clear_oled();
    1b52:	0e 94 a9 03 	call	0x752	; 0x752 <clear_oled>
	set_position(5,3);
    1b56:	63 e0       	ldi	r22, 0x03	; 3
    1b58:	85 e0       	ldi	r24, 0x05	; 5
    1b5a:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("PUSH LEFT BUTTON 7x!");
    1b5e:	8b ec       	ldi	r24, 0xCB	; 203
    1b60:	93 e0       	ldi	r25, 0x03	; 3
    1b62:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	refresh_oled();
    1b66:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
}
uint8_t minigame_push_left_button_7x()
{
	TouchpadData touch_data;
	ChangeTouchpadData change_data;
	uint8_t count = 7;
    1b6a:	c7 e0       	ldi	r28, 0x07	; 7
	print_string("PUSH LEFT BUTTON 7x!");
	refresh_oled();
	
	while (count)
	{
		touch_data = read_touchpad_data();
    1b6c:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
		change_data = change_touchpad_data(touch_data);
    1b70:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
		if (change_data.leftButton)
    1b74:	91 11       	cpse	r25, r1
		{
			count--;
    1b76:	c1 50       	subi	r28, 0x01	; 1
	clear_oled();
	set_position(5,3);
	print_string("PUSH LEFT BUTTON 7x!");
	refresh_oled();
	
	while (count)
    1b78:	c1 11       	cpse	r28, r1
    1b7a:	f8 cf       	rjmp	.-16     	; 0x1b6c <minigame_push_left_button_7x+0x1c>
		{
			count--;
		}
	}
	return 1;
}
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	cf 91       	pop	r28
    1b80:	08 95       	ret

00001b82 <minigame_buttons_in_random_order>:
uint8_t minigame_buttons_in_random_order(uint8_t order)
{
    1b82:	cf 93       	push	r28
    1b84:	c8 2f       	mov	r28, r24
	TouchpadData touch_data;
	ChangeTouchpadData change_data;
	
	clear_oled();
    1b86:	0e 94 a9 03 	call	0x752	; 0x752 <clear_oled>
	set_position(10,2);
    1b8a:	62 e0       	ldi	r22, 0x02	; 2
    1b8c:	8a e0       	ldi	r24, 0x0A	; 10
    1b8e:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("PUSH BUTTONS!");
    1b92:	80 ee       	ldi	r24, 0xE0	; 224
    1b94:	93 e0       	ldi	r25, 0x03	; 3
    1b96:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	refresh_oled();
    1b9a:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	
	order &= 0x1F;
    1b9e:	cf 71       	andi	r28, 0x1F	; 31
	order |= 0x20;
    1ba0:	c0 62       	ori	r28, 0x20	; 32
	
	while (order != 1)
	{
		if (!(order & 0x01))
    1ba2:	c0 fd       	sbrc	r28, 0
    1ba4:	11 c0       	rjmp	.+34     	; 0x1bc8 <minigame_buttons_in_random_order+0x46>
		{
			set_position(15,4);
    1ba6:	64 e0       	ldi	r22, 0x04	; 4
    1ba8:	8f e0       	ldi	r24, 0x0F	; 15
    1baa:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
			print_string("LEFT ");
    1bae:	8e ee       	ldi	r24, 0xEE	; 238
    1bb0:	93 e0       	ldi	r25, 0x03	; 3
    1bb2:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
			refresh_oled();
    1bb6:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
			do
			{
				touch_data = read_touchpad_data();
    1bba:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
				change_data = change_touchpad_data(touch_data);
    1bbe:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
			}
			while (!change_data.leftButton);
    1bc2:	99 23       	and	r25, r25
    1bc4:	d1 f3       	breq	.-12     	; 0x1bba <minigame_buttons_in_random_order+0x38>
    1bc6:	10 c0       	rjmp	.+32     	; 0x1be8 <minigame_buttons_in_random_order+0x66>
		}
		else
		{
			set_position(15,4);
    1bc8:	64 e0       	ldi	r22, 0x04	; 4
    1bca:	8f e0       	ldi	r24, 0x0F	; 15
    1bcc:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
			print_string("RIGHT");
    1bd0:	84 ef       	ldi	r24, 0xF4	; 244
    1bd2:	93 e0       	ldi	r25, 0x03	; 3
    1bd4:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
			refresh_oled();
    1bd8:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
			do
			{
				touch_data = read_touchpad_data();
    1bdc:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
				change_data = change_touchpad_data(touch_data);
    1be0:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
			}
			while (!change_data.rightButton);
    1be4:	88 23       	and	r24, r24
    1be6:	d1 f3       	breq	.-12     	; 0x1bdc <minigame_buttons_in_random_order+0x5a>
		}
		order >>= 1;
    1be8:	c6 95       	lsr	r28
	refresh_oled();
	
	order &= 0x1F;
	order |= 0x20;
	
	while (order != 1)
    1bea:	c1 30       	cpi	r28, 0x01	; 1
    1bec:	d1 f6       	brne	.-76     	; 0x1ba2 <minigame_buttons_in_random_order+0x20>
		}
		order >>= 1;
		order &= 0x7F;
	}
	return 1;	
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	cf 91       	pop	r28
    1bf2:	08 95       	ret

00001bf4 <interface_playing>:
* \brief Main function running while playing the game
*
* 
****************************************************************************/
InterfaceState interface_playing()
{
    1bf4:	2f 92       	push	r2
    1bf6:	3f 92       	push	r3
    1bf8:	4f 92       	push	r4
    1bfa:	5f 92       	push	r5
    1bfc:	6f 92       	push	r6
    1bfe:	7f 92       	push	r7
    1c00:	8f 92       	push	r8
    1c02:	9f 92       	push	r9
    1c04:	af 92       	push	r10
    1c06:	bf 92       	push	r11
    1c08:	cf 92       	push	r12
    1c0a:	df 92       	push	r13
    1c0c:	ef 92       	push	r14
    1c0e:	ff 92       	push	r15
    1c10:	0f 93       	push	r16
    1c12:	1f 93       	push	r17
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
    1c1c:	63 97       	sbiw	r28, 0x13	; 19
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	de bf       	out	0x3e, r29	; 62
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	cd bf       	out	0x3d, r28	; 61
	uint16_t old_time = 0;
	uint16_t current_time = 0;
	uint8_t multiplier = 0;
	uint8_t pl = 0;
	
	switch(current_mode)
    1c28:	80 91 23 04 	lds	r24, 0x0423
    1c2c:	84 30       	cpi	r24, 0x04	; 4
    1c2e:	39 f0       	breq	.+14     	; 0x1c3e <interface_playing+0x4a>
    1c30:	85 30       	cpi	r24, 0x05	; 5
    1c32:	51 f0       	breq	.+20     	; 0x1c48 <interface_playing+0x54>
    1c34:	83 30       	cpi	r24, 0x03	; 3
    1c36:	61 f0       	breq	.+24     	; 0x1c50 <interface_playing+0x5c>
	{
		case Easy:
			multiplier = 1;
    1c38:	88 24       	eor	r8, r8
    1c3a:	83 94       	inc	r8
    1c3c:	0c c0       	rjmp	.+24     	; 0x1c56 <interface_playing+0x62>
		case Normal:
			multiplier = 2;
			break;
			
		case Hard:
			multiplier = 3;
    1c3e:	0f 2e       	mov	r0, r31
    1c40:	f3 e0       	ldi	r31, 0x03	; 3
    1c42:	8f 2e       	mov	r8, r31
    1c44:	f0 2d       	mov	r31, r0
			break;
    1c46:	07 c0       	rjmp	.+14     	; 0x1c56 <interface_playing+0x62>
			
		case Insane:
			multiplier = 4;
    1c48:	68 94       	set
    1c4a:	88 24       	eor	r8, r8
    1c4c:	82 f8       	bld	r8, 2
			break;
    1c4e:	03 c0       	rjmp	.+6      	; 0x1c56 <interface_playing+0x62>
		case Easy:
			multiplier = 1;
			break;
			
		case Normal:
			multiplier = 2;
    1c50:	68 94       	set
    1c52:	88 24       	eor	r8, r8
    1c54:	81 f8       	bld	r8, 1
		
		default:
			multiplier = 1;
	}
	
	clear_oled();
    1c56:	0e 94 a9 03 	call	0x752	; 0x752 <clear_oled>
	interface_print_mode(current_mode);
    1c5a:	80 91 23 04 	lds	r24, 0x0423
    1c5e:	0e 94 91 0c 	call	0x1922	; 0x1922 <interface_print_mode>
	set_position(13,4);
    1c62:	64 e0       	ldi	r22, 0x04	; 4
    1c64:	8d e0       	ldi	r24, 0x0D	; 13
    1c66:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("SHOOT");
    1c6a:	8a ef       	ldi	r24, 0xFA	; 250
    1c6c:	93 e0       	ldi	r25, 0x03	; 3
    1c6e:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	refresh_oled();
    1c72:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	
	touch_data = read_touchpad_data();
    1c76:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
	change_touch_data = change_touchpad_data(touch_data);
    1c7a:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
	
	while (!change_touch_data.rightButton)
    1c7e:	81 11       	cpse	r24, r1
    1c80:	06 c0       	rjmp	.+12     	; 0x1c8e <interface_playing+0x9a>
	{
		touch_data = read_touchpad_data();
    1c82:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
    1c86:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
	refresh_oled();
	
	touch_data = read_touchpad_data();
	change_touch_data = change_touchpad_data(touch_data);
	
	while (!change_touch_data.rightButton)
    1c8a:	88 23       	and	r24, r24
    1c8c:	d1 f3       	breq	.-12     	; 0x1c82 <interface_playing+0x8e>
	{
		touch_data = read_touchpad_data();
		change_touch_data = change_touchpad_data(touch_data);
	}
	
	set_position(13,4);
    1c8e:	64 e0       	ldi	r22, 0x04	; 4
    1c90:	8d e0       	ldi	r24, 0x0D	; 13
    1c92:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("     ");
    1c96:	83 e5       	ldi	r24, 0x53	; 83
    1c98:	93 e0       	ldi	r25, 0x03	; 3
    1c9a:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	refresh_oled();
    1c9e:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	
	timer1_reset();
    1ca2:	0e 94 ae 07 	call	0xf5c	; 0xf5c <timer1_reset>
	current_time = old_time = timer1_get_time();
    1ca6:	0e 94 b3 07 	call	0xf66	; 0xf66 <timer1_get_time>
    1caa:	8c 01       	movw	r16, r24

		if (current_time != old_time)
		{
			clear_oled();
			interface_print_mode(current_mode);
			current_score = old_time * multiplier;
    1cac:	91 2c       	mov	r9, r1
			set_position(13,2);
			print_string("Time");
			snprintf(buffer, 9, "%02d:%02d:%02d",old_time / 3600 , old_time / 60, old_time % 60);
    1cae:	0f 2e       	mov	r0, r31
    1cb0:	fc e3       	ldi	r31, 0x3C	; 60
    1cb2:	2f 2e       	mov	r2, r31
    1cb4:	f0 2d       	mov	r31, r0
    1cb6:	0f 2e       	mov	r0, r31
    1cb8:	f0 e1       	ldi	r31, 0x10	; 16
    1cba:	af 2e       	mov	r10, r31
    1cbc:	fe e0       	ldi	r31, 0x0E	; 14
    1cbe:	bf 2e       	mov	r11, r31
    1cc0:	f0 2d       	mov	r31, r0
    1cc2:	0f 2e       	mov	r0, r31
    1cc4:	f5 e0       	ldi	r31, 0x05	; 5
    1cc6:	6f 2e       	mov	r6, r31
    1cc8:	f4 e0       	ldi	r31, 0x04	; 4
    1cca:	7f 2e       	mov	r7, r31
    1ccc:	f0 2d       	mov	r31, r0
    1cce:	0f 2e       	mov	r0, r31
    1cd0:	f9 e0       	ldi	r31, 0x09	; 9
    1cd2:	3f 2e       	mov	r3, r31
    1cd4:	f0 2d       	mov	r31, r0
    1cd6:	7e 01       	movw	r14, r28
    1cd8:	4b e0       	ldi	r20, 0x0B	; 11
    1cda:	e4 0e       	add	r14, r20
    1cdc:	f1 1c       	adc	r15, r1
			set_position(11,3);
			print_string(buffer);
			set_position(13,4);
			print_string("Score"); 
			snprintf(buffer, 9, "%05d",current_score);
    1cde:	0f 2e       	mov	r0, r31
    1ce0:	f4 e1       	ldi	r31, 0x14	; 20
    1ce2:	4f 2e       	mov	r4, r31
    1ce4:	f4 e0       	ldi	r31, 0x04	; 4
    1ce6:	5f 2e       	mov	r5, r31
    1ce8:	f0 2d       	mov	r31, r0
    1cea:	01 c0       	rjmp	.+2      	; 0x1cee <interface_playing+0xfa>
    1cec:	86 01       	movw	r16, r12
	timer1_reset();
	current_time = old_time = timer1_get_time();
	
	do
	{
		position = read_joystick_position();
    1cee:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
    1cf2:	6c 01       	movw	r12, r24
		touch_data = read_touchpad_data();
    1cf4:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
		
		send_joystick_possition(position, touch_data);
    1cf8:	ab 01       	movw	r20, r22
    1cfa:	bc 01       	movw	r22, r24
    1cfc:	c6 01       	movw	r24, r12
    1cfe:	0e 94 04 02 	call	0x408	; 0x408 <send_joystick_possition>
    1d02:	89 ef       	ldi	r24, 0xF9	; 249
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <interface_playing+0x112>
    1d0a:	00 c0       	rjmp	.+0      	; 0x1d0c <interface_playing+0x118>
    1d0c:	00 00       	nop
		_delay_ms(1);
		
		current_time = timer1_get_time();
    1d0e:	0e 94 b3 07 	call	0xf66	; 0xf66 <timer1_get_time>
    1d12:	6c 01       	movw	r12, r24

		if (current_time != old_time)
    1d14:	80 17       	cp	r24, r16
    1d16:	91 07       	cpc	r25, r17
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <interface_playing+0x128>
    1d1a:	6c c0       	rjmp	.+216    	; 0x1df4 <interface_playing+0x200>
		{
			clear_oled();
    1d1c:	0e 94 a9 03 	call	0x752	; 0x752 <clear_oled>
			interface_print_mode(current_mode);
    1d20:	80 91 23 04 	lds	r24, 0x0423
    1d24:	0e 94 91 0c 	call	0x1922	; 0x1922 <interface_print_mode>
			current_score = old_time * multiplier;
    1d28:	08 9d       	mul	r16, r8
    1d2a:	c0 01       	movw	r24, r0
    1d2c:	09 9d       	mul	r16, r9
    1d2e:	90 0d       	add	r25, r0
    1d30:	18 9d       	mul	r17, r8
    1d32:	90 0d       	add	r25, r0
    1d34:	11 24       	eor	r1, r1
    1d36:	90 93 25 04 	sts	0x0425, r25
    1d3a:	80 93 24 04 	sts	0x0424, r24
			set_position(13,2);
    1d3e:	62 e0       	ldi	r22, 0x02	; 2
    1d40:	8d e0       	ldi	r24, 0x0D	; 13
    1d42:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
			print_string("Time");
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	94 e0       	ldi	r25, 0x04	; 4
    1d4a:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
			snprintf(buffer, 9, "%02d:%02d:%02d",old_time / 3600 , old_time / 60, old_time % 60);
    1d4e:	98 01       	movw	r18, r16
    1d50:	a9 e8       	ldi	r26, 0x89	; 137
    1d52:	b8 e8       	ldi	r27, 0x88	; 136
    1d54:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <__umulhisi3>
    1d58:	96 95       	lsr	r25
    1d5a:	87 95       	ror	r24
    1d5c:	92 95       	swap	r25
    1d5e:	82 95       	swap	r24
    1d60:	8f 70       	andi	r24, 0x0F	; 15
    1d62:	89 27       	eor	r24, r25
    1d64:	9f 70       	andi	r25, 0x0F	; 15
    1d66:	89 27       	eor	r24, r25
    1d68:	28 9e       	mul	r2, r24
    1d6a:	90 01       	movw	r18, r0
    1d6c:	29 9e       	mul	r2, r25
    1d6e:	30 0d       	add	r19, r0
    1d70:	11 24       	eor	r1, r1
    1d72:	a8 01       	movw	r20, r16
    1d74:	42 1b       	sub	r20, r18
    1d76:	53 0b       	sbc	r21, r19
    1d78:	9a 01       	movw	r18, r20
    1d7a:	3f 93       	push	r19
    1d7c:	4f 93       	push	r20
    1d7e:	9f 93       	push	r25
    1d80:	8f 93       	push	r24
    1d82:	c8 01       	movw	r24, r16
    1d84:	b5 01       	movw	r22, r10
    1d86:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <__udivmodhi4>
    1d8a:	7f 93       	push	r23
    1d8c:	6f 93       	push	r22
    1d8e:	7f 92       	push	r7
    1d90:	6f 92       	push	r6
    1d92:	1f 92       	push	r1
    1d94:	3f 92       	push	r3
    1d96:	ff 92       	push	r15
    1d98:	ef 92       	push	r14
    1d9a:	0e 94 53 10 	call	0x20a6	; 0x20a6 <snprintf>
			set_position(11,3);
    1d9e:	63 e0       	ldi	r22, 0x03	; 3
    1da0:	8b e0       	ldi	r24, 0x0B	; 11
    1da2:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
			print_string(buffer);
    1da6:	c7 01       	movw	r24, r14
    1da8:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
			set_position(13,4);
    1dac:	64 e0       	ldi	r22, 0x04	; 4
    1dae:	8d e0       	ldi	r24, 0x0D	; 13
    1db0:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
			print_string("Score"); 
    1db4:	83 e8       	ldi	r24, 0x83	; 131
    1db6:	92 e0       	ldi	r25, 0x02	; 2
    1db8:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
			snprintf(buffer, 9, "%05d",current_score);
    1dbc:	80 91 25 04 	lds	r24, 0x0425
    1dc0:	8f 93       	push	r24
    1dc2:	80 91 24 04 	lds	r24, 0x0424
    1dc6:	8f 93       	push	r24
    1dc8:	5f 92       	push	r5
    1dca:	4f 92       	push	r4
    1dcc:	1f 92       	push	r1
    1dce:	3f 92       	push	r3
    1dd0:	ff 92       	push	r15
    1dd2:	ef 92       	push	r14
    1dd4:	0e 94 53 10 	call	0x20a6	; 0x20a6 <snprintf>
			set_position(13,5);
    1dd8:	65 e0       	ldi	r22, 0x05	; 5
    1dda:	8d e0       	ldi	r24, 0x0D	; 13
    1ddc:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
			print_string(buffer);
    1de0:	c7 01       	movw	r24, r14
    1de2:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
			
			refresh_oled();
    1de6:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	cd bf       	out	0x3d, r28	; 61
			old_time = current_time;
		}
		
		if(CAN_receive_message(&canMessageNode2) != SUCCESS)
    1df4:	ce 01       	movw	r24, r28
    1df6:	01 96       	adiw	r24, 0x01	; 1
    1df8:	0e 94 c8 01 	call	0x390	; 0x390 <CAN_receive_message>
    1dfc:	88 23       	and	r24, r24
    1dfe:	19 f0       	breq	.+6      	; 0x1e06 <interface_playing+0x212>
		{
			canMessageNode2.ID = 0xFF;
    1e00:	9f ef       	ldi	r25, 0xFF	; 255
    1e02:	99 83       	std	Y+1, r25	; 0x01
    1e04:	73 cf       	rjmp	.-282    	; 0x1cec <interface_playing+0xf8>
		}
		else
		{
			switch (canMessageNode2.ID)
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	88 30       	cpi	r24, 0x08	; 8
    1e0a:	89 f0       	breq	.+34     	; 0x1e2e <interface_playing+0x23a>
    1e0c:	28 f4       	brcc	.+10     	; 0x1e18 <interface_playing+0x224>
    1e0e:	86 30       	cpi	r24, 0x06	; 6
    1e10:	41 f0       	breq	.+16     	; 0x1e22 <interface_playing+0x22e>
    1e12:	87 30       	cpi	r24, 0x07	; 7
    1e14:	49 f0       	breq	.+18     	; 0x1e28 <interface_playing+0x234>
    1e16:	14 c0       	rjmp	.+40     	; 0x1e40 <interface_playing+0x24c>
    1e18:	89 30       	cpi	r24, 0x09	; 9
    1e1a:	61 f0       	breq	.+24     	; 0x1e34 <interface_playing+0x240>
    1e1c:	8a 30       	cpi	r24, 0x0A	; 10
    1e1e:	69 f0       	breq	.+26     	; 0x1e3a <interface_playing+0x246>
    1e20:	0f c0       	rjmp	.+30     	; 0x1e40 <interface_playing+0x24c>
			{
				case 0x06:
					minigame_push_buttons();
    1e22:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <minigame_push_buttons>
					break;
    1e26:	0c c0       	rjmp	.+24     	; 0x1e40 <interface_playing+0x24c>

				case 0x07:
					minigame_slide_left_slider_left();
    1e28:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <minigame_slide_left_slider_left>
					break;
    1e2c:	09 c0       	rjmp	.+18     	; 0x1e40 <interface_playing+0x24c>
					
				case 0x08:
					minigame_slide_both_sliders_apart();
    1e2e:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <minigame_slide_both_sliders_apart>
					break;
    1e32:	06 c0       	rjmp	.+12     	; 0x1e40 <interface_playing+0x24c>
					
				case 0x09:
					minigame_push_left_button_7x();
    1e34:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <minigame_push_left_button_7x>
					break;
    1e38:	03 c0       	rjmp	.+6      	; 0x1e40 <interface_playing+0x24c>
					
				case 0x0A:
					minigame_buttons_in_random_order(canMessageNode2.data_array[0]);
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <minigame_buttons_in_random_order>
					break;
			}
		}
		
	} while(canMessageNode2.ID != 0x05);//current_time <= 10);//canMessageNode2.ID != 0x05);
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	85 30       	cpi	r24, 0x05	; 5
    1e44:	09 f0       	breq	.+2      	; 0x1e48 <interface_playing+0x254>
    1e46:	52 cf       	rjmp	.-348    	; 0x1cec <interface_playing+0xf8>
	
	return State_Endgame;
}
    1e48:	8c e0       	ldi	r24, 0x0C	; 12
    1e4a:	63 96       	adiw	r28, 0x13	; 19
    1e4c:	0f b6       	in	r0, 0x3f	; 63
    1e4e:	f8 94       	cli
    1e50:	de bf       	out	0x3e, r29	; 62
    1e52:	0f be       	out	0x3f, r0	; 63
    1e54:	cd bf       	out	0x3d, r28	; 61
    1e56:	df 91       	pop	r29
    1e58:	cf 91       	pop	r28
    1e5a:	1f 91       	pop	r17
    1e5c:	0f 91       	pop	r16
    1e5e:	ff 90       	pop	r15
    1e60:	ef 90       	pop	r14
    1e62:	df 90       	pop	r13
    1e64:	cf 90       	pop	r12
    1e66:	bf 90       	pop	r11
    1e68:	af 90       	pop	r10
    1e6a:	9f 90       	pop	r9
    1e6c:	8f 90       	pop	r8
    1e6e:	7f 90       	pop	r7
    1e70:	6f 90       	pop	r6
    1e72:	5f 90       	pop	r5
    1e74:	4f 90       	pop	r4
    1e76:	3f 90       	pop	r3
    1e78:	2f 90       	pop	r2
    1e7a:	08 95       	ret

00001e7c <interface_state_machine>:
****************************************************************************/
void interface_state_machine()
{
	static InterfaceState state = State_Username;
	
	switch(state)
    1e7c:	80 91 22 04 	lds	r24, 0x0422
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	8d 30       	cpi	r24, 0x0D	; 13
    1e84:	91 05       	cpc	r25, r1
    1e86:	08 f0       	brcs	.+2      	; 0x1e8a <interface_state_machine+0xe>
    1e88:	58 c0       	rjmp	.+176    	; 0x1f3a <interface_state_machine+0xbe>
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	e8 5c       	subi	r30, 0xC8	; 200
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__tablejump2__>
	{
		case State_Username :
		state = interface_username();
    1e94:	0e 94 07 08 	call	0x100e	; 0x100e <interface_username>
    1e98:	80 93 22 04 	sts	0x0422, r24
		break;
    1e9c:	08 95       	ret
		
		case State_NewGame :
		state = interface_new_game();
    1e9e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <interface_new_game>
    1ea2:	80 93 22 04 	sts	0x0422, r24
		break;
    1ea6:	08 95       	ret
		
		case State_Tutorial :
		send_game_mode(Tutorial);
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	0e 94 23 02 	call	0x446	; 0x446 <send_game_mode>
		state = interface_tutorial();
    1eae:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <interface_tutorial>
    1eb2:	80 93 22 04 	sts	0x0422, r24
		break;
    1eb6:	08 95       	ret
		
		case State_Easy :
		send_game_mode(Easy);
    1eb8:	82 e0       	ldi	r24, 0x02	; 2
    1eba:	0e 94 23 02 	call	0x446	; 0x446 <send_game_mode>
		state = interface_print_mode(Easy);
    1ebe:	82 e0       	ldi	r24, 0x02	; 2
    1ec0:	0e 94 91 0c 	call	0x1922	; 0x1922 <interface_print_mode>
    1ec4:	80 93 22 04 	sts	0x0422, r24
		break;
    1ec8:	08 95       	ret
		
		case State_Normal :
		send_game_mode(Normal);
    1eca:	83 e0       	ldi	r24, 0x03	; 3
    1ecc:	0e 94 23 02 	call	0x446	; 0x446 <send_game_mode>
		state = interface_print_mode(Normal);
    1ed0:	83 e0       	ldi	r24, 0x03	; 3
    1ed2:	0e 94 91 0c 	call	0x1922	; 0x1922 <interface_print_mode>
    1ed6:	80 93 22 04 	sts	0x0422, r24
		break;
    1eda:	08 95       	ret
		
		case State_Hard :
		send_game_mode(Hard);
    1edc:	84 e0       	ldi	r24, 0x04	; 4
    1ede:	0e 94 23 02 	call	0x446	; 0x446 <send_game_mode>
		state = interface_print_mode(Hard);
    1ee2:	84 e0       	ldi	r24, 0x04	; 4
    1ee4:	0e 94 91 0c 	call	0x1922	; 0x1922 <interface_print_mode>
    1ee8:	80 93 22 04 	sts	0x0422, r24
		break;
    1eec:	08 95       	ret
		
		case State_Insane :
		send_game_mode(Insane);
    1eee:	85 e0       	ldi	r24, 0x05	; 5
    1ef0:	0e 94 23 02 	call	0x446	; 0x446 <send_game_mode>
		state = interface_print_mode(Insane);
    1ef4:	85 e0       	ldi	r24, 0x05	; 5
    1ef6:	0e 94 91 0c 	call	0x1922	; 0x1922 <interface_print_mode>
    1efa:	80 93 22 04 	sts	0x0422, r24
		break;
    1efe:	08 95       	ret
		
		case State_HighScores :
		state = interface_high_scores();
    1f00:	0e 94 dd 09 	call	0x13ba	; 0x13ba <interface_high_scores>
    1f04:	80 93 22 04 	sts	0x0422, r24
		break;
    1f08:	08 95       	ret
		
		case State_Options :
		state = interface_options();
    1f0a:	0e 94 34 0a 	call	0x1468	; 0x1468 <interface_options>
    1f0e:	80 93 22 04 	sts	0x0422, r24
		break;
    1f12:	08 95       	ret
		
		case State_Clear_HighScores :
		state = interface_clear_highscores();
    1f14:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <interface_clear_highscores>
    1f18:	80 93 22 04 	sts	0x0422, r24
		break;
    1f1c:	08 95       	ret
		
		case  State_Mode :
		state = interface_mode();
    1f1e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <interface_mode>
    1f22:	80 93 22 04 	sts	0x0422, r24
		break;
    1f26:	08 95       	ret
		
		case State_Playing:
		state = interface_playing();
    1f28:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <interface_playing>
    1f2c:	80 93 22 04 	sts	0x0422, r24
		break;
    1f30:	08 95       	ret
		
		case State_Endgame:
		state = inteface_end_game();
    1f32:	0e 94 c6 0c 	call	0x198c	; 0x198c <inteface_end_game>
    1f36:	80 93 22 04 	sts	0x0422, r24
    1f3a:	08 95       	ret

00001f3c <__udivmodhi4>:
    1f3c:	aa 1b       	sub	r26, r26
    1f3e:	bb 1b       	sub	r27, r27
    1f40:	51 e1       	ldi	r21, 0x11	; 17
    1f42:	07 c0       	rjmp	.+14     	; 0x1f52 <__udivmodhi4_ep>

00001f44 <__udivmodhi4_loop>:
    1f44:	aa 1f       	adc	r26, r26
    1f46:	bb 1f       	adc	r27, r27
    1f48:	a6 17       	cp	r26, r22
    1f4a:	b7 07       	cpc	r27, r23
    1f4c:	10 f0       	brcs	.+4      	; 0x1f52 <__udivmodhi4_ep>
    1f4e:	a6 1b       	sub	r26, r22
    1f50:	b7 0b       	sbc	r27, r23

00001f52 <__udivmodhi4_ep>:
    1f52:	88 1f       	adc	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	5a 95       	dec	r21
    1f58:	a9 f7       	brne	.-22     	; 0x1f44 <__udivmodhi4_loop>
    1f5a:	80 95       	com	r24
    1f5c:	90 95       	com	r25
    1f5e:	bc 01       	movw	r22, r24
    1f60:	cd 01       	movw	r24, r26
    1f62:	08 95       	ret

00001f64 <__divmodhi4>:
    1f64:	97 fb       	bst	r25, 7
    1f66:	07 2e       	mov	r0, r23
    1f68:	16 f4       	brtc	.+4      	; 0x1f6e <__divmodhi4+0xa>
    1f6a:	00 94       	com	r0
    1f6c:	07 d0       	rcall	.+14     	; 0x1f7c <__divmodhi4_neg1>
    1f6e:	77 fd       	sbrc	r23, 7
    1f70:	09 d0       	rcall	.+18     	; 0x1f84 <__divmodhi4_neg2>
    1f72:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <__udivmodhi4>
    1f76:	07 fc       	sbrc	r0, 7
    1f78:	05 d0       	rcall	.+10     	; 0x1f84 <__divmodhi4_neg2>
    1f7a:	3e f4       	brtc	.+14     	; 0x1f8a <__divmodhi4_exit>

00001f7c <__divmodhi4_neg1>:
    1f7c:	90 95       	com	r25
    1f7e:	81 95       	neg	r24
    1f80:	9f 4f       	sbci	r25, 0xFF	; 255
    1f82:	08 95       	ret

00001f84 <__divmodhi4_neg2>:
    1f84:	70 95       	com	r23
    1f86:	61 95       	neg	r22
    1f88:	7f 4f       	sbci	r23, 0xFF	; 255

00001f8a <__divmodhi4_exit>:
    1f8a:	08 95       	ret

00001f8c <__tablejump2__>:
    1f8c:	ee 0f       	add	r30, r30
    1f8e:	ff 1f       	adc	r31, r31

00001f90 <__tablejump__>:
    1f90:	05 90       	lpm	r0, Z+
    1f92:	f4 91       	lpm	r31, Z
    1f94:	e0 2d       	mov	r30, r0
    1f96:	09 94       	ijmp

00001f98 <__umulhisi3>:
    1f98:	a2 9f       	mul	r26, r18
    1f9a:	b0 01       	movw	r22, r0
    1f9c:	b3 9f       	mul	r27, r19
    1f9e:	c0 01       	movw	r24, r0
    1fa0:	a3 9f       	mul	r26, r19
    1fa2:	70 0d       	add	r23, r0
    1fa4:	81 1d       	adc	r24, r1
    1fa6:	11 24       	eor	r1, r1
    1fa8:	91 1d       	adc	r25, r1
    1faa:	b2 9f       	mul	r27, r18
    1fac:	70 0d       	add	r23, r0
    1fae:	81 1d       	adc	r24, r1
    1fb0:	11 24       	eor	r1, r1
    1fb2:	91 1d       	adc	r25, r1
    1fb4:	08 95       	ret

00001fb6 <fdevopen>:
    1fb6:	0f 93       	push	r16
    1fb8:	1f 93       	push	r17
    1fba:	cf 93       	push	r28
    1fbc:	df 93       	push	r29
    1fbe:	ec 01       	movw	r28, r24
    1fc0:	8b 01       	movw	r16, r22
    1fc2:	00 97       	sbiw	r24, 0x00	; 0
    1fc4:	31 f4       	brne	.+12     	; 0x1fd2 <fdevopen+0x1c>
    1fc6:	61 15       	cp	r22, r1
    1fc8:	71 05       	cpc	r23, r1
    1fca:	19 f4       	brne	.+6      	; 0x1fd2 <fdevopen+0x1c>
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	38 c0       	rjmp	.+112    	; 0x2042 <fdevopen+0x8c>
    1fd2:	6e e0       	ldi	r22, 0x0E	; 14
    1fd4:	70 e0       	ldi	r23, 0x00	; 0
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	0e 94 55 12 	call	0x24aa	; 0x24aa <calloc>
    1fde:	fc 01       	movw	r30, r24
    1fe0:	00 97       	sbiw	r24, 0x00	; 0
    1fe2:	a1 f3       	breq	.-24     	; 0x1fcc <fdevopen+0x16>
    1fe4:	80 e8       	ldi	r24, 0x80	; 128
    1fe6:	83 83       	std	Z+3, r24	; 0x03
    1fe8:	01 15       	cp	r16, r1
    1fea:	11 05       	cpc	r17, r1
    1fec:	71 f0       	breq	.+28     	; 0x200a <fdevopen+0x54>
    1fee:	13 87       	std	Z+11, r17	; 0x0b
    1ff0:	02 87       	std	Z+10, r16	; 0x0a
    1ff2:	81 e8       	ldi	r24, 0x81	; 129
    1ff4:	83 83       	std	Z+3, r24	; 0x03
    1ff6:	80 91 28 04 	lds	r24, 0x0428
    1ffa:	90 91 29 04 	lds	r25, 0x0429
    1ffe:	89 2b       	or	r24, r25
    2000:	21 f4       	brne	.+8      	; 0x200a <fdevopen+0x54>
    2002:	f0 93 29 04 	sts	0x0429, r31
    2006:	e0 93 28 04 	sts	0x0428, r30
    200a:	20 97       	sbiw	r28, 0x00	; 0
    200c:	c9 f0       	breq	.+50     	; 0x2040 <fdevopen+0x8a>
    200e:	d1 87       	std	Z+9, r29	; 0x09
    2010:	c0 87       	std	Z+8, r28	; 0x08
    2012:	83 81       	ldd	r24, Z+3	; 0x03
    2014:	82 60       	ori	r24, 0x02	; 2
    2016:	83 83       	std	Z+3, r24	; 0x03
    2018:	80 91 2a 04 	lds	r24, 0x042A
    201c:	90 91 2b 04 	lds	r25, 0x042B
    2020:	89 2b       	or	r24, r25
    2022:	71 f4       	brne	.+28     	; 0x2040 <fdevopen+0x8a>
    2024:	f0 93 2b 04 	sts	0x042B, r31
    2028:	e0 93 2a 04 	sts	0x042A, r30
    202c:	80 91 2c 04 	lds	r24, 0x042C
    2030:	90 91 2d 04 	lds	r25, 0x042D
    2034:	89 2b       	or	r24, r25
    2036:	21 f4       	brne	.+8      	; 0x2040 <fdevopen+0x8a>
    2038:	f0 93 2d 04 	sts	0x042D, r31
    203c:	e0 93 2c 04 	sts	0x042C, r30
    2040:	cf 01       	movw	r24, r30
    2042:	df 91       	pop	r29
    2044:	cf 91       	pop	r28
    2046:	1f 91       	pop	r17
    2048:	0f 91       	pop	r16
    204a:	08 95       	ret

0000204c <puts>:
    204c:	0f 93       	push	r16
    204e:	1f 93       	push	r17
    2050:	cf 93       	push	r28
    2052:	df 93       	push	r29
    2054:	e0 91 2a 04 	lds	r30, 0x042A
    2058:	f0 91 2b 04 	lds	r31, 0x042B
    205c:	23 81       	ldd	r18, Z+3	; 0x03
    205e:	21 ff       	sbrs	r18, 1
    2060:	1b c0       	rjmp	.+54     	; 0x2098 <puts+0x4c>
    2062:	ec 01       	movw	r28, r24
    2064:	00 e0       	ldi	r16, 0x00	; 0
    2066:	10 e0       	ldi	r17, 0x00	; 0
    2068:	89 91       	ld	r24, Y+
    206a:	60 91 2a 04 	lds	r22, 0x042A
    206e:	70 91 2b 04 	lds	r23, 0x042B
    2072:	db 01       	movw	r26, r22
    2074:	18 96       	adiw	r26, 0x08	; 8
    2076:	ed 91       	ld	r30, X+
    2078:	fc 91       	ld	r31, X
    207a:	19 97       	sbiw	r26, 0x09	; 9
    207c:	88 23       	and	r24, r24
    207e:	31 f0       	breq	.+12     	; 0x208c <puts+0x40>
    2080:	09 95       	icall
    2082:	89 2b       	or	r24, r25
    2084:	89 f3       	breq	.-30     	; 0x2068 <puts+0x1c>
    2086:	0f ef       	ldi	r16, 0xFF	; 255
    2088:	1f ef       	ldi	r17, 0xFF	; 255
    208a:	ee cf       	rjmp	.-36     	; 0x2068 <puts+0x1c>
    208c:	8a e0       	ldi	r24, 0x0A	; 10
    208e:	09 95       	icall
    2090:	89 2b       	or	r24, r25
    2092:	11 f4       	brne	.+4      	; 0x2098 <puts+0x4c>
    2094:	c8 01       	movw	r24, r16
    2096:	02 c0       	rjmp	.+4      	; 0x209c <puts+0x50>
    2098:	8f ef       	ldi	r24, 0xFF	; 255
    209a:	9f ef       	ldi	r25, 0xFF	; 255
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	1f 91       	pop	r17
    20a2:	0f 91       	pop	r16
    20a4:	08 95       	ret

000020a6 <snprintf>:
    20a6:	ae e0       	ldi	r26, 0x0E	; 14
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	e9 e5       	ldi	r30, 0x59	; 89
    20ac:	f0 e1       	ldi	r31, 0x10	; 16
    20ae:	0c 94 53 14 	jmp	0x28a6	; 0x28a6 <__prologue_saves__+0x1c>
    20b2:	0d 89       	ldd	r16, Y+21	; 0x15
    20b4:	1e 89       	ldd	r17, Y+22	; 0x16
    20b6:	8f 89       	ldd	r24, Y+23	; 0x17
    20b8:	98 8d       	ldd	r25, Y+24	; 0x18
    20ba:	26 e0       	ldi	r18, 0x06	; 6
    20bc:	2c 83       	std	Y+4, r18	; 0x04
    20be:	1a 83       	std	Y+2, r17	; 0x02
    20c0:	09 83       	std	Y+1, r16	; 0x01
    20c2:	97 ff       	sbrs	r25, 7
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <snprintf+0x24>
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	90 e8       	ldi	r25, 0x80	; 128
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	9e 83       	std	Y+6, r25	; 0x06
    20ce:	8d 83       	std	Y+5, r24	; 0x05
    20d0:	ae 01       	movw	r20, r28
    20d2:	45 5e       	subi	r20, 0xE5	; 229
    20d4:	5f 4f       	sbci	r21, 0xFF	; 255
    20d6:	69 8d       	ldd	r22, Y+25	; 0x19
    20d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20da:	ce 01       	movw	r24, r28
    20dc:	01 96       	adiw	r24, 0x01	; 1
    20de:	0e 94 83 10 	call	0x2106	; 0x2106 <vfprintf>
    20e2:	4d 81       	ldd	r20, Y+5	; 0x05
    20e4:	5e 81       	ldd	r21, Y+6	; 0x06
    20e6:	57 fd       	sbrc	r21, 7
    20e8:	0a c0       	rjmp	.+20     	; 0x20fe <snprintf+0x58>
    20ea:	2f 81       	ldd	r18, Y+7	; 0x07
    20ec:	38 85       	ldd	r19, Y+8	; 0x08
    20ee:	42 17       	cp	r20, r18
    20f0:	53 07       	cpc	r21, r19
    20f2:	0c f4       	brge	.+2      	; 0x20f6 <snprintf+0x50>
    20f4:	9a 01       	movw	r18, r20
    20f6:	f8 01       	movw	r30, r16
    20f8:	e2 0f       	add	r30, r18
    20fa:	f3 1f       	adc	r31, r19
    20fc:	10 82       	st	Z, r1
    20fe:	2e 96       	adiw	r28, 0x0e	; 14
    2100:	e4 e0       	ldi	r30, 0x04	; 4
    2102:	0c 94 6f 14 	jmp	0x28de	; 0x28de <__epilogue_restores__+0x1c>

00002106 <vfprintf>:
    2106:	ac e0       	ldi	r26, 0x0C	; 12
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	e9 e8       	ldi	r30, 0x89	; 137
    210c:	f0 e1       	ldi	r31, 0x10	; 16
    210e:	0c 94 45 14 	jmp	0x288a	; 0x288a <__prologue_saves__>
    2112:	7c 01       	movw	r14, r24
    2114:	6b 01       	movw	r12, r22
    2116:	8a 01       	movw	r16, r20
    2118:	fc 01       	movw	r30, r24
    211a:	17 82       	std	Z+7, r1	; 0x07
    211c:	16 82       	std	Z+6, r1	; 0x06
    211e:	83 81       	ldd	r24, Z+3	; 0x03
    2120:	81 ff       	sbrs	r24, 1
    2122:	bd c1       	rjmp	.+890    	; 0x249e <vfprintf+0x398>
    2124:	ce 01       	movw	r24, r28
    2126:	01 96       	adiw	r24, 0x01	; 1
    2128:	4c 01       	movw	r8, r24
    212a:	f7 01       	movw	r30, r14
    212c:	93 81       	ldd	r25, Z+3	; 0x03
    212e:	f6 01       	movw	r30, r12
    2130:	93 fd       	sbrc	r25, 3
    2132:	85 91       	lpm	r24, Z+
    2134:	93 ff       	sbrs	r25, 3
    2136:	81 91       	ld	r24, Z+
    2138:	6f 01       	movw	r12, r30
    213a:	88 23       	and	r24, r24
    213c:	09 f4       	brne	.+2      	; 0x2140 <vfprintf+0x3a>
    213e:	ab c1       	rjmp	.+854    	; 0x2496 <vfprintf+0x390>
    2140:	85 32       	cpi	r24, 0x25	; 37
    2142:	39 f4       	brne	.+14     	; 0x2152 <vfprintf+0x4c>
    2144:	93 fd       	sbrc	r25, 3
    2146:	85 91       	lpm	r24, Z+
    2148:	93 ff       	sbrs	r25, 3
    214a:	81 91       	ld	r24, Z+
    214c:	6f 01       	movw	r12, r30
    214e:	85 32       	cpi	r24, 0x25	; 37
    2150:	29 f4       	brne	.+10     	; 0x215c <vfprintf+0x56>
    2152:	b7 01       	movw	r22, r14
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	0e 94 b5 13 	call	0x276a	; 0x276a <fputc>
    215a:	e7 cf       	rjmp	.-50     	; 0x212a <vfprintf+0x24>
    215c:	51 2c       	mov	r5, r1
    215e:	31 2c       	mov	r3, r1
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	20 32       	cpi	r18, 0x20	; 32
    2164:	a0 f4       	brcc	.+40     	; 0x218e <vfprintf+0x88>
    2166:	8b 32       	cpi	r24, 0x2B	; 43
    2168:	69 f0       	breq	.+26     	; 0x2184 <vfprintf+0x7e>
    216a:	30 f4       	brcc	.+12     	; 0x2178 <vfprintf+0x72>
    216c:	80 32       	cpi	r24, 0x20	; 32
    216e:	59 f0       	breq	.+22     	; 0x2186 <vfprintf+0x80>
    2170:	83 32       	cpi	r24, 0x23	; 35
    2172:	69 f4       	brne	.+26     	; 0x218e <vfprintf+0x88>
    2174:	20 61       	ori	r18, 0x10	; 16
    2176:	2c c0       	rjmp	.+88     	; 0x21d0 <vfprintf+0xca>
    2178:	8d 32       	cpi	r24, 0x2D	; 45
    217a:	39 f0       	breq	.+14     	; 0x218a <vfprintf+0x84>
    217c:	80 33       	cpi	r24, 0x30	; 48
    217e:	39 f4       	brne	.+14     	; 0x218e <vfprintf+0x88>
    2180:	21 60       	ori	r18, 0x01	; 1
    2182:	26 c0       	rjmp	.+76     	; 0x21d0 <vfprintf+0xca>
    2184:	22 60       	ori	r18, 0x02	; 2
    2186:	24 60       	ori	r18, 0x04	; 4
    2188:	23 c0       	rjmp	.+70     	; 0x21d0 <vfprintf+0xca>
    218a:	28 60       	ori	r18, 0x08	; 8
    218c:	21 c0       	rjmp	.+66     	; 0x21d0 <vfprintf+0xca>
    218e:	27 fd       	sbrc	r18, 7
    2190:	27 c0       	rjmp	.+78     	; 0x21e0 <vfprintf+0xda>
    2192:	30 ed       	ldi	r19, 0xD0	; 208
    2194:	38 0f       	add	r19, r24
    2196:	3a 30       	cpi	r19, 0x0A	; 10
    2198:	78 f4       	brcc	.+30     	; 0x21b8 <vfprintf+0xb2>
    219a:	26 ff       	sbrs	r18, 6
    219c:	06 c0       	rjmp	.+12     	; 0x21aa <vfprintf+0xa4>
    219e:	fa e0       	ldi	r31, 0x0A	; 10
    21a0:	5f 9e       	mul	r5, r31
    21a2:	30 0d       	add	r19, r0
    21a4:	11 24       	eor	r1, r1
    21a6:	53 2e       	mov	r5, r19
    21a8:	13 c0       	rjmp	.+38     	; 0x21d0 <vfprintf+0xca>
    21aa:	8a e0       	ldi	r24, 0x0A	; 10
    21ac:	38 9e       	mul	r3, r24
    21ae:	30 0d       	add	r19, r0
    21b0:	11 24       	eor	r1, r1
    21b2:	33 2e       	mov	r3, r19
    21b4:	20 62       	ori	r18, 0x20	; 32
    21b6:	0c c0       	rjmp	.+24     	; 0x21d0 <vfprintf+0xca>
    21b8:	8e 32       	cpi	r24, 0x2E	; 46
    21ba:	21 f4       	brne	.+8      	; 0x21c4 <vfprintf+0xbe>
    21bc:	26 fd       	sbrc	r18, 6
    21be:	6b c1       	rjmp	.+726    	; 0x2496 <vfprintf+0x390>
    21c0:	20 64       	ori	r18, 0x40	; 64
    21c2:	06 c0       	rjmp	.+12     	; 0x21d0 <vfprintf+0xca>
    21c4:	8c 36       	cpi	r24, 0x6C	; 108
    21c6:	11 f4       	brne	.+4      	; 0x21cc <vfprintf+0xc6>
    21c8:	20 68       	ori	r18, 0x80	; 128
    21ca:	02 c0       	rjmp	.+4      	; 0x21d0 <vfprintf+0xca>
    21cc:	88 36       	cpi	r24, 0x68	; 104
    21ce:	41 f4       	brne	.+16     	; 0x21e0 <vfprintf+0xda>
    21d0:	f6 01       	movw	r30, r12
    21d2:	93 fd       	sbrc	r25, 3
    21d4:	85 91       	lpm	r24, Z+
    21d6:	93 ff       	sbrs	r25, 3
    21d8:	81 91       	ld	r24, Z+
    21da:	6f 01       	movw	r12, r30
    21dc:	81 11       	cpse	r24, r1
    21de:	c1 cf       	rjmp	.-126    	; 0x2162 <vfprintf+0x5c>
    21e0:	98 2f       	mov	r25, r24
    21e2:	9f 7d       	andi	r25, 0xDF	; 223
    21e4:	95 54       	subi	r25, 0x45	; 69
    21e6:	93 30       	cpi	r25, 0x03	; 3
    21e8:	28 f4       	brcc	.+10     	; 0x21f4 <vfprintf+0xee>
    21ea:	0c 5f       	subi	r16, 0xFC	; 252
    21ec:	1f 4f       	sbci	r17, 0xFF	; 255
    21ee:	ff e3       	ldi	r31, 0x3F	; 63
    21f0:	f9 83       	std	Y+1, r31	; 0x01
    21f2:	0d c0       	rjmp	.+26     	; 0x220e <vfprintf+0x108>
    21f4:	83 36       	cpi	r24, 0x63	; 99
    21f6:	31 f0       	breq	.+12     	; 0x2204 <vfprintf+0xfe>
    21f8:	83 37       	cpi	r24, 0x73	; 115
    21fa:	71 f0       	breq	.+28     	; 0x2218 <vfprintf+0x112>
    21fc:	83 35       	cpi	r24, 0x53	; 83
    21fe:	09 f0       	breq	.+2      	; 0x2202 <vfprintf+0xfc>
    2200:	5b c0       	rjmp	.+182    	; 0x22b8 <vfprintf+0x1b2>
    2202:	22 c0       	rjmp	.+68     	; 0x2248 <vfprintf+0x142>
    2204:	f8 01       	movw	r30, r16
    2206:	80 81       	ld	r24, Z
    2208:	89 83       	std	Y+1, r24	; 0x01
    220a:	0e 5f       	subi	r16, 0xFE	; 254
    220c:	1f 4f       	sbci	r17, 0xFF	; 255
    220e:	44 24       	eor	r4, r4
    2210:	43 94       	inc	r4
    2212:	51 2c       	mov	r5, r1
    2214:	54 01       	movw	r10, r8
    2216:	15 c0       	rjmp	.+42     	; 0x2242 <vfprintf+0x13c>
    2218:	38 01       	movw	r6, r16
    221a:	f2 e0       	ldi	r31, 0x02	; 2
    221c:	6f 0e       	add	r6, r31
    221e:	71 1c       	adc	r7, r1
    2220:	f8 01       	movw	r30, r16
    2222:	a0 80       	ld	r10, Z
    2224:	b1 80       	ldd	r11, Z+1	; 0x01
    2226:	26 ff       	sbrs	r18, 6
    2228:	03 c0       	rjmp	.+6      	; 0x2230 <vfprintf+0x12a>
    222a:	65 2d       	mov	r22, r5
    222c:	70 e0       	ldi	r23, 0x00	; 0
    222e:	02 c0       	rjmp	.+4      	; 0x2234 <vfprintf+0x12e>
    2230:	6f ef       	ldi	r22, 0xFF	; 255
    2232:	7f ef       	ldi	r23, 0xFF	; 255
    2234:	c5 01       	movw	r24, r10
    2236:	2c 87       	std	Y+12, r18	; 0x0c
    2238:	0e 94 aa 13 	call	0x2754	; 0x2754 <strnlen>
    223c:	2c 01       	movw	r4, r24
    223e:	83 01       	movw	r16, r6
    2240:	2c 85       	ldd	r18, Y+12	; 0x0c
    2242:	2f 77       	andi	r18, 0x7F	; 127
    2244:	22 2e       	mov	r2, r18
    2246:	17 c0       	rjmp	.+46     	; 0x2276 <vfprintf+0x170>
    2248:	38 01       	movw	r6, r16
    224a:	f2 e0       	ldi	r31, 0x02	; 2
    224c:	6f 0e       	add	r6, r31
    224e:	71 1c       	adc	r7, r1
    2250:	f8 01       	movw	r30, r16
    2252:	a0 80       	ld	r10, Z
    2254:	b1 80       	ldd	r11, Z+1	; 0x01
    2256:	26 ff       	sbrs	r18, 6
    2258:	03 c0       	rjmp	.+6      	; 0x2260 <vfprintf+0x15a>
    225a:	65 2d       	mov	r22, r5
    225c:	70 e0       	ldi	r23, 0x00	; 0
    225e:	02 c0       	rjmp	.+4      	; 0x2264 <vfprintf+0x15e>
    2260:	6f ef       	ldi	r22, 0xFF	; 255
    2262:	7f ef       	ldi	r23, 0xFF	; 255
    2264:	c5 01       	movw	r24, r10
    2266:	2c 87       	std	Y+12, r18	; 0x0c
    2268:	0e 94 98 13 	call	0x2730	; 0x2730 <strnlen_P>
    226c:	2c 01       	movw	r4, r24
    226e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2270:	20 68       	ori	r18, 0x80	; 128
    2272:	22 2e       	mov	r2, r18
    2274:	83 01       	movw	r16, r6
    2276:	23 fc       	sbrc	r2, 3
    2278:	1b c0       	rjmp	.+54     	; 0x22b0 <vfprintf+0x1aa>
    227a:	83 2d       	mov	r24, r3
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	48 16       	cp	r4, r24
    2280:	59 06       	cpc	r5, r25
    2282:	b0 f4       	brcc	.+44     	; 0x22b0 <vfprintf+0x1aa>
    2284:	b7 01       	movw	r22, r14
    2286:	80 e2       	ldi	r24, 0x20	; 32
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	0e 94 b5 13 	call	0x276a	; 0x276a <fputc>
    228e:	3a 94       	dec	r3
    2290:	f4 cf       	rjmp	.-24     	; 0x227a <vfprintf+0x174>
    2292:	f5 01       	movw	r30, r10
    2294:	27 fc       	sbrc	r2, 7
    2296:	85 91       	lpm	r24, Z+
    2298:	27 fe       	sbrs	r2, 7
    229a:	81 91       	ld	r24, Z+
    229c:	5f 01       	movw	r10, r30
    229e:	b7 01       	movw	r22, r14
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	0e 94 b5 13 	call	0x276a	; 0x276a <fputc>
    22a6:	31 10       	cpse	r3, r1
    22a8:	3a 94       	dec	r3
    22aa:	f1 e0       	ldi	r31, 0x01	; 1
    22ac:	4f 1a       	sub	r4, r31
    22ae:	51 08       	sbc	r5, r1
    22b0:	41 14       	cp	r4, r1
    22b2:	51 04       	cpc	r5, r1
    22b4:	71 f7       	brne	.-36     	; 0x2292 <vfprintf+0x18c>
    22b6:	e5 c0       	rjmp	.+458    	; 0x2482 <vfprintf+0x37c>
    22b8:	84 36       	cpi	r24, 0x64	; 100
    22ba:	11 f0       	breq	.+4      	; 0x22c0 <vfprintf+0x1ba>
    22bc:	89 36       	cpi	r24, 0x69	; 105
    22be:	39 f5       	brne	.+78     	; 0x230e <vfprintf+0x208>
    22c0:	f8 01       	movw	r30, r16
    22c2:	27 ff       	sbrs	r18, 7
    22c4:	07 c0       	rjmp	.+14     	; 0x22d4 <vfprintf+0x1ce>
    22c6:	60 81       	ld	r22, Z
    22c8:	71 81       	ldd	r23, Z+1	; 0x01
    22ca:	82 81       	ldd	r24, Z+2	; 0x02
    22cc:	93 81       	ldd	r25, Z+3	; 0x03
    22ce:	0c 5f       	subi	r16, 0xFC	; 252
    22d0:	1f 4f       	sbci	r17, 0xFF	; 255
    22d2:	08 c0       	rjmp	.+16     	; 0x22e4 <vfprintf+0x1de>
    22d4:	60 81       	ld	r22, Z
    22d6:	71 81       	ldd	r23, Z+1	; 0x01
    22d8:	88 27       	eor	r24, r24
    22da:	77 fd       	sbrc	r23, 7
    22dc:	80 95       	com	r24
    22de:	98 2f       	mov	r25, r24
    22e0:	0e 5f       	subi	r16, 0xFE	; 254
    22e2:	1f 4f       	sbci	r17, 0xFF	; 255
    22e4:	2f 76       	andi	r18, 0x6F	; 111
    22e6:	b2 2e       	mov	r11, r18
    22e8:	97 ff       	sbrs	r25, 7
    22ea:	09 c0       	rjmp	.+18     	; 0x22fe <vfprintf+0x1f8>
    22ec:	90 95       	com	r25
    22ee:	80 95       	com	r24
    22f0:	70 95       	com	r23
    22f2:	61 95       	neg	r22
    22f4:	7f 4f       	sbci	r23, 0xFF	; 255
    22f6:	8f 4f       	sbci	r24, 0xFF	; 255
    22f8:	9f 4f       	sbci	r25, 0xFF	; 255
    22fa:	20 68       	ori	r18, 0x80	; 128
    22fc:	b2 2e       	mov	r11, r18
    22fe:	2a e0       	ldi	r18, 0x0A	; 10
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	a4 01       	movw	r20, r8
    2304:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__ultoa_invert>
    2308:	a8 2e       	mov	r10, r24
    230a:	a8 18       	sub	r10, r8
    230c:	44 c0       	rjmp	.+136    	; 0x2396 <vfprintf+0x290>
    230e:	85 37       	cpi	r24, 0x75	; 117
    2310:	29 f4       	brne	.+10     	; 0x231c <vfprintf+0x216>
    2312:	2f 7e       	andi	r18, 0xEF	; 239
    2314:	b2 2e       	mov	r11, r18
    2316:	2a e0       	ldi	r18, 0x0A	; 10
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	25 c0       	rjmp	.+74     	; 0x2366 <vfprintf+0x260>
    231c:	f2 2f       	mov	r31, r18
    231e:	f9 7f       	andi	r31, 0xF9	; 249
    2320:	bf 2e       	mov	r11, r31
    2322:	8f 36       	cpi	r24, 0x6F	; 111
    2324:	c1 f0       	breq	.+48     	; 0x2356 <vfprintf+0x250>
    2326:	18 f4       	brcc	.+6      	; 0x232e <vfprintf+0x228>
    2328:	88 35       	cpi	r24, 0x58	; 88
    232a:	79 f0       	breq	.+30     	; 0x234a <vfprintf+0x244>
    232c:	b4 c0       	rjmp	.+360    	; 0x2496 <vfprintf+0x390>
    232e:	80 37       	cpi	r24, 0x70	; 112
    2330:	19 f0       	breq	.+6      	; 0x2338 <vfprintf+0x232>
    2332:	88 37       	cpi	r24, 0x78	; 120
    2334:	21 f0       	breq	.+8      	; 0x233e <vfprintf+0x238>
    2336:	af c0       	rjmp	.+350    	; 0x2496 <vfprintf+0x390>
    2338:	2f 2f       	mov	r18, r31
    233a:	20 61       	ori	r18, 0x10	; 16
    233c:	b2 2e       	mov	r11, r18
    233e:	b4 fe       	sbrs	r11, 4
    2340:	0d c0       	rjmp	.+26     	; 0x235c <vfprintf+0x256>
    2342:	8b 2d       	mov	r24, r11
    2344:	84 60       	ori	r24, 0x04	; 4
    2346:	b8 2e       	mov	r11, r24
    2348:	09 c0       	rjmp	.+18     	; 0x235c <vfprintf+0x256>
    234a:	24 ff       	sbrs	r18, 4
    234c:	0a c0       	rjmp	.+20     	; 0x2362 <vfprintf+0x25c>
    234e:	9f 2f       	mov	r25, r31
    2350:	96 60       	ori	r25, 0x06	; 6
    2352:	b9 2e       	mov	r11, r25
    2354:	06 c0       	rjmp	.+12     	; 0x2362 <vfprintf+0x25c>
    2356:	28 e0       	ldi	r18, 0x08	; 8
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	05 c0       	rjmp	.+10     	; 0x2366 <vfprintf+0x260>
    235c:	20 e1       	ldi	r18, 0x10	; 16
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	02 c0       	rjmp	.+4      	; 0x2366 <vfprintf+0x260>
    2362:	20 e1       	ldi	r18, 0x10	; 16
    2364:	32 e0       	ldi	r19, 0x02	; 2
    2366:	f8 01       	movw	r30, r16
    2368:	b7 fe       	sbrs	r11, 7
    236a:	07 c0       	rjmp	.+14     	; 0x237a <vfprintf+0x274>
    236c:	60 81       	ld	r22, Z
    236e:	71 81       	ldd	r23, Z+1	; 0x01
    2370:	82 81       	ldd	r24, Z+2	; 0x02
    2372:	93 81       	ldd	r25, Z+3	; 0x03
    2374:	0c 5f       	subi	r16, 0xFC	; 252
    2376:	1f 4f       	sbci	r17, 0xFF	; 255
    2378:	06 c0       	rjmp	.+12     	; 0x2386 <vfprintf+0x280>
    237a:	60 81       	ld	r22, Z
    237c:	71 81       	ldd	r23, Z+1	; 0x01
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	0e 5f       	subi	r16, 0xFE	; 254
    2384:	1f 4f       	sbci	r17, 0xFF	; 255
    2386:	a4 01       	movw	r20, r8
    2388:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__ultoa_invert>
    238c:	a8 2e       	mov	r10, r24
    238e:	a8 18       	sub	r10, r8
    2390:	fb 2d       	mov	r31, r11
    2392:	ff 77       	andi	r31, 0x7F	; 127
    2394:	bf 2e       	mov	r11, r31
    2396:	b6 fe       	sbrs	r11, 6
    2398:	0b c0       	rjmp	.+22     	; 0x23b0 <vfprintf+0x2aa>
    239a:	2b 2d       	mov	r18, r11
    239c:	2e 7f       	andi	r18, 0xFE	; 254
    239e:	a5 14       	cp	r10, r5
    23a0:	50 f4       	brcc	.+20     	; 0x23b6 <vfprintf+0x2b0>
    23a2:	b4 fe       	sbrs	r11, 4
    23a4:	0a c0       	rjmp	.+20     	; 0x23ba <vfprintf+0x2b4>
    23a6:	b2 fc       	sbrc	r11, 2
    23a8:	08 c0       	rjmp	.+16     	; 0x23ba <vfprintf+0x2b4>
    23aa:	2b 2d       	mov	r18, r11
    23ac:	2e 7e       	andi	r18, 0xEE	; 238
    23ae:	05 c0       	rjmp	.+10     	; 0x23ba <vfprintf+0x2b4>
    23b0:	7a 2c       	mov	r7, r10
    23b2:	2b 2d       	mov	r18, r11
    23b4:	03 c0       	rjmp	.+6      	; 0x23bc <vfprintf+0x2b6>
    23b6:	7a 2c       	mov	r7, r10
    23b8:	01 c0       	rjmp	.+2      	; 0x23bc <vfprintf+0x2b6>
    23ba:	75 2c       	mov	r7, r5
    23bc:	24 ff       	sbrs	r18, 4
    23be:	0d c0       	rjmp	.+26     	; 0x23da <vfprintf+0x2d4>
    23c0:	fe 01       	movw	r30, r28
    23c2:	ea 0d       	add	r30, r10
    23c4:	f1 1d       	adc	r31, r1
    23c6:	80 81       	ld	r24, Z
    23c8:	80 33       	cpi	r24, 0x30	; 48
    23ca:	11 f4       	brne	.+4      	; 0x23d0 <vfprintf+0x2ca>
    23cc:	29 7e       	andi	r18, 0xE9	; 233
    23ce:	09 c0       	rjmp	.+18     	; 0x23e2 <vfprintf+0x2dc>
    23d0:	22 ff       	sbrs	r18, 2
    23d2:	06 c0       	rjmp	.+12     	; 0x23e0 <vfprintf+0x2da>
    23d4:	73 94       	inc	r7
    23d6:	73 94       	inc	r7
    23d8:	04 c0       	rjmp	.+8      	; 0x23e2 <vfprintf+0x2dc>
    23da:	82 2f       	mov	r24, r18
    23dc:	86 78       	andi	r24, 0x86	; 134
    23de:	09 f0       	breq	.+2      	; 0x23e2 <vfprintf+0x2dc>
    23e0:	73 94       	inc	r7
    23e2:	23 fd       	sbrc	r18, 3
    23e4:	13 c0       	rjmp	.+38     	; 0x240c <vfprintf+0x306>
    23e6:	20 ff       	sbrs	r18, 0
    23e8:	06 c0       	rjmp	.+12     	; 0x23f6 <vfprintf+0x2f0>
    23ea:	5a 2c       	mov	r5, r10
    23ec:	73 14       	cp	r7, r3
    23ee:	18 f4       	brcc	.+6      	; 0x23f6 <vfprintf+0x2f0>
    23f0:	53 0c       	add	r5, r3
    23f2:	57 18       	sub	r5, r7
    23f4:	73 2c       	mov	r7, r3
    23f6:	73 14       	cp	r7, r3
    23f8:	68 f4       	brcc	.+26     	; 0x2414 <vfprintf+0x30e>
    23fa:	b7 01       	movw	r22, r14
    23fc:	80 e2       	ldi	r24, 0x20	; 32
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	2c 87       	std	Y+12, r18	; 0x0c
    2402:	0e 94 b5 13 	call	0x276a	; 0x276a <fputc>
    2406:	73 94       	inc	r7
    2408:	2c 85       	ldd	r18, Y+12	; 0x0c
    240a:	f5 cf       	rjmp	.-22     	; 0x23f6 <vfprintf+0x2f0>
    240c:	73 14       	cp	r7, r3
    240e:	10 f4       	brcc	.+4      	; 0x2414 <vfprintf+0x30e>
    2410:	37 18       	sub	r3, r7
    2412:	01 c0       	rjmp	.+2      	; 0x2416 <vfprintf+0x310>
    2414:	31 2c       	mov	r3, r1
    2416:	24 ff       	sbrs	r18, 4
    2418:	12 c0       	rjmp	.+36     	; 0x243e <vfprintf+0x338>
    241a:	b7 01       	movw	r22, r14
    241c:	80 e3       	ldi	r24, 0x30	; 48
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	2c 87       	std	Y+12, r18	; 0x0c
    2422:	0e 94 b5 13 	call	0x276a	; 0x276a <fputc>
    2426:	2c 85       	ldd	r18, Y+12	; 0x0c
    2428:	22 ff       	sbrs	r18, 2
    242a:	17 c0       	rjmp	.+46     	; 0x245a <vfprintf+0x354>
    242c:	21 ff       	sbrs	r18, 1
    242e:	03 c0       	rjmp	.+6      	; 0x2436 <vfprintf+0x330>
    2430:	88 e5       	ldi	r24, 0x58	; 88
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	02 c0       	rjmp	.+4      	; 0x243a <vfprintf+0x334>
    2436:	88 e7       	ldi	r24, 0x78	; 120
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	b7 01       	movw	r22, r14
    243c:	0c c0       	rjmp	.+24     	; 0x2456 <vfprintf+0x350>
    243e:	82 2f       	mov	r24, r18
    2440:	86 78       	andi	r24, 0x86	; 134
    2442:	59 f0       	breq	.+22     	; 0x245a <vfprintf+0x354>
    2444:	21 fd       	sbrc	r18, 1
    2446:	02 c0       	rjmp	.+4      	; 0x244c <vfprintf+0x346>
    2448:	80 e2       	ldi	r24, 0x20	; 32
    244a:	01 c0       	rjmp	.+2      	; 0x244e <vfprintf+0x348>
    244c:	8b e2       	ldi	r24, 0x2B	; 43
    244e:	27 fd       	sbrc	r18, 7
    2450:	8d e2       	ldi	r24, 0x2D	; 45
    2452:	b7 01       	movw	r22, r14
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	0e 94 b5 13 	call	0x276a	; 0x276a <fputc>
    245a:	a5 14       	cp	r10, r5
    245c:	38 f4       	brcc	.+14     	; 0x246c <vfprintf+0x366>
    245e:	b7 01       	movw	r22, r14
    2460:	80 e3       	ldi	r24, 0x30	; 48
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	0e 94 b5 13 	call	0x276a	; 0x276a <fputc>
    2468:	5a 94       	dec	r5
    246a:	f7 cf       	rjmp	.-18     	; 0x245a <vfprintf+0x354>
    246c:	aa 94       	dec	r10
    246e:	f4 01       	movw	r30, r8
    2470:	ea 0d       	add	r30, r10
    2472:	f1 1d       	adc	r31, r1
    2474:	80 81       	ld	r24, Z
    2476:	b7 01       	movw	r22, r14
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	0e 94 b5 13 	call	0x276a	; 0x276a <fputc>
    247e:	a1 10       	cpse	r10, r1
    2480:	f5 cf       	rjmp	.-22     	; 0x246c <vfprintf+0x366>
    2482:	33 20       	and	r3, r3
    2484:	09 f4       	brne	.+2      	; 0x2488 <vfprintf+0x382>
    2486:	51 ce       	rjmp	.-862    	; 0x212a <vfprintf+0x24>
    2488:	b7 01       	movw	r22, r14
    248a:	80 e2       	ldi	r24, 0x20	; 32
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	0e 94 b5 13 	call	0x276a	; 0x276a <fputc>
    2492:	3a 94       	dec	r3
    2494:	f6 cf       	rjmp	.-20     	; 0x2482 <vfprintf+0x37c>
    2496:	f7 01       	movw	r30, r14
    2498:	86 81       	ldd	r24, Z+6	; 0x06
    249a:	97 81       	ldd	r25, Z+7	; 0x07
    249c:	02 c0       	rjmp	.+4      	; 0x24a2 <vfprintf+0x39c>
    249e:	8f ef       	ldi	r24, 0xFF	; 255
    24a0:	9f ef       	ldi	r25, 0xFF	; 255
    24a2:	2c 96       	adiw	r28, 0x0c	; 12
    24a4:	e2 e1       	ldi	r30, 0x12	; 18
    24a6:	0c 94 61 14 	jmp	0x28c2	; 0x28c2 <__epilogue_restores__>

000024aa <calloc>:
    24aa:	0f 93       	push	r16
    24ac:	1f 93       	push	r17
    24ae:	cf 93       	push	r28
    24b0:	df 93       	push	r29
    24b2:	86 9f       	mul	r24, r22
    24b4:	80 01       	movw	r16, r0
    24b6:	87 9f       	mul	r24, r23
    24b8:	10 0d       	add	r17, r0
    24ba:	96 9f       	mul	r25, r22
    24bc:	10 0d       	add	r17, r0
    24be:	11 24       	eor	r1, r1
    24c0:	c8 01       	movw	r24, r16
    24c2:	0e 94 71 12 	call	0x24e2	; 0x24e2 <malloc>
    24c6:	ec 01       	movw	r28, r24
    24c8:	00 97       	sbiw	r24, 0x00	; 0
    24ca:	29 f0       	breq	.+10     	; 0x24d6 <calloc+0x2c>
    24cc:	a8 01       	movw	r20, r16
    24ce:	60 e0       	ldi	r22, 0x00	; 0
    24d0:	70 e0       	ldi	r23, 0x00	; 0
    24d2:	0e 94 a3 13 	call	0x2746	; 0x2746 <memset>
    24d6:	ce 01       	movw	r24, r28
    24d8:	df 91       	pop	r29
    24da:	cf 91       	pop	r28
    24dc:	1f 91       	pop	r17
    24de:	0f 91       	pop	r16
    24e0:	08 95       	ret

000024e2 <malloc>:
    24e2:	cf 93       	push	r28
    24e4:	df 93       	push	r29
    24e6:	82 30       	cpi	r24, 0x02	; 2
    24e8:	91 05       	cpc	r25, r1
    24ea:	10 f4       	brcc	.+4      	; 0x24f0 <malloc+0xe>
    24ec:	82 e0       	ldi	r24, 0x02	; 2
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	e0 91 30 04 	lds	r30, 0x0430
    24f4:	f0 91 31 04 	lds	r31, 0x0431
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	a0 e0       	ldi	r26, 0x00	; 0
    24fe:	b0 e0       	ldi	r27, 0x00	; 0
    2500:	30 97       	sbiw	r30, 0x00	; 0
    2502:	39 f1       	breq	.+78     	; 0x2552 <malloc+0x70>
    2504:	40 81       	ld	r20, Z
    2506:	51 81       	ldd	r21, Z+1	; 0x01
    2508:	48 17       	cp	r20, r24
    250a:	59 07       	cpc	r21, r25
    250c:	b8 f0       	brcs	.+46     	; 0x253c <malloc+0x5a>
    250e:	48 17       	cp	r20, r24
    2510:	59 07       	cpc	r21, r25
    2512:	71 f4       	brne	.+28     	; 0x2530 <malloc+0x4e>
    2514:	82 81       	ldd	r24, Z+2	; 0x02
    2516:	93 81       	ldd	r25, Z+3	; 0x03
    2518:	10 97       	sbiw	r26, 0x00	; 0
    251a:	29 f0       	breq	.+10     	; 0x2526 <malloc+0x44>
    251c:	13 96       	adiw	r26, 0x03	; 3
    251e:	9c 93       	st	X, r25
    2520:	8e 93       	st	-X, r24
    2522:	12 97       	sbiw	r26, 0x02	; 2
    2524:	2c c0       	rjmp	.+88     	; 0x257e <malloc+0x9c>
    2526:	90 93 31 04 	sts	0x0431, r25
    252a:	80 93 30 04 	sts	0x0430, r24
    252e:	27 c0       	rjmp	.+78     	; 0x257e <malloc+0x9c>
    2530:	21 15       	cp	r18, r1
    2532:	31 05       	cpc	r19, r1
    2534:	31 f0       	breq	.+12     	; 0x2542 <malloc+0x60>
    2536:	42 17       	cp	r20, r18
    2538:	53 07       	cpc	r21, r19
    253a:	18 f0       	brcs	.+6      	; 0x2542 <malloc+0x60>
    253c:	a9 01       	movw	r20, r18
    253e:	db 01       	movw	r26, r22
    2540:	01 c0       	rjmp	.+2      	; 0x2544 <malloc+0x62>
    2542:	ef 01       	movw	r28, r30
    2544:	9a 01       	movw	r18, r20
    2546:	bd 01       	movw	r22, r26
    2548:	df 01       	movw	r26, r30
    254a:	02 80       	ldd	r0, Z+2	; 0x02
    254c:	f3 81       	ldd	r31, Z+3	; 0x03
    254e:	e0 2d       	mov	r30, r0
    2550:	d7 cf       	rjmp	.-82     	; 0x2500 <malloc+0x1e>
    2552:	21 15       	cp	r18, r1
    2554:	31 05       	cpc	r19, r1
    2556:	f9 f0       	breq	.+62     	; 0x2596 <malloc+0xb4>
    2558:	28 1b       	sub	r18, r24
    255a:	39 0b       	sbc	r19, r25
    255c:	24 30       	cpi	r18, 0x04	; 4
    255e:	31 05       	cpc	r19, r1
    2560:	80 f4       	brcc	.+32     	; 0x2582 <malloc+0xa0>
    2562:	8a 81       	ldd	r24, Y+2	; 0x02
    2564:	9b 81       	ldd	r25, Y+3	; 0x03
    2566:	61 15       	cp	r22, r1
    2568:	71 05       	cpc	r23, r1
    256a:	21 f0       	breq	.+8      	; 0x2574 <malloc+0x92>
    256c:	fb 01       	movw	r30, r22
    256e:	93 83       	std	Z+3, r25	; 0x03
    2570:	82 83       	std	Z+2, r24	; 0x02
    2572:	04 c0       	rjmp	.+8      	; 0x257c <malloc+0x9a>
    2574:	90 93 31 04 	sts	0x0431, r25
    2578:	80 93 30 04 	sts	0x0430, r24
    257c:	fe 01       	movw	r30, r28
    257e:	32 96       	adiw	r30, 0x02	; 2
    2580:	44 c0       	rjmp	.+136    	; 0x260a <malloc+0x128>
    2582:	fe 01       	movw	r30, r28
    2584:	e2 0f       	add	r30, r18
    2586:	f3 1f       	adc	r31, r19
    2588:	81 93       	st	Z+, r24
    258a:	91 93       	st	Z+, r25
    258c:	22 50       	subi	r18, 0x02	; 2
    258e:	31 09       	sbc	r19, r1
    2590:	39 83       	std	Y+1, r19	; 0x01
    2592:	28 83       	st	Y, r18
    2594:	3a c0       	rjmp	.+116    	; 0x260a <malloc+0x128>
    2596:	20 91 2e 04 	lds	r18, 0x042E
    259a:	30 91 2f 04 	lds	r19, 0x042F
    259e:	23 2b       	or	r18, r19
    25a0:	41 f4       	brne	.+16     	; 0x25b2 <malloc+0xd0>
    25a2:	20 91 02 01 	lds	r18, 0x0102
    25a6:	30 91 03 01 	lds	r19, 0x0103
    25aa:	30 93 2f 04 	sts	0x042F, r19
    25ae:	20 93 2e 04 	sts	0x042E, r18
    25b2:	20 91 00 01 	lds	r18, 0x0100
    25b6:	30 91 01 01 	lds	r19, 0x0101
    25ba:	21 15       	cp	r18, r1
    25bc:	31 05       	cpc	r19, r1
    25be:	41 f4       	brne	.+16     	; 0x25d0 <malloc+0xee>
    25c0:	2d b7       	in	r18, 0x3d	; 61
    25c2:	3e b7       	in	r19, 0x3e	; 62
    25c4:	40 91 04 01 	lds	r20, 0x0104
    25c8:	50 91 05 01 	lds	r21, 0x0105
    25cc:	24 1b       	sub	r18, r20
    25ce:	35 0b       	sbc	r19, r21
    25d0:	e0 91 2e 04 	lds	r30, 0x042E
    25d4:	f0 91 2f 04 	lds	r31, 0x042F
    25d8:	e2 17       	cp	r30, r18
    25da:	f3 07       	cpc	r31, r19
    25dc:	a0 f4       	brcc	.+40     	; 0x2606 <malloc+0x124>
    25de:	2e 1b       	sub	r18, r30
    25e0:	3f 0b       	sbc	r19, r31
    25e2:	28 17       	cp	r18, r24
    25e4:	39 07       	cpc	r19, r25
    25e6:	78 f0       	brcs	.+30     	; 0x2606 <malloc+0x124>
    25e8:	ac 01       	movw	r20, r24
    25ea:	4e 5f       	subi	r20, 0xFE	; 254
    25ec:	5f 4f       	sbci	r21, 0xFF	; 255
    25ee:	24 17       	cp	r18, r20
    25f0:	35 07       	cpc	r19, r21
    25f2:	48 f0       	brcs	.+18     	; 0x2606 <malloc+0x124>
    25f4:	4e 0f       	add	r20, r30
    25f6:	5f 1f       	adc	r21, r31
    25f8:	50 93 2f 04 	sts	0x042F, r21
    25fc:	40 93 2e 04 	sts	0x042E, r20
    2600:	81 93       	st	Z+, r24
    2602:	91 93       	st	Z+, r25
    2604:	02 c0       	rjmp	.+4      	; 0x260a <malloc+0x128>
    2606:	e0 e0       	ldi	r30, 0x00	; 0
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	cf 01       	movw	r24, r30
    260c:	df 91       	pop	r29
    260e:	cf 91       	pop	r28
    2610:	08 95       	ret

00002612 <free>:
    2612:	cf 93       	push	r28
    2614:	df 93       	push	r29
    2616:	00 97       	sbiw	r24, 0x00	; 0
    2618:	09 f4       	brne	.+2      	; 0x261c <free+0xa>
    261a:	87 c0       	rjmp	.+270    	; 0x272a <free+0x118>
    261c:	fc 01       	movw	r30, r24
    261e:	32 97       	sbiw	r30, 0x02	; 2
    2620:	13 82       	std	Z+3, r1	; 0x03
    2622:	12 82       	std	Z+2, r1	; 0x02
    2624:	c0 91 30 04 	lds	r28, 0x0430
    2628:	d0 91 31 04 	lds	r29, 0x0431
    262c:	20 97       	sbiw	r28, 0x00	; 0
    262e:	81 f4       	brne	.+32     	; 0x2650 <free+0x3e>
    2630:	20 81       	ld	r18, Z
    2632:	31 81       	ldd	r19, Z+1	; 0x01
    2634:	28 0f       	add	r18, r24
    2636:	39 1f       	adc	r19, r25
    2638:	80 91 2e 04 	lds	r24, 0x042E
    263c:	90 91 2f 04 	lds	r25, 0x042F
    2640:	82 17       	cp	r24, r18
    2642:	93 07       	cpc	r25, r19
    2644:	79 f5       	brne	.+94     	; 0x26a4 <free+0x92>
    2646:	f0 93 2f 04 	sts	0x042F, r31
    264a:	e0 93 2e 04 	sts	0x042E, r30
    264e:	6d c0       	rjmp	.+218    	; 0x272a <free+0x118>
    2650:	de 01       	movw	r26, r28
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	ae 17       	cp	r26, r30
    2658:	bf 07       	cpc	r27, r31
    265a:	50 f4       	brcc	.+20     	; 0x2670 <free+0x5e>
    265c:	12 96       	adiw	r26, 0x02	; 2
    265e:	4d 91       	ld	r20, X+
    2660:	5c 91       	ld	r21, X
    2662:	13 97       	sbiw	r26, 0x03	; 3
    2664:	9d 01       	movw	r18, r26
    2666:	41 15       	cp	r20, r1
    2668:	51 05       	cpc	r21, r1
    266a:	09 f1       	breq	.+66     	; 0x26ae <free+0x9c>
    266c:	da 01       	movw	r26, r20
    266e:	f3 cf       	rjmp	.-26     	; 0x2656 <free+0x44>
    2670:	b3 83       	std	Z+3, r27	; 0x03
    2672:	a2 83       	std	Z+2, r26	; 0x02
    2674:	40 81       	ld	r20, Z
    2676:	51 81       	ldd	r21, Z+1	; 0x01
    2678:	84 0f       	add	r24, r20
    267a:	95 1f       	adc	r25, r21
    267c:	8a 17       	cp	r24, r26
    267e:	9b 07       	cpc	r25, r27
    2680:	71 f4       	brne	.+28     	; 0x269e <free+0x8c>
    2682:	8d 91       	ld	r24, X+
    2684:	9c 91       	ld	r25, X
    2686:	11 97       	sbiw	r26, 0x01	; 1
    2688:	84 0f       	add	r24, r20
    268a:	95 1f       	adc	r25, r21
    268c:	02 96       	adiw	r24, 0x02	; 2
    268e:	91 83       	std	Z+1, r25	; 0x01
    2690:	80 83       	st	Z, r24
    2692:	12 96       	adiw	r26, 0x02	; 2
    2694:	8d 91       	ld	r24, X+
    2696:	9c 91       	ld	r25, X
    2698:	13 97       	sbiw	r26, 0x03	; 3
    269a:	93 83       	std	Z+3, r25	; 0x03
    269c:	82 83       	std	Z+2, r24	; 0x02
    269e:	21 15       	cp	r18, r1
    26a0:	31 05       	cpc	r19, r1
    26a2:	29 f4       	brne	.+10     	; 0x26ae <free+0x9c>
    26a4:	f0 93 31 04 	sts	0x0431, r31
    26a8:	e0 93 30 04 	sts	0x0430, r30
    26ac:	3e c0       	rjmp	.+124    	; 0x272a <free+0x118>
    26ae:	d9 01       	movw	r26, r18
    26b0:	13 96       	adiw	r26, 0x03	; 3
    26b2:	fc 93       	st	X, r31
    26b4:	ee 93       	st	-X, r30
    26b6:	12 97       	sbiw	r26, 0x02	; 2
    26b8:	4d 91       	ld	r20, X+
    26ba:	5d 91       	ld	r21, X+
    26bc:	a4 0f       	add	r26, r20
    26be:	b5 1f       	adc	r27, r21
    26c0:	ea 17       	cp	r30, r26
    26c2:	fb 07       	cpc	r31, r27
    26c4:	79 f4       	brne	.+30     	; 0x26e4 <free+0xd2>
    26c6:	80 81       	ld	r24, Z
    26c8:	91 81       	ldd	r25, Z+1	; 0x01
    26ca:	84 0f       	add	r24, r20
    26cc:	95 1f       	adc	r25, r21
    26ce:	02 96       	adiw	r24, 0x02	; 2
    26d0:	d9 01       	movw	r26, r18
    26d2:	11 96       	adiw	r26, 0x01	; 1
    26d4:	9c 93       	st	X, r25
    26d6:	8e 93       	st	-X, r24
    26d8:	82 81       	ldd	r24, Z+2	; 0x02
    26da:	93 81       	ldd	r25, Z+3	; 0x03
    26dc:	13 96       	adiw	r26, 0x03	; 3
    26de:	9c 93       	st	X, r25
    26e0:	8e 93       	st	-X, r24
    26e2:	12 97       	sbiw	r26, 0x02	; 2
    26e4:	e0 e0       	ldi	r30, 0x00	; 0
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	9b 81       	ldd	r25, Y+3	; 0x03
    26ec:	00 97       	sbiw	r24, 0x00	; 0
    26ee:	19 f0       	breq	.+6      	; 0x26f6 <free+0xe4>
    26f0:	fe 01       	movw	r30, r28
    26f2:	ec 01       	movw	r28, r24
    26f4:	f9 cf       	rjmp	.-14     	; 0x26e8 <free+0xd6>
    26f6:	ce 01       	movw	r24, r28
    26f8:	02 96       	adiw	r24, 0x02	; 2
    26fa:	28 81       	ld	r18, Y
    26fc:	39 81       	ldd	r19, Y+1	; 0x01
    26fe:	82 0f       	add	r24, r18
    2700:	93 1f       	adc	r25, r19
    2702:	20 91 2e 04 	lds	r18, 0x042E
    2706:	30 91 2f 04 	lds	r19, 0x042F
    270a:	28 17       	cp	r18, r24
    270c:	39 07       	cpc	r19, r25
    270e:	69 f4       	brne	.+26     	; 0x272a <free+0x118>
    2710:	30 97       	sbiw	r30, 0x00	; 0
    2712:	29 f4       	brne	.+10     	; 0x271e <free+0x10c>
    2714:	10 92 31 04 	sts	0x0431, r1
    2718:	10 92 30 04 	sts	0x0430, r1
    271c:	02 c0       	rjmp	.+4      	; 0x2722 <free+0x110>
    271e:	13 82       	std	Z+3, r1	; 0x03
    2720:	12 82       	std	Z+2, r1	; 0x02
    2722:	d0 93 2f 04 	sts	0x042F, r29
    2726:	c0 93 2e 04 	sts	0x042E, r28
    272a:	df 91       	pop	r29
    272c:	cf 91       	pop	r28
    272e:	08 95       	ret

00002730 <strnlen_P>:
    2730:	fc 01       	movw	r30, r24
    2732:	05 90       	lpm	r0, Z+
    2734:	61 50       	subi	r22, 0x01	; 1
    2736:	70 40       	sbci	r23, 0x00	; 0
    2738:	01 10       	cpse	r0, r1
    273a:	d8 f7       	brcc	.-10     	; 0x2732 <strnlen_P+0x2>
    273c:	80 95       	com	r24
    273e:	90 95       	com	r25
    2740:	8e 0f       	add	r24, r30
    2742:	9f 1f       	adc	r25, r31
    2744:	08 95       	ret

00002746 <memset>:
    2746:	dc 01       	movw	r26, r24
    2748:	01 c0       	rjmp	.+2      	; 0x274c <memset+0x6>
    274a:	6d 93       	st	X+, r22
    274c:	41 50       	subi	r20, 0x01	; 1
    274e:	50 40       	sbci	r21, 0x00	; 0
    2750:	e0 f7       	brcc	.-8      	; 0x274a <memset+0x4>
    2752:	08 95       	ret

00002754 <strnlen>:
    2754:	fc 01       	movw	r30, r24
    2756:	61 50       	subi	r22, 0x01	; 1
    2758:	70 40       	sbci	r23, 0x00	; 0
    275a:	01 90       	ld	r0, Z+
    275c:	01 10       	cpse	r0, r1
    275e:	d8 f7       	brcc	.-10     	; 0x2756 <strnlen+0x2>
    2760:	80 95       	com	r24
    2762:	90 95       	com	r25
    2764:	8e 0f       	add	r24, r30
    2766:	9f 1f       	adc	r25, r31
    2768:	08 95       	ret

0000276a <fputc>:
    276a:	0f 93       	push	r16
    276c:	1f 93       	push	r17
    276e:	cf 93       	push	r28
    2770:	df 93       	push	r29
    2772:	18 2f       	mov	r17, r24
    2774:	09 2f       	mov	r16, r25
    2776:	eb 01       	movw	r28, r22
    2778:	8b 81       	ldd	r24, Y+3	; 0x03
    277a:	81 fd       	sbrc	r24, 1
    277c:	03 c0       	rjmp	.+6      	; 0x2784 <fputc+0x1a>
    277e:	8f ef       	ldi	r24, 0xFF	; 255
    2780:	9f ef       	ldi	r25, 0xFF	; 255
    2782:	20 c0       	rjmp	.+64     	; 0x27c4 <fputc+0x5a>
    2784:	82 ff       	sbrs	r24, 2
    2786:	10 c0       	rjmp	.+32     	; 0x27a8 <fputc+0x3e>
    2788:	4e 81       	ldd	r20, Y+6	; 0x06
    278a:	5f 81       	ldd	r21, Y+7	; 0x07
    278c:	2c 81       	ldd	r18, Y+4	; 0x04
    278e:	3d 81       	ldd	r19, Y+5	; 0x05
    2790:	42 17       	cp	r20, r18
    2792:	53 07       	cpc	r21, r19
    2794:	7c f4       	brge	.+30     	; 0x27b4 <fputc+0x4a>
    2796:	e8 81       	ld	r30, Y
    2798:	f9 81       	ldd	r31, Y+1	; 0x01
    279a:	9f 01       	movw	r18, r30
    279c:	2f 5f       	subi	r18, 0xFF	; 255
    279e:	3f 4f       	sbci	r19, 0xFF	; 255
    27a0:	39 83       	std	Y+1, r19	; 0x01
    27a2:	28 83       	st	Y, r18
    27a4:	10 83       	st	Z, r17
    27a6:	06 c0       	rjmp	.+12     	; 0x27b4 <fputc+0x4a>
    27a8:	e8 85       	ldd	r30, Y+8	; 0x08
    27aa:	f9 85       	ldd	r31, Y+9	; 0x09
    27ac:	81 2f       	mov	r24, r17
    27ae:	09 95       	icall
    27b0:	89 2b       	or	r24, r25
    27b2:	29 f7       	brne	.-54     	; 0x277e <fputc+0x14>
    27b4:	2e 81       	ldd	r18, Y+6	; 0x06
    27b6:	3f 81       	ldd	r19, Y+7	; 0x07
    27b8:	2f 5f       	subi	r18, 0xFF	; 255
    27ba:	3f 4f       	sbci	r19, 0xFF	; 255
    27bc:	3f 83       	std	Y+7, r19	; 0x07
    27be:	2e 83       	std	Y+6, r18	; 0x06
    27c0:	81 2f       	mov	r24, r17
    27c2:	90 2f       	mov	r25, r16
    27c4:	df 91       	pop	r29
    27c6:	cf 91       	pop	r28
    27c8:	1f 91       	pop	r17
    27ca:	0f 91       	pop	r16
    27cc:	08 95       	ret

000027ce <__ultoa_invert>:
    27ce:	fa 01       	movw	r30, r20
    27d0:	aa 27       	eor	r26, r26
    27d2:	28 30       	cpi	r18, 0x08	; 8
    27d4:	51 f1       	breq	.+84     	; 0x282a <__ultoa_invert+0x5c>
    27d6:	20 31       	cpi	r18, 0x10	; 16
    27d8:	81 f1       	breq	.+96     	; 0x283a <__ultoa_invert+0x6c>
    27da:	e8 94       	clt
    27dc:	6f 93       	push	r22
    27de:	6e 7f       	andi	r22, 0xFE	; 254
    27e0:	6e 5f       	subi	r22, 0xFE	; 254
    27e2:	7f 4f       	sbci	r23, 0xFF	; 255
    27e4:	8f 4f       	sbci	r24, 0xFF	; 255
    27e6:	9f 4f       	sbci	r25, 0xFF	; 255
    27e8:	af 4f       	sbci	r26, 0xFF	; 255
    27ea:	b1 e0       	ldi	r27, 0x01	; 1
    27ec:	3e d0       	rcall	.+124    	; 0x286a <__ultoa_invert+0x9c>
    27ee:	b4 e0       	ldi	r27, 0x04	; 4
    27f0:	3c d0       	rcall	.+120    	; 0x286a <__ultoa_invert+0x9c>
    27f2:	67 0f       	add	r22, r23
    27f4:	78 1f       	adc	r23, r24
    27f6:	89 1f       	adc	r24, r25
    27f8:	9a 1f       	adc	r25, r26
    27fa:	a1 1d       	adc	r26, r1
    27fc:	68 0f       	add	r22, r24
    27fe:	79 1f       	adc	r23, r25
    2800:	8a 1f       	adc	r24, r26
    2802:	91 1d       	adc	r25, r1
    2804:	a1 1d       	adc	r26, r1
    2806:	6a 0f       	add	r22, r26
    2808:	71 1d       	adc	r23, r1
    280a:	81 1d       	adc	r24, r1
    280c:	91 1d       	adc	r25, r1
    280e:	a1 1d       	adc	r26, r1
    2810:	20 d0       	rcall	.+64     	; 0x2852 <__ultoa_invert+0x84>
    2812:	09 f4       	brne	.+2      	; 0x2816 <__ultoa_invert+0x48>
    2814:	68 94       	set
    2816:	3f 91       	pop	r19
    2818:	2a e0       	ldi	r18, 0x0A	; 10
    281a:	26 9f       	mul	r18, r22
    281c:	11 24       	eor	r1, r1
    281e:	30 19       	sub	r19, r0
    2820:	30 5d       	subi	r19, 0xD0	; 208
    2822:	31 93       	st	Z+, r19
    2824:	de f6       	brtc	.-74     	; 0x27dc <__ultoa_invert+0xe>
    2826:	cf 01       	movw	r24, r30
    2828:	08 95       	ret
    282a:	46 2f       	mov	r20, r22
    282c:	47 70       	andi	r20, 0x07	; 7
    282e:	40 5d       	subi	r20, 0xD0	; 208
    2830:	41 93       	st	Z+, r20
    2832:	b3 e0       	ldi	r27, 0x03	; 3
    2834:	0f d0       	rcall	.+30     	; 0x2854 <__ultoa_invert+0x86>
    2836:	c9 f7       	brne	.-14     	; 0x282a <__ultoa_invert+0x5c>
    2838:	f6 cf       	rjmp	.-20     	; 0x2826 <__ultoa_invert+0x58>
    283a:	46 2f       	mov	r20, r22
    283c:	4f 70       	andi	r20, 0x0F	; 15
    283e:	40 5d       	subi	r20, 0xD0	; 208
    2840:	4a 33       	cpi	r20, 0x3A	; 58
    2842:	18 f0       	brcs	.+6      	; 0x284a <__ultoa_invert+0x7c>
    2844:	49 5d       	subi	r20, 0xD9	; 217
    2846:	31 fd       	sbrc	r19, 1
    2848:	40 52       	subi	r20, 0x20	; 32
    284a:	41 93       	st	Z+, r20
    284c:	02 d0       	rcall	.+4      	; 0x2852 <__ultoa_invert+0x84>
    284e:	a9 f7       	brne	.-22     	; 0x283a <__ultoa_invert+0x6c>
    2850:	ea cf       	rjmp	.-44     	; 0x2826 <__ultoa_invert+0x58>
    2852:	b4 e0       	ldi	r27, 0x04	; 4
    2854:	a6 95       	lsr	r26
    2856:	97 95       	ror	r25
    2858:	87 95       	ror	r24
    285a:	77 95       	ror	r23
    285c:	67 95       	ror	r22
    285e:	ba 95       	dec	r27
    2860:	c9 f7       	brne	.-14     	; 0x2854 <__ultoa_invert+0x86>
    2862:	00 97       	sbiw	r24, 0x00	; 0
    2864:	61 05       	cpc	r22, r1
    2866:	71 05       	cpc	r23, r1
    2868:	08 95       	ret
    286a:	9b 01       	movw	r18, r22
    286c:	ac 01       	movw	r20, r24
    286e:	0a 2e       	mov	r0, r26
    2870:	06 94       	lsr	r0
    2872:	57 95       	ror	r21
    2874:	47 95       	ror	r20
    2876:	37 95       	ror	r19
    2878:	27 95       	ror	r18
    287a:	ba 95       	dec	r27
    287c:	c9 f7       	brne	.-14     	; 0x2870 <__ultoa_invert+0xa2>
    287e:	62 0f       	add	r22, r18
    2880:	73 1f       	adc	r23, r19
    2882:	84 1f       	adc	r24, r20
    2884:	95 1f       	adc	r25, r21
    2886:	a0 1d       	adc	r26, r0
    2888:	08 95       	ret

0000288a <__prologue_saves__>:
    288a:	2f 92       	push	r2
    288c:	3f 92       	push	r3
    288e:	4f 92       	push	r4
    2890:	5f 92       	push	r5
    2892:	6f 92       	push	r6
    2894:	7f 92       	push	r7
    2896:	8f 92       	push	r8
    2898:	9f 92       	push	r9
    289a:	af 92       	push	r10
    289c:	bf 92       	push	r11
    289e:	cf 92       	push	r12
    28a0:	df 92       	push	r13
    28a2:	ef 92       	push	r14
    28a4:	ff 92       	push	r15
    28a6:	0f 93       	push	r16
    28a8:	1f 93       	push	r17
    28aa:	cf 93       	push	r28
    28ac:	df 93       	push	r29
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
    28b2:	ca 1b       	sub	r28, r26
    28b4:	db 0b       	sbc	r29, r27
    28b6:	0f b6       	in	r0, 0x3f	; 63
    28b8:	f8 94       	cli
    28ba:	de bf       	out	0x3e, r29	; 62
    28bc:	0f be       	out	0x3f, r0	; 63
    28be:	cd bf       	out	0x3d, r28	; 61
    28c0:	09 94       	ijmp

000028c2 <__epilogue_restores__>:
    28c2:	2a 88       	ldd	r2, Y+18	; 0x12
    28c4:	39 88       	ldd	r3, Y+17	; 0x11
    28c6:	48 88       	ldd	r4, Y+16	; 0x10
    28c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    28ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    28cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    28ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    28d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    28d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    28d4:	b9 84       	ldd	r11, Y+9	; 0x09
    28d6:	c8 84       	ldd	r12, Y+8	; 0x08
    28d8:	df 80       	ldd	r13, Y+7	; 0x07
    28da:	ee 80       	ldd	r14, Y+6	; 0x06
    28dc:	fd 80       	ldd	r15, Y+5	; 0x05
    28de:	0c 81       	ldd	r16, Y+4	; 0x04
    28e0:	1b 81       	ldd	r17, Y+3	; 0x03
    28e2:	aa 81       	ldd	r26, Y+2	; 0x02
    28e4:	b9 81       	ldd	r27, Y+1	; 0x01
    28e6:	ce 0f       	add	r28, r30
    28e8:	d1 1d       	adc	r29, r1
    28ea:	0f b6       	in	r0, 0x3f	; 63
    28ec:	f8 94       	cli
    28ee:	de bf       	out	0x3e, r29	; 62
    28f0:	0f be       	out	0x3f, r0	; 63
    28f2:	cd bf       	out	0x3d, r28	; 61
    28f4:	ed 01       	movw	r28, r26
    28f6:	08 95       	ret

000028f8 <_exit>:
    28f8:	f8 94       	cli

000028fa <__stop_program>:
    28fa:	ff cf       	rjmp	.-2      	; 0x28fa <__stop_program>
