
PingPongApplication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800100  00800100  000001c6  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000223  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000018c  00000000  00000000  00000461  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000019c  00000000  00000000  000005ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000cc  00000000  00000000  0000078c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001e5  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000012d  00000000  00000000  00000a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  00000b6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
   8:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
   c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  10:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  14:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  18:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  1c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  20:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  24:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  28:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  2c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  30:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  34:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  38:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  3c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  40:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  44:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  48:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_19>
  50:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  54:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  58:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_23>
  60:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  64:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  68:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  6c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_clear_bss>:
  7c:	21 e0       	ldi	r18, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	01 c0       	rjmp	.+2      	; 0x86 <.do_clear_bss_start>

00000084 <.do_clear_bss_loop>:
  84:	1d 92       	st	X+, r1

00000086 <.do_clear_bss_start>:
  86:	a1 30       	cpi	r26, 0x01	; 1
  88:	b2 07       	cpc	r27, r18
  8a:	e1 f7       	brne	.-8      	; 0x84 <.do_clear_bss_loop>
  8c:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  90:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

00000094 <__bad_interrupt>:
  94:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000098 <USART_Init>:

void USART_Init(unsigned int ubrr)
{
	
	//Set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
  98:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
  9a:	89 b9       	out	0x09, r24	; 9
	// Enable receiver and transmitter
	UCSR0B = (1<< RXEN0) | (1<<TXEN0) | (1<<RXCIE0) | (1<<TXCIE0);
  9c:	88 ed       	ldi	r24, 0xD8	; 216
  9e:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 2 stop bit
	UCSR0C = (1<<URSEL0) | (3<<UCSZ00) ;
  a0:	86 e8       	ldi	r24, 0x86	; 134
  a2:	80 bd       	out	0x20, r24	; 32
  a4:	08 95       	ret

000000a6 <USART_Transmit>:
}

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while(!( UCSR0A & (1<<UDRE0)));
  a6:	5d 9b       	sbis	0x0b, 5	; 11
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <USART_Transmit>
	/* Put data into buffer, sends the data */
	UDR0 = data;
  aa:	8c b9       	out	0x0c, r24	; 12
  ac:	08 95       	ret

000000ae <__vector_19>:
}



ISR(USART0_RXC_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	3f 93       	push	r19
  bc:	4f 93       	push	r20
  be:	5f 93       	push	r21
  c0:	6f 93       	push	r22
  c2:	7f 93       	push	r23
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
  c8:	af 93       	push	r26
  ca:	bf 93       	push	r27
  cc:	ef 93       	push	r30
  ce:	ff 93       	push	r31
	cReceived = UDR0;
  d0:	8c b1       	in	r24, 0x0c	; 12
  d2:	80 93 00 01 	sts	0x0100, r24
//	PORTC = 0xFF;
	USART_Transmit(cReceived);
  d6:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Transmit>
}
  da:	ff 91       	pop	r31
  dc:	ef 91       	pop	r30
  de:	bf 91       	pop	r27
  e0:	af 91       	pop	r26
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	7f 91       	pop	r23
  e8:	6f 91       	pop	r22
  ea:	5f 91       	pop	r21
  ec:	4f 91       	pop	r20
  ee:	3f 91       	pop	r19
  f0:	2f 91       	pop	r18
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <__vector_23>:

ISR(USART0_TXC_vect)
{
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	8f 93       	push	r24
	//cReceived = UDR0;
	PORTC = 0xFF;
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	85 bb       	out	0x15, r24	; 21
	//USART_Transmit(cReceived);
}
 10c:	8f 91       	pop	r24
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <main>:

int main(void)
{	
	DDRC = 0xFF;
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 11c:	15 ba       	out	0x15, r1	; 21
	unsigned char c = 0;
	
	sei();
 11e:	78 94       	sei
	USART_Init(MYUBBR);
 120:	8f e1       	ldi	r24, 0x1F	; 31
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 4c 00 	call	0x98	; 0x98 <USART_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	2f e9       	ldi	r18, 0x9F	; 159
 12a:	86 e8       	ldi	r24, 0x86	; 134
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0x16>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x20>
 138:	00 00       	nop
 13a:	2f e9       	ldi	r18, 0x9F	; 159
 13c:	86 e8       	ldi	r24, 0x86	; 134
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	21 50       	subi	r18, 0x01	; 1
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x28>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x32>
 14a:	00 00       	nop
 14c:	ed cf       	rjmp	.-38     	; 0x128 <main+0x10>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
