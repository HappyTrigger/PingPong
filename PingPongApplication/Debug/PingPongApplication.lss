
PingPongApplication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c6  00800100  00001fa4  00002038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fa4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  008001c6  008001c6  000020fe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000020fe  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002d0  00000000  00000000  0000215a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003bbb  00000000  00000000  0000242a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001053  00000000  00000000  00005fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010e6  00000000  00000000  00007038  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000928  00000000  00000000  00008120  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000089d  00000000  00000000  00008a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000243d  00000000  00000000  000092e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000260  00000000  00000000  0000b722  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 01 	jmp	0x262	; 0x262 <__ctors_end>
       4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
       8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
       c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      10:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      14:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      18:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      1c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      20:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      24:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      28:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      2c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      30:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      34:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      38:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      3c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      40:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      44:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      48:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      4c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      50:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      54:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      58:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      5c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      60:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      64:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      68:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      6c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      70:	cc 0a       	sbc	r12, r28
      72:	d3 0a       	sbc	r13, r19
      74:	da 0a       	sbc	r13, r26
      76:	e1 0a       	sbc	r14, r17
      78:	e8 0a       	sbc	r14, r24
      7a:	ef 0a       	sbc	r14, r31
      7c:	f6 0a       	sbc	r15, r22
      7e:	04 0b       	sbc	r16, r20
      80:	fd 0a       	sbc	r15, r29
      82:	0b 0b       	sbc	r16, r27
      84:	12 0b       	sbc	r17, r18

00000086 <__trampolines_end>:
      86:	00 00       	nop
      88:	00 00       	nop
      8a:	00 00       	nop
      8c:	00 5e       	subi	r16, 0xE0	; 224
      8e:	00 00       	nop
      90:	00 0e       	add	r0, r16
      92:	00 0e       	add	r0, r16
      94:	00 28       	or	r0, r0
      96:	7c 28       	or	r7, r12
      98:	7c 28       	or	r7, r12
      9a:	08 54       	subi	r16, 0x48	; 72
      9c:	7c 54       	subi	r23, 0x4C	; 76
      9e:	20 26       	eor	r2, r16
      a0:	10 08       	sbc	r1, r0
      a2:	64 00       	.word	0x0064	; ????
      a4:	28 54       	subi	r18, 0x48	; 72
      a6:	28 40       	sbci	r18, 0x08	; 8
      a8:	00 00       	nop
      aa:	00 0e       	add	r0, r16
      ac:	00 00       	nop
      ae:	00 3c       	cpi	r16, 0xC0	; 192
      b0:	42 00       	.word	0x0042	; ????
      b2:	00 00       	nop
      b4:	42 3c       	cpi	r20, 0xC2	; 194
      b6:	00 00       	nop
      b8:	00 54       	subi	r16, 0x40	; 64
      ba:	38 54       	subi	r19, 0x48	; 72
      bc:	00 10       	cpse	r0, r0
      be:	10 7c       	andi	r17, 0xC0	; 192
      c0:	10 10       	cpse	r1, r0
      c2:	00 80       	ld	r0, Z
      c4:	60 20       	and	r6, r0
      c6:	00 10       	cpse	r0, r0
      c8:	10 10       	cpse	r1, r0
      ca:	10 00       	.word	0x0010	; ????
      cc:	00 60       	ori	r16, 0x00	; 0
      ce:	60 00       	.word	0x0060	; ????
      d0:	00 20       	and	r0, r0
      d2:	10 08       	sbc	r1, r0
      d4:	04 00       	.word	0x0004	; ????
      d6:	00 3c       	cpi	r16, 0xC0	; 192
      d8:	42 3c       	cpi	r20, 0xC2	; 194
      da:	00 00       	nop
      dc:	44 7e       	andi	r20, 0xE4	; 228
      de:	40 00       	.word	0x0040	; ????
      e0:	44 62       	ori	r20, 0x24	; 36
      e2:	52 4c       	sbci	r21, 0xC2	; 194
      e4:	00 22       	and	r0, r16
      e6:	4a 4a       	sbci	r20, 0xAA	; 170
      e8:	36 00       	.word	0x0036	; ????
      ea:	18 14       	cp	r1, r8
      ec:	7e 10       	cpse	r7, r14
      ee:	00 2e       	mov	r0, r16
      f0:	4a 4a       	sbci	r20, 0xAA	; 170
      f2:	32 00       	.word	0x0032	; ????
      f4:	3c 4a       	sbci	r19, 0xAC	; 172
      f6:	4a 30       	cpi	r20, 0x0A	; 10
      f8:	00 02       	muls	r16, r16
      fa:	62 1a       	sub	r6, r18
      fc:	06 00       	.word	0x0006	; ????
      fe:	34 4a       	sbci	r19, 0xA4	; 164
     100:	4a 34       	cpi	r20, 0x4A	; 74
     102:	00 0c       	add	r0, r0
     104:	52 52       	subi	r21, 0x22	; 34
     106:	3c 00       	.word	0x003c	; ????
     108:	00 6c       	ori	r16, 0xC0	; 192
     10a:	6c 00       	.word	0x006c	; ????
     10c:	00 80       	ld	r0, Z
     10e:	6c 2c       	mov	r6, r12
     110:	00 00       	nop
     112:	00 10       	cpse	r0, r0
     114:	28 44       	sbci	r18, 0x48	; 72
     116:	00 28       	or	r0, r0
     118:	28 28       	or	r2, r8
     11a:	28 00       	.word	0x0028	; ????
     11c:	00 44       	sbci	r16, 0x40	; 64
     11e:	28 10       	cpse	r2, r8
     120:	00 00       	nop
     122:	04 52       	subi	r16, 0x24	; 36
     124:	0c 00       	.word	0x000c	; ????
     126:	3c 42       	sbci	r19, 0x2C	; 44
     128:	5a 1c       	adc	r5, r10
     12a:	00 7c       	andi	r16, 0xC0	; 192
     12c:	12 12       	cpse	r1, r18
     12e:	7c 00       	.word	0x007c	; ????
     130:	7e 4a       	sbci	r23, 0xAE	; 174
     132:	4a 34       	cpi	r20, 0x4A	; 74
     134:	00 3c       	cpi	r16, 0xC0	; 192
     136:	42 42       	sbci	r20, 0x22	; 34
     138:	24 00       	.word	0x0024	; ????
     13a:	7e 42       	sbci	r23, 0x2E	; 46
     13c:	42 3c       	cpi	r20, 0xC2	; 194
     13e:	00 7e       	andi	r16, 0xE0	; 224
     140:	4a 4a       	sbci	r20, 0xAA	; 170
     142:	42 00       	.word	0x0042	; ????
     144:	7e 0a       	sbc	r7, r30
     146:	0a 02       	muls	r16, r26
     148:	00 3c       	cpi	r16, 0xC0	; 192
     14a:	42 52       	subi	r20, 0x22	; 34
     14c:	74 00       	.word	0x0074	; ????
     14e:	7e 08       	sbc	r7, r14
     150:	08 7e       	andi	r16, 0xE8	; 232
     152:	00 00       	nop
     154:	42 7e       	andi	r20, 0xE2	; 226
     156:	42 00       	.word	0x0042	; ????
     158:	20 40       	sbci	r18, 0x00	; 0
     15a:	40 3e       	cpi	r20, 0xE0	; 224
     15c:	00 7e       	andi	r16, 0xE0	; 224
     15e:	18 24       	eor	r1, r8
     160:	42 00       	.word	0x0042	; ????
     162:	7e 40       	sbci	r23, 0x0E	; 14
     164:	40 40       	sbci	r20, 0x00	; 0
     166:	00 7e       	andi	r16, 0xE0	; 224
     168:	0c 0c       	add	r0, r12
     16a:	7e 00       	.word	0x007e	; ????
     16c:	7e 0c       	add	r7, r14
     16e:	30 7e       	andi	r19, 0xE0	; 224
     170:	00 3c       	cpi	r16, 0xC0	; 192
     172:	42 42       	sbci	r20, 0x22	; 34
     174:	3c 00       	.word	0x003c	; ????
     176:	7e 12       	cpse	r7, r30
     178:	12 0c       	add	r1, r2
     17a:	00 3c       	cpi	r16, 0xC0	; 192
     17c:	62 42       	sbci	r22, 0x22	; 34
     17e:	bc 00       	.word	0x00bc	; ????
     180:	7e 12       	cpse	r7, r30
     182:	32 4c       	sbci	r19, 0xC2	; 194
     184:	00 24       	eor	r0, r0
     186:	4a 52       	subi	r20, 0x2A	; 42
     188:	24 00       	.word	0x0024	; ????
     18a:	00 02       	muls	r16, r16
     18c:	7e 02       	muls	r23, r30
     18e:	00 3e       	cpi	r16, 0xE0	; 224
     190:	40 40       	sbci	r20, 0x00	; 0
     192:	3e 00       	.word	0x003e	; ????
     194:	1e 60       	ori	r17, 0x0E	; 14
     196:	60 1e       	adc	r6, r16
     198:	00 7e       	andi	r16, 0xE0	; 224
     19a:	30 30       	cpi	r19, 0x00	; 0
     19c:	7e 00       	.word	0x007e	; ????
     19e:	66 18       	sub	r6, r6
     1a0:	18 66       	ori	r17, 0x68	; 104
     1a2:	00 00       	nop
     1a4:	0e 70       	andi	r16, 0x0E	; 14
     1a6:	0e 00       	.word	0x000e	; ????
     1a8:	62 52       	subi	r22, 0x22	; 34
     1aa:	4a 46       	sbci	r20, 0x6A	; 106
     1ac:	00 00       	nop
     1ae:	7e 42       	sbci	r23, 0x2E	; 46
     1b0:	42 00       	.word	0x0042	; ????
     1b2:	04 08       	sbc	r0, r4
     1b4:	10 20       	and	r1, r0
     1b6:	00 00       	nop
     1b8:	42 42       	sbci	r20, 0x22	; 34
     1ba:	7e 00       	.word	0x007e	; ????
     1bc:	00 04       	cpc	r0, r0
     1be:	02 04       	cpc	r0, r2
     1c0:	00 40       	sbci	r16, 0x00	; 0
     1c2:	40 40       	sbci	r20, 0x00	; 0
     1c4:	40 00       	.word	0x0040	; ????
     1c6:	00 02       	muls	r16, r16
     1c8:	04 00       	.word	0x0004	; ????
     1ca:	00 30       	cpi	r16, 0x00	; 0
     1cc:	48 28       	or	r4, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	7e 48       	sbci	r23, 0x8E	; 142
     1d2:	48 30       	cpi	r20, 0x08	; 8
     1d4:	00 30       	cpi	r16, 0x00	; 0
     1d6:	48 48       	sbci	r20, 0x88	; 136
     1d8:	00 00       	nop
     1da:	30 48       	sbci	r19, 0x80	; 128
     1dc:	48 7e       	andi	r20, 0xE8	; 232
     1de:	00 30       	cpi	r16, 0x00	; 0
     1e0:	68 58       	subi	r22, 0x88	; 136
     1e2:	10 00       	.word	0x0010	; ????
     1e4:	10 7c       	andi	r17, 0xC0	; 192
     1e6:	12 04       	cpc	r1, r2
     1e8:	00 50       	subi	r16, 0x00	; 0
     1ea:	a8 a8       	ldd	r10, Y+48	; 0x30
     1ec:	98 00       	.word	0x0098	; ????
     1ee:	7e 08       	sbc	r7, r14
     1f0:	08 70       	andi	r16, 0x08	; 8
     1f2:	00 00       	nop
     1f4:	48 7a       	andi	r20, 0xA8	; 168
     1f6:	40 00       	.word	0x0040	; ????
     1f8:	00 40       	sbci	r16, 0x00	; 0
     1fa:	80 7a       	andi	r24, 0xA0	; 160
     1fc:	00 7e       	andi	r16, 0xE0	; 224
     1fe:	10 28       	or	r1, r0
     200:	40 00       	.word	0x0040	; ????
     202:	00 42       	sbci	r16, 0x20	; 32
     204:	7e 40       	sbci	r23, 0x0E	; 14
     206:	00 78       	andi	r16, 0x80	; 128
     208:	10 18       	sub	r1, r0
     20a:	70 00       	.word	0x0070	; ????
     20c:	78 08       	sbc	r7, r8
     20e:	08 70       	andi	r16, 0x08	; 8
     210:	00 30       	cpi	r16, 0x00	; 0
     212:	48 48       	sbci	r20, 0x88	; 136
     214:	30 00       	.word	0x0030	; ????
     216:	f8 48       	sbci	r31, 0x88	; 136
     218:	48 30       	cpi	r20, 0x08	; 8
     21a:	00 30       	cpi	r16, 0x00	; 0
     21c:	48 48       	sbci	r20, 0x88	; 136
     21e:	f8 00       	.word	0x00f8	; ????
     220:	78 08       	sbc	r7, r8
     222:	08 10       	cpse	r0, r8
     224:	00 50       	subi	r16, 0x00	; 0
     226:	58 68       	ori	r21, 0x88	; 136
     228:	28 00       	.word	0x0028	; ????
     22a:	08 3e       	cpi	r16, 0xE8	; 232
     22c:	48 40       	sbci	r20, 0x08	; 8
     22e:	00 38       	cpi	r16, 0x80	; 128
     230:	40 40       	sbci	r20, 0x00	; 0
     232:	78 00       	.word	0x0078	; ????
     234:	00 38       	cpi	r16, 0x80	; 128
     236:	40 38       	cpi	r20, 0x80	; 128
     238:	00 78       	andi	r16, 0x80	; 128
     23a:	60 60       	ori	r22, 0x00	; 0
     23c:	78 00       	.word	0x0078	; ????
     23e:	48 30       	cpi	r20, 0x08	; 8
     240:	30 48       	sbci	r19, 0x80	; 128
     242:	00 18       	sub	r0, r0
     244:	a0 40       	sbci	r26, 0x00	; 0
     246:	38 00       	.word	0x0038	; ????
     248:	48 68       	ori	r20, 0x88	; 136
     24a:	58 48       	sbci	r21, 0x88	; 136
     24c:	00 00       	nop
     24e:	08 3c       	cpi	r16, 0xC8	; 200
     250:	42 00       	.word	0x0042	; ????
     252:	00 00       	nop
     254:	7e 00       	.word	0x007e	; ????
     256:	00 00       	nop
     258:	42 3c       	cpi	r20, 0xC2	; 194
     25a:	08 00       	.word	0x0008	; ????
     25c:	04 02       	muls	r16, r20
     25e:	04 02       	muls	r16, r20
	...

00000262 <__ctors_end>:
     262:	11 24       	eor	r1, r1
     264:	1f be       	out	0x3f, r1	; 63
     266:	cf ef       	ldi	r28, 0xFF	; 255
     268:	d4 e0       	ldi	r29, 0x04	; 4
     26a:	de bf       	out	0x3e, r29	; 62
     26c:	cd bf       	out	0x3d, r28	; 61

0000026e <__do_copy_data>:
     26e:	11 e0       	ldi	r17, 0x01	; 1
     270:	a0 e0       	ldi	r26, 0x00	; 0
     272:	b1 e0       	ldi	r27, 0x01	; 1
     274:	e4 ea       	ldi	r30, 0xA4	; 164
     276:	ff e1       	ldi	r31, 0x1F	; 31
     278:	02 c0       	rjmp	.+4      	; 0x27e <__do_copy_data+0x10>
     27a:	05 90       	lpm	r0, Z+
     27c:	0d 92       	st	X+, r0
     27e:	a6 3c       	cpi	r26, 0xC6	; 198
     280:	b1 07       	cpc	r27, r17
     282:	d9 f7       	brne	.-10     	; 0x27a <__do_copy_data+0xc>

00000284 <__do_clear_bss>:
     284:	21 e0       	ldi	r18, 0x01	; 1
     286:	a6 ec       	ldi	r26, 0xC6	; 198
     288:	b1 e0       	ldi	r27, 0x01	; 1
     28a:	01 c0       	rjmp	.+2      	; 0x28e <.do_clear_bss_start>

0000028c <.do_clear_bss_loop>:
     28c:	1d 92       	st	X+, r1

0000028e <.do_clear_bss_start>:
     28e:	a9 3d       	cpi	r26, 0xD9	; 217
     290:	b2 07       	cpc	r27, r18
     292:	e1 f7       	brne	.-8      	; 0x28c <.do_clear_bss_loop>
     294:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <main>
     298:	0c 94 d0 0f 	jmp	0x1fa0	; 0x1fa0 <_exit>

0000029c <__bad_interrupt>:
     29c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002a0 <read_adc>:
****************************************************************************/
int read_adc(char channel)
{
	volatile char *ext_adc = (char *) ADC_BASE_ADDR;
	
	*ext_adc = channel;
     2a0:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2a4:	89 ef       	ldi	r24, 0xF9	; 249
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	01 97       	sbiw	r24, 0x01	; 1
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <read_adc+0x8>
     2ac:	00 c0       	rjmp	.+0      	; 0x2ae <read_adc+0xe>
     2ae:	00 00       	nop
	_delay_ms(1);
	return *ext_adc;
     2b0:	80 91 00 14 	lds	r24, 0x1400
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	08 95       	ret

000002b8 <CAN_init>:
#include <stdio.h>
#include <avr/delay.h>

void CAN_init()
{
	mcp_init();
     2b8:	0e 94 69 03 	call	0x6d2	; 0x6d2 <mcp_init>
	/* Turn off mask/filters, receive any message, rollover enabled */
	mcp_modify_bit(MCP_RXB0CTRL, 0b01100100, 0xFF);
     2bc:	4f ef       	ldi	r20, 0xFF	; 255
     2be:	64 e6       	ldi	r22, 0x64	; 100
     2c0:	80 e6       	ldi	r24, 0x60	; 96
     2c2:	0e 94 8f 03 	call	0x71e	; 0x71e <mcp_modify_bit>
	/* Loopback mode enabled */
	mcp_modify_bit(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);	
     2c6:	40 e4       	ldi	r20, 0x40	; 64
     2c8:	60 ee       	ldi	r22, 0xE0	; 224
     2ca:	8f e0       	ldi	r24, 0x0F	; 15
     2cc:	0e 94 8f 03 	call	0x71e	; 0x71e <mcp_modify_bit>
     2d0:	08 95       	ret

000002d2 <CAN_send_message>:
	*/
}


uint8_t CAN_send_message(CANMessage message)
{
     2d2:	bf 92       	push	r11
     2d4:	cf 92       	push	r12
     2d6:	df 92       	push	r13
     2d8:	ef 92       	push	r14
     2da:	ff 92       	push	r15
     2dc:	0f 93       	push	r16
     2de:	1f 93       	push	r17
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
     2e8:	2a 97       	sbiw	r28, 0x0a	; 10
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	f8 94       	cli
     2ee:	de bf       	out	0x3e, r29	; 62
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	cd bf       	out	0x3d, r28	; 61
     2f4:	09 83       	std	Y+1, r16	; 0x01
     2f6:	c1 2e       	mov	r12, r17
     2f8:	1a 83       	std	Y+2, r17	; 0x02
     2fa:	2b 83       	std	Y+3, r18	; 0x03
     2fc:	3c 83       	std	Y+4, r19	; 0x04
     2fe:	4d 83       	std	Y+5, r20	; 0x05
     300:	5e 83       	std	Y+6, r21	; 0x06
     302:	6f 83       	std	Y+7, r22	; 0x07
     304:	78 87       	std	Y+8, r23	; 0x08
     306:	89 87       	std	Y+9, r24	; 0x09
     308:	9a 87       	std	Y+10, r25	; 0x0a
     30a:	10 2f       	mov	r17, r16
	uint8_t ctrl = mcp_read(MCP_TXB0CTRL);
     30c:	80 e3       	ldi	r24, 0x30	; 48
     30e:	0e 94 4f 03 	call	0x69e	; 0x69e <mcp_read>
	
	if (test_bit(ctrl, TXREQ))
     312:	98 2f       	mov	r25, r24
     314:	98 70       	andi	r25, 0x08	; 8
     316:	b9 2e       	mov	r11, r25
     318:	83 fd       	sbrc	r24, 3
     31a:	2d c0       	rjmp	.+90     	; 0x376 <CAN_send_message+0xa4>
	{
		return MESSAGE_PENDING;
	}
	/* Use lower 8bits of ID */
	mcp_write_byte(MCP_TXB0SIDL, (uint8_t)(message.ID << 5));
     31c:	61 2f       	mov	r22, r17
     31e:	62 95       	swap	r22
     320:	66 0f       	add	r22, r22
     322:	60 7e       	andi	r22, 0xE0	; 224
     324:	82 e3       	ldi	r24, 0x32	; 50
     326:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <mcp_write_byte>
	mcp_write_byte(MCP_TXB0SIDH, (uint8_t)(message.ID >> 3));
     32a:	61 2f       	mov	r22, r17
     32c:	66 95       	lsr	r22
     32e:	66 95       	lsr	r22
     330:	66 95       	lsr	r22
     332:	81 e3       	ldi	r24, 0x31	; 49
     334:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <mcp_write_byte>
	
	mcp_write_byte(MCP_TXB0DLC, (message.length) & 0x0F);
     338:	6c 2d       	mov	r22, r12
     33a:	6f 70       	andi	r22, 0x0F	; 15
     33c:	85 e3       	ldi	r24, 0x35	; 53
     33e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <mcp_write_byte>
	
	for (int i = 0; i < message.length; i++)
     342:	d1 2c       	mov	r13, r1
     344:	1c 14       	cp	r1, r12
     346:	1d 04       	cpc	r1, r13
     348:	94 f4       	brge	.+36     	; 0x36e <CAN_send_message+0x9c>
     34a:	7e 01       	movw	r14, r28
     34c:	e3 e0       	ldi	r30, 0x03	; 3
     34e:	ee 0e       	add	r14, r30
     350:	f1 1c       	adc	r15, r1
     352:	00 e0       	ldi	r16, 0x00	; 0
     354:	10 e0       	ldi	r17, 0x00	; 0
	{
		mcp_write_byte(MCP_TXB0D0 + i, message.data_array[i]);
     356:	f7 01       	movw	r30, r14
     358:	61 91       	ld	r22, Z+
     35a:	7f 01       	movw	r14, r30
     35c:	86 e3       	ldi	r24, 0x36	; 54
     35e:	80 0f       	add	r24, r16
     360:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <mcp_write_byte>
	mcp_write_byte(MCP_TXB0SIDL, (uint8_t)(message.ID << 5));
	mcp_write_byte(MCP_TXB0SIDH, (uint8_t)(message.ID >> 3));
	
	mcp_write_byte(MCP_TXB0DLC, (message.length) & 0x0F);
	
	for (int i = 0; i < message.length; i++)
     364:	0f 5f       	subi	r16, 0xFF	; 255
     366:	1f 4f       	sbci	r17, 0xFF	; 255
     368:	0c 15       	cp	r16, r12
     36a:	1d 05       	cpc	r17, r13
     36c:	a4 f3       	brlt	.-24     	; 0x356 <CAN_send_message+0x84>
	{
		mcp_write_byte(MCP_TXB0D0 + i, message.data_array[i]);
	}
	
	mcp_request_to_send(1);
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	0e 94 a9 03 	call	0x752	; 0x752 <mcp_request_to_send>
	//printf("%d\n", ctrl);
	/*if(test_bit(ctrl, TXREQ | ))
	{
	}*/
	
	return SUCCESS;
     374:	02 c0       	rjmp	.+4      	; 0x37a <CAN_send_message+0xa8>
{
	uint8_t ctrl = mcp_read(MCP_TXB0CTRL);
	
	if (test_bit(ctrl, TXREQ))
	{
		return MESSAGE_PENDING;
     376:	bb 24       	eor	r11, r11
     378:	b3 94       	inc	r11
	/*if(test_bit(ctrl, TXREQ | ))
	{
	}*/
	
	return SUCCESS;
}
     37a:	8b 2d       	mov	r24, r11
     37c:	2a 96       	adiw	r28, 0x0a	; 10
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	f8 94       	cli
     382:	de bf       	out	0x3e, r29	; 62
     384:	0f be       	out	0x3f, r0	; 63
     386:	cd bf       	out	0x3d, r28	; 61
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	ff 90       	pop	r15
     392:	ef 90       	pop	r14
     394:	df 90       	pop	r13
     396:	cf 90       	pop	r12
     398:	bf 90       	pop	r11
     39a:	08 95       	ret

0000039c <CAN_receive_message>:

uint8_t CAN_receive_message(CANMessage* message)
{
     39c:	ef 92       	push	r14
     39e:	ff 92       	push	r15
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	8c 01       	movw	r16, r24
	int i = 0;
	uint8_t received = mcp_read(MCP_CANINTF) & (0x01);
     3aa:	8c e2       	ldi	r24, 0x2C	; 44
     3ac:	0e 94 4f 03 	call	0x69e	; 0x69e <mcp_read>
	if (received)
     3b0:	80 ff       	sbrs	r24, 0
     3b2:	34 c0       	rjmp	.+104    	; 0x41c <CAN_receive_message+0x80>
	{
		mcp_modify_bit(MCP_CANINTF, 0x01, 0);
     3b4:	40 e0       	ldi	r20, 0x00	; 0
     3b6:	61 e0       	ldi	r22, 0x01	; 1
     3b8:	8c e2       	ldi	r24, 0x2C	; 44
     3ba:	0e 94 8f 03 	call	0x71e	; 0x71e <mcp_modify_bit>
		message->ID = (mcp_read(MCP_RXB0SIDH) << 3);
     3be:	81 e6       	ldi	r24, 0x61	; 97
     3c0:	0e 94 4f 03 	call	0x69e	; 0x69e <mcp_read>
     3c4:	c8 2f       	mov	r28, r24
     3c6:	cc 0f       	add	r28, r28
     3c8:	cc 0f       	add	r28, r28
     3ca:	cc 0f       	add	r28, r28
     3cc:	f8 01       	movw	r30, r16
     3ce:	c0 83       	st	Z, r28
		message->ID |= (mcp_read(MCP_RXB0SIDL) >> 5);
     3d0:	82 e6       	ldi	r24, 0x62	; 98
     3d2:	0e 94 4f 03 	call	0x69e	; 0x69e <mcp_read>
     3d6:	82 95       	swap	r24
     3d8:	86 95       	lsr	r24
     3da:	87 70       	andi	r24, 0x07	; 7
     3dc:	c8 2b       	or	r28, r24
     3de:	f8 01       	movw	r30, r16
     3e0:	c0 83       	st	Z, r28
		
		message->length = mcp_read(MCP_RXB0DLC) & (0x0F);
     3e2:	85 e6       	ldi	r24, 0x65	; 101
     3e4:	0e 94 4f 03 	call	0x69e	; 0x69e <mcp_read>
     3e8:	8f 70       	andi	r24, 0x0F	; 15
     3ea:	f8 01       	movw	r30, r16
     3ec:	81 83       	std	Z+1, r24	; 0x01
		
		for (i = 0; i < message->length; i++)
     3ee:	88 23       	and	r24, r24
     3f0:	b9 f0       	breq	.+46     	; 0x420 <CAN_receive_message+0x84>
     3f2:	78 01       	movw	r14, r16
     3f4:	f2 e0       	ldi	r31, 0x02	; 2
     3f6:	ef 0e       	add	r14, r31
     3f8:	f1 1c       	adc	r15, r1
     3fa:	c0 e0       	ldi	r28, 0x00	; 0
     3fc:	d0 e0       	ldi	r29, 0x00	; 0
		{
			message->data_array[i] = mcp_read(MCP_RXB0D0 + i);
     3fe:	8c 2f       	mov	r24, r28
     400:	8a 59       	subi	r24, 0x9A	; 154
     402:	0e 94 4f 03 	call	0x69e	; 0x69e <mcp_read>
     406:	f7 01       	movw	r30, r14
     408:	81 93       	st	Z+, r24
     40a:	7f 01       	movw	r14, r30
		message->ID = (mcp_read(MCP_RXB0SIDH) << 3);
		message->ID |= (mcp_read(MCP_RXB0SIDL) >> 5);
		
		message->length = mcp_read(MCP_RXB0DLC) & (0x0F);
		
		for (i = 0; i < message->length; i++)
     40c:	21 96       	adiw	r28, 0x01	; 1
     40e:	f8 01       	movw	r30, r16
     410:	81 81       	ldd	r24, Z+1	; 0x01
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	c8 17       	cp	r28, r24
     416:	d9 07       	cpc	r29, r25
     418:	94 f3       	brlt	.-28     	; 0x3fe <CAN_receive_message+0x62>
     41a:	04 c0       	rjmp	.+8      	; 0x424 <CAN_receive_message+0x88>
			message->data_array[i] = mcp_read(MCP_RXB0D0 + i);
		}
	}
	else
	{
		return NO_NEW_MESSAGE;
     41c:	82 e0       	ldi	r24, 0x02	; 2
     41e:	03 c0       	rjmp	.+6      	; 0x426 <CAN_receive_message+0x8a>
	}
	
	return SUCCESS;
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	01 c0       	rjmp	.+2      	; 0x426 <CAN_receive_message+0x8a>
     424:	80 e0       	ldi	r24, 0x00	; 0
}
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	1f 91       	pop	r17
     42c:	0f 91       	pop	r16
     42e:	ff 90       	pop	r15
     430:	ef 90       	pop	r14
     432:	08 95       	ret

00000434 <read_joystick_position>:
*
* \param in calibration data
* \return Joystick position
****************************************************************************/
JoystickPosition read_joystick_position(JoystickPosition calibration)
{
     434:	8f 92       	push	r8
     436:	9f 92       	push	r9
     438:	af 92       	push	r10
     43a:	bf 92       	push	r11
     43c:	cf 92       	push	r12
     43e:	df 92       	push	r13
     440:	ef 92       	push	r14
     442:	ff 92       	push	r15
     444:	1f 93       	push	r17
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	4b 01       	movw	r8, r22
     44c:	5c 01       	movw	r10, r24
	JoystickPosition position;

	position.xaxis = read_adc(ADC_CH2);
     44e:	85 e0       	ldi	r24, 0x05	; 5
     450:	0e 94 50 01 	call	0x2a0	; 0x2a0 <read_adc>
	position.xaxis = ((((position.xaxis - calibration.xaxis)*100)/255)-50)*2;
     454:	9c 01       	movw	r18, r24
     456:	28 19       	sub	r18, r8
     458:	39 09       	sbc	r19, r9
     45a:	14 e6       	ldi	r17, 0x64	; 100
     45c:	12 9f       	mul	r17, r18
     45e:	c0 01       	movw	r24, r0
     460:	13 9f       	mul	r17, r19
     462:	90 0d       	add	r25, r0
     464:	11 24       	eor	r1, r1
     466:	cf ef       	ldi	r28, 0xFF	; 255
     468:	d0 e0       	ldi	r29, 0x00	; 0
     46a:	be 01       	movw	r22, r28
     46c:	0e 94 1d 0b 	call	0x163a	; 0x163a <__divmodhi4>
     470:	62 53       	subi	r22, 0x32	; 50
     472:	71 09       	sbc	r23, r1
     474:	6b 01       	movw	r12, r22
     476:	cc 0c       	add	r12, r12
     478:	dd 1c       	adc	r13, r13

	position.yaxis = read_adc(ADC_CH1);
     47a:	84 e0       	ldi	r24, 0x04	; 4
     47c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <read_adc>
	position.yaxis = ((((position.yaxis - calibration.yaxis)*100)/255)-50)*2;
     480:	9c 01       	movw	r18, r24
     482:	2a 19       	sub	r18, r10
     484:	3b 09       	sbc	r19, r11
     486:	12 9f       	mul	r17, r18
     488:	c0 01       	movw	r24, r0
     48a:	13 9f       	mul	r17, r19
     48c:	90 0d       	add	r25, r0
     48e:	11 24       	eor	r1, r1
     490:	be 01       	movw	r22, r28
     492:	0e 94 1d 0b 	call	0x163a	; 0x163a <__divmodhi4>
     496:	62 53       	subi	r22, 0x32	; 50
     498:	71 09       	sbc	r23, r1
     49a:	7b 01       	movw	r14, r22
     49c:	ee 0c       	add	r14, r14
     49e:	ff 1c       	adc	r15, r15
	
	return position;
}
     4a0:	c7 01       	movw	r24, r14
     4a2:	b6 01       	movw	r22, r12
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	1f 91       	pop	r17
     4aa:	ff 90       	pop	r15
     4ac:	ef 90       	pop	r14
     4ae:	df 90       	pop	r13
     4b0:	cf 90       	pop	r12
     4b2:	bf 90       	pop	r11
     4b4:	af 90       	pop	r10
     4b6:	9f 90       	pop	r9
     4b8:	8f 90       	pop	r8
     4ba:	08 95       	ret

000004bc <read_joystick_direction>:
****************************************************************************/
JoystickDirection read_joystick_direction(JoystickPosition joystickPos)
{
	JoystickDirection xAxes, yAxes, retVal;
	
	if (joystickPos.xaxis > 20)
     4bc:	65 31       	cpi	r22, 0x15	; 21
     4be:	71 05       	cpc	r23, r1
     4c0:	34 f4       	brge	.+12     	; 0x4ce <read_joystick_direction+0x12>
	{
		xAxes = Right;
	}
	else if (joystickPos.xaxis < -20)
     4c2:	6c 3e       	cpi	r22, 0xEC	; 236
     4c4:	2f ef       	ldi	r18, 0xFF	; 255
     4c6:	72 07       	cpc	r23, r18
     4c8:	24 f4       	brge	.+8      	; 0x4d2 <read_joystick_direction+0x16>
	{
		xAxes = Left;
     4ca:	e0 e0       	ldi	r30, 0x00	; 0
     4cc:	03 c0       	rjmp	.+6      	; 0x4d4 <read_joystick_direction+0x18>
{
	JoystickDirection xAxes, yAxes, retVal;
	
	if (joystickPos.xaxis > 20)
	{
		xAxes = Right;
     4ce:	e1 e0       	ldi	r30, 0x01	; 1
     4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <read_joystick_direction+0x18>
	{
		xAxes = Left;
	}
	else
	{
		xAxes = Neutral;
     4d2:	e4 e0       	ldi	r30, 0x04	; 4
	}
	
	if (joystickPos.yaxis > 20)
     4d4:	85 31       	cpi	r24, 0x15	; 21
     4d6:	91 05       	cpc	r25, r1
     4d8:	34 f4       	brge	.+12     	; 0x4e6 <read_joystick_direction+0x2a>
	{
		yAxes = Up;
	}
	else if (joystickPos.yaxis < -20)
     4da:	8c 3e       	cpi	r24, 0xEC	; 236
     4dc:	2f ef       	ldi	r18, 0xFF	; 255
     4de:	92 07       	cpc	r25, r18
     4e0:	24 f4       	brge	.+8      	; 0x4ea <read_joystick_direction+0x2e>
	{
		yAxes = Down;
     4e2:	f3 e0       	ldi	r31, 0x03	; 3
     4e4:	03 c0       	rjmp	.+6      	; 0x4ec <read_joystick_direction+0x30>
		xAxes = Neutral;
	}
	
	if (joystickPos.yaxis > 20)
	{
		yAxes = Up;
     4e6:	f2 e0       	ldi	r31, 0x02	; 2
     4e8:	01 c0       	rjmp	.+2      	; 0x4ec <read_joystick_direction+0x30>
	else if (joystickPos.yaxis < -20)
	{
		yAxes = Down;
	}
	else{
		yAxes = Neutral; 
     4ea:	f4 e0       	ldi	r31, 0x04	; 4
	}
	
	if(abs(joystickPos.yaxis) > abs(joystickPos.xaxis))
     4ec:	ac 01       	movw	r20, r24
     4ee:	99 23       	and	r25, r25
     4f0:	24 f4       	brge	.+8      	; 0x4fa <read_joystick_direction+0x3e>
     4f2:	44 27       	eor	r20, r20
     4f4:	55 27       	eor	r21, r21
     4f6:	48 1b       	sub	r20, r24
     4f8:	59 0b       	sbc	r21, r25
     4fa:	9b 01       	movw	r18, r22
     4fc:	77 23       	and	r23, r23
     4fe:	24 f4       	brge	.+8      	; 0x508 <__stack+0x9>
     500:	22 27       	eor	r18, r18
     502:	33 27       	eor	r19, r19
     504:	26 1b       	sub	r18, r22
     506:	37 0b       	sbc	r19, r23
     508:	24 17       	cp	r18, r20
     50a:	35 07       	cpc	r19, r21
     50c:	0c f4       	brge	.+2      	; 0x510 <__stack+0x11>
	{
		retVal = yAxes;
     50e:	ef 2f       	mov	r30, r31
	{
		retVal = xAxes;
	}
	
	return retVal;
}
     510:	8e 2f       	mov	r24, r30
     512:	08 95       	ret

00000514 <joystick_calibration>:
* \brief Calibrate joystick
*
* \return Joystick calibration data
****************************************************************************/
JoystickPosition joystick_calibration()
{
     514:	cf 92       	push	r12
     516:	df 92       	push	r13
     518:	ef 92       	push	r14
     51a:	ff 92       	push	r15
	
	JoystickPosition position;
	position.xaxis = read_adc(ADC_CH2);
     51c:	85 e0       	ldi	r24, 0x05	; 5
     51e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <read_adc>
     522:	6c 01       	movw	r12, r24
	position.yaxis = read_adc(ADC_CH1);
     524:	84 e0       	ldi	r24, 0x04	; 4
     526:	0e 94 50 01 	call	0x2a0	; 0x2a0 <read_adc>
     52a:	7c 01       	movw	r14, r24
	position.xaxis -= 127;
     52c:	8f e7       	ldi	r24, 0x7F	; 127
     52e:	c8 1a       	sub	r12, r24
     530:	d1 08       	sbc	r13, r1
	position.yaxis -= 127;
     532:	8f e7       	ldi	r24, 0x7F	; 127
     534:	e8 1a       	sub	r14, r24
     536:	f1 08       	sbc	r15, r1

	return position;	
}
     538:	c7 01       	movw	r24, r14
     53a:	b6 01       	movw	r22, r12
     53c:	ff 90       	pop	r15
     53e:	ef 90       	pop	r14
     540:	df 90       	pop	r13
     542:	cf 90       	pop	r12
     544:	08 95       	ret

00000546 <read_touchpad_data>:
* \brief Read Touchpad data
*
* \return Touchpad data
****************************************************************************/
TouchpadData read_touchpad_data()
{
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
     54e:	2c 97       	sbiw	r28, 0x0c	; 12
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
	TouchpadData touchpad;
	touchpad.rightTouchPad = read_adc(ADC_CH3);
     55a:	86 e0       	ldi	r24, 0x06	; 6
     55c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <read_adc>
     560:	98 87       	std	Y+8, r25	; 0x08
     562:	8f 83       	std	Y+7, r24	; 0x07
	touchpad.leftTouchPad = read_adc(ADC_CH4);
     564:	87 e0       	ldi	r24, 0x07	; 7
     566:	0e 94 50 01 	call	0x2a0	; 0x2a0 <read_adc>
     56a:	9a 87       	std	Y+10, r25	; 0x0a
     56c:	89 87       	std	Y+9, r24	; 0x09
	
	if(test_bit(BUTTON_PORT, LEFT_BUTTON_PIN))
     56e:	85 9b       	sbis	0x10, 5	; 16
     570:	03 c0       	rjmp	.+6      	; 0x578 <read_touchpad_data+0x32>
	{
		touchpad.leftButton = 1;
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	8c 87       	std	Y+12, r24	; 0x0c
     576:	01 c0       	rjmp	.+2      	; 0x57a <read_touchpad_data+0x34>
	}
	else
	{
		touchpad.leftButton = 0;
     578:	1c 86       	std	Y+12, r1	; 0x0c
	}
	if(test_bit(BUTTON_PORT, RIGHT_BUTTON_PIN))
     57a:	84 9b       	sbis	0x10, 4	; 16
     57c:	03 c0       	rjmp	.+6      	; 0x584 <read_touchpad_data+0x3e>
	{
		touchpad.rightButton = 1;
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	8b 87       	std	Y+11, r24	; 0x0b
     582:	01 c0       	rjmp	.+2      	; 0x586 <read_touchpad_data+0x40>
	}
	else
	{
		touchpad.rightButton = 0;	
     584:	1b 86       	std	Y+11, r1	; 0x0b
	}
	return touchpad;
     586:	86 e0       	ldi	r24, 0x06	; 6
     588:	fe 01       	movw	r30, r28
     58a:	37 96       	adiw	r30, 0x07	; 7
     58c:	de 01       	movw	r26, r28
     58e:	11 96       	adiw	r26, 0x01	; 1
     590:	01 90       	ld	r0, Z+
     592:	0d 92       	st	X+, r0
     594:	8a 95       	dec	r24
     596:	e1 f7       	brne	.-8      	; 0x590 <read_touchpad_data+0x4a>
     598:	29 81       	ldd	r18, Y+1	; 0x01
     59a:	3a 81       	ldd	r19, Y+2	; 0x02
     59c:	4b 81       	ldd	r20, Y+3	; 0x03
     59e:	5c 81       	ldd	r21, Y+4	; 0x04
     5a0:	6d 81       	ldd	r22, Y+5	; 0x05
     5a2:	7e 81       	ldd	r23, Y+6	; 0x06
}
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	2c 96       	adiw	r28, 0x0c	; 12
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	f8 94       	cli
     5ae:	de bf       	out	0x3e, r29	; 62
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	cd bf       	out	0x3d, r28	; 61
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	08 95       	ret

000005ba <change_xaxis>:
***********************************************************************************/
JoystickDirection change_xaxis(JoystickDirection direction)
{
	static JoystickDirection old_x_direction = Neutral;
	
	if(direction!= Right && direction != Left)
     5ba:	82 30       	cpi	r24, 0x02	; 2
     5bc:	20 f0       	brcs	.+8      	; 0x5c6 <change_xaxis+0xc>
	{
		old_x_direction = Neutral;
     5be:	84 e0       	ldi	r24, 0x04	; 4
     5c0:	80 93 07 01 	sts	0x0107, r24
		return Neutral;
     5c4:	08 95       	ret
	}
		
	if (old_x_direction != direction)
     5c6:	90 91 07 01 	lds	r25, 0x0107
     5ca:	98 17       	cp	r25, r24
     5cc:	19 f0       	breq	.+6      	; 0x5d4 <change_xaxis+0x1a>
	{
		old_x_direction = direction;
     5ce:	80 93 07 01 	sts	0x0107, r24
		return direction;
     5d2:	08 95       	ret
	}
		
	old_x_direction = direction;
	return Neutral;
     5d4:	84 e0       	ldi	r24, 0x04	; 4
}
     5d6:	08 95       	ret

000005d8 <change_yaxis>:
* \return Direction of joystick
***********************************************************************************/
JoystickDirection change_yaxis(JoystickDirection direction){
	static JoystickDirection old_y_direction = Neutral;
	
	if(direction!= Up && direction != Down)
     5d8:	9e ef       	ldi	r25, 0xFE	; 254
     5da:	98 0f       	add	r25, r24
     5dc:	92 30       	cpi	r25, 0x02	; 2
     5de:	20 f0       	brcs	.+8      	; 0x5e8 <change_yaxis+0x10>
	{
		old_y_direction = Neutral;
     5e0:	84 e0       	ldi	r24, 0x04	; 4
     5e2:	80 93 06 01 	sts	0x0106, r24
		return Neutral;
     5e6:	08 95       	ret
	}
		
	if (old_y_direction != direction)
     5e8:	90 91 06 01 	lds	r25, 0x0106
     5ec:	98 17       	cp	r25, r24
     5ee:	19 f0       	breq	.+6      	; 0x5f6 <change_yaxis+0x1e>
	{
		old_y_direction = direction;
     5f0:	80 93 06 01 	sts	0x0106, r24
		return direction;
     5f4:	08 95       	ret
	}
	
	old_y_direction = direction;
	return Neutral;
     5f6:	84 e0       	ldi	r24, 0x04	; 4
}
     5f8:	08 95       	ret

000005fa <change_touchpad_data>:
* \brief Return the change in touch button
*
* \return True if the position of particular touch button changed
***********************************************************************************/
ChangeTouchpadData change_touchpad_data(TouchpadData new_touchpad_data)
{
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
     5fe:	00 d0       	rcall	.+0      	; 0x600 <change_touchpad_data+0x6>
     600:	00 d0       	rcall	.+0      	; 0x602 <change_touchpad_data+0x8>
     602:	00 d0       	rcall	.+0      	; 0x604 <change_touchpad_data+0xa>
     604:	cd b7       	in	r28, 0x3d	; 61
     606:	de b7       	in	r29, 0x3e	; 62
     608:	49 83       	std	Y+1, r20	; 0x01
     60a:	5a 83       	std	Y+2, r21	; 0x02
     60c:	6b 83       	std	Y+3, r22	; 0x03
     60e:	7c 83       	std	Y+4, r23	; 0x04
     610:	8d 83       	std	Y+5, r24	; 0x05
     612:	9e 83       	std	Y+6, r25	; 0x06
	ChangeTouchpadData ret_val;
	
	ret_val.rightButton = 0;
	ret_val.leftButton = 0;
	
	if (old_touchpad_data.leftButton == 0 && new_touchpad_data.leftButton == 1)
     614:	80 91 cb 01 	lds	r24, 0x01CB
     618:	81 11       	cpse	r24, r1
     61a:	07 c0       	rjmp	.+14     	; 0x62a <change_touchpad_data+0x30>
     61c:	8e 81       	ldd	r24, Y+6	; 0x06
     61e:	81 30       	cpi	r24, 0x01	; 1
     620:	21 f4       	brne	.+8      	; 0x62a <change_touchpad_data+0x30>
	{
		old_touchpad_data.leftButton = 1;
     622:	80 93 cb 01 	sts	0x01CB, r24
		ret_val.leftButton = 1;
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	0e c0       	rjmp	.+28     	; 0x646 <change_touchpad_data+0x4c>
	}
	else if (old_touchpad_data.leftButton == 1 && new_touchpad_data.leftButton == 0)
     62a:	80 91 cb 01 	lds	r24, 0x01CB
     62e:	81 30       	cpi	r24, 0x01	; 1
     630:	39 f4       	brne	.+14     	; 0x640 <change_touchpad_data+0x46>
     632:	8e 81       	ldd	r24, Y+6	; 0x06
     634:	81 11       	cpse	r24, r1
     636:	06 c0       	rjmp	.+12     	; 0x644 <change_touchpad_data+0x4a>
	{
		old_touchpad_data.leftButton = 0;
     638:	10 92 cb 01 	sts	0x01CB, r1
{
	static TouchpadData old_touchpad_data;
	ChangeTouchpadData ret_val;
	
	ret_val.rightButton = 0;
	ret_val.leftButton = 0;
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	03 c0       	rjmp	.+6      	; 0x646 <change_touchpad_data+0x4c>
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	01 c0       	rjmp	.+2      	; 0x646 <change_touchpad_data+0x4c>
     644:	90 e0       	ldi	r25, 0x00	; 0
	else if (old_touchpad_data.leftButton == 1 && new_touchpad_data.leftButton == 0)
	{
		old_touchpad_data.leftButton = 0;
	}
	
	if (old_touchpad_data.rightButton == 0 && new_touchpad_data.rightButton == 1)
     646:	80 91 ca 01 	lds	r24, 0x01CA
     64a:	81 11       	cpse	r24, r1
     64c:	06 c0       	rjmp	.+12     	; 0x65a <change_touchpad_data+0x60>
     64e:	8d 81       	ldd	r24, Y+5	; 0x05
     650:	81 30       	cpi	r24, 0x01	; 1
     652:	19 f4       	brne	.+6      	; 0x65a <change_touchpad_data+0x60>
	{
		old_touchpad_data.rightButton =1;
     654:	80 93 ca 01 	sts	0x01CA, r24
		ret_val.rightButton = 1;
     658:	0d c0       	rjmp	.+26     	; 0x674 <change_touchpad_data+0x7a>
	}
	else if (old_touchpad_data.rightButton == 1 && new_touchpad_data.rightButton == 0)
     65a:	80 91 ca 01 	lds	r24, 0x01CA
     65e:	81 30       	cpi	r24, 0x01	; 1
     660:	31 f4       	brne	.+12     	; 0x66e <change_touchpad_data+0x74>
     662:	8d 81       	ldd	r24, Y+5	; 0x05
     664:	81 11       	cpse	r24, r1
     666:	05 c0       	rjmp	.+10     	; 0x672 <change_touchpad_data+0x78>
	{
		old_touchpad_data.rightButton = 0;
     668:	10 92 ca 01 	sts	0x01CA, r1
     66c:	03 c0       	rjmp	.+6      	; 0x674 <change_touchpad_data+0x7a>
ChangeTouchpadData change_touchpad_data(TouchpadData new_touchpad_data)
{
	static TouchpadData old_touchpad_data;
	ChangeTouchpadData ret_val;
	
	ret_val.rightButton = 0;
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	01 c0       	rjmp	.+2      	; 0x674 <change_touchpad_data+0x7a>
     672:	80 e0       	ldi	r24, 0x00	; 0
	{
		old_touchpad_data.rightButton = 0;
	}
	
	return ret_val;
     674:	26 96       	adiw	r28, 0x06	; 6
     676:	0f b6       	in	r0, 0x3f	; 63
     678:	f8 94       	cli
     67a:	de bf       	out	0x3e, r29	; 62
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	cd bf       	out	0x3d, r28	; 61
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	08 95       	ret

00000686 <mcp_turn_on>:
* \brief Enable communication with CAN controller 
*
****************************************************************************/
void mcp_turn_on()
{
	PORTB &= ~(1 << DD_CS);
     686:	c4 98       	cbi	0x18, 4	; 24
     688:	08 95       	ret

0000068a <mcp_turn_off>:
* \brief Disable communication with CAN controller
*
****************************************************************************/
void mcp_turn_off()
{
	PORTB |= (1 << DD_CS);
     68a:	c4 9a       	sbi	0x18, 4	; 24
     68c:	08 95       	ret

0000068e <mcp_reset>:
* \brief Reset the CAN controller
*
****************************************************************************/
void mcp_reset()
{
	mcp_turn_on();
     68e:	0e 94 43 03 	call	0x686	; 0x686 <mcp_turn_on>
	
	SPI_write(MCP_RESET);
     692:	80 ec       	ldi	r24, 0xC0	; 192
     694:	0e 94 40 05 	call	0xa80	; 0xa80 <SPI_write>
	
	mcp_turn_off();
     698:	0e 94 45 03 	call	0x68a	; 0x68a <mcp_turn_off>
     69c:	08 95       	ret

0000069e <mcp_read>:
*
* \param in address from which shall be read
* \return data
****************************************************************************/
uint8_t mcp_read(uint8_t address)
{
     69e:	1f 93       	push	r17
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	1f 92       	push	r1
     6a6:	cd b7       	in	r28, 0x3d	; 61
     6a8:	de b7       	in	r29, 0x3e	; 62
     6aa:	18 2f       	mov	r17, r24
	volatile uint8_t retVal;
	
	mcp_turn_on();
     6ac:	0e 94 43 03 	call	0x686	; 0x686 <mcp_turn_on>
	
	SPI_write(MCP_READ);
     6b0:	83 e0       	ldi	r24, 0x03	; 3
     6b2:	0e 94 40 05 	call	0xa80	; 0xa80 <SPI_write>
	SPI_write(address);
     6b6:	81 2f       	mov	r24, r17
     6b8:	0e 94 40 05 	call	0xa80	; 0xa80 <SPI_write>
	
	retVal = SPI_read();
     6bc:	0e 94 44 05 	call	0xa88	; 0xa88 <SPI_read>
     6c0:	89 83       	std	Y+1, r24	; 0x01
	
	mcp_turn_off();
     6c2:	0e 94 45 03 	call	0x68a	; 0x68a <mcp_turn_off>
	
	return retVal;
     6c6:	89 81       	ldd	r24, Y+1	; 0x01
}
     6c8:	0f 90       	pop	r0
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	08 95       	ret

000006d2 <mcp_init>:
****************************************************************************/
uint8_t mcp_init()
{
	uint8_t tmp;
	
	SPI_init();
     6d2:	0e 94 3a 05 	call	0xa74	; 0xa74 <SPI_init>
	mcp_reset();
     6d6:	0e 94 47 03 	call	0x68e	; 0x68e <mcp_reset>
	
	tmp = mcp_read(MCP_CANSTAT);
     6da:	8e e0       	ldi	r24, 0x0E	; 14
     6dc:	0e 94 4f 03 	call	0x69e	; 0x69e <mcp_read>
	
	if ((tmp & MODE_MASK) != MODE_CONFIG)
     6e0:	80 7e       	andi	r24, 0xE0	; 224
     6e2:	80 38       	cpi	r24, 0x80	; 128
     6e4:	31 f0       	breq	.+12     	; 0x6f2 <mcp_init+0x20>
	{
		printf("MCP2515 NOT configured properly\n");
     6e6:	88 e0       	ldi	r24, 0x08	; 8
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	0e 94 aa 0b 	call	0x1754	; 0x1754 <puts>
		return 1;
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	08 95       	ret
	}
	
	return 0;
     6f2:	80 e0       	ldi	r24, 0x00	; 0
}
     6f4:	08 95       	ret

000006f6 <mcp_write_byte>:
*
* \param in address to which shall be write
* \return data
****************************************************************************/
void mcp_write_byte(uint8_t address, uint8_t byte)
{
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	d8 2f       	mov	r29, r24
     6fc:	c6 2f       	mov	r28, r22
	mcp_turn_on();
     6fe:	0e 94 43 03 	call	0x686	; 0x686 <mcp_turn_on>
	SPI_write(MCP_WRITE);
     702:	82 e0       	ldi	r24, 0x02	; 2
     704:	0e 94 40 05 	call	0xa80	; 0xa80 <SPI_write>
	SPI_write(address);
     708:	8d 2f       	mov	r24, r29
     70a:	0e 94 40 05 	call	0xa80	; 0xa80 <SPI_write>
	SPI_write(byte);
     70e:	8c 2f       	mov	r24, r28
     710:	0e 94 40 05 	call	0xa80	; 0xa80 <SPI_write>
	mcp_turn_off();
     714:	0e 94 45 03 	call	0x68a	; 0x68a <mcp_turn_off>
}
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	08 95       	ret

0000071e <mcp_modify_bit>:
* \param in address of the register
* \param in bit mask
* \param in new value of the register
****************************************************************************/
void mcp_modify_bit(uint8_t address, uint8_t mask, uint8_t byte)
{
     71e:	1f 93       	push	r17
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	18 2f       	mov	r17, r24
     726:	d6 2f       	mov	r29, r22
     728:	c4 2f       	mov	r28, r20
	mcp_turn_on();
     72a:	0e 94 43 03 	call	0x686	; 0x686 <mcp_turn_on>
	SPI_write(MCP_BITMOD);
     72e:	85 e0       	ldi	r24, 0x05	; 5
     730:	0e 94 40 05 	call	0xa80	; 0xa80 <SPI_write>
	SPI_write(address);
     734:	81 2f       	mov	r24, r17
     736:	0e 94 40 05 	call	0xa80	; 0xa80 <SPI_write>
	SPI_write(mask);
     73a:	8d 2f       	mov	r24, r29
     73c:	0e 94 40 05 	call	0xa80	; 0xa80 <SPI_write>
	SPI_write(byte);
     740:	8c 2f       	mov	r24, r28
     742:	0e 94 40 05 	call	0xa80	; 0xa80 <SPI_write>
	mcp_turn_off();
     746:	0e 94 45 03 	call	0x68a	; 0x68a <mcp_turn_off>
}
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	1f 91       	pop	r17
     750:	08 95       	ret

00000752 <mcp_request_to_send>:
* \brief Request to send particular buffer
*
* \param in address of the buffer
****************************************************************************/
void mcp_request_to_send(uint8_t bits)
{
     752:	cf 93       	push	r28
     754:	c8 2f       	mov	r28, r24
	mcp_turn_on();
     756:	0e 94 43 03 	call	0x686	; 0x686 <mcp_turn_on>
	SPI_write(MCP_RTS | (bits & 0b00000111));
     75a:	8c 2f       	mov	r24, r28
     75c:	87 70       	andi	r24, 0x07	; 7
     75e:	80 68       	ori	r24, 0x80	; 128
     760:	0e 94 40 05 	call	0xa80	; 0xa80 <SPI_write>
	mcp_turn_off();
     764:	0e 94 45 03 	call	0x68a	; 0x68a <mcp_turn_off>
}
     768:	cf 91       	pop	r28
     76a:	08 95       	ret

0000076c <init_oled>:
*
****************************************************************************/
void write_c(char command)
{
	volatile char *ext_oled = (char *) OLED_COMMAND_BASE_ADDR;
	ext_oled[0] = command;
     76c:	e0 e0       	ldi	r30, 0x00	; 0
     76e:	f0 e1       	ldi	r31, 0x10	; 16
     770:	8e ea       	ldi	r24, 0xAE	; 174
     772:	80 83       	st	Z, r24
     774:	81 ea       	ldi	r24, 0xA1	; 161
     776:	80 83       	st	Z, r24
     778:	8a ed       	ldi	r24, 0xDA	; 218
     77a:	80 83       	st	Z, r24
     77c:	82 e1       	ldi	r24, 0x12	; 18
     77e:	80 83       	st	Z, r24
     780:	88 ec       	ldi	r24, 0xC8	; 200
     782:	80 83       	st	Z, r24
     784:	88 ea       	ldi	r24, 0xA8	; 168
     786:	80 83       	st	Z, r24
     788:	8f e3       	ldi	r24, 0x3F	; 63
     78a:	80 83       	st	Z, r24
     78c:	85 ed       	ldi	r24, 0xD5	; 213
     78e:	80 83       	st	Z, r24
     790:	80 e8       	ldi	r24, 0x80	; 128
     792:	80 83       	st	Z, r24
     794:	81 e8       	ldi	r24, 0x81	; 129
     796:	80 83       	st	Z, r24
     798:	80 e5       	ldi	r24, 0x50	; 80
     79a:	80 83       	st	Z, r24
     79c:	89 ed       	ldi	r24, 0xD9	; 217
     79e:	80 83       	st	Z, r24
     7a0:	81 e2       	ldi	r24, 0x21	; 33
     7a2:	80 83       	st	Z, r24
     7a4:	80 e2       	ldi	r24, 0x20	; 32
     7a6:	80 83       	st	Z, r24
     7a8:	10 82       	st	Z, r1
     7aa:	8b ed       	ldi	r24, 0xDB	; 219
     7ac:	80 83       	st	Z, r24
     7ae:	80 e3       	ldi	r24, 0x30	; 48
     7b0:	80 83       	st	Z, r24
     7b2:	8d ea       	ldi	r24, 0xAD	; 173
     7b4:	80 83       	st	Z, r24
     7b6:	10 82       	st	Z, r1
     7b8:	84 ea       	ldi	r24, 0xA4	; 164
     7ba:	80 83       	st	Z, r24
     7bc:	86 ea       	ldi	r24, 0xA6	; 166
     7be:	80 83       	st	Z, r24
     7c0:	8f ea       	ldi	r24, 0xAF	; 175
     7c2:	80 83       	st	Z, r24
     7c4:	08 95       	ret

000007c6 <reset_position>:
     7c6:	e0 e0       	ldi	r30, 0x00	; 0
     7c8:	f0 e1       	ldi	r31, 0x10	; 16
     7ca:	81 e2       	ldi	r24, 0x21	; 33
     7cc:	80 83       	st	Z, r24
     7ce:	10 82       	st	Z, r1
     7d0:	8f e7       	ldi	r24, 0x7F	; 127
     7d2:	80 83       	st	Z, r24
     7d4:	82 e2       	ldi	r24, 0x22	; 34
     7d6:	80 83       	st	Z, r24
     7d8:	10 82       	st	Z, r1
     7da:	87 e0       	ldi	r24, 0x07	; 7
     7dc:	80 83       	st	Z, r24
     7de:	08 95       	ret

000007e0 <refresh_oled>:
* \brief Refresh OLED by rewriting all data from SRAM to OLED
*
****************************************************************************/
void refresh_oled()
{
	reset_position();
     7e0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <reset_position>
     7e4:	e0 e0       	ldi	r30, 0x00	; 0
     7e6:	f8 e1       	ldi	r31, 0x18	; 24
*
****************************************************************************/
void write_d(char data)
{
	volatile char *ext_oled = (char *) OLED_DATA_BASE_ADDR;
	ext_oled[0] = data;
     7e8:	a0 e0       	ldi	r26, 0x00	; 0
     7ea:	b2 e1       	ldi	r27, 0x12	; 18
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	unsigned char oled_value;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
	{
		oled_value = ext_ram[i];
     7ec:	81 91       	ld	r24, Z+
*
****************************************************************************/
void write_d(char data)
{
	volatile char *ext_oled = (char *) OLED_DATA_BASE_ADDR;
	ext_oled[0] = data;
     7ee:	8c 93       	st	X, r24
{
	reset_position();
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	unsigned char oled_value;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
     7f0:	e1 15       	cp	r30, r1
     7f2:	8c e1       	ldi	r24, 0x1C	; 28
     7f4:	f8 07       	cpc	r31, r24
     7f6:	d1 f7       	brne	.-12     	; 0x7ec <refresh_oled+0xc>
	{
		oled_value = ext_ram[i];
		write_d(oled_value);
	}
}
     7f8:	08 95       	ret

000007fa <clear_oled>:
/****************************************************************************
* \brief Clear OLED display
*
****************************************************************************/
void clear_oled()
{
     7fa:	e0 e0       	ldi	r30, 0x00	; 0
     7fc:	f8 e1       	ldi	r31, 0x18	; 24
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
	{
		ext_ram[i] = 0x00;
     7fe:	11 92       	st	Z+, r1
****************************************************************************/
void clear_oled()
{
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
     800:	e1 15       	cp	r30, r1
     802:	8c e1       	ldi	r24, 0x1C	; 28
     804:	f8 07       	cpc	r31, r24
     806:	d9 f7       	brne	.-10     	; 0x7fe <clear_oled+0x4>
	{
		ext_ram[i] = 0x00;
	}
}
     808:	08 95       	ret

0000080a <print_char>:
* \brief Print character on current position on OLED display
*
* \param in x Position of pixel that should be set
****************************************************************************/
void print_char(char character)
{
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	c0 91 cc 01 	lds	r28, 0x01CC
     812:	d0 91 cd 01 	lds	r29, 0x01CD
     816:	28 2f       	mov	r18, r24
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	20 52       	subi	r18, 0x20	; 32
     81c:	31 09       	sbc	r19, r1
     81e:	c9 01       	movw	r24, r18
     820:	88 0f       	add	r24, r24
     822:	99 1f       	adc	r25, r25
     824:	88 0f       	add	r24, r24
     826:	99 1f       	adc	r25, r25
     828:	28 0f       	add	r18, r24
     82a:	39 1f       	adc	r19, r25
     82c:	2a 57       	subi	r18, 0x7A	; 122
     82e:	3f 4f       	sbci	r19, 0xFF	; 255
     830:	84 e0       	ldi	r24, 0x04	; 4
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	be 01       	movw	r22, r28
     836:	6c 5f       	subi	r22, 0xFC	; 252
     838:	77 4e       	sbci	r23, 0xE7	; 231
     83a:	db 01       	movw	r26, r22
     83c:	a8 1b       	sub	r26, r24
     83e:	b9 0b       	sbc	r27, r25
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
	
	for(int i = 0; i < 4; i++)
	{
		ext_ram[position] = pgm_read_word_near(&(font[character-32][i]));
     840:	f9 01       	movw	r30, r18
     842:	45 91       	lpm	r20, Z+
     844:	54 91       	lpm	r21, Z
     846:	4c 93       	st	X, r20
     848:	01 97       	sbiw	r24, 0x01	; 1
     84a:	2f 5f       	subi	r18, 0xFF	; 255
     84c:	3f 4f       	sbci	r19, 0xFF	; 255
****************************************************************************/
void print_char(char character)
{
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
	
	for(int i = 0; i < 4; i++)
     84e:	00 97       	sbiw	r24, 0x00	; 0
     850:	a1 f7       	brne	.-24     	; 0x83a <print_char+0x30>
     852:	24 96       	adiw	r28, 0x04	; 4
     854:	d0 93 cd 01 	sts	0x01CD, r29
     858:	c0 93 cc 01 	sts	0x01CC, r28
	{
		ext_ram[position] = pgm_read_word_near(&(font[character-32][i]));
		position++;
	}
}
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	08 95       	ret

00000862 <print_inverted_char>:

void print_inverted_char(char character)
{
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	c0 91 cc 01 	lds	r28, 0x01CC
     86a:	d0 91 cd 01 	lds	r29, 0x01CD
     86e:	28 2f       	mov	r18, r24
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	20 52       	subi	r18, 0x20	; 32
     874:	31 09       	sbc	r19, r1
     876:	c9 01       	movw	r24, r18
     878:	88 0f       	add	r24, r24
     87a:	99 1f       	adc	r25, r25
     87c:	88 0f       	add	r24, r24
     87e:	99 1f       	adc	r25, r25
     880:	28 0f       	add	r18, r24
     882:	39 1f       	adc	r19, r25
     884:	2a 57       	subi	r18, 0x7A	; 122
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	84 e0       	ldi	r24, 0x04	; 4
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	be 01       	movw	r22, r28
     88e:	6c 5f       	subi	r22, 0xFC	; 252
     890:	77 4e       	sbci	r23, 0xE7	; 231
     892:	db 01       	movw	r26, r22
     894:	a8 1b       	sub	r26, r24
     896:	b9 0b       	sbc	r27, r25
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
	
	for(int i = 0; i < 4; i++)
	{
		ext_ram[position] = ~pgm_read_word_near(&(font[character-32][i]));
     898:	f9 01       	movw	r30, r18
     89a:	45 91       	lpm	r20, Z+
     89c:	54 91       	lpm	r21, Z
     89e:	40 95       	com	r20
     8a0:	4c 93       	st	X, r20
     8a2:	01 97       	sbiw	r24, 0x01	; 1
     8a4:	2f 5f       	subi	r18, 0xFF	; 255
     8a6:	3f 4f       	sbci	r19, 0xFF	; 255

void print_inverted_char(char character)
{
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
	
	for(int i = 0; i < 4; i++)
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	99 f7       	brne	.-26     	; 0x892 <print_inverted_char+0x30>
     8ac:	24 96       	adiw	r28, 0x04	; 4
     8ae:	d0 93 cd 01 	sts	0x01CD, r29
     8b2:	c0 93 cc 01 	sts	0x01CC, r28
	{
		ext_ram[position] = ~pgm_read_word_near(&(font[character-32][i]));
		position++;
	}
}
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	08 95       	ret

000008bc <set_position>:
* \param in page Row on Y-axis
* \return Success/Failure
****************************************************************************/
int set_position(unsigned int column, unsigned int page)
{
	if (column > 32)
     8bc:	81 32       	cpi	r24, 0x21	; 33
     8be:	91 05       	cpc	r25, r1
     8c0:	c0 f4       	brcc	.+48     	; 0x8f2 <set_position+0x36>
	{
		return 1;
	}
	else if (page > 8)
     8c2:	69 30       	cpi	r22, 0x09	; 9
     8c4:	71 05       	cpc	r23, r1
     8c6:	c0 f4       	brcc	.+48     	; 0x8f8 <set_position+0x3c>
	{
		return 1;
	}
		
	position = page * 128 + column * 4;
     8c8:	66 0f       	add	r22, r22
     8ca:	77 1f       	adc	r23, r23
     8cc:	62 95       	swap	r22
     8ce:	72 95       	swap	r23
     8d0:	70 7f       	andi	r23, 0xF0	; 240
     8d2:	76 27       	eor	r23, r22
     8d4:	60 7f       	andi	r22, 0xF0	; 240
     8d6:	76 27       	eor	r23, r22
     8d8:	86 0f       	add	r24, r22
     8da:	97 1f       	adc	r25, r23
     8dc:	88 0f       	add	r24, r24
     8de:	99 1f       	adc	r25, r25
     8e0:	88 0f       	add	r24, r24
     8e2:	99 1f       	adc	r25, r25
     8e4:	90 93 cd 01 	sts	0x01CD, r25
     8e8:	80 93 cc 01 	sts	0x01CC, r24
	
	return 0;
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	08 95       	ret
****************************************************************************/
int set_position(unsigned int column, unsigned int page)
{
	if (column > 32)
	{
		return 1;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	08 95       	ret
	}
	else if (page > 8)
	{
		return 1;
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	90 e0       	ldi	r25, 0x00	; 0
	}
		
	position = page * 128 + column * 4;
	
	return 0;
}
     8fc:	08 95       	ret

000008fe <print_string>:
*
* \param in String that shall be printed
* \return Success/Failure
****************************************************************************/
int print_string(char* string)
{
     8fe:	ef 92       	push	r14
     900:	ff 92       	push	r15
     902:	0f 93       	push	r16
     904:	1f 93       	push	r17
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
	int lenght  = strlen(string);
     90a:	fc 01       	movw	r30, r24
     90c:	01 90       	ld	r0, Z+
     90e:	00 20       	and	r0, r0
     910:	e9 f7       	brne	.-6      	; 0x90c <print_string+0xe>
     912:	31 97       	sbiw	r30, 0x01	; 1
     914:	7f 01       	movw	r14, r30
     916:	e8 1a       	sub	r14, r24
     918:	f9 0a       	sbc	r15, r25
	for(int i = 0; i < lenght; i++)
     91a:	1e 14       	cp	r1, r14
     91c:	1f 04       	cpc	r1, r15
     91e:	64 f4       	brge	.+24     	; 0x938 <print_string+0x3a>
     920:	8c 01       	movw	r16, r24
     922:	c0 e0       	ldi	r28, 0x00	; 0
     924:	d0 e0       	ldi	r29, 0x00	; 0
	{
		print_char(string[i]);
     926:	f8 01       	movw	r30, r16
     928:	81 91       	ld	r24, Z+
     92a:	8f 01       	movw	r16, r30
     92c:	0e 94 05 04 	call	0x80a	; 0x80a <print_char>
* \return Success/Failure
****************************************************************************/
int print_string(char* string)
{
	int lenght  = strlen(string);
	for(int i = 0; i < lenght; i++)
     930:	21 96       	adiw	r28, 0x01	; 1
     932:	ec 16       	cp	r14, r28
     934:	fd 06       	cpc	r15, r29
     936:	b9 f7       	brne	.-18     	; 0x926 <print_string+0x28>
	{
		print_char(string[i]);
	}
	
	return 0;
}
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	1f 91       	pop	r17
     942:	0f 91       	pop	r16
     944:	ff 90       	pop	r15
     946:	ef 90       	pop	r14
     948:	08 95       	ret

0000094a <revert_colour_line>:
****************************************************************************/
void revert_colour_line(unsigned char line)
{
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
		
	for(int i = (line * OLED_LINE_LENGTH_COLUMNS) + 2; i < ((line + 1) * OLED_LINE_LENGTH_COLUMNS); i++)
     94a:	90 e8       	ldi	r25, 0x80	; 128
     94c:	89 9f       	mul	r24, r25
     94e:	f0 01       	movw	r30, r0
     950:	11 24       	eor	r1, r1
     952:	cf 01       	movw	r24, r30
     954:	80 58       	subi	r24, 0x80	; 128
     956:	9f 4f       	sbci	r25, 0xFF	; 255
     958:	9f 01       	movw	r18, r30
     95a:	2e 5f       	subi	r18, 0xFE	; 254
     95c:	3f 4f       	sbci	r19, 0xFF	; 255
     95e:	28 17       	cp	r18, r24
     960:	39 07       	cpc	r19, r25
     962:	54 f4       	brge	.+20     	; 0x978 <revert_colour_line+0x2e>
     964:	ef 5f       	subi	r30, 0xFF	; 255
     966:	f7 4e       	sbci	r31, 0xE7	; 231
     968:	81 50       	subi	r24, 0x01	; 1
     96a:	98 4e       	sbci	r25, 0xE8	; 232
	{
		ext_ram[i-1] = ~ext_ram[i-1];
     96c:	20 81       	ld	r18, Z
     96e:	20 95       	com	r18
     970:	21 93       	st	Z+, r18
****************************************************************************/
void revert_colour_line(unsigned char line)
{
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
		
	for(int i = (line * OLED_LINE_LENGTH_COLUMNS) + 2; i < ((line + 1) * OLED_LINE_LENGTH_COLUMNS); i++)
     972:	e8 17       	cp	r30, r24
     974:	f9 07       	cpc	r31, r25
     976:	d1 f7       	brne	.-12     	; 0x96c <revert_colour_line+0x22>
     978:	08 95       	ret

0000097a <init>:
* \brief Initialize all important peripherals and pins
*
****************************************************************************/
void init()
{
	USART_init(MYUBBR);
     97a:	8f e1       	ldi	r24, 0x1F	; 31
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <USART_init>
	/* Enables standard IO functions */	
	fdevopen(USART_putchar, USART_getchar);
     982:	61 e6       	ldi	r22, 0x61	; 97
     984:	75 e0       	ldi	r23, 0x05	; 5
     986:	8b e5       	ldi	r24, 0x5B	; 91
     988:	95 e0       	ldi	r25, 0x05	; 5
     98a:	0e 94 4b 0b 	call	0x1696	; 0x1696 <fdevopen>
	/* Enables external memory*/
	set_bit(MCUCR, SRE);
     98e:	85 b7       	in	r24, 0x35	; 53
     990:	80 68       	ori	r24, 0x80	; 128
     992:	85 bf       	out	0x35, r24	; 53
	/* Pin 1 is set to output for the LED*/
	set_bit(DDRB, PB0);
     994:	b8 9a       	sbi	0x17, 0	; 23
	/* Pin is now driven LOW*/
	clear_bit(PORTB, PB0);
     996:	c0 98       	cbi	0x18, 0	; 24
	/* Initialize OLED display */
	init_oled();
     998:	0e 94 b6 03 	call	0x76c	; 0x76c <init_oled>
	interface_init();
     99c:	0e 94 66 05 	call	0xacc	; 0xacc <interface_init>
     9a0:	08 95       	ret

000009a2 <main>:




int main(void)
{	
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	cd b7       	in	r28, 0x3d	; 61
     9a8:	de b7       	in	r29, 0x3e	; 62
     9aa:	65 97       	sbiw	r28, 0x15	; 21
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	f8 94       	cli
     9b0:	de bf       	out	0x3e, r29	; 62
     9b2:	0f be       	out	0x3f, r0	; 63
     9b4:	cd bf       	out	0x3d, r28	; 61

	
	clear_bit(DDRD, PD3);
     9b6:	8b 98       	cbi	0x11, 3	; 17
	clear_bit(DDRD, PD2);
     9b8:	8a 98       	cbi	0x11, 2	; 17
	
	init();
     9ba:	0e 94 bd 04 	call	0x97a	; 0x97a <init>
	volatile char SPIdata = 0;
     9be:	19 82       	std	Y+1, r1	; 0x01
	JoystickPosition position;
	JoystickPosition calibration;
	JoystickDirection direction;
	JoystickDirection change_y, change_x;
	ScreenName screen_name = 0;
	calibration = joystick_calibration();
     9c0:	0e 94 8a 02 	call	0x514	; 0x514 <joystick_calibration>
     9c4:	6b 01       	movw	r12, r22
     9c6:	7c 01       	movw	r14, r24
	CANMessage canMessage, canMessage2;
	
	//SRAM_test();
	
	CAN_init();
     9c8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <CAN_init>
	
	clear_oled();
     9cc:	0e 94 fd 03 	call	0x7fa	; 0x7fa <clear_oled>
	reset_position();
     9d0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <reset_position>
	
	clear_oled();
     9d4:	0e 94 fd 03 	call	0x7fa	; 0x7fa <clear_oled>
	refresh_oled();
     9d8:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <refresh_oled>
	

	
	canMessage.ID = 0xAA;
     9dc:	8a ea       	ldi	r24, 0xAA	; 170
     9de:	8a 83       	std	Y+2, r24	; 0x02
	canMessage.length = 1;
	canMessage.data_array[0] = 0x10;
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	8c 83       	std	Y+4, r24	; 0x04
	
	canMessage2.ID = 0;
     9e4:	1c 86       	std	Y+12, r1	; 0x0c
	canMessage2.length = 0;
     9e6:	1d 86       	std	Y+13, r1	; 0x0d
	
	printf("start\n");
     9e8:	88 e2       	ldi	r24, 0x28	; 40
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	0e 94 aa 0b 	call	0x1754	; 0x1754 <puts>
	refresh_oled();
	

	
	canMessage.ID = 0xAA;
	canMessage.length = 1;
     9f0:	99 24       	eor	r9, r9
     9f2:	93 94       	inc	r9
		//cli();
		i = CAN_receive_message(&canMessage2);
		
		if (i == SUCCESS)
		{
			printf("Id = %d, length = %d\n", canMessage2.ID, canMessage2.length);
     9f4:	0f 2e       	mov	r0, r31
     9f6:	fe e2       	ldi	r31, 0x2E	; 46
     9f8:	af 2e       	mov	r10, r31
     9fa:	f1 e0       	ldi	r31, 0x01	; 1
     9fc:	bf 2e       	mov	r11, r31
     9fe:	f0 2d       	mov	r31, r0
			printf("%d\n", mcp_read(MCP_CANINTF));
	*/
	//sei();
	while(1)
	{
		CAN_send_message(canMessage);
     a00:	9b 82       	std	Y+3, r9	; 0x03
     a02:	0a 81       	ldd	r16, Y+2	; 0x02
     a04:	19 2d       	mov	r17, r9
     a06:	2c 81       	ldd	r18, Y+4	; 0x04
     a08:	3d 81       	ldd	r19, Y+5	; 0x05
     a0a:	4e 81       	ldd	r20, Y+6	; 0x06
     a0c:	5f 81       	ldd	r21, Y+7	; 0x07
     a0e:	68 85       	ldd	r22, Y+8	; 0x08
     a10:	79 85       	ldd	r23, Y+9	; 0x09
     a12:	8a 85       	ldd	r24, Y+10	; 0x0a
     a14:	9b 85       	ldd	r25, Y+11	; 0x0b
     a16:	0e 94 69 01 	call	0x2d2	; 0x2d2 <CAN_send_message>
     a1a:	8f ef       	ldi	r24, 0xFF	; 255
     a1c:	9f e2       	ldi	r25, 0x2F	; 47
     a1e:	01 97       	sbiw	r24, 0x01	; 1
     a20:	f1 f7       	brne	.-4      	; 0xa1e <main+0x7c>
     a22:	00 c0       	rjmp	.+0      	; 0xa24 <main+0x82>
     a24:	00 00       	nop
		_delay_ms(10);
		//cli();
		i = CAN_receive_message(&canMessage2);
     a26:	ce 01       	movw	r24, r28
     a28:	0c 96       	adiw	r24, 0x0c	; 12
     a2a:	0e 94 ce 01 	call	0x39c	; 0x39c <CAN_receive_message>
		
		if (i == SUCCESS)
     a2e:	81 11       	cpse	r24, r1
     a30:	13 c0       	rjmp	.+38     	; 0xa58 <main+0xb6>
		{
			printf("Id = %d, length = %d\n", canMessage2.ID, canMessage2.length);
     a32:	8d 85       	ldd	r24, Y+13	; 0x0d
     a34:	1f 92       	push	r1
     a36:	8f 93       	push	r24
     a38:	8c 85       	ldd	r24, Y+12	; 0x0c
     a3a:	1f 92       	push	r1
     a3c:	8f 93       	push	r24
     a3e:	bf 92       	push	r11
     a40:	af 92       	push	r10
     a42:	0e 94 96 0b 	call	0x172c	; 0x172c <printf>
			canMessage2.ID = 0;
     a46:	1c 86       	std	Y+12, r1	; 0x0c
			canMessage2.length = 0;
     a48:	1d 86       	std	Y+13, r1	; 0x0d
     a4a:	0f 90       	pop	r0
     a4c:	0f 90       	pop	r0
     a4e:	0f 90       	pop	r0
     a50:	0f 90       	pop	r0
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	04 c0       	rjmp	.+8      	; 0xa60 <main+0xbe>
		}
		else
		{
			printf("Nothing to receive\n");
     a58:	84 e4       	ldi	r24, 0x44	; 68
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <puts>
		}
		
		canMessage.length = canMessage.length+1;
     a60:	93 94       	inc	r9
		
		if(canMessage.length==8){
     a62:	98 e0       	ldi	r25, 0x08	; 8
     a64:	99 12       	cpse	r9, r25
     a66:	01 c0       	rjmp	.+2      	; 0xa6a <main+0xc8>
			canMessage.length=0;
     a68:	91 2c       	mov	r9, r1
		}
		
		//_delay_ms(200);
		
		interface_state_machine(calibration);
     a6a:	c7 01       	movw	r24, r14
     a6c:	b6 01       	movw	r22, r12
     a6e:	0e 94 b8 0a 	call	0x1570	; 0x1570 <interface_state_machine>
		*/
		
		//SRAM_test();
		//led_toggle();
		//printf(" The value is: %d \n ", 2);
	}
     a72:	c6 cf       	rjmp	.-116    	; 0xa00 <main+0x5e>

00000a74 <SPI_init>:
*
****************************************************************************/
void SPI_init()
{
	/* Drive MOSI, SCK and CS HIGH*/
	DDR_SPI |= (1 << DD_MOSI) | (1 << DD_SCK) | (1 << DD_CS);
     a74:	87 b3       	in	r24, 0x17	; 23
     a76:	80 6b       	ori	r24, 0xB0	; 176
     a78:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master mode, clock rate fck/16*/
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     a7a:	81 e5       	ldi	r24, 0x51	; 81
     a7c:	8d b9       	out	0x0d, r24	; 13
     a7e:	08 95       	ret

00000a80 <SPI_write>:
*
* \param in byte to be written
****************************************************************************/
void SPI_write(uint8_t data)
{
	SPDR = data;
     a80:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1 << SPIF)));
     a82:	77 9b       	sbis	0x0e, 7	; 14
     a84:	fe cf       	rjmp	.-4      	; 0xa82 <SPI_write+0x2>
}
     a86:	08 95       	ret

00000a88 <SPI_read>:
* \brief Read data from slave unit
*
* \return Read data
****************************************************************************/
uint8_t SPI_read()
{
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	1f 92       	push	r1
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t retVal;
	SPDR = 0xFF;
     a92:	8f ef       	ldi	r24, 0xFF	; 255
     a94:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1 << SPIF)));
     a96:	77 9b       	sbis	0x0e, 7	; 14
     a98:	fe cf       	rjmp	.-4      	; 0xa96 <SPI_read+0xe>
	
	retVal = SPDR;
     a9a:	8f b1       	in	r24, 0x0f	; 15
     a9c:	89 83       	std	Y+1, r24	; 0x01
	
	return retVal;
     a9e:	89 81       	ldd	r24, Y+1	; 0x01
     aa0:	0f 90       	pop	r0
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	08 95       	ret

00000aa8 <USART_init>:
 * \param ubrr Desired baud rate.
 ****************************************************************************/
void USART_init(unsigned int ubrr)
{
	//Set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
     aa8:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
     aaa:	89 b9       	out	0x09, r24	; 9
	// Enable receiver and transmitter
	UCSR0B = (1<< RXEN0) | (1<<TXEN0) | (1<<RXCIE0) | (1<<TXCIE0);
     aac:	88 ed       	ldi	r24, 0xD8	; 216
     aae:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 2 stop bit
	UCSR0C = (1<<URSEL0) | (3<<UCSZ00) ;
     ab0:	86 e8       	ldi	r24, 0x86	; 134
     ab2:	80 bd       	out	0x20, r24	; 32
     ab4:	08 95       	ret

00000ab6 <USART_putchar>:
 * \param c Char to be sent.
 * \return Always 0.
 ****************************************************************************/
int USART_putchar(char c)
{
	loop_until_bit_is_set(UCSR0A, UDRE0);
     ab6:	5d 9b       	sbis	0x0b, 5	; 11
     ab8:	fe cf       	rjmp	.-4      	; 0xab6 <USART_putchar>
	UDR0 = c;
     aba:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	08 95       	ret

00000ac2 <USART_getchar>:
 * \return Received char.
 ****************************************************************************/
int USART_getchar()
{
	char c;
	loop_until_bit_is_set(UCSR0A, RXC0);
     ac2:	5f 9b       	sbis	0x0b, 7	; 11
     ac4:	fe cf       	rjmp	.-4      	; 0xac2 <USART_getchar>
	c = UDR0;
     ac6:	8c b1       	in	r24, 0x0c	; 12
	return c;
}
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	08 95       	ret

00000acc <interface_init>:
	volatile char *ext_ram = (char *) SRAM_USERNAME_ADDR;
	volatile char *eeprom = (char *) EEPROM_HIGH_SCORES_BASE_ADDR;

	for(int i = 0; i < SRAM_USERNAME_ADDR_LENGTH; i++)
	{
		ext_ram[i] = 'A';
     acc:	81 e4       	ldi	r24, 0x41	; 65
     ace:	80 93 00 1c 	sts	0x1C00, r24
     ad2:	80 93 01 1c 	sts	0x1C01, r24
     ad6:	80 93 02 1c 	sts	0x1C02, r24
     ada:	80 93 03 1c 	sts	0x1C03, r24
     ade:	80 93 04 1c 	sts	0x1C04, r24
     ae2:	08 95       	ret

00000ae4 <interface_username>:
* \brief Function call during the set username phase
*
* \param in joystick calibration data
****************************************************************************/
InterfaceState interface_username(JoystickPosition calibration)
{
     ae4:	2f 92       	push	r2
     ae6:	3f 92       	push	r3
     ae8:	4f 92       	push	r4
     aea:	5f 92       	push	r5
     aec:	6f 92       	push	r6
     aee:	7f 92       	push	r7
     af0:	8f 92       	push	r8
     af2:	9f 92       	push	r9
     af4:	af 92       	push	r10
     af6:	bf 92       	push	r11
     af8:	cf 92       	push	r12
     afa:	df 92       	push	r13
     afc:	ef 92       	push	r14
     afe:	ff 92       	push	r15
     b00:	0f 93       	push	r16
     b02:	1f 93       	push	r17
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	cd b7       	in	r28, 0x3d	; 61
     b0a:	de b7       	in	r29, 0x3e	; 62
     b0c:	2b 97       	sbiw	r28, 0x0b	; 11
     b0e:	0f b6       	in	r0, 0x3f	; 63
     b10:	f8 94       	cli
     b12:	de bf       	out	0x3e, r29	; 62
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	cd bf       	out	0x3d, r28	; 61
     b18:	2b 01       	movw	r4, r22
     b1a:	3c 01       	movw	r6, r24
     b1c:	de 01       	movw	r26, r28
     b1e:	17 96       	adiw	r26, 0x07	; 7
     b20:	e0 e0       	ldi	r30, 0x00	; 0
     b22:	fc e1       	ldi	r31, 0x1C	; 28
	char name[SRAM_USERNAME_ADDR_LENGTH];
	char index = 0;
	
	for(int i=0; i<SRAM_USERNAME_ADDR_LENGTH;i++)
	{
		name[i] = ext_ram[i];
     b24:	81 91       	ld	r24, Z+
     b26:	8d 93       	st	X+, r24
	ChangeTouchpadData change_touch_data;
	TouchpadData touch_data;
	char name[SRAM_USERNAME_ADDR_LENGTH];
	char index = 0;
	
	for(int i=0; i<SRAM_USERNAME_ADDR_LENGTH;i++)
     b28:	e5 30       	cpi	r30, 0x05	; 5
     b2a:	8c e1       	ldi	r24, 0x1C	; 28
     b2c:	f8 07       	cpc	r31, r24
     b2e:	d1 f7       	brne	.-12     	; 0xb24 <interface_username+0x40>
	{
		name[i] = ext_ram[i];
	}
	
	position = read_joystick_position(calibration);
     b30:	c3 01       	movw	r24, r6
     b32:	b2 01       	movw	r22, r4
     b34:	0e 94 1a 02 	call	0x434	; 0x434 <read_joystick_position>
	direction = read_joystick_direction(position);
     b38:	0e 94 5e 02 	call	0x4bc	; 0x4bc <read_joystick_direction>
     b3c:	18 2f       	mov	r17, r24
	change_y = change_yaxis(direction);
     b3e:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <change_yaxis>
	change_x = change_xaxis(direction);
     b42:	81 2f       	mov	r24, r17
     b44:	0e 94 dd 02 	call	0x5ba	; 0x5ba <change_xaxis>
	
	set_position(12, 0);
     b48:	60 e0       	ldi	r22, 0x00	; 0
     b4a:	70 e0       	ldi	r23, 0x00	; 0
     b4c:	8c e0       	ldi	r24, 0x0C	; 12
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
	print_string("Username");
     b54:	87 ea       	ldi	r24, 0xA7	; 167
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_string>
	revert_colour_line(0);
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	0e 94 a5 04 	call	0x94a	; 0x94a <revert_colour_line>
	
	set_position(4,4);
     b62:	64 e0       	ldi	r22, 0x04	; 4
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	84 e0       	ldi	r24, 0x04	; 4
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
	JoystickDirection direction;
	JoystickDirection change_y, change_x;
	ChangeTouchpadData change_touch_data;
	TouchpadData touch_data;
	char name[SRAM_USERNAME_ADDR_LENGTH];
	char index = 0;
     b6e:	91 2c       	mov	r9, r1
		{
			index = (index + 1) % 5;
		}
		else if (change_x == Left)
		{
			index = index == 0 ? 4 : (index - 1);
     b70:	68 94       	set
     b72:	22 24       	eor	r2, r2
     b74:	22 f8       	bld	r2, 2
		change_y = change_yaxis(direction);
		change_x = change_xaxis(direction);
		
		if (change_x == Right)
		{
			index = (index + 1) % 5;
     b76:	0f 2e       	mov	r0, r31
     b78:	f5 e0       	ldi	r31, 0x05	; 5
     b7a:	af 2e       	mov	r10, r31
     b7c:	b1 2c       	mov	r11, r1
     b7e:	f0 2d       	mov	r31, r0
		{
			name[index] = (name[index] == 'A') ? 'Z' : (name[index] - 1);
		}
		
		set_position(10,4);
		for (int i = 0; i < 5; i++)
     b80:	31 2c       	mov	r3, r1
     b82:	81 2c       	mov	r8, r1
	
	set_position(4,4);
	
	while (1)
	{
		position = read_joystick_position(calibration);
     b84:	c3 01       	movw	r24, r6
     b86:	b2 01       	movw	r22, r4
     b88:	0e 94 1a 02 	call	0x434	; 0x434 <read_joystick_position>
		direction = read_joystick_direction(position);
     b8c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <read_joystick_direction>
     b90:	18 2f       	mov	r17, r24
		change_y = change_yaxis(direction);
     b92:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <change_yaxis>
     b96:	08 2f       	mov	r16, r24
		change_x = change_xaxis(direction);
     b98:	81 2f       	mov	r24, r17
     b9a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <change_xaxis>
		
		if (change_x == Right)
     b9e:	81 30       	cpi	r24, 0x01	; 1
     ba0:	49 f4       	brne	.+18     	; 0xbb4 <interface_username+0xd0>
		{
			index = (index + 1) % 5;
     ba2:	29 2d       	mov	r18, r9
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	c9 01       	movw	r24, r18
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	b5 01       	movw	r22, r10
     bac:	0e 94 1d 0b 	call	0x163a	; 0x163a <__divmodhi4>
     bb0:	98 2e       	mov	r9, r24
     bb2:	07 c0       	rjmp	.+14     	; 0xbc2 <interface_username+0xde>
		}
		else if (change_x == Left)
     bb4:	81 11       	cpse	r24, r1
     bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <interface_username+0xde>
		{
			index = index == 0 ? 4 : (index - 1);
     bb8:	99 20       	and	r9, r9
     bba:	11 f0       	breq	.+4      	; 0xbc0 <interface_username+0xdc>
     bbc:	9a 94       	dec	r9
     bbe:	01 c0       	rjmp	.+2      	; 0xbc2 <interface_username+0xde>
     bc0:	92 2c       	mov	r9, r2
		}
		
		if (change_y == Up)
     bc2:	02 30       	cpi	r16, 0x02	; 2
     bc4:	b1 f4       	brne	.+44     	; 0xbf2 <interface_username+0x10e>
		{
			name[index] = (name[index] == 'Z') ? 'A' : (name[index] + 1);
     bc6:	89 2d       	mov	r24, r9
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	e7 e0       	ldi	r30, 0x07	; 7
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	ec 0f       	add	r30, r28
     bd0:	fd 1f       	adc	r31, r29
     bd2:	e8 0f       	add	r30, r24
     bd4:	f9 1f       	adc	r31, r25
     bd6:	20 81       	ld	r18, Z
     bd8:	2a 35       	cpi	r18, 0x5A	; 90
     bda:	11 f0       	breq	.+4      	; 0xbe0 <interface_username+0xfc>
     bdc:	2f 5f       	subi	r18, 0xFF	; 255
     bde:	01 c0       	rjmp	.+2      	; 0xbe2 <interface_username+0xfe>
     be0:	21 e4       	ldi	r18, 0x41	; 65
     be2:	e7 e0       	ldi	r30, 0x07	; 7
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	ec 0f       	add	r30, r28
     be8:	fd 1f       	adc	r31, r29
     bea:	e8 0f       	add	r30, r24
     bec:	f9 1f       	adc	r31, r25
     bee:	20 83       	st	Z, r18
     bf0:	17 c0       	rjmp	.+46     	; 0xc20 <interface_username+0x13c>
		}
		else if (change_y == Down)
     bf2:	03 30       	cpi	r16, 0x03	; 3
     bf4:	a9 f4       	brne	.+42     	; 0xc20 <interface_username+0x13c>
		{
			name[index] = (name[index] == 'A') ? 'Z' : (name[index] - 1);
     bf6:	89 2d       	mov	r24, r9
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	e7 e0       	ldi	r30, 0x07	; 7
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	ec 0f       	add	r30, r28
     c00:	fd 1f       	adc	r31, r29
     c02:	e8 0f       	add	r30, r24
     c04:	f9 1f       	adc	r31, r25
     c06:	20 81       	ld	r18, Z
     c08:	21 34       	cpi	r18, 0x41	; 65
     c0a:	11 f0       	breq	.+4      	; 0xc10 <interface_username+0x12c>
     c0c:	21 50       	subi	r18, 0x01	; 1
     c0e:	01 c0       	rjmp	.+2      	; 0xc12 <interface_username+0x12e>
     c10:	2a e5       	ldi	r18, 0x5A	; 90
     c12:	e7 e0       	ldi	r30, 0x07	; 7
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	ec 0f       	add	r30, r28
     c18:	fd 1f       	adc	r31, r29
     c1a:	e8 0f       	add	r30, r24
     c1c:	f9 1f       	adc	r31, r25
     c1e:	20 83       	st	Z, r18
		}
		
		set_position(10,4);
     c20:	64 e0       	ldi	r22, 0x04	; 4
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	8a e0       	ldi	r24, 0x0A	; 10
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
		for (int i = 0; i < 5; i++)
     c2c:	03 2d       	mov	r16, r3
     c2e:	18 2d       	mov	r17, r8
		{
			if (i == index)
     c30:	e9 2c       	mov	r14, r9
     c32:	f1 2c       	mov	r15, r1
			{
				print_inverted_char(name[i]);
     c34:	0f 2e       	mov	r0, r31
     c36:	f7 e0       	ldi	r31, 0x07	; 7
     c38:	cf 2e       	mov	r12, r31
     c3a:	d1 2c       	mov	r13, r1
     c3c:	f0 2d       	mov	r31, r0
     c3e:	cc 0e       	add	r12, r28
     c40:	dd 1e       	adc	r13, r29
     c42:	ce 0c       	add	r12, r14
     c44:	df 1c       	adc	r13, r15
		}
		
		set_position(10,4);
		for (int i = 0; i < 5; i++)
		{
			if (i == index)
     c46:	e0 16       	cp	r14, r16
     c48:	f1 06       	cpc	r15, r17
     c4a:	29 f4       	brne	.+10     	; 0xc56 <interface_username+0x172>
			{
				print_inverted_char(name[i]);
     c4c:	f6 01       	movw	r30, r12
     c4e:	80 81       	ld	r24, Z
     c50:	0e 94 31 04 	call	0x862	; 0x862 <print_inverted_char>
     c54:	09 c0       	rjmp	.+18     	; 0xc68 <interface_username+0x184>
     c56:	e7 e0       	ldi	r30, 0x07	; 7
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	ec 0f       	add	r30, r28
     c5c:	fd 1f       	adc	r31, r29
     c5e:	e0 0f       	add	r30, r16
     c60:	f1 1f       	adc	r31, r17
			}
			else
			{
				print_char(name[i]);
     c62:	80 81       	ld	r24, Z
     c64:	0e 94 05 04 	call	0x80a	; 0x80a <print_char>
			}
			print_char(' ');
     c68:	80 e2       	ldi	r24, 0x20	; 32
     c6a:	0e 94 05 04 	call	0x80a	; 0x80a <print_char>
		{
			name[index] = (name[index] == 'A') ? 'Z' : (name[index] - 1);
		}
		
		set_position(10,4);
		for (int i = 0; i < 5; i++)
     c6e:	0f 5f       	subi	r16, 0xFF	; 255
     c70:	1f 4f       	sbci	r17, 0xFF	; 255
     c72:	05 30       	cpi	r16, 0x05	; 5
     c74:	11 05       	cpc	r17, r1
     c76:	39 f7       	brne	.-50     	; 0xc46 <interface_username+0x162>
				print_char(name[i]);
			}
			print_char(' ');
		}
		
		refresh_oled();
     c78:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <refresh_oled>
		
		touch_data = read_touchpad_data();
     c7c:	0e 94 a3 02 	call	0x546	; 0x546 <read_touchpad_data>
     c80:	f4 2f       	mov	r31, r20
     c82:	e5 2f       	mov	r30, r21
     c84:	86 2f       	mov	r24, r22
     c86:	97 2f       	mov	r25, r23
     c88:	29 83       	std	Y+1, r18	; 0x01
     c8a:	3a 83       	std	Y+2, r19	; 0x02
     c8c:	fb 83       	std	Y+3, r31	; 0x03
     c8e:	ec 83       	std	Y+4, r30	; 0x04
     c90:	6d 83       	std	Y+5, r22	; 0x05
     c92:	7e 83       	std	Y+6, r23	; 0x06
		change_touch_data = change_touchpad_data(touch_data);
     c94:	42 2f       	mov	r20, r18
     c96:	53 2f       	mov	r21, r19
     c98:	6f 2f       	mov	r22, r31
     c9a:	7e 2f       	mov	r23, r30
     c9c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <change_touchpad_data>
		if (change_touch_data.rightButton)
     ca0:	88 23       	and	r24, r24
     ca2:	09 f4       	brne	.+2      	; 0xca6 <interface_username+0x1c2>
     ca4:	6f cf       	rjmp	.-290    	; 0xb84 <interface_username+0xa0>
     ca6:	de 01       	movw	r26, r28
     ca8:	17 96       	adiw	r26, 0x07	; 7
     caa:	e0 e0       	ldi	r30, 0x00	; 0
     cac:	fc e1       	ldi	r31, 0x1C	; 28
		{
			for(int i=0; i<SRAM_USERNAME_ADDR_LENGTH;i++)
			{
				ext_ram[i] = name[i];
     cae:	8d 91       	ld	r24, X+
     cb0:	81 93       	st	Z+, r24
		
		touch_data = read_touchpad_data();
		change_touch_data = change_touchpad_data(touch_data);
		if (change_touch_data.rightButton)
		{
			for(int i=0; i<SRAM_USERNAME_ADDR_LENGTH;i++)
     cb2:	e5 30       	cpi	r30, 0x05	; 5
     cb4:	8c e1       	ldi	r24, 0x1C	; 28
     cb6:	f8 07       	cpc	r31, r24
     cb8:	d1 f7       	brne	.-12     	; 0xcae <interface_username+0x1ca>
			}
			
			return State_NewGame;
		}
	}	
}
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	2b 96       	adiw	r28, 0x0b	; 11
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	de bf       	out	0x3e, r29	; 62
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	cd bf       	out	0x3d, r28	; 61
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	1f 91       	pop	r17
     cce:	0f 91       	pop	r16
     cd0:	ff 90       	pop	r15
     cd2:	ef 90       	pop	r14
     cd4:	df 90       	pop	r13
     cd6:	cf 90       	pop	r12
     cd8:	bf 90       	pop	r11
     cda:	af 90       	pop	r10
     cdc:	9f 90       	pop	r9
     cde:	8f 90       	pop	r8
     ce0:	7f 90       	pop	r7
     ce2:	6f 90       	pop	r6
     ce4:	5f 90       	pop	r5
     ce6:	4f 90       	pop	r4
     ce8:	3f 90       	pop	r3
     cea:	2f 90       	pop	r2
     cec:	08 95       	ret

00000cee <interface_new_game>:
* \brief Function call during the set new game phase
*
* \param in joystick calibration data
****************************************************************************/
InterfaceState interface_new_game(JoystickPosition calibration)
{
     cee:	af 92       	push	r10
     cf0:	bf 92       	push	r11
     cf2:	cf 92       	push	r12
     cf4:	df 92       	push	r13
     cf6:	ef 92       	push	r14
     cf8:	ff 92       	push	r15
     cfa:	0f 93       	push	r16
     cfc:	1f 93       	push	r17
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
     d02:	00 d0       	rcall	.+0      	; 0xd04 <interface_new_game+0x16>
     d04:	00 d0       	rcall	.+0      	; 0xd06 <interface_new_game+0x18>
     d06:	00 d0       	rcall	.+0      	; 0xd08 <interface_new_game+0x1a>
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
     d0c:	6b 01       	movw	r12, r22
     d0e:	7c 01       	movw	r14, r24
	JoystickDirection change_y, change_x;
	ChangeTouchpadData change_touch_data;
	TouchpadData touch_data;
	char scr_position = 0;
	
	position = read_joystick_position(calibration);
     d10:	0e 94 1a 02 	call	0x434	; 0x434 <read_joystick_position>
	direction = read_joystick_direction(position);
     d14:	0e 94 5e 02 	call	0x4bc	; 0x4bc <read_joystick_direction>
     d18:	18 2f       	mov	r17, r24
	change_y = change_yaxis(direction);
     d1a:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <change_yaxis>
	change_x = change_xaxis(direction);
     d1e:	81 2f       	mov	r24, r17
     d20:	0e 94 dd 02 	call	0x5ba	; 0x5ba <change_xaxis>
	
	set_position(13, 0);
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	8d e0       	ldi	r24, 0x0D	; 13
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
	print_string("New game");
     d30:	87 e5       	ldi	r24, 0x57	; 87
     d32:	91 e0       	ldi	r25, 0x01	; 1
     d34:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_string>
	revert_colour_line(0);
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	0e 94 a5 04 	call	0x94a	; 0x94a <revert_colour_line>
	set_position(3, 2);
     d3e:	62 e0       	ldi	r22, 0x02	; 2
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	83 e0       	ldi	r24, 0x03	; 3
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
	print_string("Tutorial");
     d4a:	80 e6       	ldi	r24, 0x60	; 96
     d4c:	91 e0       	ldi	r25, 0x01	; 1
     d4e:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_string>
	set_position(3, 3);
     d52:	63 e0       	ldi	r22, 0x03	; 3
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	83 e0       	ldi	r24, 0x03	; 3
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
	print_string("Easy");
     d5e:	89 e6       	ldi	r24, 0x69	; 105
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_string>
	set_position(3, 4);
     d66:	64 e0       	ldi	r22, 0x04	; 4
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	83 e0       	ldi	r24, 0x03	; 3
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
	print_string("Normal");
     d72:	8e e6       	ldi	r24, 0x6E	; 110
     d74:	91 e0       	ldi	r25, 0x01	; 1
     d76:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_string>
	set_position(3, 5);
     d7a:	65 e0       	ldi	r22, 0x05	; 5
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	83 e0       	ldi	r24, 0x03	; 3
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
	print_string("Hard");
     d86:	85 e7       	ldi	r24, 0x75	; 117
     d88:	91 e0       	ldi	r25, 0x01	; 1
     d8a:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_string>
	set_position(3, 6);
     d8e:	66 e0       	ldi	r22, 0x06	; 6
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	83 e0       	ldi	r24, 0x03	; 3
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
	print_string("Insane");
     d9a:	8a e7       	ldi	r24, 0x7A	; 122
     d9c:	91 e0       	ldi	r25, 0x01	; 1
     d9e:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_string>
	JoystickPosition position;
	JoystickDirection direction;
	JoystickDirection change_y, change_x;
	ChangeTouchpadData change_touch_data;
	TouchpadData touch_data;
	char scr_position = 0;
     da2:	10 e0       	ldi	r17, 0x00	; 0
			print_char(' ');
			scr_position--;
		}
		else if (change_y == Down)
		{
			set_position(1, (scr_position % 5) + 2);
     da4:	0d ec       	ldi	r16, 0xCD	; 205
	set_position(3, 6);
	print_string("Insane");
	
	while(1)
	{
		position = read_joystick_position(calibration);
     da6:	c7 01       	movw	r24, r14
     da8:	b6 01       	movw	r22, r12
     daa:	0e 94 1a 02 	call	0x434	; 0x434 <read_joystick_position>
		direction = read_joystick_direction(position);
     dae:	0e 94 5e 02 	call	0x4bc	; 0x4bc <read_joystick_direction>
     db2:	b8 2e       	mov	r11, r24
		change_y = change_yaxis(direction);
     db4:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <change_yaxis>
     db8:	a8 2e       	mov	r10, r24
		change_x = change_xaxis(direction);
     dba:	8b 2d       	mov	r24, r11
     dbc:	0e 94 dd 02 	call	0x5ba	; 0x5ba <change_xaxis>
		
		if (change_x == Right)
     dc0:	81 30       	cpi	r24, 0x01	; 1
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <interface_new_game+0xd8>
     dc4:	71 c0       	rjmp	.+226    	; 0xea8 <interface_new_game+0x1ba>
		{
			return State_Options;
		}
		else if (change_x == Left)
     dc6:	88 23       	and	r24, r24
     dc8:	09 f4       	brne	.+2      	; 0xdcc <interface_new_game+0xde>
     dca:	70 c0       	rjmp	.+224    	; 0xeac <interface_new_game+0x1be>
		{
			return State_HighScores;
		}
		
		if (change_y == Up)
     dcc:	82 e0       	ldi	r24, 0x02	; 2
     dce:	a8 12       	cpse	r10, r24
     dd0:	17 c0       	rjmp	.+46     	; 0xe00 <interface_new_game+0x112>
		{
			set_position(1, (scr_position % 5) + 2);
     dd2:	10 9f       	mul	r17, r16
     dd4:	81 2d       	mov	r24, r1
     dd6:	11 24       	eor	r1, r1
     dd8:	86 95       	lsr	r24
     dda:	86 95       	lsr	r24
     ddc:	98 2f       	mov	r25, r24
     dde:	99 0f       	add	r25, r25
     de0:	99 0f       	add	r25, r25
     de2:	89 0f       	add	r24, r25
     de4:	61 2f       	mov	r22, r17
     de6:	68 1b       	sub	r22, r24
     de8:	70 e0       	ldi	r23, 0x00	; 0
     dea:	6e 5f       	subi	r22, 0xFE	; 254
     dec:	7f 4f       	sbci	r23, 0xFF	; 255
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
			print_char(' ');
     df6:	80 e2       	ldi	r24, 0x20	; 32
     df8:	0e 94 05 04 	call	0x80a	; 0x80a <print_char>
			scr_position--;
     dfc:	11 50       	subi	r17, 0x01	; 1
     dfe:	19 c0       	rjmp	.+50     	; 0xe32 <interface_new_game+0x144>
		}
		else if (change_y == Down)
     e00:	83 e0       	ldi	r24, 0x03	; 3
     e02:	a8 12       	cpse	r10, r24
     e04:	16 c0       	rjmp	.+44     	; 0xe32 <interface_new_game+0x144>
		{
			set_position(1, (scr_position % 5) + 2);
     e06:	10 9f       	mul	r17, r16
     e08:	81 2d       	mov	r24, r1
     e0a:	11 24       	eor	r1, r1
     e0c:	86 95       	lsr	r24
     e0e:	86 95       	lsr	r24
     e10:	98 2f       	mov	r25, r24
     e12:	99 0f       	add	r25, r25
     e14:	99 0f       	add	r25, r25
     e16:	89 0f       	add	r24, r25
     e18:	61 2f       	mov	r22, r17
     e1a:	68 1b       	sub	r22, r24
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	6e 5f       	subi	r22, 0xFE	; 254
     e20:	7f 4f       	sbci	r23, 0xFF	; 255
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
			print_char(' ');
     e2a:	80 e2       	ldi	r24, 0x20	; 32
     e2c:	0e 94 05 04 	call	0x80a	; 0x80a <print_char>
			scr_position++;
     e30:	1f 5f       	subi	r17, 0xFF	; 255
		}
		
		set_position(1, (scr_position % 5) + 2);
     e32:	10 9f       	mul	r17, r16
     e34:	81 2d       	mov	r24, r1
     e36:	11 24       	eor	r1, r1
     e38:	86 95       	lsr	r24
     e3a:	86 95       	lsr	r24
     e3c:	98 2f       	mov	r25, r24
     e3e:	99 0f       	add	r25, r25
     e40:	99 0f       	add	r25, r25
     e42:	89 0f       	add	r24, r25
     e44:	61 2f       	mov	r22, r17
     e46:	68 1b       	sub	r22, r24
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	6e 5f       	subi	r22, 0xFE	; 254
     e4c:	7f 4f       	sbci	r23, 0xFF	; 255
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
		print_char('#');
     e56:	83 e2       	ldi	r24, 0x23	; 35
     e58:	0e 94 05 04 	call	0x80a	; 0x80a <print_char>
		
		touch_data = read_touchpad_data();
     e5c:	0e 94 a3 02 	call	0x546	; 0x546 <read_touchpad_data>
     e60:	f4 2f       	mov	r31, r20
     e62:	e5 2f       	mov	r30, r21
     e64:	86 2f       	mov	r24, r22
     e66:	97 2f       	mov	r25, r23
		change_touch_data = change_touchpad_data(touch_data);
     e68:	42 2f       	mov	r20, r18
     e6a:	53 2f       	mov	r21, r19
     e6c:	6f 2f       	mov	r22, r31
     e6e:	7e 2f       	mov	r23, r30
     e70:	0e 94 fd 02 	call	0x5fa	; 0x5fa <change_touchpad_data>
		if (change_touch_data.rightButton)
     e74:	88 23       	and	r24, r24
     e76:	a9 f0       	breq	.+42     	; 0xea2 <interface_new_game+0x1b4>
		{
			switch(scr_position)
     e78:	12 30       	cpi	r17, 0x02	; 2
     e7a:	69 f0       	breq	.+26     	; 0xe96 <interface_new_game+0x1a8>
     e7c:	28 f4       	brcc	.+10     	; 0xe88 <interface_new_game+0x19a>
     e7e:	11 23       	and	r17, r17
     e80:	41 f0       	breq	.+16     	; 0xe92 <interface_new_game+0x1a4>
     e82:	11 30       	cpi	r17, 0x01	; 1
     e84:	a9 f0       	breq	.+42     	; 0xeb0 <interface_new_game+0x1c2>
     e86:	0d c0       	rjmp	.+26     	; 0xea2 <interface_new_game+0x1b4>
     e88:	13 30       	cpi	r17, 0x03	; 3
     e8a:	39 f0       	breq	.+14     	; 0xe9a <interface_new_game+0x1ac>
     e8c:	14 30       	cpi	r17, 0x04	; 4
     e8e:	39 f0       	breq	.+14     	; 0xe9e <interface_new_game+0x1b0>
     e90:	08 c0       	rjmp	.+16     	; 0xea2 <interface_new_game+0x1b4>
			{
				case 0:
					return State_Tutorial;
     e92:	82 e0       	ldi	r24, 0x02	; 2
     e94:	0e c0       	rjmp	.+28     	; 0xeb2 <interface_new_game+0x1c4>
				case 1:
					return State_Easy;
				case 2:
					return State_Normal;
     e96:	84 e0       	ldi	r24, 0x04	; 4
     e98:	0c c0       	rjmp	.+24     	; 0xeb2 <interface_new_game+0x1c4>
				case 3:
					return State_Hard;
     e9a:	85 e0       	ldi	r24, 0x05	; 5
     e9c:	0a c0       	rjmp	.+20     	; 0xeb2 <interface_new_game+0x1c4>
				case 4:
					return State_Insane;
     e9e:	86 e0       	ldi	r24, 0x06	; 6
     ea0:	08 c0       	rjmp	.+16     	; 0xeb2 <interface_new_game+0x1c4>
			}
		}
		refresh_oled();
     ea2:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <refresh_oled>
	}
     ea6:	7f cf       	rjmp	.-258    	; 0xda6 <interface_new_game+0xb8>
		change_y = change_yaxis(direction);
		change_x = change_xaxis(direction);
		
		if (change_x == Right)
		{
			return State_Options;
     ea8:	87 e0       	ldi	r24, 0x07	; 7
     eaa:	03 c0       	rjmp	.+6      	; 0xeb2 <interface_new_game+0x1c4>
		}
		else if (change_x == Left)
		{
			return State_HighScores;
     eac:	88 e0       	ldi	r24, 0x08	; 8
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <interface_new_game+0x1c4>
			switch(scr_position)
			{
				case 0:
					return State_Tutorial;
				case 1:
					return State_Easy;
     eb0:	83 e0       	ldi	r24, 0x03	; 3
					return State_Insane;
			}
		}
		refresh_oled();
	}
}
     eb2:	26 96       	adiw	r28, 0x06	; 6
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	1f 91       	pop	r17
     ec4:	0f 91       	pop	r16
     ec6:	ff 90       	pop	r15
     ec8:	ef 90       	pop	r14
     eca:	df 90       	pop	r13
     ecc:	cf 90       	pop	r12
     ece:	bf 90       	pop	r11
     ed0:	af 90       	pop	r10
     ed2:	08 95       	ret

00000ed4 <interface_high_scores>:
* TODO EEPROM reading the high scores
*
* \param in joystick calibration data
****************************************************************************/
InterfaceState interface_high_scores(JoystickPosition calibration)
{
     ed4:	cf 92       	push	r12
     ed6:	df 92       	push	r13
     ed8:	ef 92       	push	r14
     eda:	ff 92       	push	r15
     edc:	6b 01       	movw	r12, r22
     ede:	7c 01       	movw	r14, r24
	JoystickDirection direction;
	JoystickDirection change_x;
	char scr_position = 0;
	volatile char *eeprom = (char *) EEPROM_HIGH_SCORES_BASE_ADDR;
	
	position = read_joystick_position(calibration);
     ee0:	0e 94 1a 02 	call	0x434	; 0x434 <read_joystick_position>
	direction = read_joystick_direction(position);
     ee4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <read_joystick_direction>
	change_x = change_xaxis(direction);
     ee8:	0e 94 dd 02 	call	0x5ba	; 0x5ba <change_xaxis>
	
	set_position(9,0);
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	89 e0       	ldi	r24, 0x09	; 9
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
	print_string("High Scores");
     ef8:	81 e8       	ldi	r24, 0x81	; 129
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_string>
	revert_colour_line(0);
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	0e 94 a5 04 	call	0x94a	; 0x94a <revert_colour_line>
		}
		eeprom_busy_wait();
		printf(": %d\n", eeprom_read_dword(eeprom[j + 5]));
	}*/
	
	refresh_oled();
     f06:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <refresh_oled>
	
	while(1)
	{
		position = read_joystick_position(calibration);
     f0a:	c7 01       	movw	r24, r14
     f0c:	b6 01       	movw	r22, r12
     f0e:	0e 94 1a 02 	call	0x434	; 0x434 <read_joystick_position>
		direction = read_joystick_direction(position);
     f12:	0e 94 5e 02 	call	0x4bc	; 0x4bc <read_joystick_direction>
		change_x = change_xaxis(direction);
     f16:	0e 94 dd 02 	call	0x5ba	; 0x5ba <change_xaxis>
		
		if (change_x == Right)
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	19 f0       	breq	.+6      	; 0xf24 <interface_high_scores+0x50>
		{
			return State_NewGame;
		}
		else if (change_x == Left)
     f1e:	81 11       	cpse	r24, r1
     f20:	f4 cf       	rjmp	.-24     	; 0xf0a <interface_high_scores+0x36>
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <interface_high_scores+0x54>
		direction = read_joystick_direction(position);
		change_x = change_xaxis(direction);
		
		if (change_x == Right)
		{
			return State_NewGame;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	01 c0       	rjmp	.+2      	; 0xf2a <interface_high_scores+0x56>
		}
		else if (change_x == Left)
		{
			return State_Options;
     f28:	87 e0       	ldi	r24, 0x07	; 7
		}
	}
		
}
     f2a:	ff 90       	pop	r15
     f2c:	ef 90       	pop	r14
     f2e:	df 90       	pop	r13
     f30:	cf 90       	pop	r12
     f32:	08 95       	ret

00000f34 <interface_options>:
* \brief Function call during the options phase
*
* \param in joystick calibration data
****************************************************************************/
InterfaceState interface_options(JoystickPosition calibration)
{
     f34:	af 92       	push	r10
     f36:	bf 92       	push	r11
     f38:	cf 92       	push	r12
     f3a:	df 92       	push	r13
     f3c:	ef 92       	push	r14
     f3e:	ff 92       	push	r15
     f40:	0f 93       	push	r16
     f42:	1f 93       	push	r17
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	00 d0       	rcall	.+0      	; 0xf4a <interface_options+0x16>
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <interface_options+0x18>
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <interface_options+0x1a>
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	6b 01       	movw	r12, r22
     f54:	7c 01       	movw	r14, r24
	JoystickDirection change_y, change_x;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	char scr_position = 0;
	
	position = read_joystick_position(calibration);
     f56:	0e 94 1a 02 	call	0x434	; 0x434 <read_joystick_position>
	direction = read_joystick_direction(position);
     f5a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <read_joystick_direction>
     f5e:	18 2f       	mov	r17, r24
	change_y = change_yaxis(direction);
     f60:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <change_yaxis>
	change_x = change_xaxis(direction);
     f64:	81 2f       	mov	r24, r17
     f66:	0e 94 dd 02 	call	0x5ba	; 0x5ba <change_xaxis>

	set_position(12,0);
     f6a:	60 e0       	ldi	r22, 0x00	; 0
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	8c e0       	ldi	r24, 0x0C	; 12
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
	print_string("Options");
     f76:	8d e8       	ldi	r24, 0x8D	; 141
     f78:	91 e0       	ldi	r25, 0x01	; 1
     f7a:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_string>
	revert_colour_line(0);
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	0e 94 a5 04 	call	0x94a	; 0x94a <revert_colour_line>
	set_position(3,3);
     f84:	63 e0       	ldi	r22, 0x03	; 3
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	83 e0       	ldi	r24, 0x03	; 3
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
	print_string("Mode");
     f90:	85 e9       	ldi	r24, 0x95	; 149
     f92:	91 e0       	ldi	r25, 0x01	; 1
     f94:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_string>
	set_position(3,4);
     f98:	64 e0       	ldi	r22, 0x04	; 4
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	83 e0       	ldi	r24, 0x03	; 3
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
	print_string("Sound");
     fa4:	8a e9       	ldi	r24, 0x9A	; 154
     fa6:	91 e0       	ldi	r25, 0x01	; 1
     fa8:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_string>
	set_position(3,5);
     fac:	65 e0       	ldi	r22, 0x05	; 5
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	83 e0       	ldi	r24, 0x03	; 3
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
	print_string("Change Username");
     fb8:	80 ea       	ldi	r24, 0xA0	; 160
     fba:	91 e0       	ldi	r25, 0x01	; 1
     fbc:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_string>
	JoystickPosition position;
	JoystickDirection direction;
	JoystickDirection change_y, change_x;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	char scr_position = 0;
     fc0:	10 e0       	ldi	r17, 0x00	; 0
			print_char(' ');
			scr_position--;
		}
		else if (change_y == Down)
		{
			set_position(1, (scr_position % 3) + 3);
     fc2:	0f 2e       	mov	r0, r31
     fc4:	fb ea       	ldi	r31, 0xAB	; 171
     fc6:	af 2e       	mov	r10, r31
     fc8:	f0 2d       	mov	r31, r0
	set_position(3,5);
	print_string("Change Username");
	
	while(1)
	{
		position = read_joystick_position(calibration);
     fca:	c7 01       	movw	r24, r14
     fcc:	b6 01       	movw	r22, r12
     fce:	0e 94 1a 02 	call	0x434	; 0x434 <read_joystick_position>
		direction = read_joystick_direction(position);
     fd2:	0e 94 5e 02 	call	0x4bc	; 0x4bc <read_joystick_direction>
     fd6:	b8 2e       	mov	r11, r24
		change_y = change_yaxis(direction);
     fd8:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <change_yaxis>
     fdc:	08 2f       	mov	r16, r24
		change_x = change_xaxis(direction);
     fde:	8b 2d       	mov	r24, r11
     fe0:	0e 94 dd 02 	call	0x5ba	; 0x5ba <change_xaxis>
		
		if (change_x == Right)
     fe4:	81 30       	cpi	r24, 0x01	; 1
     fe6:	09 f4       	brne	.+2      	; 0xfea <interface_options+0xb6>
     fe8:	5e c0       	rjmp	.+188    	; 0x10a6 <interface_options+0x172>
		{
			return State_HighScores;
		}
		else if (change_x == Left)
     fea:	88 23       	and	r24, r24
     fec:	09 f4       	brne	.+2      	; 0xff0 <interface_options+0xbc>
     fee:	5d c0       	rjmp	.+186    	; 0x10aa <interface_options+0x176>
		{
			return State_NewGame;
		}
		
		if (change_y == Up)
     ff0:	02 30       	cpi	r16, 0x02	; 2
     ff2:	a9 f4       	brne	.+42     	; 0x101e <interface_options+0xea>
		{
			set_position(1, (scr_position % 3) + 3);
     ff4:	1a 9d       	mul	r17, r10
     ff6:	81 2d       	mov	r24, r1
     ff8:	11 24       	eor	r1, r1
     ffa:	86 95       	lsr	r24
     ffc:	98 2f       	mov	r25, r24
     ffe:	99 0f       	add	r25, r25
    1000:	89 0f       	add	r24, r25
    1002:	61 2f       	mov	r22, r17
    1004:	68 1b       	sub	r22, r24
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	6d 5f       	subi	r22, 0xFD	; 253
    100a:	7f 4f       	sbci	r23, 0xFF	; 255
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
			print_char(' ');
    1014:	80 e2       	ldi	r24, 0x20	; 32
    1016:	0e 94 05 04 	call	0x80a	; 0x80a <print_char>
			scr_position--;
    101a:	11 50       	subi	r17, 0x01	; 1
    101c:	16 c0       	rjmp	.+44     	; 0x104a <interface_options+0x116>
		}
		else if (change_y == Down)
    101e:	03 30       	cpi	r16, 0x03	; 3
    1020:	a1 f4       	brne	.+40     	; 0x104a <interface_options+0x116>
		{
			set_position(1, (scr_position % 3) + 3);
    1022:	1a 9d       	mul	r17, r10
    1024:	81 2d       	mov	r24, r1
    1026:	11 24       	eor	r1, r1
    1028:	86 95       	lsr	r24
    102a:	98 2f       	mov	r25, r24
    102c:	99 0f       	add	r25, r25
    102e:	89 0f       	add	r24, r25
    1030:	61 2f       	mov	r22, r17
    1032:	68 1b       	sub	r22, r24
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	6d 5f       	subi	r22, 0xFD	; 253
    1038:	7f 4f       	sbci	r23, 0xFF	; 255
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
			print_char(' ');
    1042:	80 e2       	ldi	r24, 0x20	; 32
    1044:	0e 94 05 04 	call	0x80a	; 0x80a <print_char>
			scr_position++;
    1048:	1f 5f       	subi	r17, 0xFF	; 255
		}
		
		set_position(1, (scr_position % 3) + 3);
    104a:	1a 9d       	mul	r17, r10
    104c:	81 2d       	mov	r24, r1
    104e:	11 24       	eor	r1, r1
    1050:	86 95       	lsr	r24
    1052:	98 2f       	mov	r25, r24
    1054:	99 0f       	add	r25, r25
    1056:	89 0f       	add	r24, r25
    1058:	61 2f       	mov	r22, r17
    105a:	68 1b       	sub	r22, r24
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	6d 5f       	subi	r22, 0xFD	; 253
    1060:	7f 4f       	sbci	r23, 0xFF	; 255
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
		print_char('#');
    106a:	83 e2       	ldi	r24, 0x23	; 35
    106c:	0e 94 05 04 	call	0x80a	; 0x80a <print_char>
		
		touch_data = read_touchpad_data();
    1070:	0e 94 a3 02 	call	0x546	; 0x546 <read_touchpad_data>
    1074:	f4 2f       	mov	r31, r20
    1076:	e5 2f       	mov	r30, r21
    1078:	86 2f       	mov	r24, r22
    107a:	97 2f       	mov	r25, r23
		change_touch_data = change_touchpad_data(touch_data);
    107c:	42 2f       	mov	r20, r18
    107e:	53 2f       	mov	r21, r19
    1080:	6f 2f       	mov	r22, r31
    1082:	7e 2f       	mov	r23, r30
    1084:	0e 94 fd 02 	call	0x5fa	; 0x5fa <change_touchpad_data>
		if (change_touch_data.rightButton)
    1088:	88 23       	and	r24, r24
    108a:	51 f0       	breq	.+20     	; 0x10a0 <interface_options+0x16c>
		{
			switch(scr_position)
    108c:	11 30       	cpi	r17, 0x01	; 1
    108e:	79 f0       	breq	.+30     	; 0x10ae <interface_options+0x17a>
    1090:	18 f0       	brcs	.+6      	; 0x1098 <interface_options+0x164>
    1092:	12 30       	cpi	r17, 0x02	; 2
    1094:	19 f0       	breq	.+6      	; 0x109c <interface_options+0x168>
    1096:	04 c0       	rjmp	.+8      	; 0x10a0 <interface_options+0x16c>
			{
				case 0:
					return State_Mode;
    1098:	8a e0       	ldi	r24, 0x0A	; 10
    109a:	0a c0       	rjmp	.+20     	; 0x10b0 <interface_options+0x17c>
				case 1:
					return State_Sound;
				case 2:
					return State_Username;
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	08 c0       	rjmp	.+16     	; 0x10b0 <interface_options+0x17c>
			}
		}
		refresh_oled();
    10a0:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <refresh_oled>
	}
    10a4:	92 cf       	rjmp	.-220    	; 0xfca <interface_options+0x96>
		change_y = change_yaxis(direction);
		change_x = change_xaxis(direction);
		
		if (change_x == Right)
		{
			return State_HighScores;
    10a6:	88 e0       	ldi	r24, 0x08	; 8
    10a8:	03 c0       	rjmp	.+6      	; 0x10b0 <interface_options+0x17c>
		}
		else if (change_x == Left)
		{
			return State_NewGame;
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	01 c0       	rjmp	.+2      	; 0x10b0 <interface_options+0x17c>
			switch(scr_position)
			{
				case 0:
					return State_Mode;
				case 1:
					return State_Sound;
    10ae:	89 e0       	ldi	r24, 0x09	; 9
					return State_Username;
			}
		}
		refresh_oled();
	}
}
    10b0:	26 96       	adiw	r28, 0x06	; 6
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	f8 94       	cli
    10b6:	de bf       	out	0x3e, r29	; 62
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	cd bf       	out	0x3d, r28	; 61
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	ff 90       	pop	r15
    10c6:	ef 90       	pop	r14
    10c8:	df 90       	pop	r13
    10ca:	cf 90       	pop	r12
    10cc:	bf 90       	pop	r11
    10ce:	af 90       	pop	r10
    10d0:	08 95       	ret

000010d2 <interface_mode>:
* \brief Function call during the set mode phase
*
* \param in joystick calibration data
****************************************************************************/
InterfaceState interface_mode(JoystickPosition calibration)
{
    10d2:	7f 92       	push	r7
    10d4:	8f 92       	push	r8
    10d6:	9f 92       	push	r9
    10d8:	af 92       	push	r10
    10da:	bf 92       	push	r11
    10dc:	cf 92       	push	r12
    10de:	df 92       	push	r13
    10e0:	ef 92       	push	r14
    10e2:	ff 92       	push	r15
    10e4:	0f 93       	push	r16
    10e6:	1f 93       	push	r17
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
    10ec:	00 d0       	rcall	.+0      	; 0x10ee <interface_mode+0x1c>
    10ee:	00 d0       	rcall	.+0      	; 0x10f0 <interface_mode+0x1e>
    10f0:	00 d0       	rcall	.+0      	; 0x10f2 <interface_mode+0x20>
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	4b 01       	movw	r8, r22
    10f8:	5c 01       	movw	r10, r24
	JoystickDirection change_y;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	char scr_position = 0;
	
	position = read_joystick_position(calibration);
    10fa:	0e 94 1a 02 	call	0x434	; 0x434 <read_joystick_position>
	direction = read_joystick_direction(position);
    10fe:	0e 94 5e 02 	call	0x4bc	; 0x4bc <read_joystick_direction>
	change_y = change_yaxis(direction);
    1102:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <change_yaxis>

	set_position(14,0);
    1106:	60 e0       	ldi	r22, 0x00	; 0
    1108:	70 e0       	ldi	r23, 0x00	; 0
    110a:	8e e0       	ldi	r24, 0x0E	; 14
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
	print_string("Mode");
    1112:	85 e9       	ldi	r24, 0x95	; 149
    1114:	91 e0       	ldi	r25, 0x01	; 1
    1116:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_string>
	revert_colour_line(0);
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	0e 94 a5 04 	call	0x94a	; 0x94a <revert_colour_line>
	set_position(3,3);
    1120:	63 e0       	ldi	r22, 0x03	; 3
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	83 e0       	ldi	r24, 0x03	; 3
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
	print_string("Reverse");
    112c:	80 eb       	ldi	r24, 0xB0	; 176
    112e:	91 e0       	ldi	r25, 0x01	; 1
    1130:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_string>
	set_position(3,5);
    1134:	65 e0       	ldi	r22, 0x05	; 5
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	83 e0       	ldi	r24, 0x03	; 3
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
	print_string("Normal");
    1140:	8e e6       	ldi	r24, 0x6E	; 110
    1142:	91 e0       	ldi	r25, 0x01	; 1
    1144:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_string>
	
	
	set_position(1, (scr_position % 2) * 2 + 3);
    1148:	63 e0       	ldi	r22, 0x03	; 3
    114a:	70 e0       	ldi	r23, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
	print_char('#');
    1154:	83 e2       	ldi	r24, 0x23	; 35
    1156:	0e 94 05 04 	call	0x80a	; 0x80a <print_char>
	JoystickPosition position;
	JoystickDirection direction;
	JoystickDirection change_y;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	char scr_position = 0;
    115a:	71 2c       	mov	r7, r1
	set_position(1, (scr_position % 2) * 2 + 3);
	print_char('#');
	
	while(1)
	{
		position = read_joystick_position(calibration);
    115c:	c5 01       	movw	r24, r10
    115e:	b4 01       	movw	r22, r8
    1160:	0e 94 1a 02 	call	0x434	; 0x434 <read_joystick_position>
		direction = read_joystick_direction(position);
    1164:	0e 94 5e 02 	call	0x4bc	; 0x4bc <read_joystick_direction>
		change_y = change_yaxis(direction);
    1168:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <change_yaxis>
		
		if (change_y == Up)
    116c:	82 30       	cpi	r24, 0x02	; 2
    116e:	91 f4       	brne	.+36     	; 0x1194 <interface_mode+0xc2>
		{
			set_position(1, (scr_position % 2) * 2 + 3);
    1170:	70 fa       	bst	r7, 0
    1172:	ee 24       	eor	r14, r14
    1174:	e0 f8       	bld	r14, 0
    1176:	f1 2c       	mov	r15, r1
    1178:	b7 01       	movw	r22, r14
    117a:	66 0f       	add	r22, r22
    117c:	77 1f       	adc	r23, r23
    117e:	6d 5f       	subi	r22, 0xFD	; 253
    1180:	7f 4f       	sbci	r23, 0xFF	; 255
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
			print_char(' ');
    118a:	80 e2       	ldi	r24, 0x20	; 32
    118c:	0e 94 05 04 	call	0x80a	; 0x80a <print_char>
			scr_position--;
    1190:	7a 94       	dec	r7
    1192:	13 c0       	rjmp	.+38     	; 0x11ba <interface_mode+0xe8>
		}
		else if (change_y == Down)
    1194:	83 30       	cpi	r24, 0x03	; 3
    1196:	89 f4       	brne	.+34     	; 0x11ba <interface_mode+0xe8>
		{
			set_position(1, (scr_position % 2) * 2 + 3);
    1198:	70 fa       	bst	r7, 0
    119a:	cc 24       	eor	r12, r12
    119c:	c0 f8       	bld	r12, 0
    119e:	d1 2c       	mov	r13, r1
    11a0:	b6 01       	movw	r22, r12
    11a2:	66 0f       	add	r22, r22
    11a4:	77 1f       	adc	r23, r23
    11a6:	6d 5f       	subi	r22, 0xFD	; 253
    11a8:	7f 4f       	sbci	r23, 0xFF	; 255
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
			print_char(' ');
    11b2:	80 e2       	ldi	r24, 0x20	; 32
    11b4:	0e 94 05 04 	call	0x80a	; 0x80a <print_char>
			scr_position++;
    11b8:	73 94       	inc	r7
		}
		
		set_position(1, (scr_position % 2) * 2 + 3);
    11ba:	07 2d       	mov	r16, r7
    11bc:	01 70       	andi	r16, 0x01	; 1
    11be:	10 e0       	ldi	r17, 0x00	; 0
    11c0:	b8 01       	movw	r22, r16
    11c2:	66 0f       	add	r22, r22
    11c4:	77 1f       	adc	r23, r23
    11c6:	6d 5f       	subi	r22, 0xFD	; 253
    11c8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
		print_char('#');
    11d2:	83 e2       	ldi	r24, 0x23	; 35
    11d4:	0e 94 05 04 	call	0x80a	; 0x80a <print_char>
		
		touch_data = read_touchpad_data();
    11d8:	0e 94 a3 02 	call	0x546	; 0x546 <read_touchpad_data>
    11dc:	f4 2f       	mov	r31, r20
    11de:	e5 2f       	mov	r30, r21
    11e0:	86 2f       	mov	r24, r22
    11e2:	97 2f       	mov	r25, r23
		change_touch_data = change_touchpad_data(touch_data);
    11e4:	42 2f       	mov	r20, r18
    11e6:	53 2f       	mov	r21, r19
    11e8:	6f 2f       	mov	r22, r31
    11ea:	7e 2f       	mov	r23, r30
    11ec:	0e 94 fd 02 	call	0x5fa	; 0x5fa <change_touchpad_data>
		if (change_touch_data.rightButton)
    11f0:	88 23       	and	r24, r24
    11f2:	81 f0       	breq	.+32     	; 0x1214 <interface_mode+0x142>
		{
			switch(scr_position)
    11f4:	77 20       	and	r7, r7
    11f6:	21 f0       	breq	.+8      	; 0x1200 <interface_mode+0x12e>
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	78 16       	cp	r7, r24
    11fc:	31 f0       	breq	.+12     	; 0x120a <interface_mode+0x138>
    11fe:	0d c0       	rjmp	.+26     	; 0x121a <interface_mode+0x148>
			{
				case 0:
					printf("Normal\n");
    1200:	8e e6       	ldi	r24, 0x6E	; 110
    1202:	91 e0       	ldi	r25, 0x01	; 1
    1204:	0e 94 aa 0b 	call	0x1754	; 0x1754 <puts>
					break;
    1208:	08 c0       	rjmp	.+16     	; 0x121a <interface_mode+0x148>
				case 1:
					printf("Reverse\n");
    120a:	80 eb       	ldi	r24, 0xB0	; 176
    120c:	91 e0       	ldi	r25, 0x01	; 1
    120e:	0e 94 aa 0b 	call	0x1754	; 0x1754 <puts>
					break;
    1212:	03 c0       	rjmp	.+6      	; 0x121a <interface_mode+0x148>
			}
			return State_Options;
		}
		refresh_oled();
    1214:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <refresh_oled>
	}
    1218:	a1 cf       	rjmp	.-190    	; 0x115c <interface_mode+0x8a>
}
    121a:	87 e0       	ldi	r24, 0x07	; 7
    121c:	26 96       	adiw	r28, 0x06	; 6
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	ff 90       	pop	r15
    1232:	ef 90       	pop	r14
    1234:	df 90       	pop	r13
    1236:	cf 90       	pop	r12
    1238:	bf 90       	pop	r11
    123a:	af 90       	pop	r10
    123c:	9f 90       	pop	r9
    123e:	8f 90       	pop	r8
    1240:	7f 90       	pop	r7
    1242:	08 95       	ret

00001244 <interface_sound>:
* \brief Function call during the set sound phase
*
* \param in joystick calibration data
****************************************************************************/
InterfaceState interface_sound(JoystickPosition calibration)
{
    1244:	7f 92       	push	r7
    1246:	8f 92       	push	r8
    1248:	9f 92       	push	r9
    124a:	af 92       	push	r10
    124c:	bf 92       	push	r11
    124e:	cf 92       	push	r12
    1250:	df 92       	push	r13
    1252:	ef 92       	push	r14
    1254:	ff 92       	push	r15
    1256:	0f 93       	push	r16
    1258:	1f 93       	push	r17
    125a:	cf 93       	push	r28
    125c:	df 93       	push	r29
    125e:	00 d0       	rcall	.+0      	; 0x1260 <interface_sound+0x1c>
    1260:	00 d0       	rcall	.+0      	; 0x1262 <interface_sound+0x1e>
    1262:	00 d0       	rcall	.+0      	; 0x1264 <interface_sound+0x20>
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	4b 01       	movw	r8, r22
    126a:	5c 01       	movw	r10, r24
	JoystickDirection change_y;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	char scr_position = 0;
	
	position = read_joystick_position(calibration);
    126c:	0e 94 1a 02 	call	0x434	; 0x434 <read_joystick_position>
	direction = read_joystick_direction(position);
    1270:	0e 94 5e 02 	call	0x4bc	; 0x4bc <read_joystick_direction>
	change_y = change_yaxis(direction);
    1274:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <change_yaxis>

	set_position(14,0);
    1278:	60 e0       	ldi	r22, 0x00	; 0
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	8e e0       	ldi	r24, 0x0E	; 14
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
	print_string("Sound");
    1284:	8a e9       	ldi	r24, 0x9A	; 154
    1286:	91 e0       	ldi	r25, 0x01	; 1
    1288:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_string>
	revert_colour_line(0);
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	0e 94 a5 04 	call	0x94a	; 0x94a <revert_colour_line>
	set_position(3,3);
    1292:	63 e0       	ldi	r22, 0x03	; 3
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	83 e0       	ldi	r24, 0x03	; 3
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
	print_string("On");
    129e:	88 eb       	ldi	r24, 0xB8	; 184
    12a0:	91 e0       	ldi	r25, 0x01	; 1
    12a2:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_string>
	set_position(3,5);
    12a6:	65 e0       	ldi	r22, 0x05	; 5
    12a8:	70 e0       	ldi	r23, 0x00	; 0
    12aa:	83 e0       	ldi	r24, 0x03	; 3
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
	print_string("Off");
    12b2:	8b eb       	ldi	r24, 0xBB	; 187
    12b4:	91 e0       	ldi	r25, 0x01	; 1
    12b6:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_string>
	JoystickPosition position;
	JoystickDirection direction;
	JoystickDirection change_y;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	char scr_position = 0;
    12ba:	71 2c       	mov	r7, r1
	set_position(3,5);
	print_string("Off");
	
	while(1)
	{
		position = read_joystick_position(calibration);
    12bc:	c5 01       	movw	r24, r10
    12be:	b4 01       	movw	r22, r8
    12c0:	0e 94 1a 02 	call	0x434	; 0x434 <read_joystick_position>
		direction = read_joystick_direction(position);
    12c4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <read_joystick_direction>
		change_y = change_yaxis(direction);
    12c8:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <change_yaxis>
		
		if (change_y == Up)
    12cc:	82 30       	cpi	r24, 0x02	; 2
    12ce:	91 f4       	brne	.+36     	; 0x12f4 <interface_sound+0xb0>
		{
			set_position(1, (scr_position % 2) * 2 + 3);
    12d0:	70 fa       	bst	r7, 0
    12d2:	ee 24       	eor	r14, r14
    12d4:	e0 f8       	bld	r14, 0
    12d6:	f1 2c       	mov	r15, r1
    12d8:	b7 01       	movw	r22, r14
    12da:	66 0f       	add	r22, r22
    12dc:	77 1f       	adc	r23, r23
    12de:	6d 5f       	subi	r22, 0xFD	; 253
    12e0:	7f 4f       	sbci	r23, 0xFF	; 255
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
			print_char(' ');
    12ea:	80 e2       	ldi	r24, 0x20	; 32
    12ec:	0e 94 05 04 	call	0x80a	; 0x80a <print_char>
			scr_position--;
    12f0:	7a 94       	dec	r7
    12f2:	13 c0       	rjmp	.+38     	; 0x131a <interface_sound+0xd6>
		}
		else if (change_y == Down)
    12f4:	83 30       	cpi	r24, 0x03	; 3
    12f6:	89 f4       	brne	.+34     	; 0x131a <interface_sound+0xd6>
		{
			set_position(1, (scr_position % 2) * 2 + 3);
    12f8:	70 fa       	bst	r7, 0
    12fa:	cc 24       	eor	r12, r12
    12fc:	c0 f8       	bld	r12, 0
    12fe:	d1 2c       	mov	r13, r1
    1300:	b6 01       	movw	r22, r12
    1302:	66 0f       	add	r22, r22
    1304:	77 1f       	adc	r23, r23
    1306:	6d 5f       	subi	r22, 0xFD	; 253
    1308:	7f 4f       	sbci	r23, 0xFF	; 255
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
			print_char(' ');
    1312:	80 e2       	ldi	r24, 0x20	; 32
    1314:	0e 94 05 04 	call	0x80a	; 0x80a <print_char>
			scr_position++;
    1318:	73 94       	inc	r7
		}
		
		set_position(1, (scr_position % 2) * 2 + 3);
    131a:	07 2d       	mov	r16, r7
    131c:	01 70       	andi	r16, 0x01	; 1
    131e:	10 e0       	ldi	r17, 0x00	; 0
    1320:	b8 01       	movw	r22, r16
    1322:	66 0f       	add	r22, r22
    1324:	77 1f       	adc	r23, r23
    1326:	6d 5f       	subi	r22, 0xFD	; 253
    1328:	7f 4f       	sbci	r23, 0xFF	; 255
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
		print_char('#');
    1332:	83 e2       	ldi	r24, 0x23	; 35
    1334:	0e 94 05 04 	call	0x80a	; 0x80a <print_char>
		
		touch_data = read_touchpad_data();
    1338:	0e 94 a3 02 	call	0x546	; 0x546 <read_touchpad_data>
    133c:	f4 2f       	mov	r31, r20
    133e:	e5 2f       	mov	r30, r21
    1340:	86 2f       	mov	r24, r22
    1342:	97 2f       	mov	r25, r23
		change_touch_data = change_touchpad_data(touch_data);
    1344:	42 2f       	mov	r20, r18
    1346:	53 2f       	mov	r21, r19
    1348:	6f 2f       	mov	r22, r31
    134a:	7e 2f       	mov	r23, r30
    134c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <change_touchpad_data>
		if (change_touch_data.rightButton)
    1350:	88 23       	and	r24, r24
    1352:	81 f0       	breq	.+32     	; 0x1374 <interface_sound+0x130>
		{
			switch(scr_position)
    1354:	77 20       	and	r7, r7
    1356:	21 f0       	breq	.+8      	; 0x1360 <interface_sound+0x11c>
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	78 16       	cp	r7, r24
    135c:	31 f0       	breq	.+12     	; 0x136a <interface_sound+0x126>
    135e:	0d c0       	rjmp	.+26     	; 0x137a <interface_sound+0x136>
			{
				case 0:
				printf("ON\n");
    1360:	8f eb       	ldi	r24, 0xBF	; 191
    1362:	91 e0       	ldi	r25, 0x01	; 1
    1364:	0e 94 aa 0b 	call	0x1754	; 0x1754 <puts>
				break;
    1368:	08 c0       	rjmp	.+16     	; 0x137a <interface_sound+0x136>
				case 1:
				printf("OFF\n");
    136a:	82 ec       	ldi	r24, 0xC2	; 194
    136c:	91 e0       	ldi	r25, 0x01	; 1
    136e:	0e 94 aa 0b 	call	0x1754	; 0x1754 <puts>
				break;
    1372:	03 c0       	rjmp	.+6      	; 0x137a <interface_sound+0x136>
			}
			return State_Options;
		}
		refresh_oled();
    1374:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <refresh_oled>
	}
    1378:	a1 cf       	rjmp	.-190    	; 0x12bc <interface_sound+0x78>
}
    137a:	87 e0       	ldi	r24, 0x07	; 7
    137c:	26 96       	adiw	r28, 0x06	; 6
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	f8 94       	cli
    1382:	de bf       	out	0x3e, r29	; 62
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	cd bf       	out	0x3d, r28	; 61
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	1f 91       	pop	r17
    138e:	0f 91       	pop	r16
    1390:	ff 90       	pop	r15
    1392:	ef 90       	pop	r14
    1394:	df 90       	pop	r13
    1396:	cf 90       	pop	r12
    1398:	bf 90       	pop	r11
    139a:	af 90       	pop	r10
    139c:	9f 90       	pop	r9
    139e:	8f 90       	pop	r8
    13a0:	7f 90       	pop	r7
    13a2:	08 95       	ret

000013a4 <interface_tutorial>:
* \brief Function call during the set sound phase
*
* \param in joystick calibration data
****************************************************************************/
InterfaceState interface_tutorial(JoystickPosition calibration)
{
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <interface_tutorial+0x6>
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <interface_tutorial+0x8>
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <interface_tutorial+0xa>
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	set_position(14,0);
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	8e e0       	ldi	r24, 0x0E	; 14
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
	print_string("Tutorial");
    13be:	80 e6       	ldi	r24, 0x60	; 96
    13c0:	91 e0       	ldi	r25, 0x01	; 1
    13c2:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_string>
	revert_colour_line(0);
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	0e 94 a5 04 	call	0x94a	; 0x94a <revert_colour_line>
	refresh_oled();
    13cc:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <refresh_oled>
	while(1)
	{
		touch_data = read_touchpad_data();
    13d0:	0e 94 a3 02 	call	0x546	; 0x546 <read_touchpad_data>
    13d4:	f4 2f       	mov	r31, r20
    13d6:	e5 2f       	mov	r30, r21
    13d8:	86 2f       	mov	r24, r22
    13da:	97 2f       	mov	r25, r23
		change_touch_data = change_touchpad_data(touch_data);
    13dc:	42 2f       	mov	r20, r18
    13de:	53 2f       	mov	r21, r19
    13e0:	6f 2f       	mov	r22, r31
    13e2:	7e 2f       	mov	r23, r30
    13e4:	0e 94 fd 02 	call	0x5fa	; 0x5fa <change_touchpad_data>
		if (change_touch_data.rightButton)
    13e8:	88 23       	and	r24, r24
    13ea:	91 f3       	breq	.-28     	; 0x13d0 <interface_tutorial+0x2c>
		{
			return State_NewGame;
		}
	}
}
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	26 96       	adiw	r28, 0x06	; 6
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	cd bf       	out	0x3d, r28	; 61
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	08 95       	ret

00001400 <interface_easy>:
* \brief Function call during the easy mode gameplay
*
* \param in joystick calibration data
****************************************************************************/
InterfaceState interface_easy(JoystickPosition calibration)
{
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	00 d0       	rcall	.+0      	; 0x1406 <interface_easy+0x6>
    1406:	00 d0       	rcall	.+0      	; 0x1408 <interface_easy+0x8>
    1408:	00 d0       	rcall	.+0      	; 0x140a <interface_easy+0xa>
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	set_position(14,0);
    140e:	60 e0       	ldi	r22, 0x00	; 0
    1410:	70 e0       	ldi	r23, 0x00	; 0
    1412:	8e e0       	ldi	r24, 0x0E	; 14
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
	print_string("Easy");
    141a:	89 e6       	ldi	r24, 0x69	; 105
    141c:	91 e0       	ldi	r25, 0x01	; 1
    141e:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_string>
	revert_colour_line(0);
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	0e 94 a5 04 	call	0x94a	; 0x94a <revert_colour_line>
	refresh_oled();
    1428:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <refresh_oled>
	while(1)
	{
		touch_data = read_touchpad_data();
    142c:	0e 94 a3 02 	call	0x546	; 0x546 <read_touchpad_data>
    1430:	f4 2f       	mov	r31, r20
    1432:	e5 2f       	mov	r30, r21
    1434:	86 2f       	mov	r24, r22
    1436:	97 2f       	mov	r25, r23
		change_touch_data = change_touchpad_data(touch_data);
    1438:	42 2f       	mov	r20, r18
    143a:	53 2f       	mov	r21, r19
    143c:	6f 2f       	mov	r22, r31
    143e:	7e 2f       	mov	r23, r30
    1440:	0e 94 fd 02 	call	0x5fa	; 0x5fa <change_touchpad_data>
		if (change_touch_data.rightButton)
    1444:	88 23       	and	r24, r24
    1446:	91 f3       	breq	.-28     	; 0x142c <interface_easy+0x2c>
		{
			return State_NewGame;
		}
	}
}
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	26 96       	adiw	r28, 0x06	; 6
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	f8 94       	cli
    1450:	de bf       	out	0x3e, r29	; 62
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	cd bf       	out	0x3d, r28	; 61
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	08 95       	ret

0000145c <interface_normal>:
* \brief Function call during the normal mode gameplay
*
* \param in joystick calibration data
****************************************************************************/
InterfaceState interface_normal(JoystickPosition calibration)
{
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	00 d0       	rcall	.+0      	; 0x1462 <interface_normal+0x6>
    1462:	00 d0       	rcall	.+0      	; 0x1464 <interface_normal+0x8>
    1464:	00 d0       	rcall	.+0      	; 0x1466 <interface_normal+0xa>
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	set_position(12,0);
    146a:	60 e0       	ldi	r22, 0x00	; 0
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	8c e0       	ldi	r24, 0x0C	; 12
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
	print_string("Normal");
    1476:	8e e6       	ldi	r24, 0x6E	; 110
    1478:	91 e0       	ldi	r25, 0x01	; 1
    147a:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_string>
	revert_colour_line(0);
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	0e 94 a5 04 	call	0x94a	; 0x94a <revert_colour_line>
	refresh_oled();
    1484:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <refresh_oled>
	while(1)
	{
		touch_data = read_touchpad_data();
    1488:	0e 94 a3 02 	call	0x546	; 0x546 <read_touchpad_data>
    148c:	f4 2f       	mov	r31, r20
    148e:	e5 2f       	mov	r30, r21
    1490:	86 2f       	mov	r24, r22
    1492:	97 2f       	mov	r25, r23
		change_touch_data = change_touchpad_data(touch_data);
    1494:	42 2f       	mov	r20, r18
    1496:	53 2f       	mov	r21, r19
    1498:	6f 2f       	mov	r22, r31
    149a:	7e 2f       	mov	r23, r30
    149c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <change_touchpad_data>
		if (change_touch_data.rightButton)
    14a0:	88 23       	and	r24, r24
    14a2:	91 f3       	breq	.-28     	; 0x1488 <interface_normal+0x2c>
		{
			return State_NewGame;
		}
	}
}
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	26 96       	adiw	r28, 0x06	; 6
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	08 95       	ret

000014b8 <interface_hard>:
* \brief Function call during the hard mode gameplay
*
* \param in joystick calibration data
****************************************************************************/
InterfaceState interface_hard(JoystickPosition calibration)
{
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	00 d0       	rcall	.+0      	; 0x14be <interface_hard+0x6>
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <interface_hard+0x8>
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <interface_hard+0xa>
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	set_position(12,0);
    14c6:	60 e0       	ldi	r22, 0x00	; 0
    14c8:	70 e0       	ldi	r23, 0x00	; 0
    14ca:	8c e0       	ldi	r24, 0x0C	; 12
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
	print_string("Hard");
    14d2:	85 e7       	ldi	r24, 0x75	; 117
    14d4:	91 e0       	ldi	r25, 0x01	; 1
    14d6:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_string>
	revert_colour_line(0);
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	0e 94 a5 04 	call	0x94a	; 0x94a <revert_colour_line>
	refresh_oled();
    14e0:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <refresh_oled>
	while(1)
	{
		touch_data = read_touchpad_data();
    14e4:	0e 94 a3 02 	call	0x546	; 0x546 <read_touchpad_data>
    14e8:	f4 2f       	mov	r31, r20
    14ea:	e5 2f       	mov	r30, r21
    14ec:	86 2f       	mov	r24, r22
    14ee:	97 2f       	mov	r25, r23
		change_touch_data = change_touchpad_data(touch_data);
    14f0:	42 2f       	mov	r20, r18
    14f2:	53 2f       	mov	r21, r19
    14f4:	6f 2f       	mov	r22, r31
    14f6:	7e 2f       	mov	r23, r30
    14f8:	0e 94 fd 02 	call	0x5fa	; 0x5fa <change_touchpad_data>
		if (change_touch_data.rightButton)
    14fc:	88 23       	and	r24, r24
    14fe:	91 f3       	breq	.-28     	; 0x14e4 <interface_hard+0x2c>
		{
			return State_NewGame;
		}
	}
}
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	26 96       	adiw	r28, 0x06	; 6
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	cd bf       	out	0x3d, r28	; 61
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	08 95       	ret

00001514 <interface_insane>:
* \brief Function call during the insane mode gameplay
*
* \param in joystick calibration data
****************************************************************************/
InterfaceState interface_insane(JoystickPosition calibration)
{
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	00 d0       	rcall	.+0      	; 0x151a <interface_insane+0x6>
    151a:	00 d0       	rcall	.+0      	; 0x151c <interface_insane+0x8>
    151c:	00 d0       	rcall	.+0      	; 0x151e <interface_insane+0xa>
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	set_position(12,0);
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	8c e0       	ldi	r24, 0x0C	; 12
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_position>
	print_string("Insane");
    152e:	8a e7       	ldi	r24, 0x7A	; 122
    1530:	91 e0       	ldi	r25, 0x01	; 1
    1532:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_string>
	revert_colour_line(0);
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	0e 94 a5 04 	call	0x94a	; 0x94a <revert_colour_line>
	refresh_oled();
    153c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <refresh_oled>
	while(1)
	{
		touch_data = read_touchpad_data();
    1540:	0e 94 a3 02 	call	0x546	; 0x546 <read_touchpad_data>
    1544:	f4 2f       	mov	r31, r20
    1546:	e5 2f       	mov	r30, r21
    1548:	86 2f       	mov	r24, r22
    154a:	97 2f       	mov	r25, r23
		change_touch_data = change_touchpad_data(touch_data);
    154c:	42 2f       	mov	r20, r18
    154e:	53 2f       	mov	r21, r19
    1550:	6f 2f       	mov	r22, r31
    1552:	7e 2f       	mov	r23, r30
    1554:	0e 94 fd 02 	call	0x5fa	; 0x5fa <change_touchpad_data>
		if (change_touch_data.rightButton)
    1558:	88 23       	and	r24, r24
    155a:	91 f3       	breq	.-28     	; 0x1540 <interface_insane+0x2c>
			
			
			return State_NewGame;
		}
	}
}
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	26 96       	adiw	r28, 0x06	; 6
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	de bf       	out	0x3e, r29	; 62
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	cd bf       	out	0x3d, r28	; 61
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	08 95       	ret

00001570 <interface_state_machine>:
* \brief The main function serving the game
*
* \param in joystick calibration data
****************************************************************************/
void interface_state_machine(JoystickPosition calibration)
{
    1570:	cf 92       	push	r12
    1572:	df 92       	push	r13
    1574:	ef 92       	push	r14
    1576:	ff 92       	push	r15
    1578:	6b 01       	movw	r12, r22
    157a:	7c 01       	movw	r14, r24
	static InterfaceState state = State_Username;
	
	clear_oled();
    157c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <clear_oled>
	
	switch(state)
    1580:	80 91 ce 01 	lds	r24, 0x01CE
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	8b 30       	cpi	r24, 0x0B	; 11
    1588:	91 05       	cpc	r25, r1
    158a:	08 f0       	brcs	.+2      	; 0x158e <interface_state_machine+0x1e>
    158c:	51 c0       	rjmp	.+162    	; 0x1630 <interface_state_machine+0xc0>
    158e:	fc 01       	movw	r30, r24
    1590:	e8 5c       	subi	r30, 0xC8	; 200
    1592:	ff 4f       	sbci	r31, 0xFF	; 255
    1594:	0c 94 31 0b 	jmp	0x1662	; 0x1662 <__tablejump2__>
	{
		case State_Username :
		state = interface_username(calibration);
    1598:	c7 01       	movw	r24, r14
    159a:	b6 01       	movw	r22, r12
    159c:	0e 94 72 05 	call	0xae4	; 0xae4 <interface_username>
    15a0:	80 93 ce 01 	sts	0x01CE, r24
		break;
    15a4:	45 c0       	rjmp	.+138    	; 0x1630 <interface_state_machine+0xc0>
		
		case State_NewGame :
		state = interface_new_game(calibration);
    15a6:	c7 01       	movw	r24, r14
    15a8:	b6 01       	movw	r22, r12
    15aa:	0e 94 77 06 	call	0xcee	; 0xcee <interface_new_game>
    15ae:	80 93 ce 01 	sts	0x01CE, r24
		break;
    15b2:	3e c0       	rjmp	.+124    	; 0x1630 <interface_state_machine+0xc0>
		
		case State_Tutorial :
		state = interface_tutorial(calibration);
    15b4:	c7 01       	movw	r24, r14
    15b6:	b6 01       	movw	r22, r12
    15b8:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <interface_tutorial>
    15bc:	80 93 ce 01 	sts	0x01CE, r24
		break;
    15c0:	37 c0       	rjmp	.+110    	; 0x1630 <interface_state_machine+0xc0>
		
		case State_Easy :
		state = interface_easy(calibration);
    15c2:	c7 01       	movw	r24, r14
    15c4:	b6 01       	movw	r22, r12
    15c6:	0e 94 00 0a 	call	0x1400	; 0x1400 <interface_easy>
    15ca:	80 93 ce 01 	sts	0x01CE, r24
		break;
    15ce:	30 c0       	rjmp	.+96     	; 0x1630 <interface_state_machine+0xc0>
		
		case State_Normal :
		state = interface_normal(calibration);
    15d0:	c7 01       	movw	r24, r14
    15d2:	b6 01       	movw	r22, r12
    15d4:	0e 94 2e 0a 	call	0x145c	; 0x145c <interface_normal>
    15d8:	80 93 ce 01 	sts	0x01CE, r24
		break;
    15dc:	29 c0       	rjmp	.+82     	; 0x1630 <interface_state_machine+0xc0>
		
		case State_Hard :
		state = interface_hard(calibration);
    15de:	c7 01       	movw	r24, r14
    15e0:	b6 01       	movw	r22, r12
    15e2:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <interface_hard>
    15e6:	80 93 ce 01 	sts	0x01CE, r24
		break;
    15ea:	22 c0       	rjmp	.+68     	; 0x1630 <interface_state_machine+0xc0>
		
		case State_Insane :
		state = interface_insane(calibration);
    15ec:	c7 01       	movw	r24, r14
    15ee:	b6 01       	movw	r22, r12
    15f0:	0e 94 8a 0a 	call	0x1514	; 0x1514 <interface_insane>
    15f4:	80 93 ce 01 	sts	0x01CE, r24
		break;
    15f8:	1b c0       	rjmp	.+54     	; 0x1630 <interface_state_machine+0xc0>
		
		case State_HighScores :
		state = interface_high_scores(calibration);
    15fa:	c7 01       	movw	r24, r14
    15fc:	b6 01       	movw	r22, r12
    15fe:	0e 94 6a 07 	call	0xed4	; 0xed4 <interface_high_scores>
    1602:	80 93 ce 01 	sts	0x01CE, r24
		break;
    1606:	14 c0       	rjmp	.+40     	; 0x1630 <interface_state_machine+0xc0>
		
		case State_Options :
		state = interface_options(calibration);
    1608:	c7 01       	movw	r24, r14
    160a:	b6 01       	movw	r22, r12
    160c:	0e 94 9a 07 	call	0xf34	; 0xf34 <interface_options>
    1610:	80 93 ce 01 	sts	0x01CE, r24
		break;
    1614:	0d c0       	rjmp	.+26     	; 0x1630 <interface_state_machine+0xc0>
		
		case State_Sound :
		state = interface_sound(calibration);
    1616:	c7 01       	movw	r24, r14
    1618:	b6 01       	movw	r22, r12
    161a:	0e 94 22 09 	call	0x1244	; 0x1244 <interface_sound>
    161e:	80 93 ce 01 	sts	0x01CE, r24
		break;
    1622:	06 c0       	rjmp	.+12     	; 0x1630 <interface_state_machine+0xc0>
		
		case  State_Mode :
		state = interface_mode(calibration);
    1624:	c7 01       	movw	r24, r14
    1626:	b6 01       	movw	r22, r12
    1628:	0e 94 69 08 	call	0x10d2	; 0x10d2 <interface_mode>
    162c:	80 93 ce 01 	sts	0x01CE, r24
		break;
	}
}
    1630:	ff 90       	pop	r15
    1632:	ef 90       	pop	r14
    1634:	df 90       	pop	r13
    1636:	cf 90       	pop	r12
    1638:	08 95       	ret

0000163a <__divmodhi4>:
    163a:	97 fb       	bst	r25, 7
    163c:	07 2e       	mov	r0, r23
    163e:	16 f4       	brtc	.+4      	; 0x1644 <__divmodhi4+0xa>
    1640:	00 94       	com	r0
    1642:	07 d0       	rcall	.+14     	; 0x1652 <__divmodhi4_neg1>
    1644:	77 fd       	sbrc	r23, 7
    1646:	09 d0       	rcall	.+18     	; 0x165a <__divmodhi4_neg2>
    1648:	0e 94 37 0b 	call	0x166e	; 0x166e <__udivmodhi4>
    164c:	07 fc       	sbrc	r0, 7
    164e:	05 d0       	rcall	.+10     	; 0x165a <__divmodhi4_neg2>
    1650:	3e f4       	brtc	.+14     	; 0x1660 <__divmodhi4_exit>

00001652 <__divmodhi4_neg1>:
    1652:	90 95       	com	r25
    1654:	81 95       	neg	r24
    1656:	9f 4f       	sbci	r25, 0xFF	; 255
    1658:	08 95       	ret

0000165a <__divmodhi4_neg2>:
    165a:	70 95       	com	r23
    165c:	61 95       	neg	r22
    165e:	7f 4f       	sbci	r23, 0xFF	; 255

00001660 <__divmodhi4_exit>:
    1660:	08 95       	ret

00001662 <__tablejump2__>:
    1662:	ee 0f       	add	r30, r30
    1664:	ff 1f       	adc	r31, r31

00001666 <__tablejump__>:
    1666:	05 90       	lpm	r0, Z+
    1668:	f4 91       	lpm	r31, Z
    166a:	e0 2d       	mov	r30, r0
    166c:	09 94       	ijmp

0000166e <__udivmodhi4>:
    166e:	aa 1b       	sub	r26, r26
    1670:	bb 1b       	sub	r27, r27
    1672:	51 e1       	ldi	r21, 0x11	; 17
    1674:	07 c0       	rjmp	.+14     	; 0x1684 <__udivmodhi4_ep>

00001676 <__udivmodhi4_loop>:
    1676:	aa 1f       	adc	r26, r26
    1678:	bb 1f       	adc	r27, r27
    167a:	a6 17       	cp	r26, r22
    167c:	b7 07       	cpc	r27, r23
    167e:	10 f0       	brcs	.+4      	; 0x1684 <__udivmodhi4_ep>
    1680:	a6 1b       	sub	r26, r22
    1682:	b7 0b       	sbc	r27, r23

00001684 <__udivmodhi4_ep>:
    1684:	88 1f       	adc	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	5a 95       	dec	r21
    168a:	a9 f7       	brne	.-22     	; 0x1676 <__udivmodhi4_loop>
    168c:	80 95       	com	r24
    168e:	90 95       	com	r25
    1690:	bc 01       	movw	r22, r24
    1692:	cd 01       	movw	r24, r26
    1694:	08 95       	ret

00001696 <fdevopen>:
    1696:	0f 93       	push	r16
    1698:	1f 93       	push	r17
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	ec 01       	movw	r28, r24
    16a0:	8b 01       	movw	r16, r22
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	31 f4       	brne	.+12     	; 0x16b2 <fdevopen+0x1c>
    16a6:	61 15       	cp	r22, r1
    16a8:	71 05       	cpc	r23, r1
    16aa:	19 f4       	brne	.+6      	; 0x16b2 <fdevopen+0x1c>
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	38 c0       	rjmp	.+112    	; 0x1722 <fdevopen+0x8c>
    16b2:	6e e0       	ldi	r22, 0x0E	; 14
    16b4:	70 e0       	ldi	r23, 0x00	; 0
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <calloc>
    16be:	fc 01       	movw	r30, r24
    16c0:	00 97       	sbiw	r24, 0x00	; 0
    16c2:	a1 f3       	breq	.-24     	; 0x16ac <fdevopen+0x16>
    16c4:	80 e8       	ldi	r24, 0x80	; 128
    16c6:	83 83       	std	Z+3, r24	; 0x03
    16c8:	01 15       	cp	r16, r1
    16ca:	11 05       	cpc	r17, r1
    16cc:	71 f0       	breq	.+28     	; 0x16ea <fdevopen+0x54>
    16ce:	13 87       	std	Z+11, r17	; 0x0b
    16d0:	02 87       	std	Z+10, r16	; 0x0a
    16d2:	81 e8       	ldi	r24, 0x81	; 129
    16d4:	83 83       	std	Z+3, r24	; 0x03
    16d6:	80 91 cf 01 	lds	r24, 0x01CF
    16da:	90 91 d0 01 	lds	r25, 0x01D0
    16de:	89 2b       	or	r24, r25
    16e0:	21 f4       	brne	.+8      	; 0x16ea <fdevopen+0x54>
    16e2:	f0 93 d0 01 	sts	0x01D0, r31
    16e6:	e0 93 cf 01 	sts	0x01CF, r30
    16ea:	20 97       	sbiw	r28, 0x00	; 0
    16ec:	c9 f0       	breq	.+50     	; 0x1720 <fdevopen+0x8a>
    16ee:	d1 87       	std	Z+9, r29	; 0x09
    16f0:	c0 87       	std	Z+8, r28	; 0x08
    16f2:	83 81       	ldd	r24, Z+3	; 0x03
    16f4:	82 60       	ori	r24, 0x02	; 2
    16f6:	83 83       	std	Z+3, r24	; 0x03
    16f8:	80 91 d1 01 	lds	r24, 0x01D1
    16fc:	90 91 d2 01 	lds	r25, 0x01D2
    1700:	89 2b       	or	r24, r25
    1702:	71 f4       	brne	.+28     	; 0x1720 <fdevopen+0x8a>
    1704:	f0 93 d2 01 	sts	0x01D2, r31
    1708:	e0 93 d1 01 	sts	0x01D1, r30
    170c:	80 91 d3 01 	lds	r24, 0x01D3
    1710:	90 91 d4 01 	lds	r25, 0x01D4
    1714:	89 2b       	or	r24, r25
    1716:	21 f4       	brne	.+8      	; 0x1720 <fdevopen+0x8a>
    1718:	f0 93 d4 01 	sts	0x01D4, r31
    171c:	e0 93 d3 01 	sts	0x01D3, r30
    1720:	cf 01       	movw	r24, r30
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	1f 91       	pop	r17
    1728:	0f 91       	pop	r16
    172a:	08 95       	ret

0000172c <printf>:
    172c:	a0 e0       	ldi	r26, 0x00	; 0
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	ec e9       	ldi	r30, 0x9C	; 156
    1732:	fb e0       	ldi	r31, 0x0B	; 11
    1734:	0c 94 a9 0f 	jmp	0x1f52	; 0x1f52 <__prologue_saves__+0x20>
    1738:	fe 01       	movw	r30, r28
    173a:	35 96       	adiw	r30, 0x05	; 5
    173c:	61 91       	ld	r22, Z+
    173e:	71 91       	ld	r23, Z+
    1740:	af 01       	movw	r20, r30
    1742:	80 91 d1 01 	lds	r24, 0x01D1
    1746:	90 91 d2 01 	lds	r25, 0x01D2
    174a:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <vfprintf>
    174e:	e2 e0       	ldi	r30, 0x02	; 2
    1750:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <__epilogue_restores__+0x20>

00001754 <puts>:
    1754:	0f 93       	push	r16
    1756:	1f 93       	push	r17
    1758:	cf 93       	push	r28
    175a:	df 93       	push	r29
    175c:	e0 91 d1 01 	lds	r30, 0x01D1
    1760:	f0 91 d2 01 	lds	r31, 0x01D2
    1764:	23 81       	ldd	r18, Z+3	; 0x03
    1766:	21 ff       	sbrs	r18, 1
    1768:	1b c0       	rjmp	.+54     	; 0x17a0 <puts+0x4c>
    176a:	ec 01       	movw	r28, r24
    176c:	00 e0       	ldi	r16, 0x00	; 0
    176e:	10 e0       	ldi	r17, 0x00	; 0
    1770:	89 91       	ld	r24, Y+
    1772:	60 91 d1 01 	lds	r22, 0x01D1
    1776:	70 91 d2 01 	lds	r23, 0x01D2
    177a:	db 01       	movw	r26, r22
    177c:	18 96       	adiw	r26, 0x08	; 8
    177e:	ed 91       	ld	r30, X+
    1780:	fc 91       	ld	r31, X
    1782:	19 97       	sbiw	r26, 0x09	; 9
    1784:	88 23       	and	r24, r24
    1786:	31 f0       	breq	.+12     	; 0x1794 <puts+0x40>
    1788:	09 95       	icall
    178a:	89 2b       	or	r24, r25
    178c:	89 f3       	breq	.-30     	; 0x1770 <puts+0x1c>
    178e:	0f ef       	ldi	r16, 0xFF	; 255
    1790:	1f ef       	ldi	r17, 0xFF	; 255
    1792:	ee cf       	rjmp	.-36     	; 0x1770 <puts+0x1c>
    1794:	8a e0       	ldi	r24, 0x0A	; 10
    1796:	09 95       	icall
    1798:	89 2b       	or	r24, r25
    179a:	11 f4       	brne	.+4      	; 0x17a0 <puts+0x4c>
    179c:	c8 01       	movw	r24, r16
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <puts+0x50>
    17a0:	8f ef       	ldi	r24, 0xFF	; 255
    17a2:	9f ef       	ldi	r25, 0xFF	; 255
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	1f 91       	pop	r17
    17aa:	0f 91       	pop	r16
    17ac:	08 95       	ret

000017ae <vfprintf>:
    17ae:	ac e0       	ldi	r26, 0x0C	; 12
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	ed ed       	ldi	r30, 0xDD	; 221
    17b4:	fb e0       	ldi	r31, 0x0B	; 11
    17b6:	0c 94 99 0f 	jmp	0x1f32	; 0x1f32 <__prologue_saves__>
    17ba:	7c 01       	movw	r14, r24
    17bc:	6b 01       	movw	r12, r22
    17be:	8a 01       	movw	r16, r20
    17c0:	fc 01       	movw	r30, r24
    17c2:	17 82       	std	Z+7, r1	; 0x07
    17c4:	16 82       	std	Z+6, r1	; 0x06
    17c6:	83 81       	ldd	r24, Z+3	; 0x03
    17c8:	81 ff       	sbrs	r24, 1
    17ca:	bd c1       	rjmp	.+890    	; 0x1b46 <vfprintf+0x398>
    17cc:	ce 01       	movw	r24, r28
    17ce:	01 96       	adiw	r24, 0x01	; 1
    17d0:	4c 01       	movw	r8, r24
    17d2:	f7 01       	movw	r30, r14
    17d4:	93 81       	ldd	r25, Z+3	; 0x03
    17d6:	f6 01       	movw	r30, r12
    17d8:	93 fd       	sbrc	r25, 3
    17da:	85 91       	lpm	r24, Z+
    17dc:	93 ff       	sbrs	r25, 3
    17de:	81 91       	ld	r24, Z+
    17e0:	6f 01       	movw	r12, r30
    17e2:	88 23       	and	r24, r24
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <vfprintf+0x3a>
    17e6:	ab c1       	rjmp	.+854    	; 0x1b3e <vfprintf+0x390>
    17e8:	85 32       	cpi	r24, 0x25	; 37
    17ea:	39 f4       	brne	.+14     	; 0x17fa <vfprintf+0x4c>
    17ec:	93 fd       	sbrc	r25, 3
    17ee:	85 91       	lpm	r24, Z+
    17f0:	93 ff       	sbrs	r25, 3
    17f2:	81 91       	ld	r24, Z+
    17f4:	6f 01       	movw	r12, r30
    17f6:	85 32       	cpi	r24, 0x25	; 37
    17f8:	29 f4       	brne	.+10     	; 0x1804 <vfprintf+0x56>
    17fa:	b7 01       	movw	r22, r14
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <fputc>
    1802:	e7 cf       	rjmp	.-50     	; 0x17d2 <vfprintf+0x24>
    1804:	51 2c       	mov	r5, r1
    1806:	31 2c       	mov	r3, r1
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	20 32       	cpi	r18, 0x20	; 32
    180c:	a0 f4       	brcc	.+40     	; 0x1836 <vfprintf+0x88>
    180e:	8b 32       	cpi	r24, 0x2B	; 43
    1810:	69 f0       	breq	.+26     	; 0x182c <vfprintf+0x7e>
    1812:	30 f4       	brcc	.+12     	; 0x1820 <vfprintf+0x72>
    1814:	80 32       	cpi	r24, 0x20	; 32
    1816:	59 f0       	breq	.+22     	; 0x182e <vfprintf+0x80>
    1818:	83 32       	cpi	r24, 0x23	; 35
    181a:	69 f4       	brne	.+26     	; 0x1836 <vfprintf+0x88>
    181c:	20 61       	ori	r18, 0x10	; 16
    181e:	2c c0       	rjmp	.+88     	; 0x1878 <vfprintf+0xca>
    1820:	8d 32       	cpi	r24, 0x2D	; 45
    1822:	39 f0       	breq	.+14     	; 0x1832 <vfprintf+0x84>
    1824:	80 33       	cpi	r24, 0x30	; 48
    1826:	39 f4       	brne	.+14     	; 0x1836 <vfprintf+0x88>
    1828:	21 60       	ori	r18, 0x01	; 1
    182a:	26 c0       	rjmp	.+76     	; 0x1878 <vfprintf+0xca>
    182c:	22 60       	ori	r18, 0x02	; 2
    182e:	24 60       	ori	r18, 0x04	; 4
    1830:	23 c0       	rjmp	.+70     	; 0x1878 <vfprintf+0xca>
    1832:	28 60       	ori	r18, 0x08	; 8
    1834:	21 c0       	rjmp	.+66     	; 0x1878 <vfprintf+0xca>
    1836:	27 fd       	sbrc	r18, 7
    1838:	27 c0       	rjmp	.+78     	; 0x1888 <vfprintf+0xda>
    183a:	30 ed       	ldi	r19, 0xD0	; 208
    183c:	38 0f       	add	r19, r24
    183e:	3a 30       	cpi	r19, 0x0A	; 10
    1840:	78 f4       	brcc	.+30     	; 0x1860 <vfprintf+0xb2>
    1842:	26 ff       	sbrs	r18, 6
    1844:	06 c0       	rjmp	.+12     	; 0x1852 <vfprintf+0xa4>
    1846:	fa e0       	ldi	r31, 0x0A	; 10
    1848:	5f 9e       	mul	r5, r31
    184a:	30 0d       	add	r19, r0
    184c:	11 24       	eor	r1, r1
    184e:	53 2e       	mov	r5, r19
    1850:	13 c0       	rjmp	.+38     	; 0x1878 <vfprintf+0xca>
    1852:	8a e0       	ldi	r24, 0x0A	; 10
    1854:	38 9e       	mul	r3, r24
    1856:	30 0d       	add	r19, r0
    1858:	11 24       	eor	r1, r1
    185a:	33 2e       	mov	r3, r19
    185c:	20 62       	ori	r18, 0x20	; 32
    185e:	0c c0       	rjmp	.+24     	; 0x1878 <vfprintf+0xca>
    1860:	8e 32       	cpi	r24, 0x2E	; 46
    1862:	21 f4       	brne	.+8      	; 0x186c <vfprintf+0xbe>
    1864:	26 fd       	sbrc	r18, 6
    1866:	6b c1       	rjmp	.+726    	; 0x1b3e <vfprintf+0x390>
    1868:	20 64       	ori	r18, 0x40	; 64
    186a:	06 c0       	rjmp	.+12     	; 0x1878 <vfprintf+0xca>
    186c:	8c 36       	cpi	r24, 0x6C	; 108
    186e:	11 f4       	brne	.+4      	; 0x1874 <vfprintf+0xc6>
    1870:	20 68       	ori	r18, 0x80	; 128
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <vfprintf+0xca>
    1874:	88 36       	cpi	r24, 0x68	; 104
    1876:	41 f4       	brne	.+16     	; 0x1888 <vfprintf+0xda>
    1878:	f6 01       	movw	r30, r12
    187a:	93 fd       	sbrc	r25, 3
    187c:	85 91       	lpm	r24, Z+
    187e:	93 ff       	sbrs	r25, 3
    1880:	81 91       	ld	r24, Z+
    1882:	6f 01       	movw	r12, r30
    1884:	81 11       	cpse	r24, r1
    1886:	c1 cf       	rjmp	.-126    	; 0x180a <vfprintf+0x5c>
    1888:	98 2f       	mov	r25, r24
    188a:	9f 7d       	andi	r25, 0xDF	; 223
    188c:	95 54       	subi	r25, 0x45	; 69
    188e:	93 30       	cpi	r25, 0x03	; 3
    1890:	28 f4       	brcc	.+10     	; 0x189c <vfprintf+0xee>
    1892:	0c 5f       	subi	r16, 0xFC	; 252
    1894:	1f 4f       	sbci	r17, 0xFF	; 255
    1896:	ff e3       	ldi	r31, 0x3F	; 63
    1898:	f9 83       	std	Y+1, r31	; 0x01
    189a:	0d c0       	rjmp	.+26     	; 0x18b6 <vfprintf+0x108>
    189c:	83 36       	cpi	r24, 0x63	; 99
    189e:	31 f0       	breq	.+12     	; 0x18ac <vfprintf+0xfe>
    18a0:	83 37       	cpi	r24, 0x73	; 115
    18a2:	71 f0       	breq	.+28     	; 0x18c0 <vfprintf+0x112>
    18a4:	83 35       	cpi	r24, 0x53	; 83
    18a6:	09 f0       	breq	.+2      	; 0x18aa <vfprintf+0xfc>
    18a8:	5b c0       	rjmp	.+182    	; 0x1960 <vfprintf+0x1b2>
    18aa:	22 c0       	rjmp	.+68     	; 0x18f0 <vfprintf+0x142>
    18ac:	f8 01       	movw	r30, r16
    18ae:	80 81       	ld	r24, Z
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	0e 5f       	subi	r16, 0xFE	; 254
    18b4:	1f 4f       	sbci	r17, 0xFF	; 255
    18b6:	44 24       	eor	r4, r4
    18b8:	43 94       	inc	r4
    18ba:	51 2c       	mov	r5, r1
    18bc:	54 01       	movw	r10, r8
    18be:	15 c0       	rjmp	.+42     	; 0x18ea <vfprintf+0x13c>
    18c0:	38 01       	movw	r6, r16
    18c2:	f2 e0       	ldi	r31, 0x02	; 2
    18c4:	6f 0e       	add	r6, r31
    18c6:	71 1c       	adc	r7, r1
    18c8:	f8 01       	movw	r30, r16
    18ca:	a0 80       	ld	r10, Z
    18cc:	b1 80       	ldd	r11, Z+1	; 0x01
    18ce:	26 ff       	sbrs	r18, 6
    18d0:	03 c0       	rjmp	.+6      	; 0x18d8 <vfprintf+0x12a>
    18d2:	65 2d       	mov	r22, r5
    18d4:	70 e0       	ldi	r23, 0x00	; 0
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <vfprintf+0x12e>
    18d8:	6f ef       	ldi	r22, 0xFF	; 255
    18da:	7f ef       	ldi	r23, 0xFF	; 255
    18dc:	c5 01       	movw	r24, r10
    18de:	2c 87       	std	Y+12, r18	; 0x0c
    18e0:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <strnlen>
    18e4:	2c 01       	movw	r4, r24
    18e6:	83 01       	movw	r16, r6
    18e8:	2c 85       	ldd	r18, Y+12	; 0x0c
    18ea:	2f 77       	andi	r18, 0x7F	; 127
    18ec:	22 2e       	mov	r2, r18
    18ee:	17 c0       	rjmp	.+46     	; 0x191e <vfprintf+0x170>
    18f0:	38 01       	movw	r6, r16
    18f2:	f2 e0       	ldi	r31, 0x02	; 2
    18f4:	6f 0e       	add	r6, r31
    18f6:	71 1c       	adc	r7, r1
    18f8:	f8 01       	movw	r30, r16
    18fa:	a0 80       	ld	r10, Z
    18fc:	b1 80       	ldd	r11, Z+1	; 0x01
    18fe:	26 ff       	sbrs	r18, 6
    1900:	03 c0       	rjmp	.+6      	; 0x1908 <vfprintf+0x15a>
    1902:	65 2d       	mov	r22, r5
    1904:	70 e0       	ldi	r23, 0x00	; 0
    1906:	02 c0       	rjmp	.+4      	; 0x190c <vfprintf+0x15e>
    1908:	6f ef       	ldi	r22, 0xFF	; 255
    190a:	7f ef       	ldi	r23, 0xFF	; 255
    190c:	c5 01       	movw	r24, r10
    190e:	2c 87       	std	Y+12, r18	; 0x0c
    1910:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <strnlen_P>
    1914:	2c 01       	movw	r4, r24
    1916:	2c 85       	ldd	r18, Y+12	; 0x0c
    1918:	20 68       	ori	r18, 0x80	; 128
    191a:	22 2e       	mov	r2, r18
    191c:	83 01       	movw	r16, r6
    191e:	23 fc       	sbrc	r2, 3
    1920:	1b c0       	rjmp	.+54     	; 0x1958 <vfprintf+0x1aa>
    1922:	83 2d       	mov	r24, r3
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	48 16       	cp	r4, r24
    1928:	59 06       	cpc	r5, r25
    192a:	b0 f4       	brcc	.+44     	; 0x1958 <vfprintf+0x1aa>
    192c:	b7 01       	movw	r22, r14
    192e:	80 e2       	ldi	r24, 0x20	; 32
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <fputc>
    1936:	3a 94       	dec	r3
    1938:	f4 cf       	rjmp	.-24     	; 0x1922 <vfprintf+0x174>
    193a:	f5 01       	movw	r30, r10
    193c:	27 fc       	sbrc	r2, 7
    193e:	85 91       	lpm	r24, Z+
    1940:	27 fe       	sbrs	r2, 7
    1942:	81 91       	ld	r24, Z+
    1944:	5f 01       	movw	r10, r30
    1946:	b7 01       	movw	r22, r14
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <fputc>
    194e:	31 10       	cpse	r3, r1
    1950:	3a 94       	dec	r3
    1952:	f1 e0       	ldi	r31, 0x01	; 1
    1954:	4f 1a       	sub	r4, r31
    1956:	51 08       	sbc	r5, r1
    1958:	41 14       	cp	r4, r1
    195a:	51 04       	cpc	r5, r1
    195c:	71 f7       	brne	.-36     	; 0x193a <vfprintf+0x18c>
    195e:	e5 c0       	rjmp	.+458    	; 0x1b2a <vfprintf+0x37c>
    1960:	84 36       	cpi	r24, 0x64	; 100
    1962:	11 f0       	breq	.+4      	; 0x1968 <vfprintf+0x1ba>
    1964:	89 36       	cpi	r24, 0x69	; 105
    1966:	39 f5       	brne	.+78     	; 0x19b6 <vfprintf+0x208>
    1968:	f8 01       	movw	r30, r16
    196a:	27 ff       	sbrs	r18, 7
    196c:	07 c0       	rjmp	.+14     	; 0x197c <vfprintf+0x1ce>
    196e:	60 81       	ld	r22, Z
    1970:	71 81       	ldd	r23, Z+1	; 0x01
    1972:	82 81       	ldd	r24, Z+2	; 0x02
    1974:	93 81       	ldd	r25, Z+3	; 0x03
    1976:	0c 5f       	subi	r16, 0xFC	; 252
    1978:	1f 4f       	sbci	r17, 0xFF	; 255
    197a:	08 c0       	rjmp	.+16     	; 0x198c <vfprintf+0x1de>
    197c:	60 81       	ld	r22, Z
    197e:	71 81       	ldd	r23, Z+1	; 0x01
    1980:	88 27       	eor	r24, r24
    1982:	77 fd       	sbrc	r23, 7
    1984:	80 95       	com	r24
    1986:	98 2f       	mov	r25, r24
    1988:	0e 5f       	subi	r16, 0xFE	; 254
    198a:	1f 4f       	sbci	r17, 0xFF	; 255
    198c:	2f 76       	andi	r18, 0x6F	; 111
    198e:	b2 2e       	mov	r11, r18
    1990:	97 ff       	sbrs	r25, 7
    1992:	09 c0       	rjmp	.+18     	; 0x19a6 <vfprintf+0x1f8>
    1994:	90 95       	com	r25
    1996:	80 95       	com	r24
    1998:	70 95       	com	r23
    199a:	61 95       	neg	r22
    199c:	7f 4f       	sbci	r23, 0xFF	; 255
    199e:	8f 4f       	sbci	r24, 0xFF	; 255
    19a0:	9f 4f       	sbci	r25, 0xFF	; 255
    19a2:	20 68       	ori	r18, 0x80	; 128
    19a4:	b2 2e       	mov	r11, r18
    19a6:	2a e0       	ldi	r18, 0x0A	; 10
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	a4 01       	movw	r20, r8
    19ac:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__ultoa_invert>
    19b0:	a8 2e       	mov	r10, r24
    19b2:	a8 18       	sub	r10, r8
    19b4:	44 c0       	rjmp	.+136    	; 0x1a3e <vfprintf+0x290>
    19b6:	85 37       	cpi	r24, 0x75	; 117
    19b8:	29 f4       	brne	.+10     	; 0x19c4 <vfprintf+0x216>
    19ba:	2f 7e       	andi	r18, 0xEF	; 239
    19bc:	b2 2e       	mov	r11, r18
    19be:	2a e0       	ldi	r18, 0x0A	; 10
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	25 c0       	rjmp	.+74     	; 0x1a0e <vfprintf+0x260>
    19c4:	f2 2f       	mov	r31, r18
    19c6:	f9 7f       	andi	r31, 0xF9	; 249
    19c8:	bf 2e       	mov	r11, r31
    19ca:	8f 36       	cpi	r24, 0x6F	; 111
    19cc:	c1 f0       	breq	.+48     	; 0x19fe <vfprintf+0x250>
    19ce:	18 f4       	brcc	.+6      	; 0x19d6 <vfprintf+0x228>
    19d0:	88 35       	cpi	r24, 0x58	; 88
    19d2:	79 f0       	breq	.+30     	; 0x19f2 <vfprintf+0x244>
    19d4:	b4 c0       	rjmp	.+360    	; 0x1b3e <vfprintf+0x390>
    19d6:	80 37       	cpi	r24, 0x70	; 112
    19d8:	19 f0       	breq	.+6      	; 0x19e0 <vfprintf+0x232>
    19da:	88 37       	cpi	r24, 0x78	; 120
    19dc:	21 f0       	breq	.+8      	; 0x19e6 <vfprintf+0x238>
    19de:	af c0       	rjmp	.+350    	; 0x1b3e <vfprintf+0x390>
    19e0:	2f 2f       	mov	r18, r31
    19e2:	20 61       	ori	r18, 0x10	; 16
    19e4:	b2 2e       	mov	r11, r18
    19e6:	b4 fe       	sbrs	r11, 4
    19e8:	0d c0       	rjmp	.+26     	; 0x1a04 <vfprintf+0x256>
    19ea:	8b 2d       	mov	r24, r11
    19ec:	84 60       	ori	r24, 0x04	; 4
    19ee:	b8 2e       	mov	r11, r24
    19f0:	09 c0       	rjmp	.+18     	; 0x1a04 <vfprintf+0x256>
    19f2:	24 ff       	sbrs	r18, 4
    19f4:	0a c0       	rjmp	.+20     	; 0x1a0a <vfprintf+0x25c>
    19f6:	9f 2f       	mov	r25, r31
    19f8:	96 60       	ori	r25, 0x06	; 6
    19fa:	b9 2e       	mov	r11, r25
    19fc:	06 c0       	rjmp	.+12     	; 0x1a0a <vfprintf+0x25c>
    19fe:	28 e0       	ldi	r18, 0x08	; 8
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	05 c0       	rjmp	.+10     	; 0x1a0e <vfprintf+0x260>
    1a04:	20 e1       	ldi	r18, 0x10	; 16
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <vfprintf+0x260>
    1a0a:	20 e1       	ldi	r18, 0x10	; 16
    1a0c:	32 e0       	ldi	r19, 0x02	; 2
    1a0e:	f8 01       	movw	r30, r16
    1a10:	b7 fe       	sbrs	r11, 7
    1a12:	07 c0       	rjmp	.+14     	; 0x1a22 <vfprintf+0x274>
    1a14:	60 81       	ld	r22, Z
    1a16:	71 81       	ldd	r23, Z+1	; 0x01
    1a18:	82 81       	ldd	r24, Z+2	; 0x02
    1a1a:	93 81       	ldd	r25, Z+3	; 0x03
    1a1c:	0c 5f       	subi	r16, 0xFC	; 252
    1a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a20:	06 c0       	rjmp	.+12     	; 0x1a2e <vfprintf+0x280>
    1a22:	60 81       	ld	r22, Z
    1a24:	71 81       	ldd	r23, Z+1	; 0x01
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	0e 5f       	subi	r16, 0xFE	; 254
    1a2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2e:	a4 01       	movw	r20, r8
    1a30:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__ultoa_invert>
    1a34:	a8 2e       	mov	r10, r24
    1a36:	a8 18       	sub	r10, r8
    1a38:	fb 2d       	mov	r31, r11
    1a3a:	ff 77       	andi	r31, 0x7F	; 127
    1a3c:	bf 2e       	mov	r11, r31
    1a3e:	b6 fe       	sbrs	r11, 6
    1a40:	0b c0       	rjmp	.+22     	; 0x1a58 <vfprintf+0x2aa>
    1a42:	2b 2d       	mov	r18, r11
    1a44:	2e 7f       	andi	r18, 0xFE	; 254
    1a46:	a5 14       	cp	r10, r5
    1a48:	50 f4       	brcc	.+20     	; 0x1a5e <vfprintf+0x2b0>
    1a4a:	b4 fe       	sbrs	r11, 4
    1a4c:	0a c0       	rjmp	.+20     	; 0x1a62 <vfprintf+0x2b4>
    1a4e:	b2 fc       	sbrc	r11, 2
    1a50:	08 c0       	rjmp	.+16     	; 0x1a62 <vfprintf+0x2b4>
    1a52:	2b 2d       	mov	r18, r11
    1a54:	2e 7e       	andi	r18, 0xEE	; 238
    1a56:	05 c0       	rjmp	.+10     	; 0x1a62 <vfprintf+0x2b4>
    1a58:	7a 2c       	mov	r7, r10
    1a5a:	2b 2d       	mov	r18, r11
    1a5c:	03 c0       	rjmp	.+6      	; 0x1a64 <vfprintf+0x2b6>
    1a5e:	7a 2c       	mov	r7, r10
    1a60:	01 c0       	rjmp	.+2      	; 0x1a64 <vfprintf+0x2b6>
    1a62:	75 2c       	mov	r7, r5
    1a64:	24 ff       	sbrs	r18, 4
    1a66:	0d c0       	rjmp	.+26     	; 0x1a82 <vfprintf+0x2d4>
    1a68:	fe 01       	movw	r30, r28
    1a6a:	ea 0d       	add	r30, r10
    1a6c:	f1 1d       	adc	r31, r1
    1a6e:	80 81       	ld	r24, Z
    1a70:	80 33       	cpi	r24, 0x30	; 48
    1a72:	11 f4       	brne	.+4      	; 0x1a78 <vfprintf+0x2ca>
    1a74:	29 7e       	andi	r18, 0xE9	; 233
    1a76:	09 c0       	rjmp	.+18     	; 0x1a8a <vfprintf+0x2dc>
    1a78:	22 ff       	sbrs	r18, 2
    1a7a:	06 c0       	rjmp	.+12     	; 0x1a88 <vfprintf+0x2da>
    1a7c:	73 94       	inc	r7
    1a7e:	73 94       	inc	r7
    1a80:	04 c0       	rjmp	.+8      	; 0x1a8a <vfprintf+0x2dc>
    1a82:	82 2f       	mov	r24, r18
    1a84:	86 78       	andi	r24, 0x86	; 134
    1a86:	09 f0       	breq	.+2      	; 0x1a8a <vfprintf+0x2dc>
    1a88:	73 94       	inc	r7
    1a8a:	23 fd       	sbrc	r18, 3
    1a8c:	13 c0       	rjmp	.+38     	; 0x1ab4 <vfprintf+0x306>
    1a8e:	20 ff       	sbrs	r18, 0
    1a90:	06 c0       	rjmp	.+12     	; 0x1a9e <vfprintf+0x2f0>
    1a92:	5a 2c       	mov	r5, r10
    1a94:	73 14       	cp	r7, r3
    1a96:	18 f4       	brcc	.+6      	; 0x1a9e <vfprintf+0x2f0>
    1a98:	53 0c       	add	r5, r3
    1a9a:	57 18       	sub	r5, r7
    1a9c:	73 2c       	mov	r7, r3
    1a9e:	73 14       	cp	r7, r3
    1aa0:	68 f4       	brcc	.+26     	; 0x1abc <vfprintf+0x30e>
    1aa2:	b7 01       	movw	r22, r14
    1aa4:	80 e2       	ldi	r24, 0x20	; 32
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	2c 87       	std	Y+12, r18	; 0x0c
    1aaa:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <fputc>
    1aae:	73 94       	inc	r7
    1ab0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ab2:	f5 cf       	rjmp	.-22     	; 0x1a9e <vfprintf+0x2f0>
    1ab4:	73 14       	cp	r7, r3
    1ab6:	10 f4       	brcc	.+4      	; 0x1abc <vfprintf+0x30e>
    1ab8:	37 18       	sub	r3, r7
    1aba:	01 c0       	rjmp	.+2      	; 0x1abe <vfprintf+0x310>
    1abc:	31 2c       	mov	r3, r1
    1abe:	24 ff       	sbrs	r18, 4
    1ac0:	12 c0       	rjmp	.+36     	; 0x1ae6 <vfprintf+0x338>
    1ac2:	b7 01       	movw	r22, r14
    1ac4:	80 e3       	ldi	r24, 0x30	; 48
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	2c 87       	std	Y+12, r18	; 0x0c
    1aca:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <fputc>
    1ace:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ad0:	22 ff       	sbrs	r18, 2
    1ad2:	17 c0       	rjmp	.+46     	; 0x1b02 <vfprintf+0x354>
    1ad4:	21 ff       	sbrs	r18, 1
    1ad6:	03 c0       	rjmp	.+6      	; 0x1ade <vfprintf+0x330>
    1ad8:	88 e5       	ldi	r24, 0x58	; 88
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <vfprintf+0x334>
    1ade:	88 e7       	ldi	r24, 0x78	; 120
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	b7 01       	movw	r22, r14
    1ae4:	0c c0       	rjmp	.+24     	; 0x1afe <vfprintf+0x350>
    1ae6:	82 2f       	mov	r24, r18
    1ae8:	86 78       	andi	r24, 0x86	; 134
    1aea:	59 f0       	breq	.+22     	; 0x1b02 <vfprintf+0x354>
    1aec:	21 fd       	sbrc	r18, 1
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <vfprintf+0x346>
    1af0:	80 e2       	ldi	r24, 0x20	; 32
    1af2:	01 c0       	rjmp	.+2      	; 0x1af6 <vfprintf+0x348>
    1af4:	8b e2       	ldi	r24, 0x2B	; 43
    1af6:	27 fd       	sbrc	r18, 7
    1af8:	8d e2       	ldi	r24, 0x2D	; 45
    1afa:	b7 01       	movw	r22, r14
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <fputc>
    1b02:	a5 14       	cp	r10, r5
    1b04:	38 f4       	brcc	.+14     	; 0x1b14 <vfprintf+0x366>
    1b06:	b7 01       	movw	r22, r14
    1b08:	80 e3       	ldi	r24, 0x30	; 48
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <fputc>
    1b10:	5a 94       	dec	r5
    1b12:	f7 cf       	rjmp	.-18     	; 0x1b02 <vfprintf+0x354>
    1b14:	aa 94       	dec	r10
    1b16:	f4 01       	movw	r30, r8
    1b18:	ea 0d       	add	r30, r10
    1b1a:	f1 1d       	adc	r31, r1
    1b1c:	80 81       	ld	r24, Z
    1b1e:	b7 01       	movw	r22, r14
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <fputc>
    1b26:	a1 10       	cpse	r10, r1
    1b28:	f5 cf       	rjmp	.-22     	; 0x1b14 <vfprintf+0x366>
    1b2a:	33 20       	and	r3, r3
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <vfprintf+0x382>
    1b2e:	51 ce       	rjmp	.-862    	; 0x17d2 <vfprintf+0x24>
    1b30:	b7 01       	movw	r22, r14
    1b32:	80 e2       	ldi	r24, 0x20	; 32
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <fputc>
    1b3a:	3a 94       	dec	r3
    1b3c:	f6 cf       	rjmp	.-20     	; 0x1b2a <vfprintf+0x37c>
    1b3e:	f7 01       	movw	r30, r14
    1b40:	86 81       	ldd	r24, Z+6	; 0x06
    1b42:	97 81       	ldd	r25, Z+7	; 0x07
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <vfprintf+0x39c>
    1b46:	8f ef       	ldi	r24, 0xFF	; 255
    1b48:	9f ef       	ldi	r25, 0xFF	; 255
    1b4a:	2c 96       	adiw	r28, 0x0c	; 12
    1b4c:	e2 e1       	ldi	r30, 0x12	; 18
    1b4e:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__epilogue_restores__>

00001b52 <calloc>:
    1b52:	0f 93       	push	r16
    1b54:	1f 93       	push	r17
    1b56:	cf 93       	push	r28
    1b58:	df 93       	push	r29
    1b5a:	86 9f       	mul	r24, r22
    1b5c:	80 01       	movw	r16, r0
    1b5e:	87 9f       	mul	r24, r23
    1b60:	10 0d       	add	r17, r0
    1b62:	96 9f       	mul	r25, r22
    1b64:	10 0d       	add	r17, r0
    1b66:	11 24       	eor	r1, r1
    1b68:	c8 01       	movw	r24, r16
    1b6a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <malloc>
    1b6e:	ec 01       	movw	r28, r24
    1b70:	00 97       	sbiw	r24, 0x00	; 0
    1b72:	29 f0       	breq	.+10     	; 0x1b7e <calloc+0x2c>
    1b74:	a8 01       	movw	r20, r16
    1b76:	60 e0       	ldi	r22, 0x00	; 0
    1b78:	70 e0       	ldi	r23, 0x00	; 0
    1b7a:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <memset>
    1b7e:	ce 01       	movw	r24, r28
    1b80:	df 91       	pop	r29
    1b82:	cf 91       	pop	r28
    1b84:	1f 91       	pop	r17
    1b86:	0f 91       	pop	r16
    1b88:	08 95       	ret

00001b8a <malloc>:
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	82 30       	cpi	r24, 0x02	; 2
    1b90:	91 05       	cpc	r25, r1
    1b92:	10 f4       	brcc	.+4      	; 0x1b98 <malloc+0xe>
    1b94:	82 e0       	ldi	r24, 0x02	; 2
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	e0 91 d7 01 	lds	r30, 0x01D7
    1b9c:	f0 91 d8 01 	lds	r31, 0x01D8
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	a0 e0       	ldi	r26, 0x00	; 0
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	30 97       	sbiw	r30, 0x00	; 0
    1baa:	39 f1       	breq	.+78     	; 0x1bfa <malloc+0x70>
    1bac:	40 81       	ld	r20, Z
    1bae:	51 81       	ldd	r21, Z+1	; 0x01
    1bb0:	48 17       	cp	r20, r24
    1bb2:	59 07       	cpc	r21, r25
    1bb4:	b8 f0       	brcs	.+46     	; 0x1be4 <malloc+0x5a>
    1bb6:	48 17       	cp	r20, r24
    1bb8:	59 07       	cpc	r21, r25
    1bba:	71 f4       	brne	.+28     	; 0x1bd8 <malloc+0x4e>
    1bbc:	82 81       	ldd	r24, Z+2	; 0x02
    1bbe:	93 81       	ldd	r25, Z+3	; 0x03
    1bc0:	10 97       	sbiw	r26, 0x00	; 0
    1bc2:	29 f0       	breq	.+10     	; 0x1bce <malloc+0x44>
    1bc4:	13 96       	adiw	r26, 0x03	; 3
    1bc6:	9c 93       	st	X, r25
    1bc8:	8e 93       	st	-X, r24
    1bca:	12 97       	sbiw	r26, 0x02	; 2
    1bcc:	2c c0       	rjmp	.+88     	; 0x1c26 <malloc+0x9c>
    1bce:	90 93 d8 01 	sts	0x01D8, r25
    1bd2:	80 93 d7 01 	sts	0x01D7, r24
    1bd6:	27 c0       	rjmp	.+78     	; 0x1c26 <malloc+0x9c>
    1bd8:	21 15       	cp	r18, r1
    1bda:	31 05       	cpc	r19, r1
    1bdc:	31 f0       	breq	.+12     	; 0x1bea <malloc+0x60>
    1bde:	42 17       	cp	r20, r18
    1be0:	53 07       	cpc	r21, r19
    1be2:	18 f0       	brcs	.+6      	; 0x1bea <malloc+0x60>
    1be4:	a9 01       	movw	r20, r18
    1be6:	db 01       	movw	r26, r22
    1be8:	01 c0       	rjmp	.+2      	; 0x1bec <malloc+0x62>
    1bea:	ef 01       	movw	r28, r30
    1bec:	9a 01       	movw	r18, r20
    1bee:	bd 01       	movw	r22, r26
    1bf0:	df 01       	movw	r26, r30
    1bf2:	02 80       	ldd	r0, Z+2	; 0x02
    1bf4:	f3 81       	ldd	r31, Z+3	; 0x03
    1bf6:	e0 2d       	mov	r30, r0
    1bf8:	d7 cf       	rjmp	.-82     	; 0x1ba8 <malloc+0x1e>
    1bfa:	21 15       	cp	r18, r1
    1bfc:	31 05       	cpc	r19, r1
    1bfe:	f9 f0       	breq	.+62     	; 0x1c3e <malloc+0xb4>
    1c00:	28 1b       	sub	r18, r24
    1c02:	39 0b       	sbc	r19, r25
    1c04:	24 30       	cpi	r18, 0x04	; 4
    1c06:	31 05       	cpc	r19, r1
    1c08:	80 f4       	brcc	.+32     	; 0x1c2a <malloc+0xa0>
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0e:	61 15       	cp	r22, r1
    1c10:	71 05       	cpc	r23, r1
    1c12:	21 f0       	breq	.+8      	; 0x1c1c <malloc+0x92>
    1c14:	fb 01       	movw	r30, r22
    1c16:	93 83       	std	Z+3, r25	; 0x03
    1c18:	82 83       	std	Z+2, r24	; 0x02
    1c1a:	04 c0       	rjmp	.+8      	; 0x1c24 <malloc+0x9a>
    1c1c:	90 93 d8 01 	sts	0x01D8, r25
    1c20:	80 93 d7 01 	sts	0x01D7, r24
    1c24:	fe 01       	movw	r30, r28
    1c26:	32 96       	adiw	r30, 0x02	; 2
    1c28:	44 c0       	rjmp	.+136    	; 0x1cb2 <malloc+0x128>
    1c2a:	fe 01       	movw	r30, r28
    1c2c:	e2 0f       	add	r30, r18
    1c2e:	f3 1f       	adc	r31, r19
    1c30:	81 93       	st	Z+, r24
    1c32:	91 93       	st	Z+, r25
    1c34:	22 50       	subi	r18, 0x02	; 2
    1c36:	31 09       	sbc	r19, r1
    1c38:	39 83       	std	Y+1, r19	; 0x01
    1c3a:	28 83       	st	Y, r18
    1c3c:	3a c0       	rjmp	.+116    	; 0x1cb2 <malloc+0x128>
    1c3e:	20 91 d5 01 	lds	r18, 0x01D5
    1c42:	30 91 d6 01 	lds	r19, 0x01D6
    1c46:	23 2b       	or	r18, r19
    1c48:	41 f4       	brne	.+16     	; 0x1c5a <malloc+0xd0>
    1c4a:	20 91 02 01 	lds	r18, 0x0102
    1c4e:	30 91 03 01 	lds	r19, 0x0103
    1c52:	30 93 d6 01 	sts	0x01D6, r19
    1c56:	20 93 d5 01 	sts	0x01D5, r18
    1c5a:	20 91 00 01 	lds	r18, 0x0100
    1c5e:	30 91 01 01 	lds	r19, 0x0101
    1c62:	21 15       	cp	r18, r1
    1c64:	31 05       	cpc	r19, r1
    1c66:	41 f4       	brne	.+16     	; 0x1c78 <malloc+0xee>
    1c68:	2d b7       	in	r18, 0x3d	; 61
    1c6a:	3e b7       	in	r19, 0x3e	; 62
    1c6c:	40 91 04 01 	lds	r20, 0x0104
    1c70:	50 91 05 01 	lds	r21, 0x0105
    1c74:	24 1b       	sub	r18, r20
    1c76:	35 0b       	sbc	r19, r21
    1c78:	e0 91 d5 01 	lds	r30, 0x01D5
    1c7c:	f0 91 d6 01 	lds	r31, 0x01D6
    1c80:	e2 17       	cp	r30, r18
    1c82:	f3 07       	cpc	r31, r19
    1c84:	a0 f4       	brcc	.+40     	; 0x1cae <malloc+0x124>
    1c86:	2e 1b       	sub	r18, r30
    1c88:	3f 0b       	sbc	r19, r31
    1c8a:	28 17       	cp	r18, r24
    1c8c:	39 07       	cpc	r19, r25
    1c8e:	78 f0       	brcs	.+30     	; 0x1cae <malloc+0x124>
    1c90:	ac 01       	movw	r20, r24
    1c92:	4e 5f       	subi	r20, 0xFE	; 254
    1c94:	5f 4f       	sbci	r21, 0xFF	; 255
    1c96:	24 17       	cp	r18, r20
    1c98:	35 07       	cpc	r19, r21
    1c9a:	48 f0       	brcs	.+18     	; 0x1cae <malloc+0x124>
    1c9c:	4e 0f       	add	r20, r30
    1c9e:	5f 1f       	adc	r21, r31
    1ca0:	50 93 d6 01 	sts	0x01D6, r21
    1ca4:	40 93 d5 01 	sts	0x01D5, r20
    1ca8:	81 93       	st	Z+, r24
    1caa:	91 93       	st	Z+, r25
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <malloc+0x128>
    1cae:	e0 e0       	ldi	r30, 0x00	; 0
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	cf 01       	movw	r24, r30
    1cb4:	df 91       	pop	r29
    1cb6:	cf 91       	pop	r28
    1cb8:	08 95       	ret

00001cba <free>:
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	00 97       	sbiw	r24, 0x00	; 0
    1cc0:	09 f4       	brne	.+2      	; 0x1cc4 <free+0xa>
    1cc2:	87 c0       	rjmp	.+270    	; 0x1dd2 <free+0x118>
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	32 97       	sbiw	r30, 0x02	; 2
    1cc8:	13 82       	std	Z+3, r1	; 0x03
    1cca:	12 82       	std	Z+2, r1	; 0x02
    1ccc:	c0 91 d7 01 	lds	r28, 0x01D7
    1cd0:	d0 91 d8 01 	lds	r29, 0x01D8
    1cd4:	20 97       	sbiw	r28, 0x00	; 0
    1cd6:	81 f4       	brne	.+32     	; 0x1cf8 <free+0x3e>
    1cd8:	20 81       	ld	r18, Z
    1cda:	31 81       	ldd	r19, Z+1	; 0x01
    1cdc:	28 0f       	add	r18, r24
    1cde:	39 1f       	adc	r19, r25
    1ce0:	80 91 d5 01 	lds	r24, 0x01D5
    1ce4:	90 91 d6 01 	lds	r25, 0x01D6
    1ce8:	82 17       	cp	r24, r18
    1cea:	93 07       	cpc	r25, r19
    1cec:	79 f5       	brne	.+94     	; 0x1d4c <free+0x92>
    1cee:	f0 93 d6 01 	sts	0x01D6, r31
    1cf2:	e0 93 d5 01 	sts	0x01D5, r30
    1cf6:	6d c0       	rjmp	.+218    	; 0x1dd2 <free+0x118>
    1cf8:	de 01       	movw	r26, r28
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	ae 17       	cp	r26, r30
    1d00:	bf 07       	cpc	r27, r31
    1d02:	50 f4       	brcc	.+20     	; 0x1d18 <free+0x5e>
    1d04:	12 96       	adiw	r26, 0x02	; 2
    1d06:	4d 91       	ld	r20, X+
    1d08:	5c 91       	ld	r21, X
    1d0a:	13 97       	sbiw	r26, 0x03	; 3
    1d0c:	9d 01       	movw	r18, r26
    1d0e:	41 15       	cp	r20, r1
    1d10:	51 05       	cpc	r21, r1
    1d12:	09 f1       	breq	.+66     	; 0x1d56 <free+0x9c>
    1d14:	da 01       	movw	r26, r20
    1d16:	f3 cf       	rjmp	.-26     	; 0x1cfe <free+0x44>
    1d18:	b3 83       	std	Z+3, r27	; 0x03
    1d1a:	a2 83       	std	Z+2, r26	; 0x02
    1d1c:	40 81       	ld	r20, Z
    1d1e:	51 81       	ldd	r21, Z+1	; 0x01
    1d20:	84 0f       	add	r24, r20
    1d22:	95 1f       	adc	r25, r21
    1d24:	8a 17       	cp	r24, r26
    1d26:	9b 07       	cpc	r25, r27
    1d28:	71 f4       	brne	.+28     	; 0x1d46 <free+0x8c>
    1d2a:	8d 91       	ld	r24, X+
    1d2c:	9c 91       	ld	r25, X
    1d2e:	11 97       	sbiw	r26, 0x01	; 1
    1d30:	84 0f       	add	r24, r20
    1d32:	95 1f       	adc	r25, r21
    1d34:	02 96       	adiw	r24, 0x02	; 2
    1d36:	91 83       	std	Z+1, r25	; 0x01
    1d38:	80 83       	st	Z, r24
    1d3a:	12 96       	adiw	r26, 0x02	; 2
    1d3c:	8d 91       	ld	r24, X+
    1d3e:	9c 91       	ld	r25, X
    1d40:	13 97       	sbiw	r26, 0x03	; 3
    1d42:	93 83       	std	Z+3, r25	; 0x03
    1d44:	82 83       	std	Z+2, r24	; 0x02
    1d46:	21 15       	cp	r18, r1
    1d48:	31 05       	cpc	r19, r1
    1d4a:	29 f4       	brne	.+10     	; 0x1d56 <free+0x9c>
    1d4c:	f0 93 d8 01 	sts	0x01D8, r31
    1d50:	e0 93 d7 01 	sts	0x01D7, r30
    1d54:	3e c0       	rjmp	.+124    	; 0x1dd2 <free+0x118>
    1d56:	d9 01       	movw	r26, r18
    1d58:	13 96       	adiw	r26, 0x03	; 3
    1d5a:	fc 93       	st	X, r31
    1d5c:	ee 93       	st	-X, r30
    1d5e:	12 97       	sbiw	r26, 0x02	; 2
    1d60:	4d 91       	ld	r20, X+
    1d62:	5d 91       	ld	r21, X+
    1d64:	a4 0f       	add	r26, r20
    1d66:	b5 1f       	adc	r27, r21
    1d68:	ea 17       	cp	r30, r26
    1d6a:	fb 07       	cpc	r31, r27
    1d6c:	79 f4       	brne	.+30     	; 0x1d8c <free+0xd2>
    1d6e:	80 81       	ld	r24, Z
    1d70:	91 81       	ldd	r25, Z+1	; 0x01
    1d72:	84 0f       	add	r24, r20
    1d74:	95 1f       	adc	r25, r21
    1d76:	02 96       	adiw	r24, 0x02	; 2
    1d78:	d9 01       	movw	r26, r18
    1d7a:	11 96       	adiw	r26, 0x01	; 1
    1d7c:	9c 93       	st	X, r25
    1d7e:	8e 93       	st	-X, r24
    1d80:	82 81       	ldd	r24, Z+2	; 0x02
    1d82:	93 81       	ldd	r25, Z+3	; 0x03
    1d84:	13 96       	adiw	r26, 0x03	; 3
    1d86:	9c 93       	st	X, r25
    1d88:	8e 93       	st	-X, r24
    1d8a:	12 97       	sbiw	r26, 0x02	; 2
    1d8c:	e0 e0       	ldi	r30, 0x00	; 0
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	9b 81       	ldd	r25, Y+3	; 0x03
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	19 f0       	breq	.+6      	; 0x1d9e <free+0xe4>
    1d98:	fe 01       	movw	r30, r28
    1d9a:	ec 01       	movw	r28, r24
    1d9c:	f9 cf       	rjmp	.-14     	; 0x1d90 <free+0xd6>
    1d9e:	ce 01       	movw	r24, r28
    1da0:	02 96       	adiw	r24, 0x02	; 2
    1da2:	28 81       	ld	r18, Y
    1da4:	39 81       	ldd	r19, Y+1	; 0x01
    1da6:	82 0f       	add	r24, r18
    1da8:	93 1f       	adc	r25, r19
    1daa:	20 91 d5 01 	lds	r18, 0x01D5
    1dae:	30 91 d6 01 	lds	r19, 0x01D6
    1db2:	28 17       	cp	r18, r24
    1db4:	39 07       	cpc	r19, r25
    1db6:	69 f4       	brne	.+26     	; 0x1dd2 <free+0x118>
    1db8:	30 97       	sbiw	r30, 0x00	; 0
    1dba:	29 f4       	brne	.+10     	; 0x1dc6 <free+0x10c>
    1dbc:	10 92 d8 01 	sts	0x01D8, r1
    1dc0:	10 92 d7 01 	sts	0x01D7, r1
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <free+0x110>
    1dc6:	13 82       	std	Z+3, r1	; 0x03
    1dc8:	12 82       	std	Z+2, r1	; 0x02
    1dca:	d0 93 d6 01 	sts	0x01D6, r29
    1dce:	c0 93 d5 01 	sts	0x01D5, r28
    1dd2:	df 91       	pop	r29
    1dd4:	cf 91       	pop	r28
    1dd6:	08 95       	ret

00001dd8 <strnlen_P>:
    1dd8:	fc 01       	movw	r30, r24
    1dda:	05 90       	lpm	r0, Z+
    1ddc:	61 50       	subi	r22, 0x01	; 1
    1dde:	70 40       	sbci	r23, 0x00	; 0
    1de0:	01 10       	cpse	r0, r1
    1de2:	d8 f7       	brcc	.-10     	; 0x1dda <strnlen_P+0x2>
    1de4:	80 95       	com	r24
    1de6:	90 95       	com	r25
    1de8:	8e 0f       	add	r24, r30
    1dea:	9f 1f       	adc	r25, r31
    1dec:	08 95       	ret

00001dee <memset>:
    1dee:	dc 01       	movw	r26, r24
    1df0:	01 c0       	rjmp	.+2      	; 0x1df4 <memset+0x6>
    1df2:	6d 93       	st	X+, r22
    1df4:	41 50       	subi	r20, 0x01	; 1
    1df6:	50 40       	sbci	r21, 0x00	; 0
    1df8:	e0 f7       	brcc	.-8      	; 0x1df2 <memset+0x4>
    1dfa:	08 95       	ret

00001dfc <strnlen>:
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	61 50       	subi	r22, 0x01	; 1
    1e00:	70 40       	sbci	r23, 0x00	; 0
    1e02:	01 90       	ld	r0, Z+
    1e04:	01 10       	cpse	r0, r1
    1e06:	d8 f7       	brcc	.-10     	; 0x1dfe <strnlen+0x2>
    1e08:	80 95       	com	r24
    1e0a:	90 95       	com	r25
    1e0c:	8e 0f       	add	r24, r30
    1e0e:	9f 1f       	adc	r25, r31
    1e10:	08 95       	ret

00001e12 <fputc>:
    1e12:	0f 93       	push	r16
    1e14:	1f 93       	push	r17
    1e16:	cf 93       	push	r28
    1e18:	df 93       	push	r29
    1e1a:	18 2f       	mov	r17, r24
    1e1c:	09 2f       	mov	r16, r25
    1e1e:	eb 01       	movw	r28, r22
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	81 fd       	sbrc	r24, 1
    1e24:	03 c0       	rjmp	.+6      	; 0x1e2c <fputc+0x1a>
    1e26:	8f ef       	ldi	r24, 0xFF	; 255
    1e28:	9f ef       	ldi	r25, 0xFF	; 255
    1e2a:	20 c0       	rjmp	.+64     	; 0x1e6c <fputc+0x5a>
    1e2c:	82 ff       	sbrs	r24, 2
    1e2e:	10 c0       	rjmp	.+32     	; 0x1e50 <fputc+0x3e>
    1e30:	4e 81       	ldd	r20, Y+6	; 0x06
    1e32:	5f 81       	ldd	r21, Y+7	; 0x07
    1e34:	2c 81       	ldd	r18, Y+4	; 0x04
    1e36:	3d 81       	ldd	r19, Y+5	; 0x05
    1e38:	42 17       	cp	r20, r18
    1e3a:	53 07       	cpc	r21, r19
    1e3c:	7c f4       	brge	.+30     	; 0x1e5c <fputc+0x4a>
    1e3e:	e8 81       	ld	r30, Y
    1e40:	f9 81       	ldd	r31, Y+1	; 0x01
    1e42:	9f 01       	movw	r18, r30
    1e44:	2f 5f       	subi	r18, 0xFF	; 255
    1e46:	3f 4f       	sbci	r19, 0xFF	; 255
    1e48:	39 83       	std	Y+1, r19	; 0x01
    1e4a:	28 83       	st	Y, r18
    1e4c:	10 83       	st	Z, r17
    1e4e:	06 c0       	rjmp	.+12     	; 0x1e5c <fputc+0x4a>
    1e50:	e8 85       	ldd	r30, Y+8	; 0x08
    1e52:	f9 85       	ldd	r31, Y+9	; 0x09
    1e54:	81 2f       	mov	r24, r17
    1e56:	09 95       	icall
    1e58:	89 2b       	or	r24, r25
    1e5a:	29 f7       	brne	.-54     	; 0x1e26 <fputc+0x14>
    1e5c:	2e 81       	ldd	r18, Y+6	; 0x06
    1e5e:	3f 81       	ldd	r19, Y+7	; 0x07
    1e60:	2f 5f       	subi	r18, 0xFF	; 255
    1e62:	3f 4f       	sbci	r19, 0xFF	; 255
    1e64:	3f 83       	std	Y+7, r19	; 0x07
    1e66:	2e 83       	std	Y+6, r18	; 0x06
    1e68:	81 2f       	mov	r24, r17
    1e6a:	90 2f       	mov	r25, r16
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	1f 91       	pop	r17
    1e72:	0f 91       	pop	r16
    1e74:	08 95       	ret

00001e76 <__ultoa_invert>:
    1e76:	fa 01       	movw	r30, r20
    1e78:	aa 27       	eor	r26, r26
    1e7a:	28 30       	cpi	r18, 0x08	; 8
    1e7c:	51 f1       	breq	.+84     	; 0x1ed2 <__ultoa_invert+0x5c>
    1e7e:	20 31       	cpi	r18, 0x10	; 16
    1e80:	81 f1       	breq	.+96     	; 0x1ee2 <__ultoa_invert+0x6c>
    1e82:	e8 94       	clt
    1e84:	6f 93       	push	r22
    1e86:	6e 7f       	andi	r22, 0xFE	; 254
    1e88:	6e 5f       	subi	r22, 0xFE	; 254
    1e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e8c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e90:	af 4f       	sbci	r26, 0xFF	; 255
    1e92:	b1 e0       	ldi	r27, 0x01	; 1
    1e94:	3e d0       	rcall	.+124    	; 0x1f12 <__ultoa_invert+0x9c>
    1e96:	b4 e0       	ldi	r27, 0x04	; 4
    1e98:	3c d0       	rcall	.+120    	; 0x1f12 <__ultoa_invert+0x9c>
    1e9a:	67 0f       	add	r22, r23
    1e9c:	78 1f       	adc	r23, r24
    1e9e:	89 1f       	adc	r24, r25
    1ea0:	9a 1f       	adc	r25, r26
    1ea2:	a1 1d       	adc	r26, r1
    1ea4:	68 0f       	add	r22, r24
    1ea6:	79 1f       	adc	r23, r25
    1ea8:	8a 1f       	adc	r24, r26
    1eaa:	91 1d       	adc	r25, r1
    1eac:	a1 1d       	adc	r26, r1
    1eae:	6a 0f       	add	r22, r26
    1eb0:	71 1d       	adc	r23, r1
    1eb2:	81 1d       	adc	r24, r1
    1eb4:	91 1d       	adc	r25, r1
    1eb6:	a1 1d       	adc	r26, r1
    1eb8:	20 d0       	rcall	.+64     	; 0x1efa <__ultoa_invert+0x84>
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <__ultoa_invert+0x48>
    1ebc:	68 94       	set
    1ebe:	3f 91       	pop	r19
    1ec0:	2a e0       	ldi	r18, 0x0A	; 10
    1ec2:	26 9f       	mul	r18, r22
    1ec4:	11 24       	eor	r1, r1
    1ec6:	30 19       	sub	r19, r0
    1ec8:	30 5d       	subi	r19, 0xD0	; 208
    1eca:	31 93       	st	Z+, r19
    1ecc:	de f6       	brtc	.-74     	; 0x1e84 <__ultoa_invert+0xe>
    1ece:	cf 01       	movw	r24, r30
    1ed0:	08 95       	ret
    1ed2:	46 2f       	mov	r20, r22
    1ed4:	47 70       	andi	r20, 0x07	; 7
    1ed6:	40 5d       	subi	r20, 0xD0	; 208
    1ed8:	41 93       	st	Z+, r20
    1eda:	b3 e0       	ldi	r27, 0x03	; 3
    1edc:	0f d0       	rcall	.+30     	; 0x1efc <__ultoa_invert+0x86>
    1ede:	c9 f7       	brne	.-14     	; 0x1ed2 <__ultoa_invert+0x5c>
    1ee0:	f6 cf       	rjmp	.-20     	; 0x1ece <__ultoa_invert+0x58>
    1ee2:	46 2f       	mov	r20, r22
    1ee4:	4f 70       	andi	r20, 0x0F	; 15
    1ee6:	40 5d       	subi	r20, 0xD0	; 208
    1ee8:	4a 33       	cpi	r20, 0x3A	; 58
    1eea:	18 f0       	brcs	.+6      	; 0x1ef2 <__ultoa_invert+0x7c>
    1eec:	49 5d       	subi	r20, 0xD9	; 217
    1eee:	31 fd       	sbrc	r19, 1
    1ef0:	40 52       	subi	r20, 0x20	; 32
    1ef2:	41 93       	st	Z+, r20
    1ef4:	02 d0       	rcall	.+4      	; 0x1efa <__ultoa_invert+0x84>
    1ef6:	a9 f7       	brne	.-22     	; 0x1ee2 <__ultoa_invert+0x6c>
    1ef8:	ea cf       	rjmp	.-44     	; 0x1ece <__ultoa_invert+0x58>
    1efa:	b4 e0       	ldi	r27, 0x04	; 4
    1efc:	a6 95       	lsr	r26
    1efe:	97 95       	ror	r25
    1f00:	87 95       	ror	r24
    1f02:	77 95       	ror	r23
    1f04:	67 95       	ror	r22
    1f06:	ba 95       	dec	r27
    1f08:	c9 f7       	brne	.-14     	; 0x1efc <__ultoa_invert+0x86>
    1f0a:	00 97       	sbiw	r24, 0x00	; 0
    1f0c:	61 05       	cpc	r22, r1
    1f0e:	71 05       	cpc	r23, r1
    1f10:	08 95       	ret
    1f12:	9b 01       	movw	r18, r22
    1f14:	ac 01       	movw	r20, r24
    1f16:	0a 2e       	mov	r0, r26
    1f18:	06 94       	lsr	r0
    1f1a:	57 95       	ror	r21
    1f1c:	47 95       	ror	r20
    1f1e:	37 95       	ror	r19
    1f20:	27 95       	ror	r18
    1f22:	ba 95       	dec	r27
    1f24:	c9 f7       	brne	.-14     	; 0x1f18 <__ultoa_invert+0xa2>
    1f26:	62 0f       	add	r22, r18
    1f28:	73 1f       	adc	r23, r19
    1f2a:	84 1f       	adc	r24, r20
    1f2c:	95 1f       	adc	r25, r21
    1f2e:	a0 1d       	adc	r26, r0
    1f30:	08 95       	ret

00001f32 <__prologue_saves__>:
    1f32:	2f 92       	push	r2
    1f34:	3f 92       	push	r3
    1f36:	4f 92       	push	r4
    1f38:	5f 92       	push	r5
    1f3a:	6f 92       	push	r6
    1f3c:	7f 92       	push	r7
    1f3e:	8f 92       	push	r8
    1f40:	9f 92       	push	r9
    1f42:	af 92       	push	r10
    1f44:	bf 92       	push	r11
    1f46:	cf 92       	push	r12
    1f48:	df 92       	push	r13
    1f4a:	ef 92       	push	r14
    1f4c:	ff 92       	push	r15
    1f4e:	0f 93       	push	r16
    1f50:	1f 93       	push	r17
    1f52:	cf 93       	push	r28
    1f54:	df 93       	push	r29
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	ca 1b       	sub	r28, r26
    1f5c:	db 0b       	sbc	r29, r27
    1f5e:	0f b6       	in	r0, 0x3f	; 63
    1f60:	f8 94       	cli
    1f62:	de bf       	out	0x3e, r29	; 62
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	cd bf       	out	0x3d, r28	; 61
    1f68:	09 94       	ijmp

00001f6a <__epilogue_restores__>:
    1f6a:	2a 88       	ldd	r2, Y+18	; 0x12
    1f6c:	39 88       	ldd	r3, Y+17	; 0x11
    1f6e:	48 88       	ldd	r4, Y+16	; 0x10
    1f70:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f72:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f74:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f76:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f78:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f7a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f7c:	b9 84       	ldd	r11, Y+9	; 0x09
    1f7e:	c8 84       	ldd	r12, Y+8	; 0x08
    1f80:	df 80       	ldd	r13, Y+7	; 0x07
    1f82:	ee 80       	ldd	r14, Y+6	; 0x06
    1f84:	fd 80       	ldd	r15, Y+5	; 0x05
    1f86:	0c 81       	ldd	r16, Y+4	; 0x04
    1f88:	1b 81       	ldd	r17, Y+3	; 0x03
    1f8a:	aa 81       	ldd	r26, Y+2	; 0x02
    1f8c:	b9 81       	ldd	r27, Y+1	; 0x01
    1f8e:	ce 0f       	add	r28, r30
    1f90:	d1 1d       	adc	r29, r1
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	ed 01       	movw	r28, r26
    1f9e:	08 95       	ret

00001fa0 <_exit>:
    1fa0:	f8 94       	cli

00001fa2 <__stop_program>:
    1fa2:	ff cf       	rjmp	.-2      	; 0x1fa2 <__stop_program>
