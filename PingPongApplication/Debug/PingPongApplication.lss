
PingPongApplication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800100  00001d7e  00001e12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  008001ac  008001ac  00001ebe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ebe  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000310  00000000  00000000  00001f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000041b7  00000000  00000000  0000222a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001225  00000000  00000000  000063e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001302  00000000  00000000  00007606  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000950  00000000  00000000  00008908  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000098b  00000000  00000000  00009258  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002379  00000000  00000000  00009be3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000290  00000000  00000000  0000bf5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 01 	jmp	0x266	; 0x266 <__ctors_end>
       4:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
       8:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
       c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      10:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      14:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      18:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      1c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      20:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      24:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      28:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      2c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      30:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      34:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      38:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      3c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      40:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      44:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      48:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      4c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      50:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      54:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      58:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      5c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      60:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      64:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      68:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      6c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      70:	b3 09       	sbc	r27, r3
      72:	b9 09       	sbc	r27, r9
      74:	bf 09       	sbc	r27, r15
      76:	c8 09       	sbc	r28, r8
      78:	d1 09       	sbc	r29, r1
      7a:	da 09       	sbc	r29, r10
      7c:	e3 09       	sbc	r30, r3
      7e:	f2 09       	sbc	r31, r2
      80:	ec 09       	sbc	r30, r12
      82:	f8 09       	sbc	r31, r8
      84:	fe 09       	sbc	r31, r14
      86:	07 0a       	sbc	r0, r23
      88:	04 0a       	sbc	r0, r20

0000008a <__trampolines_end>:
      8a:	00 00       	nop
      8c:	00 00       	nop
      8e:	00 00       	nop
      90:	00 5e       	subi	r16, 0xE0	; 224
      92:	00 00       	nop
      94:	00 0e       	add	r0, r16
      96:	00 0e       	add	r0, r16
      98:	00 28       	or	r0, r0
      9a:	7c 28       	or	r7, r12
      9c:	7c 28       	or	r7, r12
      9e:	08 54       	subi	r16, 0x48	; 72
      a0:	7c 54       	subi	r23, 0x4C	; 76
      a2:	20 26       	eor	r2, r16
      a4:	10 08       	sbc	r1, r0
      a6:	64 00       	.word	0x0064	; ????
      a8:	28 54       	subi	r18, 0x48	; 72
      aa:	28 40       	sbci	r18, 0x08	; 8
      ac:	00 00       	nop
      ae:	00 0e       	add	r0, r16
      b0:	00 00       	nop
      b2:	00 3c       	cpi	r16, 0xC0	; 192
      b4:	42 00       	.word	0x0042	; ????
      b6:	00 00       	nop
      b8:	42 3c       	cpi	r20, 0xC2	; 194
      ba:	00 00       	nop
      bc:	00 54       	subi	r16, 0x40	; 64
      be:	38 54       	subi	r19, 0x48	; 72
      c0:	00 10       	cpse	r0, r0
      c2:	10 7c       	andi	r17, 0xC0	; 192
      c4:	10 10       	cpse	r1, r0
      c6:	00 80       	ld	r0, Z
      c8:	60 20       	and	r6, r0
      ca:	00 10       	cpse	r0, r0
      cc:	10 10       	cpse	r1, r0
      ce:	10 00       	.word	0x0010	; ????
      d0:	00 60       	ori	r16, 0x00	; 0
      d2:	60 00       	.word	0x0060	; ????
      d4:	00 20       	and	r0, r0
      d6:	10 08       	sbc	r1, r0
      d8:	04 00       	.word	0x0004	; ????
      da:	00 3c       	cpi	r16, 0xC0	; 192
      dc:	42 3c       	cpi	r20, 0xC2	; 194
      de:	00 00       	nop
      e0:	44 7e       	andi	r20, 0xE4	; 228
      e2:	40 00       	.word	0x0040	; ????
      e4:	44 62       	ori	r20, 0x24	; 36
      e6:	52 4c       	sbci	r21, 0xC2	; 194
      e8:	00 22       	and	r0, r16
      ea:	4a 4a       	sbci	r20, 0xAA	; 170
      ec:	36 00       	.word	0x0036	; ????
      ee:	18 14       	cp	r1, r8
      f0:	7e 10       	cpse	r7, r14
      f2:	00 2e       	mov	r0, r16
      f4:	4a 4a       	sbci	r20, 0xAA	; 170
      f6:	32 00       	.word	0x0032	; ????
      f8:	3c 4a       	sbci	r19, 0xAC	; 172
      fa:	4a 30       	cpi	r20, 0x0A	; 10
      fc:	00 02       	muls	r16, r16
      fe:	62 1a       	sub	r6, r18
     100:	06 00       	.word	0x0006	; ????
     102:	34 4a       	sbci	r19, 0xA4	; 164
     104:	4a 34       	cpi	r20, 0x4A	; 74
     106:	00 0c       	add	r0, r0
     108:	52 52       	subi	r21, 0x22	; 34
     10a:	3c 00       	.word	0x003c	; ????
     10c:	00 6c       	ori	r16, 0xC0	; 192
     10e:	6c 00       	.word	0x006c	; ????
     110:	00 80       	ld	r0, Z
     112:	6c 2c       	mov	r6, r12
     114:	00 00       	nop
     116:	00 10       	cpse	r0, r0
     118:	28 44       	sbci	r18, 0x48	; 72
     11a:	00 28       	or	r0, r0
     11c:	28 28       	or	r2, r8
     11e:	28 00       	.word	0x0028	; ????
     120:	00 44       	sbci	r16, 0x40	; 64
     122:	28 10       	cpse	r2, r8
     124:	00 00       	nop
     126:	04 52       	subi	r16, 0x24	; 36
     128:	0c 00       	.word	0x000c	; ????
     12a:	3c 42       	sbci	r19, 0x2C	; 44
     12c:	5a 1c       	adc	r5, r10
     12e:	00 7c       	andi	r16, 0xC0	; 192
     130:	12 12       	cpse	r1, r18
     132:	7c 00       	.word	0x007c	; ????
     134:	7e 4a       	sbci	r23, 0xAE	; 174
     136:	4a 34       	cpi	r20, 0x4A	; 74
     138:	00 3c       	cpi	r16, 0xC0	; 192
     13a:	42 42       	sbci	r20, 0x22	; 34
     13c:	24 00       	.word	0x0024	; ????
     13e:	7e 42       	sbci	r23, 0x2E	; 46
     140:	42 3c       	cpi	r20, 0xC2	; 194
     142:	00 7e       	andi	r16, 0xE0	; 224
     144:	4a 4a       	sbci	r20, 0xAA	; 170
     146:	42 00       	.word	0x0042	; ????
     148:	7e 0a       	sbc	r7, r30
     14a:	0a 02       	muls	r16, r26
     14c:	00 3c       	cpi	r16, 0xC0	; 192
     14e:	42 52       	subi	r20, 0x22	; 34
     150:	74 00       	.word	0x0074	; ????
     152:	7e 08       	sbc	r7, r14
     154:	08 7e       	andi	r16, 0xE8	; 232
     156:	00 00       	nop
     158:	42 7e       	andi	r20, 0xE2	; 226
     15a:	42 00       	.word	0x0042	; ????
     15c:	20 40       	sbci	r18, 0x00	; 0
     15e:	40 3e       	cpi	r20, 0xE0	; 224
     160:	00 7e       	andi	r16, 0xE0	; 224
     162:	18 24       	eor	r1, r8
     164:	42 00       	.word	0x0042	; ????
     166:	7e 40       	sbci	r23, 0x0E	; 14
     168:	40 40       	sbci	r20, 0x00	; 0
     16a:	00 7e       	andi	r16, 0xE0	; 224
     16c:	0c 0c       	add	r0, r12
     16e:	7e 00       	.word	0x007e	; ????
     170:	7e 0c       	add	r7, r14
     172:	30 7e       	andi	r19, 0xE0	; 224
     174:	00 3c       	cpi	r16, 0xC0	; 192
     176:	42 42       	sbci	r20, 0x22	; 34
     178:	3c 00       	.word	0x003c	; ????
     17a:	7e 12       	cpse	r7, r30
     17c:	12 0c       	add	r1, r2
     17e:	00 3c       	cpi	r16, 0xC0	; 192
     180:	62 42       	sbci	r22, 0x22	; 34
     182:	bc 00       	.word	0x00bc	; ????
     184:	7e 12       	cpse	r7, r30
     186:	32 4c       	sbci	r19, 0xC2	; 194
     188:	00 24       	eor	r0, r0
     18a:	4a 52       	subi	r20, 0x2A	; 42
     18c:	24 00       	.word	0x0024	; ????
     18e:	00 02       	muls	r16, r16
     190:	7e 02       	muls	r23, r30
     192:	00 3e       	cpi	r16, 0xE0	; 224
     194:	40 40       	sbci	r20, 0x00	; 0
     196:	3e 00       	.word	0x003e	; ????
     198:	1e 60       	ori	r17, 0x0E	; 14
     19a:	60 1e       	adc	r6, r16
     19c:	00 7e       	andi	r16, 0xE0	; 224
     19e:	30 30       	cpi	r19, 0x00	; 0
     1a0:	7e 00       	.word	0x007e	; ????
     1a2:	66 18       	sub	r6, r6
     1a4:	18 66       	ori	r17, 0x68	; 104
     1a6:	00 00       	nop
     1a8:	0e 70       	andi	r16, 0x0E	; 14
     1aa:	0e 00       	.word	0x000e	; ????
     1ac:	62 52       	subi	r22, 0x22	; 34
     1ae:	4a 46       	sbci	r20, 0x6A	; 106
     1b0:	00 00       	nop
     1b2:	7e 42       	sbci	r23, 0x2E	; 46
     1b4:	42 00       	.word	0x0042	; ????
     1b6:	04 08       	sbc	r0, r4
     1b8:	10 20       	and	r1, r0
     1ba:	00 00       	nop
     1bc:	42 42       	sbci	r20, 0x22	; 34
     1be:	7e 00       	.word	0x007e	; ????
     1c0:	00 04       	cpc	r0, r0
     1c2:	02 04       	cpc	r0, r2
     1c4:	00 40       	sbci	r16, 0x00	; 0
     1c6:	40 40       	sbci	r20, 0x00	; 0
     1c8:	40 00       	.word	0x0040	; ????
     1ca:	00 02       	muls	r16, r16
     1cc:	04 00       	.word	0x0004	; ????
     1ce:	00 30       	cpi	r16, 0x00	; 0
     1d0:	48 28       	or	r4, r8
     1d2:	78 00       	.word	0x0078	; ????
     1d4:	7e 48       	sbci	r23, 0x8E	; 142
     1d6:	48 30       	cpi	r20, 0x08	; 8
     1d8:	00 30       	cpi	r16, 0x00	; 0
     1da:	48 48       	sbci	r20, 0x88	; 136
     1dc:	00 00       	nop
     1de:	30 48       	sbci	r19, 0x80	; 128
     1e0:	48 7e       	andi	r20, 0xE8	; 232
     1e2:	00 30       	cpi	r16, 0x00	; 0
     1e4:	68 58       	subi	r22, 0x88	; 136
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	10 7c       	andi	r17, 0xC0	; 192
     1ea:	12 04       	cpc	r1, r2
     1ec:	00 50       	subi	r16, 0x00	; 0
     1ee:	a8 a8       	ldd	r10, Y+48	; 0x30
     1f0:	98 00       	.word	0x0098	; ????
     1f2:	7e 08       	sbc	r7, r14
     1f4:	08 70       	andi	r16, 0x08	; 8
     1f6:	00 00       	nop
     1f8:	48 7a       	andi	r20, 0xA8	; 168
     1fa:	40 00       	.word	0x0040	; ????
     1fc:	00 40       	sbci	r16, 0x00	; 0
     1fe:	80 7a       	andi	r24, 0xA0	; 160
     200:	00 7e       	andi	r16, 0xE0	; 224
     202:	10 28       	or	r1, r0
     204:	40 00       	.word	0x0040	; ????
     206:	00 42       	sbci	r16, 0x20	; 32
     208:	7e 40       	sbci	r23, 0x0E	; 14
     20a:	00 78       	andi	r16, 0x80	; 128
     20c:	10 18       	sub	r1, r0
     20e:	70 00       	.word	0x0070	; ????
     210:	78 08       	sbc	r7, r8
     212:	08 70       	andi	r16, 0x08	; 8
     214:	00 30       	cpi	r16, 0x00	; 0
     216:	48 48       	sbci	r20, 0x88	; 136
     218:	30 00       	.word	0x0030	; ????
     21a:	f8 48       	sbci	r31, 0x88	; 136
     21c:	48 30       	cpi	r20, 0x08	; 8
     21e:	00 30       	cpi	r16, 0x00	; 0
     220:	48 48       	sbci	r20, 0x88	; 136
     222:	f8 00       	.word	0x00f8	; ????
     224:	78 08       	sbc	r7, r8
     226:	08 10       	cpse	r0, r8
     228:	00 50       	subi	r16, 0x00	; 0
     22a:	58 68       	ori	r21, 0x88	; 136
     22c:	28 00       	.word	0x0028	; ????
     22e:	08 3e       	cpi	r16, 0xE8	; 232
     230:	48 40       	sbci	r20, 0x08	; 8
     232:	00 38       	cpi	r16, 0x80	; 128
     234:	40 40       	sbci	r20, 0x00	; 0
     236:	78 00       	.word	0x0078	; ????
     238:	00 38       	cpi	r16, 0x80	; 128
     23a:	40 38       	cpi	r20, 0x80	; 128
     23c:	00 78       	andi	r16, 0x80	; 128
     23e:	60 60       	ori	r22, 0x00	; 0
     240:	78 00       	.word	0x0078	; ????
     242:	48 30       	cpi	r20, 0x08	; 8
     244:	30 48       	sbci	r19, 0x80	; 128
     246:	00 18       	sub	r0, r0
     248:	a0 40       	sbci	r26, 0x00	; 0
     24a:	38 00       	.word	0x0038	; ????
     24c:	48 68       	ori	r20, 0x88	; 136
     24e:	58 48       	sbci	r21, 0x88	; 136
     250:	00 00       	nop
     252:	08 3c       	cpi	r16, 0xC8	; 200
     254:	42 00       	.word	0x0042	; ????
     256:	00 00       	nop
     258:	7e 00       	.word	0x007e	; ????
     25a:	00 00       	nop
     25c:	42 3c       	cpi	r20, 0xC2	; 194
     25e:	08 00       	.word	0x0008	; ????
     260:	04 02       	muls	r16, r20
     262:	04 02       	muls	r16, r20
	...

00000266 <__ctors_end>:
     266:	11 24       	eor	r1, r1
     268:	1f be       	out	0x3f, r1	; 63
     26a:	cf ef       	ldi	r28, 0xFF	; 255
     26c:	d4 e0       	ldi	r29, 0x04	; 4
     26e:	de bf       	out	0x3e, r29	; 62
     270:	cd bf       	out	0x3d, r28	; 61

00000272 <__do_copy_data>:
     272:	11 e0       	ldi	r17, 0x01	; 1
     274:	a0 e0       	ldi	r26, 0x00	; 0
     276:	b1 e0       	ldi	r27, 0x01	; 1
     278:	ee e7       	ldi	r30, 0x7E	; 126
     27a:	fd e1       	ldi	r31, 0x1D	; 29
     27c:	02 c0       	rjmp	.+4      	; 0x282 <__do_copy_data+0x10>
     27e:	05 90       	lpm	r0, Z+
     280:	0d 92       	st	X+, r0
     282:	ac 3a       	cpi	r26, 0xAC	; 172
     284:	b1 07       	cpc	r27, r17
     286:	d9 f7       	brne	.-10     	; 0x27e <__do_copy_data+0xc>

00000288 <__do_clear_bss>:
     288:	21 e0       	ldi	r18, 0x01	; 1
     28a:	ac ea       	ldi	r26, 0xAC	; 172
     28c:	b1 e0       	ldi	r27, 0x01	; 1
     28e:	01 c0       	rjmp	.+2      	; 0x292 <.do_clear_bss_start>

00000290 <.do_clear_bss_loop>:
     290:	1d 92       	st	X+, r1

00000292 <.do_clear_bss_start>:
     292:	ad 3b       	cpi	r26, 0xBD	; 189
     294:	b2 07       	cpc	r27, r18
     296:	e1 f7       	brne	.-8      	; 0x290 <.do_clear_bss_loop>
     298:	0e 94 b1 04 	call	0x962	; 0x962 <main>
     29c:	0c 94 bd 0e 	jmp	0x1d7a	; 0x1d7a <_exit>

000002a0 <__bad_interrupt>:
     2a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002a4 <read_adc>:
****************************************************************************/
int read_adc(char channel)
{
	volatile char *ext_adc = (char *) ADC_BASE_ADDR;
	
	*ext_adc = channel;
     2a4:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2a8:	89 ef       	ldi	r24, 0xF9	; 249
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <read_adc+0x8>
     2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <read_adc+0xe>
     2b2:	00 00       	nop
	_delay_ms(1);
	return *ext_adc;
     2b4:	80 91 00 14 	lds	r24, 0x1400
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	08 95       	ret

000002bc <CAN_init>:
* \brief Initialize CAN communication with node 2
*
****************************************************************************/
void CAN_init()
{
	mcp_init();
     2bc:	0e 94 49 03 	call	0x692	; 0x692 <mcp_init>
	/* Turn off mask/filters, receive any message, rollover enabled */
	mcp_modify_bit(MCP_RXB0CTRL, 0b01100100, 0xFF);
     2c0:	4f ef       	ldi	r20, 0xFF	; 255
     2c2:	64 e6       	ldi	r22, 0x64	; 100
     2c4:	80 e6       	ldi	r24, 0x60	; 96
     2c6:	0e 94 6f 03 	call	0x6de	; 0x6de <mcp_modify_bit>
	/* Loopback mode enabled */
	mcp_modify_bit(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     2ca:	40 e0       	ldi	r20, 0x00	; 0
     2cc:	60 ee       	ldi	r22, 0xE0	; 224
     2ce:	8f e0       	ldi	r24, 0x0F	; 15
     2d0:	0e 94 6f 03 	call	0x6de	; 0x6de <mcp_modify_bit>
     2d4:	08 95       	ret

000002d6 <CAN_send_message>:
*
* \param in message
* \return result of the CAN operation
****************************************************************************/
uint8_t CAN_send_message(CANMessage message)
{
     2d6:	bf 92       	push	r11
     2d8:	cf 92       	push	r12
     2da:	df 92       	push	r13
     2dc:	ef 92       	push	r14
     2de:	ff 92       	push	r15
     2e0:	0f 93       	push	r16
     2e2:	1f 93       	push	r17
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
     2ec:	2a 97       	sbiw	r28, 0x0a	; 10
     2ee:	0f b6       	in	r0, 0x3f	; 63
     2f0:	f8 94       	cli
     2f2:	de bf       	out	0x3e, r29	; 62
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	cd bf       	out	0x3d, r28	; 61
     2f8:	09 83       	std	Y+1, r16	; 0x01
     2fa:	c1 2e       	mov	r12, r17
     2fc:	1a 83       	std	Y+2, r17	; 0x02
     2fe:	2b 83       	std	Y+3, r18	; 0x03
     300:	3c 83       	std	Y+4, r19	; 0x04
     302:	4d 83       	std	Y+5, r20	; 0x05
     304:	5e 83       	std	Y+6, r21	; 0x06
     306:	6f 83       	std	Y+7, r22	; 0x07
     308:	78 87       	std	Y+8, r23	; 0x08
     30a:	89 87       	std	Y+9, r24	; 0x09
     30c:	9a 87       	std	Y+10, r25	; 0x0a
     30e:	10 2f       	mov	r17, r16
	uint8_t ctrl = mcp_read(MCP_TXB0CTRL);
     310:	80 e3       	ldi	r24, 0x30	; 48
     312:	0e 94 2f 03 	call	0x65e	; 0x65e <mcp_read>
	
	if (test_bit(ctrl, TXREQ))
     316:	98 2f       	mov	r25, r24
     318:	98 70       	andi	r25, 0x08	; 8
     31a:	b9 2e       	mov	r11, r25
     31c:	83 fd       	sbrc	r24, 3
     31e:	2d c0       	rjmp	.+90     	; 0x37a <CAN_send_message+0xa4>
	{
		return MESSAGE_PENDING;
	}
	/* Use lower 8bits of ID */
	mcp_write_byte(MCP_TXB0SIDL, (uint8_t)(message.ID << 5));
     320:	61 2f       	mov	r22, r17
     322:	62 95       	swap	r22
     324:	66 0f       	add	r22, r22
     326:	60 7e       	andi	r22, 0xE0	; 224
     328:	82 e3       	ldi	r24, 0x32	; 50
     32a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <mcp_write_byte>
	mcp_write_byte(MCP_TXB0SIDH, (uint8_t)(message.ID >> 3));
     32e:	61 2f       	mov	r22, r17
     330:	66 95       	lsr	r22
     332:	66 95       	lsr	r22
     334:	66 95       	lsr	r22
     336:	81 e3       	ldi	r24, 0x31	; 49
     338:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <mcp_write_byte>
	
	mcp_write_byte(MCP_TXB0DLC, (message.length) & 0x0F);
     33c:	6c 2d       	mov	r22, r12
     33e:	6f 70       	andi	r22, 0x0F	; 15
     340:	85 e3       	ldi	r24, 0x35	; 53
     342:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <mcp_write_byte>
	
	for (int i = 0; i < message.length; i++)
     346:	d1 2c       	mov	r13, r1
     348:	1c 14       	cp	r1, r12
     34a:	1d 04       	cpc	r1, r13
     34c:	94 f4       	brge	.+36     	; 0x372 <CAN_send_message+0x9c>
     34e:	7e 01       	movw	r14, r28
     350:	e3 e0       	ldi	r30, 0x03	; 3
     352:	ee 0e       	add	r14, r30
     354:	f1 1c       	adc	r15, r1
     356:	00 e0       	ldi	r16, 0x00	; 0
     358:	10 e0       	ldi	r17, 0x00	; 0
	{
		mcp_write_byte(MCP_TXB0D0 + i, message.data_array[i]);
     35a:	f7 01       	movw	r30, r14
     35c:	61 91       	ld	r22, Z+
     35e:	7f 01       	movw	r14, r30
     360:	86 e3       	ldi	r24, 0x36	; 54
     362:	80 0f       	add	r24, r16
     364:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <mcp_write_byte>
	mcp_write_byte(MCP_TXB0SIDL, (uint8_t)(message.ID << 5));
	mcp_write_byte(MCP_TXB0SIDH, (uint8_t)(message.ID >> 3));
	
	mcp_write_byte(MCP_TXB0DLC, (message.length) & 0x0F);
	
	for (int i = 0; i < message.length; i++)
     368:	0f 5f       	subi	r16, 0xFF	; 255
     36a:	1f 4f       	sbci	r17, 0xFF	; 255
     36c:	0c 15       	cp	r16, r12
     36e:	1d 05       	cpc	r17, r13
     370:	a4 f3       	brlt	.-24     	; 0x35a <CAN_send_message+0x84>
	{
		mcp_write_byte(MCP_TXB0D0 + i, message.data_array[i]);
	}
	
	mcp_request_to_send(1);
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	0e 94 89 03 	call	0x712	; 0x712 <mcp_request_to_send>

	return SUCCESS;
     378:	02 c0       	rjmp	.+4      	; 0x37e <CAN_send_message+0xa8>
{
	uint8_t ctrl = mcp_read(MCP_TXB0CTRL);
	
	if (test_bit(ctrl, TXREQ))
	{
		return MESSAGE_PENDING;
     37a:	bb 24       	eor	r11, r11
     37c:	b3 94       	inc	r11
	}
	
	mcp_request_to_send(1);

	return SUCCESS;
}
     37e:	8b 2d       	mov	r24, r11
     380:	2a 96       	adiw	r28, 0x0a	; 10
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	f8 94       	cli
     386:	de bf       	out	0x3e, r29	; 62
     388:	0f be       	out	0x3f, r0	; 63
     38a:	cd bf       	out	0x3d, r28	; 61
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	1f 91       	pop	r17
     392:	0f 91       	pop	r16
     394:	ff 90       	pop	r15
     396:	ef 90       	pop	r14
     398:	df 90       	pop	r13
     39a:	cf 90       	pop	r12
     39c:	bf 90       	pop	r11
     39e:	08 95       	ret

000003a0 <CAN_receive_message>:
*
* \param out message
* \return result of the CAN operation
****************************************************************************/
uint8_t CAN_receive_message(CANMessage* message)
{
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	8c 01       	movw	r16, r24
	int i = 0;
	uint8_t received = mcp_read(MCP_CANINTF) & (0x01);
     3ae:	8c e2       	ldi	r24, 0x2C	; 44
     3b0:	0e 94 2f 03 	call	0x65e	; 0x65e <mcp_read>
	if (received)
     3b4:	80 ff       	sbrs	r24, 0
     3b6:	34 c0       	rjmp	.+104    	; 0x420 <CAN_receive_message+0x80>
	{
		mcp_modify_bit(MCP_CANINTF, 0x01, 0);
     3b8:	40 e0       	ldi	r20, 0x00	; 0
     3ba:	61 e0       	ldi	r22, 0x01	; 1
     3bc:	8c e2       	ldi	r24, 0x2C	; 44
     3be:	0e 94 6f 03 	call	0x6de	; 0x6de <mcp_modify_bit>
		message->ID = (mcp_read(MCP_RXB0SIDH) << 3);
     3c2:	81 e6       	ldi	r24, 0x61	; 97
     3c4:	0e 94 2f 03 	call	0x65e	; 0x65e <mcp_read>
     3c8:	c8 2f       	mov	r28, r24
     3ca:	cc 0f       	add	r28, r28
     3cc:	cc 0f       	add	r28, r28
     3ce:	cc 0f       	add	r28, r28
     3d0:	f8 01       	movw	r30, r16
     3d2:	c0 83       	st	Z, r28
		message->ID |= (mcp_read(MCP_RXB0SIDL) >> 5);
     3d4:	82 e6       	ldi	r24, 0x62	; 98
     3d6:	0e 94 2f 03 	call	0x65e	; 0x65e <mcp_read>
     3da:	82 95       	swap	r24
     3dc:	86 95       	lsr	r24
     3de:	87 70       	andi	r24, 0x07	; 7
     3e0:	c8 2b       	or	r28, r24
     3e2:	f8 01       	movw	r30, r16
     3e4:	c0 83       	st	Z, r28
		
		message->length = mcp_read(MCP_RXB0DLC) & (0x0F);
     3e6:	85 e6       	ldi	r24, 0x65	; 101
     3e8:	0e 94 2f 03 	call	0x65e	; 0x65e <mcp_read>
     3ec:	8f 70       	andi	r24, 0x0F	; 15
     3ee:	f8 01       	movw	r30, r16
     3f0:	81 83       	std	Z+1, r24	; 0x01
		
		for (i = 0; i < message->length; i++)
     3f2:	88 23       	and	r24, r24
     3f4:	b9 f0       	breq	.+46     	; 0x424 <CAN_receive_message+0x84>
     3f6:	78 01       	movw	r14, r16
     3f8:	f2 e0       	ldi	r31, 0x02	; 2
     3fa:	ef 0e       	add	r14, r31
     3fc:	f1 1c       	adc	r15, r1
     3fe:	c0 e0       	ldi	r28, 0x00	; 0
     400:	d0 e0       	ldi	r29, 0x00	; 0
		{
			message->data_array[i] = mcp_read(MCP_RXB0D0 + i);
     402:	8c 2f       	mov	r24, r28
     404:	8a 59       	subi	r24, 0x9A	; 154
     406:	0e 94 2f 03 	call	0x65e	; 0x65e <mcp_read>
     40a:	f7 01       	movw	r30, r14
     40c:	81 93       	st	Z+, r24
     40e:	7f 01       	movw	r14, r30
		message->ID = (mcp_read(MCP_RXB0SIDH) << 3);
		message->ID |= (mcp_read(MCP_RXB0SIDL) >> 5);
		
		message->length = mcp_read(MCP_RXB0DLC) & (0x0F);
		
		for (i = 0; i < message->length; i++)
     410:	21 96       	adiw	r28, 0x01	; 1
     412:	f8 01       	movw	r30, r16
     414:	81 81       	ldd	r24, Z+1	; 0x01
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	c8 17       	cp	r28, r24
     41a:	d9 07       	cpc	r29, r25
     41c:	94 f3       	brlt	.-28     	; 0x402 <CAN_receive_message+0x62>
     41e:	04 c0       	rjmp	.+8      	; 0x428 <CAN_receive_message+0x88>
			message->data_array[i] = mcp_read(MCP_RXB0D0 + i);
		}
	}
	else
	{
		return NO_NEW_MESSAGE;
     420:	82 e0       	ldi	r24, 0x02	; 2
     422:	03 c0       	rjmp	.+6      	; 0x42a <CAN_receive_message+0x8a>
	}
	
	return SUCCESS;
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	01 c0       	rjmp	.+2      	; 0x42a <CAN_receive_message+0x8a>
     428:	80 e0       	ldi	r24, 0x00	; 0
}
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	1f 91       	pop	r17
     430:	0f 91       	pop	r16
     432:	ff 90       	pop	r15
     434:	ef 90       	pop	r14
     436:	08 95       	ret

00000438 <send_joystick_possition>:
* \param in joystick position
* \param in touchpad data
* \return result of the CAN send operation
****************************************************************************/
uint8_t send_joystick_possition(JoystickPosition joystick_position, TouchpadData touchpad_data)
{
     438:	0f 93       	push	r16
     43a:	1f 93       	push	r17
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
     444:	2a 97       	sbiw	r28, 0x0a	; 10
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	cd bf       	out	0x3d, r28	; 61
	message.data_array[3] = (uint8_t) (touchpad_data.leftTouchPad);
	
	message.data_array[4] = (uint8_t) (touchpad_data.rightButton);
	message.data_array[5] = (uint8_t) (touchpad_data.leftButton);
	
	return CAN_send_message(message);
     450:	01 e0       	ldi	r16, 0x01	; 1
     452:	16 e0       	ldi	r17, 0x06	; 6
     454:	28 2f       	mov	r18, r24
     456:	39 2f       	mov	r19, r25
     458:	89 85       	ldd	r24, Y+9	; 0x09
     45a:	9a 85       	ldd	r25, Y+10	; 0x0a
     45c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <CAN_send_message>
}
     460:	2a 96       	adiw	r28, 0x0a	; 10
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	f8 94       	cli
     466:	de bf       	out	0x3e, r29	; 62
     468:	0f be       	out	0x3f, r0	; 63
     46a:	cd bf       	out	0x3d, r28	; 61
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	0f 91       	pop	r16
     474:	08 95       	ret

00000476 <send_game_mode>:
*
* \param in game mode
* \return result of the CAN send operation
****************************************************************************/
uint8_t send_game_mode(GameModes mode)
{
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
     482:	2a 97       	sbiw	r28, 0x0a	; 10
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
	message.ID = 0x02;
	message.length = 1;
	
	message.data_array[0]= (uint8_t) (mode);
	
	return CAN_send_message(message);
     48e:	02 e0       	ldi	r16, 0x02	; 2
     490:	11 e0       	ldi	r17, 0x01	; 1
     492:	28 2f       	mov	r18, r24
     494:	3c 81       	ldd	r19, Y+4	; 0x04
     496:	4d 81       	ldd	r20, Y+5	; 0x05
     498:	5e 81       	ldd	r21, Y+6	; 0x06
     49a:	6f 81       	ldd	r22, Y+7	; 0x07
     49c:	78 85       	ldd	r23, Y+8	; 0x08
     49e:	89 85       	ldd	r24, Y+9	; 0x09
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <CAN_send_message>
}
     4a6:	2a 96       	adiw	r28, 0x0a	; 10
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	08 95       	ret

000004bc <receive_mode_change>:


void receive_mode_change(My_Game_Mode* CurrentMode, CANMessage message)
{
     4bc:	ef 92       	push	r14
     4be:	ff 92       	push	r15
     4c0:	0f 93       	push	r16
     4c2:	1f 93       	push	r17
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
     4cc:	2a 97       	sbiw	r28, 0x0a	; 10
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	f8 94       	cli
     4d2:	de bf       	out	0x3e, r29	; 62
     4d4:	0f be       	out	0x3f, r0	; 63
     4d6:	cd bf       	out	0x3d, r28	; 61
	CurrentMode->gamemode = message.data_array[0];
     4d8:	fc 01       	movw	r30, r24
     4da:	00 83       	st	Z, r16
     4dc:	2a 96       	adiw	r28, 0x0a	; 10
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	f8 94       	cli
     4e2:	de bf       	out	0x3e, r29	; 62
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	cd bf       	out	0x3d, r28	; 61
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	1f 91       	pop	r17
     4ee:	0f 91       	pop	r16
     4f0:	ff 90       	pop	r15
     4f2:	ef 90       	pop	r14
     4f4:	08 95       	ret

000004f6 <read_joystick_position>:
*
* \param in calibration data
* \return Joystick position
****************************************************************************/
JoystickPosition read_joystick_position(JoystickPosition calibration)
{
     4f6:	cf 93       	push	r28
	JoystickPosition position;

	position.xaxis = read_adc(ADC_CH2);
     4f8:	85 e0       	ldi	r24, 0x05	; 5
     4fa:	0e 94 52 01 	call	0x2a4	; 0x2a4 <read_adc>
     4fe:	c8 2f       	mov	r28, r24
	//position.xaxis = ((((position.xaxis - calibration.xaxis)*100)/255)-50)*2;

	position.yaxis = read_adc(ADC_CH1);
     500:	84 e0       	ldi	r24, 0x04	; 4
     502:	0e 94 52 01 	call	0x2a4	; 0x2a4 <read_adc>
     506:	98 2f       	mov	r25, r24
	//position.yaxis = ((((position.yaxis - calibration.yaxis)*100)/255)-50)*2;
	
	return position;
}
     508:	8c 2f       	mov	r24, r28
     50a:	cf 91       	pop	r28
     50c:	08 95       	ret

0000050e <read_joystick_direction>:
* \brief Read joystick direction according to joystick position data
*
* \return Joystick direction
****************************************************************************/
JoystickDirection read_joystick_direction(JoystickPosition joystickPos)
{
     50e:	68 2f       	mov	r22, r24
	JoystickDirection xAxes, yAxes, retVal;
	
	if (joystickPos.xaxis > 220)
     510:	8d 3d       	cpi	r24, 0xDD	; 221
     512:	20 f4       	brcc	.+8      	; 0x51c <read_joystick_direction+0xe>
	{
		xAxes = Right;
	}
	else if (joystickPos.xaxis < 20)
     514:	84 31       	cpi	r24, 0x14	; 20
     516:	20 f4       	brcc	.+8      	; 0x520 <read_joystick_direction+0x12>
	{
		xAxes = Left;
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	03 c0       	rjmp	.+6      	; 0x522 <read_joystick_direction+0x14>
{
	JoystickDirection xAxes, yAxes, retVal;
	
	if (joystickPos.xaxis > 220)
	{
		xAxes = Right;
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	01 c0       	rjmp	.+2      	; 0x522 <read_joystick_direction+0x14>
	{
		xAxes = Left;
	}
	else
	{
		xAxes = Neutral;
     520:	84 e0       	ldi	r24, 0x04	; 4
	}
	
	if (joystickPos.yaxis > 220)
     522:	9d 3d       	cpi	r25, 0xDD	; 221
     524:	20 f4       	brcc	.+8      	; 0x52e <read_joystick_direction+0x20>
	{
		yAxes = Up;
	}
	else if (joystickPos.yaxis < 20)
     526:	94 31       	cpi	r25, 0x14	; 20
     528:	20 f4       	brcc	.+8      	; 0x532 <read_joystick_direction+0x24>
	{
		yAxes = Down;
     52a:	e3 e0       	ldi	r30, 0x03	; 3
     52c:	03 c0       	rjmp	.+6      	; 0x534 <read_joystick_direction+0x26>
		xAxes = Neutral;
	}
	
	if (joystickPos.yaxis > 220)
	{
		yAxes = Up;
     52e:	e2 e0       	ldi	r30, 0x02	; 2
     530:	01 c0       	rjmp	.+2      	; 0x534 <read_joystick_direction+0x26>
	else if (joystickPos.yaxis < 20)
	{
		yAxes = Down;
	}
	else{
		yAxes = Neutral; 
     532:	e4 e0       	ldi	r30, 0x04	; 4
	}
	
	if(abs(joystickPos.yaxis-145) > abs(joystickPos.xaxis-135))
     534:	29 2f       	mov	r18, r25
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	21 59       	subi	r18, 0x91	; 145
     53a:	31 09       	sbc	r19, r1
     53c:	a9 01       	movw	r20, r18
     53e:	33 23       	and	r19, r19
     540:	24 f4       	brge	.+8      	; 0x54a <read_joystick_direction+0x3c>
     542:	44 27       	eor	r20, r20
     544:	55 27       	eor	r21, r21
     546:	42 1b       	sub	r20, r18
     548:	53 0b       	sbc	r21, r19
     54a:	70 e0       	ldi	r23, 0x00	; 0
     54c:	67 58       	subi	r22, 0x87	; 135
     54e:	71 09       	sbc	r23, r1
     550:	9b 01       	movw	r18, r22
     552:	77 23       	and	r23, r23
     554:	24 f4       	brge	.+8      	; 0x55e <read_joystick_direction+0x50>
     556:	22 27       	eor	r18, r18
     558:	33 27       	eor	r19, r19
     55a:	26 1b       	sub	r18, r22
     55c:	37 0b       	sbc	r19, r23
     55e:	24 17       	cp	r18, r20
     560:	35 07       	cpc	r19, r21
     562:	0c f4       	brge	.+2      	; 0x566 <read_joystick_direction+0x58>
	{
		retVal = yAxes;
     564:	8e 2f       	mov	r24, r30
	{
		retVal = xAxes;
	}
	
	return retVal;
}
     566:	08 95       	ret

00000568 <joystick_calibration>:
* \brief Calibrate joystick
*
* \return Joystick calibration data
****************************************************************************/
JoystickPosition joystick_calibration()
{
     568:	cf 93       	push	r28
	
	JoystickPosition position;
	position.xaxis = read_adc(ADC_CH2);
     56a:	85 e0       	ldi	r24, 0x05	; 5
     56c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <read_adc>
     570:	c8 2f       	mov	r28, r24
	position.yaxis = read_adc(ADC_CH1);
     572:	84 e0       	ldi	r24, 0x04	; 4
     574:	0e 94 52 01 	call	0x2a4	; 0x2a4 <read_adc>
	position.xaxis -= 127;
	position.yaxis -= 127;
     578:	91 e8       	ldi	r25, 0x81	; 129
     57a:	98 0f       	add	r25, r24

	return position;	
}
     57c:	81 e8       	ldi	r24, 0x81	; 129
     57e:	8c 0f       	add	r24, r28
     580:	cf 91       	pop	r28
     582:	08 95       	ret

00000584 <read_touchpad_data>:
* \brief Read Touchpad data
*
* \return Touchpad data
****************************************************************************/
TouchpadData read_touchpad_data()
{
     584:	cf 93       	push	r28
	TouchpadData touchpad;
	touchpad.rightTouchPad = read_adc(ADC_CH3);
     586:	86 e0       	ldi	r24, 0x06	; 6
     588:	0e 94 52 01 	call	0x2a4	; 0x2a4 <read_adc>
     58c:	c8 2f       	mov	r28, r24
	touchpad.leftTouchPad = read_adc(ADC_CH4);
     58e:	87 e0       	ldi	r24, 0x07	; 7
     590:	0e 94 52 01 	call	0x2a4	; 0x2a4 <read_adc>
     594:	78 2f       	mov	r23, r24
	
	if(test_bit(BUTTON_PORT, LEFT_BUTTON_PIN))
     596:	85 9b       	sbis	0x10, 5	; 16
     598:	02 c0       	rjmp	.+4      	; 0x59e <read_touchpad_data+0x1a>
	{
		touchpad.leftButton = 1;
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	01 c0       	rjmp	.+2      	; 0x5a0 <read_touchpad_data+0x1c>
	}
	else
	{
		touchpad.leftButton = 0;
     59e:	90 e0       	ldi	r25, 0x00	; 0
	}
	if(test_bit(BUTTON_PORT, RIGHT_BUTTON_PIN))
     5a0:	84 9b       	sbis	0x10, 4	; 16
     5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <read_touchpad_data+0x24>
	{
		touchpad.rightButton = 1;
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	01 c0       	rjmp	.+2      	; 0x5aa <read_touchpad_data+0x26>
	}
	else
	{
		touchpad.rightButton = 0;	
     5a8:	80 e0       	ldi	r24, 0x00	; 0
	}
	return touchpad;
}
     5aa:	6c 2f       	mov	r22, r28
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <change_xaxis>:
***********************************************************************************/
JoystickDirection change_xaxis(JoystickDirection direction)
{
	static JoystickDirection old_x_direction = Neutral;
	
	if(direction!= Right && direction != Left)
     5b0:	82 30       	cpi	r24, 0x02	; 2
     5b2:	20 f0       	brcs	.+8      	; 0x5bc <change_xaxis+0xc>
	{
		old_x_direction = Neutral;
     5b4:	84 e0       	ldi	r24, 0x04	; 4
     5b6:	80 93 07 01 	sts	0x0107, r24
		return Neutral;
     5ba:	08 95       	ret
	}
		
	if (old_x_direction != direction)
     5bc:	90 91 07 01 	lds	r25, 0x0107
     5c0:	98 17       	cp	r25, r24
     5c2:	19 f0       	breq	.+6      	; 0x5ca <change_xaxis+0x1a>
	{
		old_x_direction = direction;
     5c4:	80 93 07 01 	sts	0x0107, r24
		return direction;
     5c8:	08 95       	ret
	}
		
	old_x_direction = direction;
	return Neutral;
     5ca:	84 e0       	ldi	r24, 0x04	; 4
}
     5cc:	08 95       	ret

000005ce <change_yaxis>:
* \return Direction of joystick
***********************************************************************************/
JoystickDirection change_yaxis(JoystickDirection direction){
	static JoystickDirection old_y_direction = Neutral;
	
	if(direction!= Up && direction != Down)
     5ce:	9e ef       	ldi	r25, 0xFE	; 254
     5d0:	98 0f       	add	r25, r24
     5d2:	92 30       	cpi	r25, 0x02	; 2
     5d4:	20 f0       	brcs	.+8      	; 0x5de <change_yaxis+0x10>
	{
		old_y_direction = Neutral;
     5d6:	84 e0       	ldi	r24, 0x04	; 4
     5d8:	80 93 06 01 	sts	0x0106, r24
		return Neutral;
     5dc:	08 95       	ret
	}
		
	if (old_y_direction != direction)
     5de:	90 91 06 01 	lds	r25, 0x0106
     5e2:	98 17       	cp	r25, r24
     5e4:	19 f0       	breq	.+6      	; 0x5ec <change_yaxis+0x1e>
	{
		old_y_direction = direction;
     5e6:	80 93 06 01 	sts	0x0106, r24
		return direction;
     5ea:	08 95       	ret
	}
	
	old_y_direction = direction;
	return Neutral;
     5ec:	84 e0       	ldi	r24, 0x04	; 4
}
     5ee:	08 95       	ret

000005f0 <change_touchpad_data>:
	ChangeTouchpadData ret_val;
	
	ret_val.rightButton = 0;
	ret_val.leftButton = 0;
	
	if (old_touchpad_data.leftButton == 0 && new_touchpad_data.leftButton == 1)
     5f0:	20 91 af 01 	lds	r18, 0x01AF
     5f4:	21 11       	cpse	r18, r1
     5f6:	05 c0       	rjmp	.+10     	; 0x602 <change_touchpad_data+0x12>
     5f8:	91 30       	cpi	r25, 0x01	; 1
     5fa:	19 f4       	brne	.+6      	; 0x602 <change_touchpad_data+0x12>
	{
		old_touchpad_data.leftButton = 1;
     5fc:	90 93 af 01 	sts	0x01AF, r25
		ret_val.leftButton = 1;
     600:	0c c0       	rjmp	.+24     	; 0x61a <change_touchpad_data+0x2a>
	}
	else if (old_touchpad_data.leftButton == 1 && new_touchpad_data.leftButton == 0)
     602:	20 91 af 01 	lds	r18, 0x01AF
     606:	21 30       	cpi	r18, 0x01	; 1
     608:	29 f4       	brne	.+10     	; 0x614 <change_touchpad_data+0x24>
     60a:	91 11       	cpse	r25, r1
     60c:	05 c0       	rjmp	.+10     	; 0x618 <change_touchpad_data+0x28>
	{
		old_touchpad_data.leftButton = 0;
     60e:	10 92 af 01 	sts	0x01AF, r1
     612:	03 c0       	rjmp	.+6      	; 0x61a <change_touchpad_data+0x2a>
{
	static TouchpadData old_touchpad_data;
	ChangeTouchpadData ret_val;
	
	ret_val.rightButton = 0;
	ret_val.leftButton = 0;
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	01 c0       	rjmp	.+2      	; 0x61a <change_touchpad_data+0x2a>
     618:	90 e0       	ldi	r25, 0x00	; 0
	else if (old_touchpad_data.leftButton == 1 && new_touchpad_data.leftButton == 0)
	{
		old_touchpad_data.leftButton = 0;
	}
	
	if (old_touchpad_data.rightButton == 0 && new_touchpad_data.rightButton == 1)
     61a:	20 91 ae 01 	lds	r18, 0x01AE
     61e:	21 11       	cpse	r18, r1
     620:	05 c0       	rjmp	.+10     	; 0x62c <change_touchpad_data+0x3c>
     622:	81 30       	cpi	r24, 0x01	; 1
     624:	19 f4       	brne	.+6      	; 0x62c <change_touchpad_data+0x3c>
	{
		old_touchpad_data.rightButton = 1;
     626:	80 93 ae 01 	sts	0x01AE, r24
		ret_val.rightButton = 1;
     62a:	08 95       	ret
	}
	else if (old_touchpad_data.rightButton == 1 && new_touchpad_data.rightButton == 0)
     62c:	20 91 ae 01 	lds	r18, 0x01AE
     630:	21 30       	cpi	r18, 0x01	; 1
     632:	29 f4       	brne	.+10     	; 0x63e <change_touchpad_data+0x4e>
     634:	81 11       	cpse	r24, r1
     636:	05 c0       	rjmp	.+10     	; 0x642 <change_touchpad_data+0x52>
	{
		old_touchpad_data.rightButton = 0;
     638:	10 92 ae 01 	sts	0x01AE, r1
     63c:	08 95       	ret
ChangeTouchpadData change_touchpad_data(TouchpadData new_touchpad_data)
{
	static TouchpadData old_touchpad_data;
	ChangeTouchpadData ret_val;
	
	ret_val.rightButton = 0;
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	08 95       	ret
     642:	80 e0       	ldi	r24, 0x00	; 0
	{
		old_touchpad_data.rightButton = 0;
	}
	
	return ret_val;
     644:	08 95       	ret

00000646 <mcp_turn_on>:
* \brief Enable communication with CAN controller 
*
****************************************************************************/
void mcp_turn_on()
{
	PORTB &= ~(1 << DD_CS);
     646:	c4 98       	cbi	0x18, 4	; 24
     648:	08 95       	ret

0000064a <mcp_turn_off>:
* \brief Disable communication with CAN controller
*
****************************************************************************/
void mcp_turn_off()
{
	PORTB |= (1 << DD_CS);
     64a:	c4 9a       	sbi	0x18, 4	; 24
     64c:	08 95       	ret

0000064e <mcp_reset>:
* \brief Reset the CAN controller
*
****************************************************************************/
void mcp_reset()
{
	mcp_turn_on();
     64e:	0e 94 23 03 	call	0x646	; 0x646 <mcp_turn_on>
	
	SPI_write(MCP_RESET);
     652:	80 ec       	ldi	r24, 0xC0	; 192
     654:	0e 94 3e 05 	call	0xa7c	; 0xa7c <SPI_write>
	
	mcp_turn_off();
     658:	0e 94 25 03 	call	0x64a	; 0x64a <mcp_turn_off>
     65c:	08 95       	ret

0000065e <mcp_read>:
*
* \param in address from which shall be read
* \return data
****************************************************************************/
uint8_t mcp_read(uint8_t address)
{
     65e:	1f 93       	push	r17
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	1f 92       	push	r1
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
     66a:	18 2f       	mov	r17, r24
	volatile uint8_t retVal;
	
	mcp_turn_on();
     66c:	0e 94 23 03 	call	0x646	; 0x646 <mcp_turn_on>
	
	SPI_write(MCP_READ);
     670:	83 e0       	ldi	r24, 0x03	; 3
     672:	0e 94 3e 05 	call	0xa7c	; 0xa7c <SPI_write>
	SPI_write(address);
     676:	81 2f       	mov	r24, r17
     678:	0e 94 3e 05 	call	0xa7c	; 0xa7c <SPI_write>
	
	retVal = SPI_read();
     67c:	0e 94 42 05 	call	0xa84	; 0xa84 <SPI_read>
     680:	89 83       	std	Y+1, r24	; 0x01
	
	mcp_turn_off();
     682:	0e 94 25 03 	call	0x64a	; 0x64a <mcp_turn_off>
	
	return retVal;
     686:	89 81       	ldd	r24, Y+1	; 0x01
}
     688:	0f 90       	pop	r0
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	1f 91       	pop	r17
     690:	08 95       	ret

00000692 <mcp_init>:
****************************************************************************/
uint8_t mcp_init()
{
	uint8_t tmp;
	
	SPI_init();
     692:	0e 94 38 05 	call	0xa70	; 0xa70 <SPI_init>
	mcp_reset();
     696:	0e 94 27 03 	call	0x64e	; 0x64e <mcp_reset>
	
	tmp = mcp_read(MCP_CANSTAT);
     69a:	8e e0       	ldi	r24, 0x0E	; 14
     69c:	0e 94 2f 03 	call	0x65e	; 0x65e <mcp_read>
	
	if ((tmp & MODE_MASK) != MODE_CONFIG)
     6a0:	80 7e       	andi	r24, 0xE0	; 224
     6a2:	80 38       	cpi	r24, 0x80	; 128
     6a4:	31 f0       	breq	.+12     	; 0x6b2 <mcp_init+0x20>
	{
		printf("MCP2515 NOT configured properly\n");
     6a6:	88 e0       	ldi	r24, 0x08	; 8
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	0e 94 97 0a 	call	0x152e	; 0x152e <puts>
		return 1;
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	08 95       	ret
	}
	
	return 0;
     6b2:	80 e0       	ldi	r24, 0x00	; 0
}
     6b4:	08 95       	ret

000006b6 <mcp_write_byte>:
*
* \param in address to which shall be write
* \return data
****************************************************************************/
void mcp_write_byte(uint8_t address, uint8_t byte)
{
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	d8 2f       	mov	r29, r24
     6bc:	c6 2f       	mov	r28, r22
	mcp_turn_on();
     6be:	0e 94 23 03 	call	0x646	; 0x646 <mcp_turn_on>
	SPI_write(MCP_WRITE);
     6c2:	82 e0       	ldi	r24, 0x02	; 2
     6c4:	0e 94 3e 05 	call	0xa7c	; 0xa7c <SPI_write>
	SPI_write(address);
     6c8:	8d 2f       	mov	r24, r29
     6ca:	0e 94 3e 05 	call	0xa7c	; 0xa7c <SPI_write>
	SPI_write(byte);
     6ce:	8c 2f       	mov	r24, r28
     6d0:	0e 94 3e 05 	call	0xa7c	; 0xa7c <SPI_write>
	mcp_turn_off();
     6d4:	0e 94 25 03 	call	0x64a	; 0x64a <mcp_turn_off>
}
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	08 95       	ret

000006de <mcp_modify_bit>:
* \param in address of the register
* \param in bit mask
* \param in new value of the register
****************************************************************************/
void mcp_modify_bit(uint8_t address, uint8_t mask, uint8_t byte)
{
     6de:	1f 93       	push	r17
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	18 2f       	mov	r17, r24
     6e6:	d6 2f       	mov	r29, r22
     6e8:	c4 2f       	mov	r28, r20
	mcp_turn_on();
     6ea:	0e 94 23 03 	call	0x646	; 0x646 <mcp_turn_on>
	SPI_write(MCP_BITMOD);
     6ee:	85 e0       	ldi	r24, 0x05	; 5
     6f0:	0e 94 3e 05 	call	0xa7c	; 0xa7c <SPI_write>
	SPI_write(address);
     6f4:	81 2f       	mov	r24, r17
     6f6:	0e 94 3e 05 	call	0xa7c	; 0xa7c <SPI_write>
	SPI_write(mask);
     6fa:	8d 2f       	mov	r24, r29
     6fc:	0e 94 3e 05 	call	0xa7c	; 0xa7c <SPI_write>
	SPI_write(byte);
     700:	8c 2f       	mov	r24, r28
     702:	0e 94 3e 05 	call	0xa7c	; 0xa7c <SPI_write>
	mcp_turn_off();
     706:	0e 94 25 03 	call	0x64a	; 0x64a <mcp_turn_off>
}
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	1f 91       	pop	r17
     710:	08 95       	ret

00000712 <mcp_request_to_send>:
* \brief Request to send particular buffer
*
* \param in address of the buffer
****************************************************************************/
void mcp_request_to_send(uint8_t bits)
{
     712:	cf 93       	push	r28
     714:	c8 2f       	mov	r28, r24
	mcp_turn_on();
     716:	0e 94 23 03 	call	0x646	; 0x646 <mcp_turn_on>
	SPI_write(MCP_RTS | (bits & 0b00000111));
     71a:	8c 2f       	mov	r24, r28
     71c:	87 70       	andi	r24, 0x07	; 7
     71e:	80 68       	ori	r24, 0x80	; 128
     720:	0e 94 3e 05 	call	0xa7c	; 0xa7c <SPI_write>
	mcp_turn_off();
     724:	0e 94 25 03 	call	0x64a	; 0x64a <mcp_turn_off>
}
     728:	cf 91       	pop	r28
     72a:	08 95       	ret

0000072c <init_oled>:
*
****************************************************************************/
void write_c(char command)
{
	volatile char *ext_oled = (char *) OLED_COMMAND_BASE_ADDR;
	ext_oled[0] = command;
     72c:	e0 e0       	ldi	r30, 0x00	; 0
     72e:	f0 e1       	ldi	r31, 0x10	; 16
     730:	8e ea       	ldi	r24, 0xAE	; 174
     732:	80 83       	st	Z, r24
     734:	81 ea       	ldi	r24, 0xA1	; 161
     736:	80 83       	st	Z, r24
     738:	8a ed       	ldi	r24, 0xDA	; 218
     73a:	80 83       	st	Z, r24
     73c:	82 e1       	ldi	r24, 0x12	; 18
     73e:	80 83       	st	Z, r24
     740:	88 ec       	ldi	r24, 0xC8	; 200
     742:	80 83       	st	Z, r24
     744:	88 ea       	ldi	r24, 0xA8	; 168
     746:	80 83       	st	Z, r24
     748:	8f e3       	ldi	r24, 0x3F	; 63
     74a:	80 83       	st	Z, r24
     74c:	85 ed       	ldi	r24, 0xD5	; 213
     74e:	80 83       	st	Z, r24
     750:	80 e8       	ldi	r24, 0x80	; 128
     752:	80 83       	st	Z, r24
     754:	81 e8       	ldi	r24, 0x81	; 129
     756:	80 83       	st	Z, r24
     758:	80 e5       	ldi	r24, 0x50	; 80
     75a:	80 83       	st	Z, r24
     75c:	89 ed       	ldi	r24, 0xD9	; 217
     75e:	80 83       	st	Z, r24
     760:	81 e2       	ldi	r24, 0x21	; 33
     762:	80 83       	st	Z, r24
     764:	80 e2       	ldi	r24, 0x20	; 32
     766:	80 83       	st	Z, r24
     768:	10 82       	st	Z, r1
     76a:	8b ed       	ldi	r24, 0xDB	; 219
     76c:	80 83       	st	Z, r24
     76e:	80 e3       	ldi	r24, 0x30	; 48
     770:	80 83       	st	Z, r24
     772:	8d ea       	ldi	r24, 0xAD	; 173
     774:	80 83       	st	Z, r24
     776:	10 82       	st	Z, r1
     778:	84 ea       	ldi	r24, 0xA4	; 164
     77a:	80 83       	st	Z, r24
     77c:	86 ea       	ldi	r24, 0xA6	; 166
     77e:	80 83       	st	Z, r24
     780:	8f ea       	ldi	r24, 0xAF	; 175
     782:	80 83       	st	Z, r24
     784:	08 95       	ret

00000786 <reset_position>:
     786:	e0 e0       	ldi	r30, 0x00	; 0
     788:	f0 e1       	ldi	r31, 0x10	; 16
     78a:	81 e2       	ldi	r24, 0x21	; 33
     78c:	80 83       	st	Z, r24
     78e:	10 82       	st	Z, r1
     790:	8f e7       	ldi	r24, 0x7F	; 127
     792:	80 83       	st	Z, r24
     794:	82 e2       	ldi	r24, 0x22	; 34
     796:	80 83       	st	Z, r24
     798:	10 82       	st	Z, r1
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	80 83       	st	Z, r24
     79e:	08 95       	ret

000007a0 <refresh_oled>:
* \brief Refresh OLED by rewriting all data from SRAM to OLED
*
****************************************************************************/
void refresh_oled()
{
	reset_position();
     7a0:	0e 94 c3 03 	call	0x786	; 0x786 <reset_position>
     7a4:	e0 e0       	ldi	r30, 0x00	; 0
     7a6:	f8 e1       	ldi	r31, 0x18	; 24
*
****************************************************************************/
void write_d(char data)
{
	volatile char *ext_oled = (char *) OLED_DATA_BASE_ADDR;
	ext_oled[0] = data;
     7a8:	a0 e0       	ldi	r26, 0x00	; 0
     7aa:	b2 e1       	ldi	r27, 0x12	; 18
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	unsigned char oled_value;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
	{
		oled_value = ext_ram[i];
     7ac:	81 91       	ld	r24, Z+
*
****************************************************************************/
void write_d(char data)
{
	volatile char *ext_oled = (char *) OLED_DATA_BASE_ADDR;
	ext_oled[0] = data;
     7ae:	8c 93       	st	X, r24
{
	reset_position();
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	unsigned char oled_value;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
     7b0:	e1 15       	cp	r30, r1
     7b2:	8c e1       	ldi	r24, 0x1C	; 28
     7b4:	f8 07       	cpc	r31, r24
     7b6:	d1 f7       	brne	.-12     	; 0x7ac <refresh_oled+0xc>
	{
		oled_value = ext_ram[i];
		write_d(oled_value);
	}
}
     7b8:	08 95       	ret

000007ba <clear_oled>:
/****************************************************************************
* \brief Clear OLED display
*
****************************************************************************/
void clear_oled()
{
     7ba:	e0 e0       	ldi	r30, 0x00	; 0
     7bc:	f8 e1       	ldi	r31, 0x18	; 24
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
	{
		ext_ram[i] = 0x00;
     7be:	11 92       	st	Z+, r1
****************************************************************************/
void clear_oled()
{
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
     7c0:	e1 15       	cp	r30, r1
     7c2:	8c e1       	ldi	r24, 0x1C	; 28
     7c4:	f8 07       	cpc	r31, r24
     7c6:	d9 f7       	brne	.-10     	; 0x7be <clear_oled+0x4>
	{
		ext_ram[i] = 0x00;
	}
}
     7c8:	08 95       	ret

000007ca <print_char>:
* \brief Print character on current position on OLED display
*
* \param in x Position of pixel that should be set
****************************************************************************/
void print_char(char character)
{
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	c0 91 b0 01 	lds	r28, 0x01B0
     7d2:	d0 91 b1 01 	lds	r29, 0x01B1
     7d6:	28 2f       	mov	r18, r24
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	20 52       	subi	r18, 0x20	; 32
     7dc:	31 09       	sbc	r19, r1
     7de:	c9 01       	movw	r24, r18
     7e0:	88 0f       	add	r24, r24
     7e2:	99 1f       	adc	r25, r25
     7e4:	88 0f       	add	r24, r24
     7e6:	99 1f       	adc	r25, r25
     7e8:	28 0f       	add	r18, r24
     7ea:	39 1f       	adc	r19, r25
     7ec:	26 57       	subi	r18, 0x76	; 118
     7ee:	3f 4f       	sbci	r19, 0xFF	; 255
     7f0:	84 e0       	ldi	r24, 0x04	; 4
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	be 01       	movw	r22, r28
     7f6:	6c 5f       	subi	r22, 0xFC	; 252
     7f8:	77 4e       	sbci	r23, 0xE7	; 231
     7fa:	db 01       	movw	r26, r22
     7fc:	a8 1b       	sub	r26, r24
     7fe:	b9 0b       	sbc	r27, r25
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
	
	for(int i = 0; i < 4; i++)
	{
		ext_ram[position] = pgm_read_word_near(&(font[character-32][i]));
     800:	f9 01       	movw	r30, r18
     802:	45 91       	lpm	r20, Z+
     804:	54 91       	lpm	r21, Z
     806:	4c 93       	st	X, r20
     808:	01 97       	sbiw	r24, 0x01	; 1
     80a:	2f 5f       	subi	r18, 0xFF	; 255
     80c:	3f 4f       	sbci	r19, 0xFF	; 255
****************************************************************************/
void print_char(char character)
{
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
	
	for(int i = 0; i < 4; i++)
     80e:	00 97       	sbiw	r24, 0x00	; 0
     810:	a1 f7       	brne	.-24     	; 0x7fa <print_char+0x30>
     812:	24 96       	adiw	r28, 0x04	; 4
     814:	d0 93 b1 01 	sts	0x01B1, r29
     818:	c0 93 b0 01 	sts	0x01B0, r28
	{
		ext_ram[position] = pgm_read_word_near(&(font[character-32][i]));
		position++;
	}
}
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	08 95       	ret

00000822 <print_inverted_char>:

void print_inverted_char(char character)
{
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	c0 91 b0 01 	lds	r28, 0x01B0
     82a:	d0 91 b1 01 	lds	r29, 0x01B1
     82e:	28 2f       	mov	r18, r24
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	20 52       	subi	r18, 0x20	; 32
     834:	31 09       	sbc	r19, r1
     836:	c9 01       	movw	r24, r18
     838:	88 0f       	add	r24, r24
     83a:	99 1f       	adc	r25, r25
     83c:	88 0f       	add	r24, r24
     83e:	99 1f       	adc	r25, r25
     840:	28 0f       	add	r18, r24
     842:	39 1f       	adc	r19, r25
     844:	26 57       	subi	r18, 0x76	; 118
     846:	3f 4f       	sbci	r19, 0xFF	; 255
     848:	84 e0       	ldi	r24, 0x04	; 4
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	be 01       	movw	r22, r28
     84e:	6c 5f       	subi	r22, 0xFC	; 252
     850:	77 4e       	sbci	r23, 0xE7	; 231
     852:	db 01       	movw	r26, r22
     854:	a8 1b       	sub	r26, r24
     856:	b9 0b       	sbc	r27, r25
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
	
	for(int i = 0; i < 4; i++)
	{
		ext_ram[position] = ~pgm_read_word_near(&(font[character-32][i]));
     858:	f9 01       	movw	r30, r18
     85a:	45 91       	lpm	r20, Z+
     85c:	54 91       	lpm	r21, Z
     85e:	40 95       	com	r20
     860:	4c 93       	st	X, r20
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	2f 5f       	subi	r18, 0xFF	; 255
     866:	3f 4f       	sbci	r19, 0xFF	; 255

void print_inverted_char(char character)
{
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
	
	for(int i = 0; i < 4; i++)
     868:	00 97       	sbiw	r24, 0x00	; 0
     86a:	99 f7       	brne	.-26     	; 0x852 <print_inverted_char+0x30>
     86c:	24 96       	adiw	r28, 0x04	; 4
     86e:	d0 93 b1 01 	sts	0x01B1, r29
     872:	c0 93 b0 01 	sts	0x01B0, r28
	{
		ext_ram[position] = ~pgm_read_word_near(&(font[character-32][i]));
		position++;
	}
}
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	08 95       	ret

0000087c <set_position>:
* \param in page Row on Y-axis
* \return Success/Failure
****************************************************************************/
int set_position(unsigned int column, unsigned int page)
{
	if (column > 32)
     87c:	81 32       	cpi	r24, 0x21	; 33
     87e:	91 05       	cpc	r25, r1
     880:	c0 f4       	brcc	.+48     	; 0x8b2 <set_position+0x36>
	{
		return 1;
	}
	else if (page > 8)
     882:	69 30       	cpi	r22, 0x09	; 9
     884:	71 05       	cpc	r23, r1
     886:	c0 f4       	brcc	.+48     	; 0x8b8 <set_position+0x3c>
	{
		return 1;
	}
		
	position = page * 128 + column * 4;
     888:	66 0f       	add	r22, r22
     88a:	77 1f       	adc	r23, r23
     88c:	62 95       	swap	r22
     88e:	72 95       	swap	r23
     890:	70 7f       	andi	r23, 0xF0	; 240
     892:	76 27       	eor	r23, r22
     894:	60 7f       	andi	r22, 0xF0	; 240
     896:	76 27       	eor	r23, r22
     898:	86 0f       	add	r24, r22
     89a:	97 1f       	adc	r25, r23
     89c:	88 0f       	add	r24, r24
     89e:	99 1f       	adc	r25, r25
     8a0:	88 0f       	add	r24, r24
     8a2:	99 1f       	adc	r25, r25
     8a4:	90 93 b1 01 	sts	0x01B1, r25
     8a8:	80 93 b0 01 	sts	0x01B0, r24
	
	return 0;
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	08 95       	ret
****************************************************************************/
int set_position(unsigned int column, unsigned int page)
{
	if (column > 32)
	{
		return 1;
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	08 95       	ret
	}
	else if (page > 8)
	{
		return 1;
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	90 e0       	ldi	r25, 0x00	; 0
	}
		
	position = page * 128 + column * 4;
	
	return 0;
}
     8bc:	08 95       	ret

000008be <print_string>:
*
* \param in String that shall be printed
* \return Success/Failure
****************************************************************************/
int print_string(char* string)
{
     8be:	ef 92       	push	r14
     8c0:	ff 92       	push	r15
     8c2:	0f 93       	push	r16
     8c4:	1f 93       	push	r17
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
	int lenght  = strlen(string);
     8ca:	fc 01       	movw	r30, r24
     8cc:	01 90       	ld	r0, Z+
     8ce:	00 20       	and	r0, r0
     8d0:	e9 f7       	brne	.-6      	; 0x8cc <print_string+0xe>
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	7f 01       	movw	r14, r30
     8d6:	e8 1a       	sub	r14, r24
     8d8:	f9 0a       	sbc	r15, r25
	for(int i = 0; i < lenght; i++)
     8da:	1e 14       	cp	r1, r14
     8dc:	1f 04       	cpc	r1, r15
     8de:	64 f4       	brge	.+24     	; 0x8f8 <print_string+0x3a>
     8e0:	8c 01       	movw	r16, r24
     8e2:	c0 e0       	ldi	r28, 0x00	; 0
     8e4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		print_char(string[i]);
     8e6:	f8 01       	movw	r30, r16
     8e8:	81 91       	ld	r24, Z+
     8ea:	8f 01       	movw	r16, r30
     8ec:	0e 94 e5 03 	call	0x7ca	; 0x7ca <print_char>
* \return Success/Failure
****************************************************************************/
int print_string(char* string)
{
	int lenght  = strlen(string);
	for(int i = 0; i < lenght; i++)
     8f0:	21 96       	adiw	r28, 0x01	; 1
     8f2:	ec 16       	cp	r14, r28
     8f4:	fd 06       	cpc	r15, r29
     8f6:	b9 f7       	brne	.-18     	; 0x8e6 <print_string+0x28>
	{
		print_char(string[i]);
	}
	
	return 0;
}
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	1f 91       	pop	r17
     902:	0f 91       	pop	r16
     904:	ff 90       	pop	r15
     906:	ef 90       	pop	r14
     908:	08 95       	ret

0000090a <revert_colour_line>:
****************************************************************************/
void revert_colour_line(unsigned char line)
{
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
		
	for(int i = (line * OLED_LINE_LENGTH_COLUMNS) + 2; i < ((line + 1) * OLED_LINE_LENGTH_COLUMNS); i++)
     90a:	90 e8       	ldi	r25, 0x80	; 128
     90c:	89 9f       	mul	r24, r25
     90e:	f0 01       	movw	r30, r0
     910:	11 24       	eor	r1, r1
     912:	cf 01       	movw	r24, r30
     914:	80 58       	subi	r24, 0x80	; 128
     916:	9f 4f       	sbci	r25, 0xFF	; 255
     918:	9f 01       	movw	r18, r30
     91a:	2e 5f       	subi	r18, 0xFE	; 254
     91c:	3f 4f       	sbci	r19, 0xFF	; 255
     91e:	28 17       	cp	r18, r24
     920:	39 07       	cpc	r19, r25
     922:	54 f4       	brge	.+20     	; 0x938 <revert_colour_line+0x2e>
     924:	ef 5f       	subi	r30, 0xFF	; 255
     926:	f7 4e       	sbci	r31, 0xE7	; 231
     928:	81 50       	subi	r24, 0x01	; 1
     92a:	98 4e       	sbci	r25, 0xE8	; 232
	{
		ext_ram[i-1] = ~ext_ram[i-1];
     92c:	20 81       	ld	r18, Z
     92e:	20 95       	com	r18
     930:	21 93       	st	Z+, r18
****************************************************************************/
void revert_colour_line(unsigned char line)
{
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
		
	for(int i = (line * OLED_LINE_LENGTH_COLUMNS) + 2; i < ((line + 1) * OLED_LINE_LENGTH_COLUMNS); i++)
     932:	e8 17       	cp	r30, r24
     934:	f9 07       	cpc	r31, r25
     936:	d1 f7       	brne	.-12     	; 0x92c <revert_colour_line+0x22>
     938:	08 95       	ret

0000093a <init>:
* \brief Initialize all important peripherals and pins
*
****************************************************************************/
void init()
{
	USART_init(MYUBBR);
     93a:	8f e1       	ldi	r24, 0x1F	; 31
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	0e 94 52 05 	call	0xaa4	; 0xaa4 <USART_init>
	/* Enables standard IO functions */	
	fdevopen(USART_putchar, USART_getchar);
     942:	6f e5       	ldi	r22, 0x5F	; 95
     944:	75 e0       	ldi	r23, 0x05	; 5
     946:	89 e5       	ldi	r24, 0x59	; 89
     948:	95 e0       	ldi	r25, 0x05	; 5
     94a:	0e 94 38 0a 	call	0x1470	; 0x1470 <fdevopen>
	/* Enables external memory*/
	set_bit(MCUCR, SRE);
     94e:	85 b7       	in	r24, 0x35	; 53
     950:	80 68       	ori	r24, 0x80	; 128
     952:	85 bf       	out	0x35, r24	; 53
	/* Pin 1 is set to output for the LED*/
	set_bit(DDRB, PB0);
     954:	b8 9a       	sbi	0x17, 0	; 23
	/* Pin is now driven LOW*/
	clear_bit(PORTB, PB0);
     956:	c0 98       	cbi	0x18, 0	; 24
	/* Initialize OLED display */
	init_oled();
     958:	0e 94 96 03 	call	0x72c	; 0x72c <init_oled>
	interface_init();
     95c:	0e 94 64 05 	call	0xac8	; 0xac8 <interface_init>
     960:	08 95       	ret

00000962 <main>:




int main(void)
{	
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
     96a:	2b 97       	sbiw	r28, 0x0b	; 11
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	f8 94       	cli
     970:	de bf       	out	0x3e, r29	; 62
     972:	0f be       	out	0x3f, r0	; 63
     974:	cd bf       	out	0x3d, r28	; 61

	clear_bit(DDRD, PD3);
     976:	8b 98       	cbi	0x11, 3	; 17
	clear_bit(DDRD, PD2);
     978:	8a 98       	cbi	0x11, 2	; 17
	
	init();
     97a:	0e 94 9d 04 	call	0x93a	; 0x93a <init>
	JoystickPosition position;
	JoystickPosition calibration;
//	JoystickDirection direction;
//	JoystickDirection change_y, change_x;
//	ScreenName screen_name = 0;
	calibration = joystick_calibration();
     97e:	0e 94 b4 02 	call	0x568	; 0x568 <joystick_calibration>
     982:	5c 01       	movw	r10, r24
	
	
	
	//SRAM_test();
	
	CAN_init();
     984:	0e 94 5e 01 	call	0x2bc	; 0x2bc <CAN_init>
	
	clear_oled();
     988:	0e 94 dd 03 	call	0x7ba	; 0x7ba <clear_oled>
	reset_position();
     98c:	0e 94 c3 03 	call	0x786	; 0x786 <reset_position>
	
	clear_oled();
     990:	0e 94 dd 03 	call	0x7ba	; 0x7ba <clear_oled>
	refresh_oled();
     994:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <refresh_oled>
	canMessage.ID = 0xAA;
	canMessage.length = 1;
	canMessage.data_array[0] = 0x10;
	
	
	printf("start\n");
     998:	88 e2       	ldi	r24, 0x28	; 40
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	0e 94 97 0a 	call	0x152e	; 0x152e <puts>
		data = read_touchpad_data();
		
		send_joystick_possition(position, data);
		_delay_ms(1);	

		printf("%d\n", position.xaxis);
     9a0:	0f 2e       	mov	r0, r31
     9a2:	f8 e3       	ldi	r31, 0x38	; 56
     9a4:	cf 2e       	mov	r12, r31
     9a6:	f1 e0       	ldi	r31, 0x01	; 1
     9a8:	df 2e       	mov	r13, r31
     9aa:	f0 2d       	mov	r31, r0
		printf("%d\n", position.yaxis);
		
		if(CAN_receive_message(&canMessageNode2)==SUCCESS)
		{
			printf("#%d. %s : %d\n", 1, 2, 3);
     9ac:	0f 2e       	mov	r0, r31
     9ae:	f3 e0       	ldi	r31, 0x03	; 3
     9b0:	6f 2e       	mov	r6, r31
     9b2:	f0 2d       	mov	r31, r0
     9b4:	68 94       	set
     9b6:	77 24       	eor	r7, r7
     9b8:	71 f8       	bld	r7, 1
     9ba:	0f 2e       	mov	r0, r31
     9bc:	fe e2       	ldi	r31, 0x2E	; 46
     9be:	8f 2e       	mov	r8, r31
     9c0:	f1 e0       	ldi	r31, 0x01	; 1
     9c2:	9f 2e       	mov	r9, r31
     9c4:	f0 2d       	mov	r31, r0
	high_score_write(scores);
	*/
	//sei();
	while(1)
	{
		interface_state_machine(calibration, State_NewGame);
     9c6:	61 e0       	ldi	r22, 0x01	; 1
     9c8:	c5 01       	movw	r24, r10
     9ca:	0e 94 9d 09 	call	0x133a	; 0x133a <interface_state_machine>
	
		position = read_joystick_position(calibration);
     9ce:	c5 01       	movw	r24, r10
     9d0:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <read_joystick_position>
     9d4:	08 2f       	mov	r16, r24
     9d6:	19 2f       	mov	r17, r25
		data = read_touchpad_data();
     9d8:	0e 94 c2 02 	call	0x584	; 0x584 <read_touchpad_data>
     9dc:	ab 01       	movw	r20, r22
     9de:	bc 01       	movw	r22, r24
		
		send_joystick_possition(position, data);
     9e0:	80 2f       	mov	r24, r16
     9e2:	91 2f       	mov	r25, r17
     9e4:	0e 94 1c 02 	call	0x438	; 0x438 <send_joystick_possition>
     9e8:	8c ec       	ldi	r24, 0xCC	; 204
     9ea:	94 e0       	ldi	r25, 0x04	; 4
     9ec:	01 97       	sbiw	r24, 0x01	; 1
     9ee:	f1 f7       	brne	.-4      	; 0x9ec <main+0x8a>
     9f0:	00 c0       	rjmp	.+0      	; 0x9f2 <main+0x90>
     9f2:	00 00       	nop
		_delay_ms(1);	

		printf("%d\n", position.xaxis);
     9f4:	1f 92       	push	r1
     9f6:	0f 93       	push	r16
     9f8:	df 92       	push	r13
     9fa:	cf 92       	push	r12
     9fc:	0e 94 83 0a 	call	0x1506	; 0x1506 <printf>
		printf("%d\n", position.yaxis);
     a00:	1f 92       	push	r1
     a02:	1f 93       	push	r17
     a04:	df 92       	push	r13
     a06:	cf 92       	push	r12
     a08:	0e 94 83 0a 	call	0x1506	; 0x1506 <printf>
		
		if(CAN_receive_message(&canMessageNode2)==SUCCESS)
     a0c:	ce 01       	movw	r24, r28
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <CAN_receive_message>
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	f8 94       	cli
     a18:	de bf       	out	0x3e, r29	; 62
     a1a:	0f be       	out	0x3f, r0	; 63
     a1c:	cd bf       	out	0x3d, r28	; 61
     a1e:	81 11       	cpse	r24, r1
     a20:	d2 cf       	rjmp	.-92     	; 0x9c6 <main+0x64>
		{
			printf("#%d. %s : %d\n", 1, 2, 3);
     a22:	1f 92       	push	r1
     a24:	6f 92       	push	r6
     a26:	1f 92       	push	r1
     a28:	7f 92       	push	r7
     a2a:	1f 92       	push	r1
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	8f 93       	push	r24
     a30:	9f 92       	push	r9
     a32:	8f 92       	push	r8
     a34:	0e 94 83 0a 	call	0x1506	; 0x1506 <printf>
			receive_mode_change(&game_mode, canMessageNode2);
     a38:	e9 80       	ldd	r14, Y+1	; 0x01
     a3a:	fa 80       	ldd	r15, Y+2	; 0x02
     a3c:	0b 81       	ldd	r16, Y+3	; 0x03
     a3e:	1c 81       	ldd	r17, Y+4	; 0x04
     a40:	2d 81       	ldd	r18, Y+5	; 0x05
     a42:	3e 81       	ldd	r19, Y+6	; 0x06
     a44:	4f 81       	ldd	r20, Y+7	; 0x07
     a46:	58 85       	ldd	r21, Y+8	; 0x08
     a48:	69 85       	ldd	r22, Y+9	; 0x09
     a4a:	7a 85       	ldd	r23, Y+10	; 0x0a
     a4c:	ce 01       	movw	r24, r28
     a4e:	0b 96       	adiw	r24, 0x0b	; 11
     a50:	0e 94 5e 02 	call	0x4bc	; 0x4bc <receive_mode_change>
			if(game_mode.gamemode == Endgame)
     a54:	8b 85       	ldd	r24, Y+11	; 0x0b
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	f8 94       	cli
     a5a:	de bf       	out	0x3e, r29	; 62
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	cd bf       	out	0x3d, r28	; 61
     a60:	87 30       	cpi	r24, 0x07	; 7
     a62:	09 f0       	breq	.+2      	; 0xa66 <main+0x104>
     a64:	b0 cf       	rjmp	.-160    	; 0x9c6 <main+0x64>
			{
				interface_state_machine(calibration, State_Endgame);
     a66:	6c e0       	ldi	r22, 0x0C	; 12
     a68:	c5 01       	movw	r24, r10
     a6a:	0e 94 9d 09 	call	0x133a	; 0x133a <interface_state_machine>
     a6e:	ab cf       	rjmp	.-170    	; 0x9c6 <main+0x64>

00000a70 <SPI_init>:
*
****************************************************************************/
void SPI_init()
{
	/* Drive MOSI, SCK and CS HIGH*/
	DDR_SPI |= (1 << DD_MOSI) | (1 << DD_SCK) | (1 << DD_CS);
     a70:	87 b3       	in	r24, 0x17	; 23
     a72:	80 6b       	ori	r24, 0xB0	; 176
     a74:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master mode, clock rate fck/16*/
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     a76:	81 e5       	ldi	r24, 0x51	; 81
     a78:	8d b9       	out	0x0d, r24	; 13
     a7a:	08 95       	ret

00000a7c <SPI_write>:
*
* \param in byte to be written
****************************************************************************/
void SPI_write(uint8_t data)
{
	SPDR = data;
     a7c:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1 << SPIF)));
     a7e:	77 9b       	sbis	0x0e, 7	; 14
     a80:	fe cf       	rjmp	.-4      	; 0xa7e <SPI_write+0x2>
}
     a82:	08 95       	ret

00000a84 <SPI_read>:
* \brief Read data from slave unit
*
* \return Read data
****************************************************************************/
uint8_t SPI_read()
{
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	1f 92       	push	r1
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t retVal;
	SPDR = 0xFF;
     a8e:	8f ef       	ldi	r24, 0xFF	; 255
     a90:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1 << SPIF)));
     a92:	77 9b       	sbis	0x0e, 7	; 14
     a94:	fe cf       	rjmp	.-4      	; 0xa92 <SPI_read+0xe>
	
	retVal = SPDR;
     a96:	8f b1       	in	r24, 0x0f	; 15
     a98:	89 83       	std	Y+1, r24	; 0x01
	
	return retVal;
     a9a:	89 81       	ldd	r24, Y+1	; 0x01
     a9c:	0f 90       	pop	r0
     a9e:	df 91       	pop	r29
     aa0:	cf 91       	pop	r28
     aa2:	08 95       	ret

00000aa4 <USART_init>:
 * \param ubrr Desired baud rate.
 ****************************************************************************/
void USART_init(unsigned int ubrr)
{
	//Set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
     aa4:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
     aa6:	89 b9       	out	0x09, r24	; 9
	// Enable receiver and transmitter
	UCSR0B = (1<< RXEN0) | (1<<TXEN0) | (1<<RXCIE0) | (1<<TXCIE0);
     aa8:	88 ed       	ldi	r24, 0xD8	; 216
     aaa:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 2 stop bit
	UCSR0C = (1<<URSEL0) | (3<<UCSZ00) ;
     aac:	86 e8       	ldi	r24, 0x86	; 134
     aae:	80 bd       	out	0x20, r24	; 32
     ab0:	08 95       	ret

00000ab2 <USART_putchar>:
 * \param c Char to be sent.
 * \return Always 0.
 ****************************************************************************/
int USART_putchar(char c)
{
	loop_until_bit_is_set(UCSR0A, UDRE0);
     ab2:	5d 9b       	sbis	0x0b, 5	; 11
     ab4:	fe cf       	rjmp	.-4      	; 0xab2 <USART_putchar>
	UDR0 = c;
     ab6:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	08 95       	ret

00000abe <USART_getchar>:
 * \return Received char.
 ****************************************************************************/
int USART_getchar()
{
	char c;
	loop_until_bit_is_set(UCSR0A, RXC0);
     abe:	5f 9b       	sbis	0x0b, 7	; 11
     ac0:	fe cf       	rjmp	.-4      	; 0xabe <USART_getchar>
	c = UDR0;
     ac2:	8c b1       	in	r24, 0x0c	; 12
	return c;
}
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	08 95       	ret

00000ac8 <interface_init>:
	volatile char *high_scores_sram = (char *) EEPROM_HIGH_SCORES_BASE_ADDR;
	uint8_t i, j;
	
	for(i = 0; i < USERNAME_LENGTH; i++)
	{
		ext_ram[i] = 'A';
     ac8:	81 e4       	ldi	r24, 0x41	; 65
     aca:	80 93 00 1c 	sts	0x1C00, r24
     ace:	80 93 01 1c 	sts	0x1C01, r24
     ad2:	80 93 02 1c 	sts	0x1C02, r24
     ad6:	80 93 03 1c 	sts	0x1C03, r24
     ada:	80 93 04 1c 	sts	0x1C04, r24
     ade:	08 95       	ret

00000ae0 <interface_username>:
* \brief Function call during the set username phase
*
* \param in joystick calibration data
****************************************************************************/
InterfaceState interface_username(JoystickPosition calibration)
{
     ae0:	4f 92       	push	r4
     ae2:	5f 92       	push	r5
     ae4:	6f 92       	push	r6
     ae6:	7f 92       	push	r7
     ae8:	8f 92       	push	r8
     aea:	9f 92       	push	r9
     aec:	af 92       	push	r10
     aee:	bf 92       	push	r11
     af0:	cf 92       	push	r12
     af2:	df 92       	push	r13
     af4:	ef 92       	push	r14
     af6:	ff 92       	push	r15
     af8:	0f 93       	push	r16
     afa:	1f 93       	push	r17
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
     b00:	00 d0       	rcall	.+0      	; 0xb02 <interface_username+0x22>
     b02:	00 d0       	rcall	.+0      	; 0xb04 <interface_username+0x24>
     b04:	1f 92       	push	r1
     b06:	cd b7       	in	r28, 0x3d	; 61
     b08:	de b7       	in	r29, 0x3e	; 62
     b0a:	5c 01       	movw	r10, r24
     b0c:	de 01       	movw	r26, r28
     b0e:	11 96       	adiw	r26, 0x01	; 1
     b10:	e0 e0       	ldi	r30, 0x00	; 0
     b12:	fc e1       	ldi	r31, 0x1C	; 28
	char name[USERNAME_LENGTH];
	char index = 0;
	
	for(int i=0; i<USERNAME_LENGTH;i++)
	{
		name[i] = ext_ram[i];
     b14:	81 91       	ld	r24, Z+
     b16:	8d 93       	st	X+, r24
	ChangeTouchpadData change_touch_data;
	TouchpadData touch_data;
	char name[USERNAME_LENGTH];
	char index = 0;
	
	for(int i=0; i<USERNAME_LENGTH;i++)
     b18:	e5 30       	cpi	r30, 0x05	; 5
     b1a:	8c e1       	ldi	r24, 0x1C	; 28
     b1c:	f8 07       	cpc	r31, r24
     b1e:	d1 f7       	brne	.-12     	; 0xb14 <interface_username+0x34>
	{
		name[i] = ext_ram[i];
	}
	
	position = read_joystick_position(calibration);
     b20:	c5 01       	movw	r24, r10
     b22:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <read_joystick_position>
	direction = read_joystick_direction(position);
     b26:	0e 94 87 02 	call	0x50e	; 0x50e <read_joystick_direction>
     b2a:	18 2f       	mov	r17, r24
	change_y = change_yaxis(direction);
     b2c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <change_yaxis>
	change_x = change_xaxis(direction);
     b30:	81 2f       	mov	r24, r17
     b32:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <change_xaxis>
	
	set_position(12, 0);
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	8c e0       	ldi	r24, 0x0C	; 12
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
	print_string("Username");
     b42:	8c e8       	ldi	r24, 0x8C	; 140
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	0e 94 5f 04 	call	0x8be	; 0x8be <print_string>
	revert_colour_line(0);
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	0e 94 85 04 	call	0x90a	; 0x90a <revert_colour_line>
	
	set_position(4,4);
     b50:	64 e0       	ldi	r22, 0x04	; 4
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	84 e0       	ldi	r24, 0x04	; 4
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
	JoystickDirection direction;
	JoystickDirection change_y, change_x;
	ChangeTouchpadData change_touch_data;
	TouchpadData touch_data;
	char name[USERNAME_LENGTH];
	char index = 0;
     b5c:	71 2c       	mov	r7, r1
		{
			index = (index + 1) % 5;
		}
		else if (change_x == Left)
		{
			index = index == 0 ? 4 : (index - 1);
     b5e:	68 94       	set
     b60:	44 24       	eor	r4, r4
     b62:	42 f8       	bld	r4, 2
		change_y = change_yaxis(direction);
		change_x = change_xaxis(direction);
		
		if (change_x == Right)
		{
			index = (index + 1) % 5;
     b64:	0f 2e       	mov	r0, r31
     b66:	f5 e0       	ldi	r31, 0x05	; 5
     b68:	8f 2e       	mov	r8, r31
     b6a:	91 2c       	mov	r9, r1
     b6c:	f0 2d       	mov	r31, r0
		{
			name[index] = (name[index] == 'A') ? 'Z' : (name[index] - 1);
		}
		
		set_position(10,4);
		for (int i = 0; i < 5; i++)
     b6e:	51 2c       	mov	r5, r1
     b70:	61 2c       	mov	r6, r1
	
	set_position(4,4);
	
	while (1)
	{
		position = read_joystick_position(calibration);
     b72:	c5 01       	movw	r24, r10
     b74:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <read_joystick_position>
		direction = read_joystick_direction(position);
     b78:	0e 94 87 02 	call	0x50e	; 0x50e <read_joystick_direction>
     b7c:	18 2f       	mov	r17, r24
		change_y = change_yaxis(direction);
     b7e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <change_yaxis>
     b82:	08 2f       	mov	r16, r24
		change_x = change_xaxis(direction);
     b84:	81 2f       	mov	r24, r17
     b86:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <change_xaxis>
		
		if (change_x == Right)
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	49 f4       	brne	.+18     	; 0xba0 <interface_username+0xc0>
		{
			index = (index + 1) % 5;
     b8e:	27 2d       	mov	r18, r7
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	c9 01       	movw	r24, r18
     b94:	01 96       	adiw	r24, 0x01	; 1
     b96:	b4 01       	movw	r22, r8
     b98:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__divmodhi4>
     b9c:	78 2e       	mov	r7, r24
     b9e:	07 c0       	rjmp	.+14     	; 0xbae <interface_username+0xce>
		}
		else if (change_x == Left)
     ba0:	81 11       	cpse	r24, r1
     ba2:	05 c0       	rjmp	.+10     	; 0xbae <interface_username+0xce>
		{
			index = index == 0 ? 4 : (index - 1);
     ba4:	77 20       	and	r7, r7
     ba6:	11 f0       	breq	.+4      	; 0xbac <interface_username+0xcc>
     ba8:	7a 94       	dec	r7
     baa:	01 c0       	rjmp	.+2      	; 0xbae <interface_username+0xce>
     bac:	74 2c       	mov	r7, r4
		}
		
		if (change_y == Up)
     bae:	02 30       	cpi	r16, 0x02	; 2
     bb0:	b1 f4       	brne	.+44     	; 0xbde <interface_username+0xfe>
		{
			name[index] = (name[index] == 'Z') ? 'A' : (name[index] + 1);
     bb2:	87 2d       	mov	r24, r7
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	ec 0f       	add	r30, r28
     bbc:	fd 1f       	adc	r31, r29
     bbe:	e8 0f       	add	r30, r24
     bc0:	f9 1f       	adc	r31, r25
     bc2:	20 81       	ld	r18, Z
     bc4:	2a 35       	cpi	r18, 0x5A	; 90
     bc6:	11 f0       	breq	.+4      	; 0xbcc <interface_username+0xec>
     bc8:	2f 5f       	subi	r18, 0xFF	; 255
     bca:	01 c0       	rjmp	.+2      	; 0xbce <interface_username+0xee>
     bcc:	21 e4       	ldi	r18, 0x41	; 65
     bce:	e1 e0       	ldi	r30, 0x01	; 1
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	ec 0f       	add	r30, r28
     bd4:	fd 1f       	adc	r31, r29
     bd6:	e8 0f       	add	r30, r24
     bd8:	f9 1f       	adc	r31, r25
     bda:	20 83       	st	Z, r18
     bdc:	17 c0       	rjmp	.+46     	; 0xc0c <interface_username+0x12c>
		}
		else if (change_y == Down)
     bde:	03 30       	cpi	r16, 0x03	; 3
     be0:	a9 f4       	brne	.+42     	; 0xc0c <interface_username+0x12c>
		{
			name[index] = (name[index] == 'A') ? 'Z' : (name[index] - 1);
     be2:	87 2d       	mov	r24, r7
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	e1 e0       	ldi	r30, 0x01	; 1
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	ec 0f       	add	r30, r28
     bec:	fd 1f       	adc	r31, r29
     bee:	e8 0f       	add	r30, r24
     bf0:	f9 1f       	adc	r31, r25
     bf2:	20 81       	ld	r18, Z
     bf4:	21 34       	cpi	r18, 0x41	; 65
     bf6:	11 f0       	breq	.+4      	; 0xbfc <interface_username+0x11c>
     bf8:	21 50       	subi	r18, 0x01	; 1
     bfa:	01 c0       	rjmp	.+2      	; 0xbfe <interface_username+0x11e>
     bfc:	2a e5       	ldi	r18, 0x5A	; 90
     bfe:	e1 e0       	ldi	r30, 0x01	; 1
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	ec 0f       	add	r30, r28
     c04:	fd 1f       	adc	r31, r29
     c06:	e8 0f       	add	r30, r24
     c08:	f9 1f       	adc	r31, r25
     c0a:	20 83       	st	Z, r18
		}
		
		set_position(10,4);
     c0c:	64 e0       	ldi	r22, 0x04	; 4
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	8a e0       	ldi	r24, 0x0A	; 10
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
		for (int i = 0; i < 5; i++)
     c18:	05 2d       	mov	r16, r5
     c1a:	16 2d       	mov	r17, r6
		{
			if (i == index)
     c1c:	e7 2c       	mov	r14, r7
     c1e:	f1 2c       	mov	r15, r1
			{
				print_inverted_char(name[i]);
     c20:	cc 24       	eor	r12, r12
     c22:	c3 94       	inc	r12
     c24:	d1 2c       	mov	r13, r1
     c26:	cc 0e       	add	r12, r28
     c28:	dd 1e       	adc	r13, r29
     c2a:	ce 0c       	add	r12, r14
     c2c:	df 1c       	adc	r13, r15
		}
		
		set_position(10,4);
		for (int i = 0; i < 5; i++)
		{
			if (i == index)
     c2e:	e0 16       	cp	r14, r16
     c30:	f1 06       	cpc	r15, r17
     c32:	29 f4       	brne	.+10     	; 0xc3e <interface_username+0x15e>
			{
				print_inverted_char(name[i]);
     c34:	f6 01       	movw	r30, r12
     c36:	80 81       	ld	r24, Z
     c38:	0e 94 11 04 	call	0x822	; 0x822 <print_inverted_char>
     c3c:	09 c0       	rjmp	.+18     	; 0xc50 <interface_username+0x170>
     c3e:	e1 e0       	ldi	r30, 0x01	; 1
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	ec 0f       	add	r30, r28
     c44:	fd 1f       	adc	r31, r29
     c46:	e0 0f       	add	r30, r16
     c48:	f1 1f       	adc	r31, r17
			}
			else
			{
				print_char(name[i]);
     c4a:	80 81       	ld	r24, Z
     c4c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <print_char>
			}
			print_char(' ');
     c50:	80 e2       	ldi	r24, 0x20	; 32
     c52:	0e 94 e5 03 	call	0x7ca	; 0x7ca <print_char>
		{
			name[index] = (name[index] == 'A') ? 'Z' : (name[index] - 1);
		}
		
		set_position(10,4);
		for (int i = 0; i < 5; i++)
     c56:	0f 5f       	subi	r16, 0xFF	; 255
     c58:	1f 4f       	sbci	r17, 0xFF	; 255
     c5a:	05 30       	cpi	r16, 0x05	; 5
     c5c:	11 05       	cpc	r17, r1
     c5e:	39 f7       	brne	.-50     	; 0xc2e <interface_username+0x14e>
				print_char(name[i]);
			}
			print_char(' ');
		}
		
		refresh_oled();
     c60:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <refresh_oled>
		
		touch_data = read_touchpad_data();
     c64:	0e 94 c2 02 	call	0x584	; 0x584 <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
     c68:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <change_touchpad_data>
		if (change_touch_data.rightButton)
     c6c:	88 23       	and	r24, r24
     c6e:	09 f4       	brne	.+2      	; 0xc72 <interface_username+0x192>
     c70:	80 cf       	rjmp	.-256    	; 0xb72 <interface_username+0x92>
     c72:	de 01       	movw	r26, r28
     c74:	11 96       	adiw	r26, 0x01	; 1
     c76:	e0 e0       	ldi	r30, 0x00	; 0
     c78:	fc e1       	ldi	r31, 0x1C	; 28
		{
			for(int i=0; i<USERNAME_LENGTH;i++)
			{
				ext_ram[i] = name[i];
     c7a:	8d 91       	ld	r24, X+
     c7c:	81 93       	st	Z+, r24
		
		touch_data = read_touchpad_data();
		change_touch_data = change_touchpad_data(touch_data);
		if (change_touch_data.rightButton)
		{
			for(int i=0; i<USERNAME_LENGTH;i++)
     c7e:	e5 30       	cpi	r30, 0x05	; 5
     c80:	8c e1       	ldi	r24, 0x1C	; 28
     c82:	f8 07       	cpc	r31, r24
     c84:	d1 f7       	brne	.-12     	; 0xc7a <interface_username+0x19a>
			}
			
			return State_NewGame;
		}
	}	
}
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	1f 91       	pop	r17
     c98:	0f 91       	pop	r16
     c9a:	ff 90       	pop	r15
     c9c:	ef 90       	pop	r14
     c9e:	df 90       	pop	r13
     ca0:	cf 90       	pop	r12
     ca2:	bf 90       	pop	r11
     ca4:	af 90       	pop	r10
     ca6:	9f 90       	pop	r9
     ca8:	8f 90       	pop	r8
     caa:	7f 90       	pop	r7
     cac:	6f 90       	pop	r6
     cae:	5f 90       	pop	r5
     cb0:	4f 90       	pop	r4
     cb2:	08 95       	ret

00000cb4 <interface_new_game>:
* \brief Function call during the set new game phase
*
* \param in joystick calibration data
****************************************************************************/
InterfaceState interface_new_game(JoystickPosition calibration)
{
     cb4:	ef 92       	push	r14
     cb6:	ff 92       	push	r15
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	ec 01       	movw	r28, r24
	JoystickDirection change_y, change_x;
	ChangeTouchpadData change_touch_data;
	TouchpadData touch_data;
	char scr_position = 0;
	
	position = read_joystick_position(calibration);
     cc2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <read_joystick_position>
	direction = read_joystick_direction(position);
     cc6:	0e 94 87 02 	call	0x50e	; 0x50e <read_joystick_direction>
     cca:	18 2f       	mov	r17, r24
	change_y = change_yaxis(direction);
     ccc:	0e 94 e7 02 	call	0x5ce	; 0x5ce <change_yaxis>
	change_x = change_xaxis(direction);
     cd0:	81 2f       	mov	r24, r17
     cd2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <change_xaxis>
	
	set_position(13, 0);
     cd6:	60 e0       	ldi	r22, 0x00	; 0
     cd8:	70 e0       	ldi	r23, 0x00	; 0
     cda:	8d e0       	ldi	r24, 0x0D	; 13
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
	print_string("New game");
     ce2:	8c e3       	ldi	r24, 0x3C	; 60
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	0e 94 5f 04 	call	0x8be	; 0x8be <print_string>
	revert_colour_line(0);
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	0e 94 85 04 	call	0x90a	; 0x90a <revert_colour_line>
	set_position(3, 2);
     cf0:	62 e0       	ldi	r22, 0x02	; 2
     cf2:	70 e0       	ldi	r23, 0x00	; 0
     cf4:	83 e0       	ldi	r24, 0x03	; 3
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
	print_string("Tutorial");
     cfc:	85 e4       	ldi	r24, 0x45	; 69
     cfe:	91 e0       	ldi	r25, 0x01	; 1
     d00:	0e 94 5f 04 	call	0x8be	; 0x8be <print_string>
	set_position(3, 3);
     d04:	63 e0       	ldi	r22, 0x03	; 3
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	83 e0       	ldi	r24, 0x03	; 3
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
	print_string("Easy");
     d10:	8e e4       	ldi	r24, 0x4E	; 78
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	0e 94 5f 04 	call	0x8be	; 0x8be <print_string>
	set_position(3, 4);
     d18:	64 e0       	ldi	r22, 0x04	; 4
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	83 e0       	ldi	r24, 0x03	; 3
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
	print_string("Normal");
     d24:	83 e5       	ldi	r24, 0x53	; 83
     d26:	91 e0       	ldi	r25, 0x01	; 1
     d28:	0e 94 5f 04 	call	0x8be	; 0x8be <print_string>
	set_position(3, 5);
     d2c:	65 e0       	ldi	r22, 0x05	; 5
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	83 e0       	ldi	r24, 0x03	; 3
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
	print_string("Hard");
     d38:	8a e5       	ldi	r24, 0x5A	; 90
     d3a:	91 e0       	ldi	r25, 0x01	; 1
     d3c:	0e 94 5f 04 	call	0x8be	; 0x8be <print_string>
	set_position(3, 6);
     d40:	66 e0       	ldi	r22, 0x06	; 6
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	83 e0       	ldi	r24, 0x03	; 3
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
	print_string("Insane");
     d4c:	8f e5       	ldi	r24, 0x5F	; 95
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	0e 94 5f 04 	call	0x8be	; 0x8be <print_string>
	JoystickPosition position;
	JoystickDirection direction;
	JoystickDirection change_y, change_x;
	ChangeTouchpadData change_touch_data;
	TouchpadData touch_data;
	char scr_position = 0;
     d54:	10 e0       	ldi	r17, 0x00	; 0
			print_char(' ');
			scr_position--;
		}
		else if (change_y == Down)
		{
			set_position(1, (scr_position % 5) + 2);
     d56:	0d ec       	ldi	r16, 0xCD	; 205
	set_position(3, 6);
	print_string("Insane");
	
	while(1)
	{
		position = read_joystick_position(calibration);
     d58:	ce 01       	movw	r24, r28
     d5a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <read_joystick_position>
		direction = read_joystick_direction(position);
     d5e:	0e 94 87 02 	call	0x50e	; 0x50e <read_joystick_direction>
     d62:	f8 2e       	mov	r15, r24
		change_y = change_yaxis(direction);
     d64:	0e 94 e7 02 	call	0x5ce	; 0x5ce <change_yaxis>
     d68:	e8 2e       	mov	r14, r24
		change_x = change_xaxis(direction);
     d6a:	8f 2d       	mov	r24, r15
     d6c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <change_xaxis>
		
		if (change_x == Right)
     d70:	81 30       	cpi	r24, 0x01	; 1
     d72:	09 f4       	brne	.+2      	; 0xd76 <interface_new_game+0xc2>
     d74:	7a c0       	rjmp	.+244    	; 0xe6a <interface_new_game+0x1b6>
		{
			return State_Options;
		}
		else if (change_x == Left)
     d76:	88 23       	and	r24, r24
     d78:	09 f4       	brne	.+2      	; 0xd7c <interface_new_game+0xc8>
     d7a:	79 c0       	rjmp	.+242    	; 0xe6e <interface_new_game+0x1ba>
		{
			return State_HighScores;
		}
		
		if (change_y == Up)
     d7c:	82 e0       	ldi	r24, 0x02	; 2
     d7e:	e8 12       	cpse	r14, r24
     d80:	17 c0       	rjmp	.+46     	; 0xdb0 <interface_new_game+0xfc>
		{
			set_position(1, (scr_position % 5) + 2);
     d82:	10 9f       	mul	r17, r16
     d84:	81 2d       	mov	r24, r1
     d86:	11 24       	eor	r1, r1
     d88:	86 95       	lsr	r24
     d8a:	86 95       	lsr	r24
     d8c:	98 2f       	mov	r25, r24
     d8e:	99 0f       	add	r25, r25
     d90:	99 0f       	add	r25, r25
     d92:	89 0f       	add	r24, r25
     d94:	61 2f       	mov	r22, r17
     d96:	68 1b       	sub	r22, r24
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	6e 5f       	subi	r22, 0xFE	; 254
     d9c:	7f 4f       	sbci	r23, 0xFF	; 255
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
			print_char(' ');
     da6:	80 e2       	ldi	r24, 0x20	; 32
     da8:	0e 94 e5 03 	call	0x7ca	; 0x7ca <print_char>
			scr_position--;
     dac:	11 50       	subi	r17, 0x01	; 1
     dae:	19 c0       	rjmp	.+50     	; 0xde2 <interface_new_game+0x12e>
		}
		else if (change_y == Down)
     db0:	83 e0       	ldi	r24, 0x03	; 3
     db2:	e8 12       	cpse	r14, r24
     db4:	16 c0       	rjmp	.+44     	; 0xde2 <interface_new_game+0x12e>
		{
			set_position(1, (scr_position % 5) + 2);
     db6:	10 9f       	mul	r17, r16
     db8:	81 2d       	mov	r24, r1
     dba:	11 24       	eor	r1, r1
     dbc:	86 95       	lsr	r24
     dbe:	86 95       	lsr	r24
     dc0:	98 2f       	mov	r25, r24
     dc2:	99 0f       	add	r25, r25
     dc4:	99 0f       	add	r25, r25
     dc6:	89 0f       	add	r24, r25
     dc8:	61 2f       	mov	r22, r17
     dca:	68 1b       	sub	r22, r24
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	6e 5f       	subi	r22, 0xFE	; 254
     dd0:	7f 4f       	sbci	r23, 0xFF	; 255
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
			print_char(' ');
     dda:	80 e2       	ldi	r24, 0x20	; 32
     ddc:	0e 94 e5 03 	call	0x7ca	; 0x7ca <print_char>
			scr_position++;
     de0:	1f 5f       	subi	r17, 0xFF	; 255
		}
		
		set_position(1, (scr_position % 5) + 2);
     de2:	10 9f       	mul	r17, r16
     de4:	81 2d       	mov	r24, r1
     de6:	11 24       	eor	r1, r1
     de8:	86 95       	lsr	r24
     dea:	86 95       	lsr	r24
     dec:	98 2f       	mov	r25, r24
     dee:	99 0f       	add	r25, r25
     df0:	99 0f       	add	r25, r25
     df2:	89 0f       	add	r24, r25
     df4:	61 2f       	mov	r22, r17
     df6:	68 1b       	sub	r22, r24
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	6e 5f       	subi	r22, 0xFE	; 254
     dfc:	7f 4f       	sbci	r23, 0xFF	; 255
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
		print_char('#');
     e06:	83 e2       	ldi	r24, 0x23	; 35
     e08:	0e 94 e5 03 	call	0x7ca	; 0x7ca <print_char>
		
		touch_data = read_touchpad_data();
     e0c:	0e 94 c2 02 	call	0x584	; 0x584 <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
     e10:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <change_touchpad_data>
		if (change_touch_data.rightButton)
     e14:	88 23       	and	r24, r24
     e16:	31 f1       	breq	.+76     	; 0xe64 <interface_new_game+0x1b0>
		{
			switch(scr_position)
     e18:	12 30       	cpi	r17, 0x02	; 2
     e1a:	a9 f0       	breq	.+42     	; 0xe46 <interface_new_game+0x192>
     e1c:	28 f4       	brcc	.+10     	; 0xe28 <interface_new_game+0x174>
     e1e:	11 23       	and	r17, r17
     e20:	41 f0       	breq	.+16     	; 0xe32 <interface_new_game+0x17e>
     e22:	11 30       	cpi	r17, 0x01	; 1
     e24:	59 f0       	breq	.+22     	; 0xe3c <interface_new_game+0x188>
     e26:	1e c0       	rjmp	.+60     	; 0xe64 <interface_new_game+0x1b0>
     e28:	13 30       	cpi	r17, 0x03	; 3
     e2a:	91 f0       	breq	.+36     	; 0xe50 <interface_new_game+0x19c>
     e2c:	14 30       	cpi	r17, 0x04	; 4
     e2e:	a9 f0       	breq	.+42     	; 0xe5a <interface_new_game+0x1a6>
     e30:	19 c0       	rjmp	.+50     	; 0xe64 <interface_new_game+0x1b0>
			{
				case 0:
					send_game_mode(Tutorial);
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
					return State_Tutorial;
     e38:	82 e0       	ldi	r24, 0x02	; 2
     e3a:	1a c0       	rjmp	.+52     	; 0xe70 <interface_new_game+0x1bc>
				case 1:
					send_game_mode(Easy);
     e3c:	82 e0       	ldi	r24, 0x02	; 2
     e3e:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
					return State_Easy;
     e42:	83 e0       	ldi	r24, 0x03	; 3
     e44:	15 c0       	rjmp	.+42     	; 0xe70 <interface_new_game+0x1bc>
				case 2:
					send_game_mode(Normal);
     e46:	83 e0       	ldi	r24, 0x03	; 3
     e48:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
					return State_Normal;
     e4c:	84 e0       	ldi	r24, 0x04	; 4
     e4e:	10 c0       	rjmp	.+32     	; 0xe70 <interface_new_game+0x1bc>
				case 3:
					send_game_mode(Hard);
     e50:	84 e0       	ldi	r24, 0x04	; 4
     e52:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
					return State_Hard;
     e56:	85 e0       	ldi	r24, 0x05	; 5
     e58:	0b c0       	rjmp	.+22     	; 0xe70 <interface_new_game+0x1bc>
				case 4:
					send_game_mode(Insane);
     e5a:	85 e0       	ldi	r24, 0x05	; 5
     e5c:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
					return State_Insane;
     e60:	86 e0       	ldi	r24, 0x06	; 6
     e62:	06 c0       	rjmp	.+12     	; 0xe70 <interface_new_game+0x1bc>
			}
		}
		refresh_oled();
     e64:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <refresh_oled>
	}
     e68:	77 cf       	rjmp	.-274    	; 0xd58 <interface_new_game+0xa4>
		change_y = change_yaxis(direction);
		change_x = change_xaxis(direction);
		
		if (change_x == Right)
		{
			return State_Options;
     e6a:	87 e0       	ldi	r24, 0x07	; 7
     e6c:	01 c0       	rjmp	.+2      	; 0xe70 <interface_new_game+0x1bc>
		}
		else if (change_x == Left)
		{
			return State_HighScores;
     e6e:	88 e0       	ldi	r24, 0x08	; 8
					return State_Insane;
			}
		}
		refresh_oled();
	}
}
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	ff 90       	pop	r15
     e7a:	ef 90       	pop	r14
     e7c:	08 95       	ret

00000e7e <interface_high_scores>:
* TODO EEPROM reading the high scores
*
* \param in joystick calibration data
****************************************************************************/
InterfaceState interface_high_scores(JoystickPosition calibration)
{
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	ec 01       	movw	r28, r24
	JoystickDirection direction;
	JoystickDirection change_x;
	char scr_position = 0;
	volatile char *high_scores = (char *) SRAM_HIGH_SCORES_ADDR;
	
	position = read_joystick_position(calibration);
     e84:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <read_joystick_position>
	direction = read_joystick_direction(position);
     e88:	0e 94 87 02 	call	0x50e	; 0x50e <read_joystick_direction>
	change_x = change_xaxis(direction);
     e8c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <change_xaxis>
	
	set_position(9,0);
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	89 e0       	ldi	r24, 0x09	; 9
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
	print_string("High Scores");
     e9c:	86 e6       	ldi	r24, 0x66	; 102
     e9e:	91 e0       	ldi	r25, 0x01	; 1
     ea0:	0e 94 5f 04 	call	0x8be	; 0x8be <print_string>
	revert_colour_line(0);
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	0e 94 85 04 	call	0x90a	; 0x90a <revert_colour_line>
		{
			print_char(high_scores[j + k]);
		}
	}*/
	
	refresh_oled();
     eaa:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <refresh_oled>
	
	while(1)
	{
		position = read_joystick_position(calibration);
     eae:	ce 01       	movw	r24, r28
     eb0:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <read_joystick_position>
		direction = read_joystick_direction(position);
     eb4:	0e 94 87 02 	call	0x50e	; 0x50e <read_joystick_direction>
		change_x = change_xaxis(direction);
     eb8:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <change_xaxis>
		
		if (change_x == Right)
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	19 f0       	breq	.+6      	; 0xec6 <interface_high_scores+0x48>
		{
			return State_NewGame;
		}
		else if (change_x == Left)
     ec0:	81 11       	cpse	r24, r1
     ec2:	f5 cf       	rjmp	.-22     	; 0xeae <interface_high_scores+0x30>
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <interface_high_scores+0x4c>
		direction = read_joystick_direction(position);
		change_x = change_xaxis(direction);
		
		if (change_x == Right)
		{
			return State_NewGame;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	01 c0       	rjmp	.+2      	; 0xecc <interface_high_scores+0x4e>
		}
		else if (change_x == Left)
		{
			return State_Options;
     eca:	87 e0       	ldi	r24, 0x07	; 7
		}
	}
		
}
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	08 95       	ret

00000ed2 <interface_options>:
* \brief Function call during the options phase
*
* \param in joystick calibration data
****************************************************************************/
InterfaceState interface_options(JoystickPosition calibration)
{
     ed2:	ef 92       	push	r14
     ed4:	ff 92       	push	r15
     ed6:	0f 93       	push	r16
     ed8:	1f 93       	push	r17
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	ec 01       	movw	r28, r24
	JoystickDirection change_y, change_x;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	char scr_position = 0;
	
	position = read_joystick_position(calibration);
     ee0:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <read_joystick_position>
	direction = read_joystick_direction(position);
     ee4:	0e 94 87 02 	call	0x50e	; 0x50e <read_joystick_direction>
     ee8:	18 2f       	mov	r17, r24
	change_y = change_yaxis(direction);
     eea:	0e 94 e7 02 	call	0x5ce	; 0x5ce <change_yaxis>
	change_x = change_xaxis(direction);
     eee:	81 2f       	mov	r24, r17
     ef0:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <change_xaxis>

	set_position(12,0);
     ef4:	60 e0       	ldi	r22, 0x00	; 0
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	8c e0       	ldi	r24, 0x0C	; 12
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
	print_string("Options");
     f00:	82 e7       	ldi	r24, 0x72	; 114
     f02:	91 e0       	ldi	r25, 0x01	; 1
     f04:	0e 94 5f 04 	call	0x8be	; 0x8be <print_string>
	revert_colour_line(0);
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	0e 94 85 04 	call	0x90a	; 0x90a <revert_colour_line>
	set_position(3,3);
     f0e:	63 e0       	ldi	r22, 0x03	; 3
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	83 e0       	ldi	r24, 0x03	; 3
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
	print_string("Mode");
     f1a:	8a e7       	ldi	r24, 0x7A	; 122
     f1c:	91 e0       	ldi	r25, 0x01	; 1
     f1e:	0e 94 5f 04 	call	0x8be	; 0x8be <print_string>
	set_position(3,4);
     f22:	64 e0       	ldi	r22, 0x04	; 4
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	83 e0       	ldi	r24, 0x03	; 3
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
	print_string("Sound");
     f2e:	8f e7       	ldi	r24, 0x7F	; 127
     f30:	91 e0       	ldi	r25, 0x01	; 1
     f32:	0e 94 5f 04 	call	0x8be	; 0x8be <print_string>
	set_position(3,5);
     f36:	65 e0       	ldi	r22, 0x05	; 5
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	83 e0       	ldi	r24, 0x03	; 3
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
	print_string("Change Username");
     f42:	85 e8       	ldi	r24, 0x85	; 133
     f44:	91 e0       	ldi	r25, 0x01	; 1
     f46:	0e 94 5f 04 	call	0x8be	; 0x8be <print_string>
	JoystickPosition position;
	JoystickDirection direction;
	JoystickDirection change_y, change_x;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	char scr_position = 0;
     f4a:	10 e0       	ldi	r17, 0x00	; 0
			print_char(' ');
			scr_position--;
		}
		else if (change_y == Down)
		{
			set_position(1, (scr_position % 3) + 3);
     f4c:	0f 2e       	mov	r0, r31
     f4e:	fb ea       	ldi	r31, 0xAB	; 171
     f50:	ef 2e       	mov	r14, r31
     f52:	f0 2d       	mov	r31, r0
	set_position(3,5);
	print_string("Change Username");
	
	while(1)
	{
		position = read_joystick_position(calibration);
     f54:	ce 01       	movw	r24, r28
     f56:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <read_joystick_position>
		direction = read_joystick_direction(position);
     f5a:	0e 94 87 02 	call	0x50e	; 0x50e <read_joystick_direction>
     f5e:	f8 2e       	mov	r15, r24
		change_y = change_yaxis(direction);
     f60:	0e 94 e7 02 	call	0x5ce	; 0x5ce <change_yaxis>
     f64:	08 2f       	mov	r16, r24
		change_x = change_xaxis(direction);
     f66:	8f 2d       	mov	r24, r15
     f68:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <change_xaxis>
		
		if (change_x == Right)
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	09 f4       	brne	.+2      	; 0xf72 <interface_options+0xa0>
     f70:	56 c0       	rjmp	.+172    	; 0x101e <interface_options+0x14c>
		{
			return State_HighScores;
		}
		else if (change_x == Left)
     f72:	88 23       	and	r24, r24
     f74:	09 f4       	brne	.+2      	; 0xf78 <interface_options+0xa6>
     f76:	55 c0       	rjmp	.+170    	; 0x1022 <interface_options+0x150>
		{
			return State_NewGame;
		}
		
		if (change_y == Up)
     f78:	02 30       	cpi	r16, 0x02	; 2
     f7a:	a9 f4       	brne	.+42     	; 0xfa6 <interface_options+0xd4>
		{
			set_position(1, (scr_position % 3) + 3);
     f7c:	1e 9d       	mul	r17, r14
     f7e:	81 2d       	mov	r24, r1
     f80:	11 24       	eor	r1, r1
     f82:	86 95       	lsr	r24
     f84:	98 2f       	mov	r25, r24
     f86:	99 0f       	add	r25, r25
     f88:	89 0f       	add	r24, r25
     f8a:	61 2f       	mov	r22, r17
     f8c:	68 1b       	sub	r22, r24
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	6d 5f       	subi	r22, 0xFD	; 253
     f92:	7f 4f       	sbci	r23, 0xFF	; 255
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
			print_char(' ');
     f9c:	80 e2       	ldi	r24, 0x20	; 32
     f9e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <print_char>
			scr_position--;
     fa2:	11 50       	subi	r17, 0x01	; 1
     fa4:	16 c0       	rjmp	.+44     	; 0xfd2 <interface_options+0x100>
		}
		else if (change_y == Down)
     fa6:	03 30       	cpi	r16, 0x03	; 3
     fa8:	a1 f4       	brne	.+40     	; 0xfd2 <interface_options+0x100>
		{
			set_position(1, (scr_position % 3) + 3);
     faa:	1e 9d       	mul	r17, r14
     fac:	81 2d       	mov	r24, r1
     fae:	11 24       	eor	r1, r1
     fb0:	86 95       	lsr	r24
     fb2:	98 2f       	mov	r25, r24
     fb4:	99 0f       	add	r25, r25
     fb6:	89 0f       	add	r24, r25
     fb8:	61 2f       	mov	r22, r17
     fba:	68 1b       	sub	r22, r24
     fbc:	70 e0       	ldi	r23, 0x00	; 0
     fbe:	6d 5f       	subi	r22, 0xFD	; 253
     fc0:	7f 4f       	sbci	r23, 0xFF	; 255
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
			print_char(' ');
     fca:	80 e2       	ldi	r24, 0x20	; 32
     fcc:	0e 94 e5 03 	call	0x7ca	; 0x7ca <print_char>
			scr_position++;
     fd0:	1f 5f       	subi	r17, 0xFF	; 255
		}
		
		set_position(1, (scr_position % 3) + 3);
     fd2:	1e 9d       	mul	r17, r14
     fd4:	81 2d       	mov	r24, r1
     fd6:	11 24       	eor	r1, r1
     fd8:	86 95       	lsr	r24
     fda:	98 2f       	mov	r25, r24
     fdc:	99 0f       	add	r25, r25
     fde:	89 0f       	add	r24, r25
     fe0:	61 2f       	mov	r22, r17
     fe2:	68 1b       	sub	r22, r24
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	6d 5f       	subi	r22, 0xFD	; 253
     fe8:	7f 4f       	sbci	r23, 0xFF	; 255
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
		print_char('#');
     ff2:	83 e2       	ldi	r24, 0x23	; 35
     ff4:	0e 94 e5 03 	call	0x7ca	; 0x7ca <print_char>
		
		touch_data = read_touchpad_data();
     ff8:	0e 94 c2 02 	call	0x584	; 0x584 <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
     ffc:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <change_touchpad_data>
		if (change_touch_data.rightButton)
    1000:	88 23       	and	r24, r24
    1002:	51 f0       	breq	.+20     	; 0x1018 <interface_options+0x146>
		{
			switch(scr_position)
    1004:	11 30       	cpi	r17, 0x01	; 1
    1006:	79 f0       	breq	.+30     	; 0x1026 <interface_options+0x154>
    1008:	18 f0       	brcs	.+6      	; 0x1010 <interface_options+0x13e>
    100a:	12 30       	cpi	r17, 0x02	; 2
    100c:	19 f0       	breq	.+6      	; 0x1014 <interface_options+0x142>
    100e:	04 c0       	rjmp	.+8      	; 0x1018 <interface_options+0x146>
			{
				case 0:
					return State_Mode;
    1010:	8a e0       	ldi	r24, 0x0A	; 10
    1012:	0a c0       	rjmp	.+20     	; 0x1028 <interface_options+0x156>
				case 1:
					return State_Sound;
				case 2:
					return State_Username;
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	08 c0       	rjmp	.+16     	; 0x1028 <interface_options+0x156>
			}
		}
		refresh_oled();
    1018:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <refresh_oled>
	}
    101c:	9b cf       	rjmp	.-202    	; 0xf54 <interface_options+0x82>
		change_y = change_yaxis(direction);
		change_x = change_xaxis(direction);
		
		if (change_x == Right)
		{
			return State_HighScores;
    101e:	88 e0       	ldi	r24, 0x08	; 8
    1020:	03 c0       	rjmp	.+6      	; 0x1028 <interface_options+0x156>
		}
		else if (change_x == Left)
		{
			return State_NewGame;
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	01 c0       	rjmp	.+2      	; 0x1028 <interface_options+0x156>
			switch(scr_position)
			{
				case 0:
					return State_Mode;
				case 1:
					return State_Sound;
    1026:	89 e0       	ldi	r24, 0x09	; 9
					return State_Username;
			}
		}
		refresh_oled();
	}
}
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	1f 91       	pop	r17
    102e:	0f 91       	pop	r16
    1030:	ff 90       	pop	r15
    1032:	ef 90       	pop	r14
    1034:	08 95       	ret

00001036 <interface_mode>:
* \brief Function call during the set mode phase
*
* \param in joystick calibration data
****************************************************************************/
InterfaceState interface_mode(JoystickPosition calibration)
{
    1036:	bf 92       	push	r11
    1038:	cf 92       	push	r12
    103a:	df 92       	push	r13
    103c:	ef 92       	push	r14
    103e:	ff 92       	push	r15
    1040:	0f 93       	push	r16
    1042:	1f 93       	push	r17
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	8c 01       	movw	r16, r24
	JoystickDirection change_y;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	char scr_position = 0;
	
	position = read_joystick_position(calibration);
    104a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <read_joystick_position>
	direction = read_joystick_direction(position);
    104e:	0e 94 87 02 	call	0x50e	; 0x50e <read_joystick_direction>
	change_y = change_yaxis(direction);
    1052:	0e 94 e7 02 	call	0x5ce	; 0x5ce <change_yaxis>

	set_position(14,0);
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	8e e0       	ldi	r24, 0x0E	; 14
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
	print_string("Mode");
    1062:	8a e7       	ldi	r24, 0x7A	; 122
    1064:	91 e0       	ldi	r25, 0x01	; 1
    1066:	0e 94 5f 04 	call	0x8be	; 0x8be <print_string>
	revert_colour_line(0);
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	0e 94 85 04 	call	0x90a	; 0x90a <revert_colour_line>
	set_position(3,3);
    1070:	63 e0       	ldi	r22, 0x03	; 3
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	83 e0       	ldi	r24, 0x03	; 3
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
	print_string("Reverse");
    107c:	85 e9       	ldi	r24, 0x95	; 149
    107e:	91 e0       	ldi	r25, 0x01	; 1
    1080:	0e 94 5f 04 	call	0x8be	; 0x8be <print_string>
	set_position(3,5);
    1084:	65 e0       	ldi	r22, 0x05	; 5
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	83 e0       	ldi	r24, 0x03	; 3
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
	print_string("Normal");
    1090:	83 e5       	ldi	r24, 0x53	; 83
    1092:	91 e0       	ldi	r25, 0x01	; 1
    1094:	0e 94 5f 04 	call	0x8be	; 0x8be <print_string>
	
	
	set_position(1, (scr_position % 2) * 2 + 3);
    1098:	63 e0       	ldi	r22, 0x03	; 3
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
	print_char('#');
    10a4:	83 e2       	ldi	r24, 0x23	; 35
    10a6:	0e 94 e5 03 	call	0x7ca	; 0x7ca <print_char>
	JoystickPosition position;
	JoystickDirection direction;
	JoystickDirection change_y;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	char scr_position = 0;
    10aa:	b1 2c       	mov	r11, r1
	set_position(1, (scr_position % 2) * 2 + 3);
	print_char('#');
	
	while(1)
	{
		position = read_joystick_position(calibration);
    10ac:	c8 01       	movw	r24, r16
    10ae:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <read_joystick_position>
		direction = read_joystick_direction(position);
    10b2:	0e 94 87 02 	call	0x50e	; 0x50e <read_joystick_direction>
		change_y = change_yaxis(direction);
    10b6:	0e 94 e7 02 	call	0x5ce	; 0x5ce <change_yaxis>
		
		if (change_y == Up)
    10ba:	82 30       	cpi	r24, 0x02	; 2
    10bc:	91 f4       	brne	.+36     	; 0x10e2 <interface_mode+0xac>
		{
			set_position(1, (scr_position % 2) * 2 + 3);
    10be:	b0 fa       	bst	r11, 0
    10c0:	ee 24       	eor	r14, r14
    10c2:	e0 f8       	bld	r14, 0
    10c4:	f1 2c       	mov	r15, r1
    10c6:	b7 01       	movw	r22, r14
    10c8:	66 0f       	add	r22, r22
    10ca:	77 1f       	adc	r23, r23
    10cc:	6d 5f       	subi	r22, 0xFD	; 253
    10ce:	7f 4f       	sbci	r23, 0xFF	; 255
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
			print_char(' ');
    10d8:	80 e2       	ldi	r24, 0x20	; 32
    10da:	0e 94 e5 03 	call	0x7ca	; 0x7ca <print_char>
			scr_position--;
    10de:	ba 94       	dec	r11
    10e0:	13 c0       	rjmp	.+38     	; 0x1108 <interface_mode+0xd2>
		}
		else if (change_y == Down)
    10e2:	83 30       	cpi	r24, 0x03	; 3
    10e4:	89 f4       	brne	.+34     	; 0x1108 <interface_mode+0xd2>
		{
			set_position(1, (scr_position % 2) * 2 + 3);
    10e6:	b0 fa       	bst	r11, 0
    10e8:	cc 24       	eor	r12, r12
    10ea:	c0 f8       	bld	r12, 0
    10ec:	d1 2c       	mov	r13, r1
    10ee:	b6 01       	movw	r22, r12
    10f0:	66 0f       	add	r22, r22
    10f2:	77 1f       	adc	r23, r23
    10f4:	6d 5f       	subi	r22, 0xFD	; 253
    10f6:	7f 4f       	sbci	r23, 0xFF	; 255
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
			print_char(' ');
    1100:	80 e2       	ldi	r24, 0x20	; 32
    1102:	0e 94 e5 03 	call	0x7ca	; 0x7ca <print_char>
			scr_position++;
    1106:	b3 94       	inc	r11
		}
		
		set_position(1, (scr_position % 2) * 2 + 3);
    1108:	8b 2d       	mov	r24, r11
    110a:	81 70       	andi	r24, 0x01	; 1
    110c:	c8 2f       	mov	r28, r24
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	d8 2f       	mov	r29, r24
    1112:	be 01       	movw	r22, r28
    1114:	66 0f       	add	r22, r22
    1116:	77 1f       	adc	r23, r23
    1118:	6d 5f       	subi	r22, 0xFD	; 253
    111a:	7f 4f       	sbci	r23, 0xFF	; 255
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
		print_char('#');
    1124:	83 e2       	ldi	r24, 0x23	; 35
    1126:	0e 94 e5 03 	call	0x7ca	; 0x7ca <print_char>
		
		touch_data = read_touchpad_data();
    112a:	0e 94 c2 02 	call	0x584	; 0x584 <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
    112e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <change_touchpad_data>
		if (change_touch_data.rightButton)
    1132:	88 23       	and	r24, r24
    1134:	51 f0       	breq	.+20     	; 0x114a <interface_mode+0x114>
		{
			switch(scr_position)
    1136:	b1 10       	cpse	r11, r1
    1138:	0b c0       	rjmp	.+22     	; 0x1150 <interface_mode+0x11a>
			{
				case 0:
					send_game_mode(Normal_settings);
    113a:	86 e0       	ldi	r24, 0x06	; 6
    113c:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
					printf("Normal\n");
    1140:	83 e5       	ldi	r24, 0x53	; 83
    1142:	91 e0       	ldi	r25, 0x01	; 1
    1144:	0e 94 97 0a 	call	0x152e	; 0x152e <puts>
					break;
    1148:	03 c0       	rjmp	.+6      	; 0x1150 <interface_mode+0x11a>
					//printf("Reverse\n");
					break;
			}
			return State_Options;
		}
		refresh_oled();
    114a:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <refresh_oled>
	}
    114e:	ae cf       	rjmp	.-164    	; 0x10ac <interface_mode+0x76>
}
    1150:	87 e0       	ldi	r24, 0x07	; 7
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	1f 91       	pop	r17
    1158:	0f 91       	pop	r16
    115a:	ff 90       	pop	r15
    115c:	ef 90       	pop	r14
    115e:	df 90       	pop	r13
    1160:	cf 90       	pop	r12
    1162:	bf 90       	pop	r11
    1164:	08 95       	ret

00001166 <interface_sound>:
* \brief Function call during the set sound phase
*
* \param in joystick calibration data
****************************************************************************/
InterfaceState interface_sound(JoystickPosition calibration)
{
    1166:	bf 92       	push	r11
    1168:	cf 92       	push	r12
    116a:	df 92       	push	r13
    116c:	ef 92       	push	r14
    116e:	ff 92       	push	r15
    1170:	0f 93       	push	r16
    1172:	1f 93       	push	r17
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	8c 01       	movw	r16, r24
	JoystickDirection change_y;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	char scr_position = 0;
	
	position = read_joystick_position(calibration);
    117a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <read_joystick_position>
	direction = read_joystick_direction(position);
    117e:	0e 94 87 02 	call	0x50e	; 0x50e <read_joystick_direction>
	change_y = change_yaxis(direction);
    1182:	0e 94 e7 02 	call	0x5ce	; 0x5ce <change_yaxis>

	set_position(14,0);
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	8e e0       	ldi	r24, 0x0E	; 14
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
	print_string("Sound");
    1192:	8f e7       	ldi	r24, 0x7F	; 127
    1194:	91 e0       	ldi	r25, 0x01	; 1
    1196:	0e 94 5f 04 	call	0x8be	; 0x8be <print_string>
	revert_colour_line(0);
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	0e 94 85 04 	call	0x90a	; 0x90a <revert_colour_line>
	set_position(3,3);
    11a0:	63 e0       	ldi	r22, 0x03	; 3
    11a2:	70 e0       	ldi	r23, 0x00	; 0
    11a4:	83 e0       	ldi	r24, 0x03	; 3
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
	print_string("On");
    11ac:	8d e9       	ldi	r24, 0x9D	; 157
    11ae:	91 e0       	ldi	r25, 0x01	; 1
    11b0:	0e 94 5f 04 	call	0x8be	; 0x8be <print_string>
	set_position(3,5);
    11b4:	65 e0       	ldi	r22, 0x05	; 5
    11b6:	70 e0       	ldi	r23, 0x00	; 0
    11b8:	83 e0       	ldi	r24, 0x03	; 3
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
	print_string("Off");
    11c0:	80 ea       	ldi	r24, 0xA0	; 160
    11c2:	91 e0       	ldi	r25, 0x01	; 1
    11c4:	0e 94 5f 04 	call	0x8be	; 0x8be <print_string>
	JoystickPosition position;
	JoystickDirection direction;
	JoystickDirection change_y;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	char scr_position = 0;
    11c8:	b1 2c       	mov	r11, r1
	set_position(3,5);
	print_string("Off");
	
	while(1)
	{
		position = read_joystick_position(calibration);
    11ca:	c8 01       	movw	r24, r16
    11cc:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <read_joystick_position>
		direction = read_joystick_direction(position);
    11d0:	0e 94 87 02 	call	0x50e	; 0x50e <read_joystick_direction>
		change_y = change_yaxis(direction);
    11d4:	0e 94 e7 02 	call	0x5ce	; 0x5ce <change_yaxis>
		
		if (change_y == Up)
    11d8:	82 30       	cpi	r24, 0x02	; 2
    11da:	91 f4       	brne	.+36     	; 0x1200 <interface_sound+0x9a>
		{
			set_position(1, (scr_position % 2) * 2 + 3);
    11dc:	b0 fa       	bst	r11, 0
    11de:	ee 24       	eor	r14, r14
    11e0:	e0 f8       	bld	r14, 0
    11e2:	f1 2c       	mov	r15, r1
    11e4:	b7 01       	movw	r22, r14
    11e6:	66 0f       	add	r22, r22
    11e8:	77 1f       	adc	r23, r23
    11ea:	6d 5f       	subi	r22, 0xFD	; 253
    11ec:	7f 4f       	sbci	r23, 0xFF	; 255
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
			print_char(' ');
    11f6:	80 e2       	ldi	r24, 0x20	; 32
    11f8:	0e 94 e5 03 	call	0x7ca	; 0x7ca <print_char>
			scr_position--;
    11fc:	ba 94       	dec	r11
    11fe:	13 c0       	rjmp	.+38     	; 0x1226 <interface_sound+0xc0>
		}
		else if (change_y == Down)
    1200:	83 30       	cpi	r24, 0x03	; 3
    1202:	89 f4       	brne	.+34     	; 0x1226 <interface_sound+0xc0>
		{
			set_position(1, (scr_position % 2) * 2 + 3);
    1204:	b0 fa       	bst	r11, 0
    1206:	cc 24       	eor	r12, r12
    1208:	c0 f8       	bld	r12, 0
    120a:	d1 2c       	mov	r13, r1
    120c:	b6 01       	movw	r22, r12
    120e:	66 0f       	add	r22, r22
    1210:	77 1f       	adc	r23, r23
    1212:	6d 5f       	subi	r22, 0xFD	; 253
    1214:	7f 4f       	sbci	r23, 0xFF	; 255
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
			print_char(' ');
    121e:	80 e2       	ldi	r24, 0x20	; 32
    1220:	0e 94 e5 03 	call	0x7ca	; 0x7ca <print_char>
			scr_position++;
    1224:	b3 94       	inc	r11
		}
		
		set_position(1, (scr_position % 2) * 2 + 3);
    1226:	8b 2d       	mov	r24, r11
    1228:	81 70       	andi	r24, 0x01	; 1
    122a:	c8 2f       	mov	r28, r24
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	d8 2f       	mov	r29, r24
    1230:	be 01       	movw	r22, r28
    1232:	66 0f       	add	r22, r22
    1234:	77 1f       	adc	r23, r23
    1236:	6d 5f       	subi	r22, 0xFD	; 253
    1238:	7f 4f       	sbci	r23, 0xFF	; 255
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
		print_char('#');
    1242:	83 e2       	ldi	r24, 0x23	; 35
    1244:	0e 94 e5 03 	call	0x7ca	; 0x7ca <print_char>
		
		touch_data = read_touchpad_data();
    1248:	0e 94 c2 02 	call	0x584	; 0x584 <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
    124c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <change_touchpad_data>
		if (change_touch_data.rightButton)
    1250:	88 23       	and	r24, r24
    1252:	81 f0       	breq	.+32     	; 0x1274 <interface_sound+0x10e>
		{
			switch(scr_position)
    1254:	bb 20       	and	r11, r11
    1256:	21 f0       	breq	.+8      	; 0x1260 <interface_sound+0xfa>
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	b8 16       	cp	r11, r24
    125c:	31 f0       	breq	.+12     	; 0x126a <interface_sound+0x104>
    125e:	0d c0       	rjmp	.+26     	; 0x127a <interface_sound+0x114>
			{
				case 0:
				printf("ON\n");
    1260:	84 ea       	ldi	r24, 0xA4	; 164
    1262:	91 e0       	ldi	r25, 0x01	; 1
    1264:	0e 94 97 0a 	call	0x152e	; 0x152e <puts>
				break;
    1268:	08 c0       	rjmp	.+16     	; 0x127a <interface_sound+0x114>
				case 1:
				printf("OFF\n");
    126a:	87 ea       	ldi	r24, 0xA7	; 167
    126c:	91 e0       	ldi	r25, 0x01	; 1
    126e:	0e 94 97 0a 	call	0x152e	; 0x152e <puts>
				break;
    1272:	03 c0       	rjmp	.+6      	; 0x127a <interface_sound+0x114>
			}
			return State_Options;
		}
		refresh_oled();
    1274:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <refresh_oled>
	}
    1278:	a8 cf       	rjmp	.-176    	; 0x11ca <interface_sound+0x64>
}
    127a:	87 e0       	ldi	r24, 0x07	; 7
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	ff 90       	pop	r15
    1286:	ef 90       	pop	r14
    1288:	df 90       	pop	r13
    128a:	cf 90       	pop	r12
    128c:	bf 90       	pop	r11
    128e:	08 95       	ret

00001290 <interface_tutorial>:
****************************************************************************/
InterfaceState interface_tutorial(JoystickPosition calibration)
{
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	set_position(14,0);
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	8e e0       	ldi	r24, 0x0E	; 14
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
	print_string("Tutorial");
    129c:	85 e4       	ldi	r24, 0x45	; 69
    129e:	91 e0       	ldi	r25, 0x01	; 1
    12a0:	0e 94 5f 04 	call	0x8be	; 0x8be <print_string>
	revert_colour_line(0);
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	0e 94 85 04 	call	0x90a	; 0x90a <revert_colour_line>
	refresh_oled();
    12aa:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <refresh_oled>
		{
			return State_NewGame;
		}
	}*/
	return State_Playing;
}
    12ae:	8b e0       	ldi	r24, 0x0B	; 11
    12b0:	08 95       	ret

000012b2 <interface_easy>:
****************************************************************************/
InterfaceState interface_easy(JoystickPosition calibration)
{
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	set_position(14,0);
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	8e e0       	ldi	r24, 0x0E	; 14
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
	print_string("Easy");
    12be:	8e e4       	ldi	r24, 0x4E	; 78
    12c0:	91 e0       	ldi	r25, 0x01	; 1
    12c2:	0e 94 5f 04 	call	0x8be	; 0x8be <print_string>
	revert_colour_line(0);
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	0e 94 85 04 	call	0x90a	; 0x90a <revert_colour_line>
	refresh_oled();
    12cc:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <refresh_oled>
		{
			return State_NewGame;
		}
	}*/
	return State_Playing;
}
    12d0:	8b e0       	ldi	r24, 0x0B	; 11
    12d2:	08 95       	ret

000012d4 <interface_normal>:
****************************************************************************/
InterfaceState interface_normal(JoystickPosition calibration)
{
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	set_position(12,0);
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	8c e0       	ldi	r24, 0x0C	; 12
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
	print_string("Normal");
    12e0:	83 e5       	ldi	r24, 0x53	; 83
    12e2:	91 e0       	ldi	r25, 0x01	; 1
    12e4:	0e 94 5f 04 	call	0x8be	; 0x8be <print_string>
	revert_colour_line(0);
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	0e 94 85 04 	call	0x90a	; 0x90a <revert_colour_line>
	refresh_oled();
    12ee:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <refresh_oled>
		{
			return State_NewGame;
		}
	}*/
	return State_Playing;
}
    12f2:	8b e0       	ldi	r24, 0x0B	; 11
    12f4:	08 95       	ret

000012f6 <interface_hard>:
****************************************************************************/
InterfaceState interface_hard(JoystickPosition calibration)
{
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	set_position(12,0);
    12f6:	60 e0       	ldi	r22, 0x00	; 0
    12f8:	70 e0       	ldi	r23, 0x00	; 0
    12fa:	8c e0       	ldi	r24, 0x0C	; 12
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
	print_string("Hard");
    1302:	8a e5       	ldi	r24, 0x5A	; 90
    1304:	91 e0       	ldi	r25, 0x01	; 1
    1306:	0e 94 5f 04 	call	0x8be	; 0x8be <print_string>
	revert_colour_line(0);
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	0e 94 85 04 	call	0x90a	; 0x90a <revert_colour_line>
	refresh_oled();
    1310:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <refresh_oled>
		{
			return State_NewGame;
		}
	}*/
	return State_Playing;
}
    1314:	8b e0       	ldi	r24, 0x0B	; 11
    1316:	08 95       	ret

00001318 <interface_insane>:
****************************************************************************/
InterfaceState interface_insane(JoystickPosition calibration)
{
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	set_position(12,0);
    1318:	60 e0       	ldi	r22, 0x00	; 0
    131a:	70 e0       	ldi	r23, 0x00	; 0
    131c:	8c e0       	ldi	r24, 0x0C	; 12
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	0e 94 3e 04 	call	0x87c	; 0x87c <set_position>
	print_string("Insane");
    1324:	8f e5       	ldi	r24, 0x5F	; 95
    1326:	91 e0       	ldi	r25, 0x01	; 1
    1328:	0e 94 5f 04 	call	0x8be	; 0x8be <print_string>
	revert_colour_line(0);
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	0e 94 85 04 	call	0x90a	; 0x90a <revert_colour_line>
	refresh_oled();
    1332:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <refresh_oled>
		{
			return State_NewGame;
		}
	}*/
	return State_Playing;
}
    1336:	8b e0       	ldi	r24, 0x0B	; 11
    1338:	08 95       	ret

0000133a <interface_state_machine>:
* \brief The main function serving the game
*
* \param in joystick calibration data
****************************************************************************/
void interface_state_machine(JoystickPosition calibration, InterfaceState special_case)
{
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
    133e:	ec 01       	movw	r28, r24
	static InterfaceState state = State_Username;
	
	if(special_case == State_Endgame){
    1340:	6c 30       	cpi	r22, 0x0C	; 12
    1342:	19 f4       	brne	.+6      	; 0x134a <interface_state_machine+0x10>
		state = State_Endgame;
    1344:	8c e0       	ldi	r24, 0x0C	; 12
    1346:	80 93 b2 01 	sts	0x01B2, r24
	}
	clear_oled();
    134a:	0e 94 dd 03 	call	0x7ba	; 0x7ba <clear_oled>
	
	switch(state)
    134e:	40 91 b2 01 	lds	r20, 0x01B2
    1352:	50 e0       	ldi	r21, 0x00	; 0
    1354:	4d 30       	cpi	r20, 0x0D	; 13
    1356:	51 05       	cpc	r21, r1
    1358:	08 f0       	brcs	.+2      	; 0x135c <interface_state_machine+0x22>
    135a:	59 c0       	rjmp	.+178    	; 0x140e <interface_state_machine+0xd4>
    135c:	fa 01       	movw	r30, r20
    135e:	e8 5c       	subi	r30, 0xC8	; 200
    1360:	ff 4f       	sbci	r31, 0xFF	; 255
    1362:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <__tablejump2__>
	{
		case State_Username :
		state = interface_username(calibration);
    1366:	ce 01       	movw	r24, r28
    1368:	0e 94 70 05 	call	0xae0	; 0xae0 <interface_username>
    136c:	80 93 b2 01 	sts	0x01B2, r24
		break;
    1370:	4e c0       	rjmp	.+156    	; 0x140e <interface_state_machine+0xd4>
		
		case State_NewGame :
		state = interface_new_game(calibration);
    1372:	ce 01       	movw	r24, r28
    1374:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <interface_new_game>
    1378:	80 93 b2 01 	sts	0x01B2, r24
		break;
    137c:	48 c0       	rjmp	.+144    	; 0x140e <interface_state_machine+0xd4>
		
		case State_Tutorial :
		state = interface_tutorial(calibration);
    137e:	ce 01       	movw	r24, r28
    1380:	0e 94 48 09 	call	0x1290	; 0x1290 <interface_tutorial>
    1384:	80 93 b2 01 	sts	0x01B2, r24
		send_game_mode(Tutorial);
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
		break;
    138e:	3f c0       	rjmp	.+126    	; 0x140e <interface_state_machine+0xd4>
		
		case State_Easy :
		state = interface_easy(calibration);
    1390:	ce 01       	movw	r24, r28
    1392:	0e 94 59 09 	call	0x12b2	; 0x12b2 <interface_easy>
    1396:	80 93 b2 01 	sts	0x01B2, r24
		send_game_mode(Easy);
    139a:	82 e0       	ldi	r24, 0x02	; 2
    139c:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
		break;
    13a0:	36 c0       	rjmp	.+108    	; 0x140e <interface_state_machine+0xd4>
		
		case State_Normal :
		state = interface_normal(calibration);
    13a2:	ce 01       	movw	r24, r28
    13a4:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <interface_normal>
    13a8:	80 93 b2 01 	sts	0x01B2, r24
		send_game_mode(Normal);
    13ac:	83 e0       	ldi	r24, 0x03	; 3
    13ae:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
		break;
    13b2:	2d c0       	rjmp	.+90     	; 0x140e <interface_state_machine+0xd4>
		
		case State_Hard :
		state = interface_hard(calibration);
    13b4:	ce 01       	movw	r24, r28
    13b6:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <interface_hard>
    13ba:	80 93 b2 01 	sts	0x01B2, r24
		send_game_mode(Hard);
    13be:	84 e0       	ldi	r24, 0x04	; 4
    13c0:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
		break;
    13c4:	24 c0       	rjmp	.+72     	; 0x140e <interface_state_machine+0xd4>
		
		case State_Insane :
		state = interface_insane(calibration);
    13c6:	ce 01       	movw	r24, r28
    13c8:	0e 94 8c 09 	call	0x1318	; 0x1318 <interface_insane>
    13cc:	80 93 b2 01 	sts	0x01B2, r24
		send_game_mode(Insane);
    13d0:	85 e0       	ldi	r24, 0x05	; 5
    13d2:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
		break;
    13d6:	1b c0       	rjmp	.+54     	; 0x140e <interface_state_machine+0xd4>
		
		case State_HighScores :
		state = interface_high_scores(calibration);
    13d8:	ce 01       	movw	r24, r28
    13da:	0e 94 3f 07 	call	0xe7e	; 0xe7e <interface_high_scores>
    13de:	80 93 b2 01 	sts	0x01B2, r24
		break;
    13e2:	15 c0       	rjmp	.+42     	; 0x140e <interface_state_machine+0xd4>
		
		case State_Options :
		state = interface_options(calibration);
    13e4:	ce 01       	movw	r24, r28
    13e6:	0e 94 69 07 	call	0xed2	; 0xed2 <interface_options>
    13ea:	80 93 b2 01 	sts	0x01B2, r24
		break;
    13ee:	0f c0       	rjmp	.+30     	; 0x140e <interface_state_machine+0xd4>
		
		case State_Sound :
		state = interface_sound(calibration);
    13f0:	ce 01       	movw	r24, r28
    13f2:	0e 94 b3 08 	call	0x1166	; 0x1166 <interface_sound>
    13f6:	80 93 b2 01 	sts	0x01B2, r24
		break;
    13fa:	09 c0       	rjmp	.+18     	; 0x140e <interface_state_machine+0xd4>
		
		case  State_Mode :
		state = interface_mode(calibration);
    13fc:	ce 01       	movw	r24, r28
    13fe:	0e 94 1b 08 	call	0x1036	; 0x1036 <interface_mode>
    1402:	80 93 b2 01 	sts	0x01B2, r24
		break;
    1406:	03 c0       	rjmp	.+6      	; 0x140e <interface_state_machine+0xd4>
		break;
		
		case State_Endgame:
		//Ending animation, probably return to highscore
		//after some time
		state = State_HighScores;
    1408:	88 e0       	ldi	r24, 0x08	; 8
    140a:	80 93 b2 01 	sts	0x01B2, r24
		break;
	}
}
    140e:	df 91       	pop	r29
    1410:	cf 91       	pop	r28
    1412:	08 95       	ret

00001414 <__divmodhi4>:
    1414:	97 fb       	bst	r25, 7
    1416:	07 2e       	mov	r0, r23
    1418:	16 f4       	brtc	.+4      	; 0x141e <__divmodhi4+0xa>
    141a:	00 94       	com	r0
    141c:	07 d0       	rcall	.+14     	; 0x142c <__divmodhi4_neg1>
    141e:	77 fd       	sbrc	r23, 7
    1420:	09 d0       	rcall	.+18     	; 0x1434 <__divmodhi4_neg2>
    1422:	0e 94 24 0a 	call	0x1448	; 0x1448 <__udivmodhi4>
    1426:	07 fc       	sbrc	r0, 7
    1428:	05 d0       	rcall	.+10     	; 0x1434 <__divmodhi4_neg2>
    142a:	3e f4       	brtc	.+14     	; 0x143a <__divmodhi4_exit>

0000142c <__divmodhi4_neg1>:
    142c:	90 95       	com	r25
    142e:	81 95       	neg	r24
    1430:	9f 4f       	sbci	r25, 0xFF	; 255
    1432:	08 95       	ret

00001434 <__divmodhi4_neg2>:
    1434:	70 95       	com	r23
    1436:	61 95       	neg	r22
    1438:	7f 4f       	sbci	r23, 0xFF	; 255

0000143a <__divmodhi4_exit>:
    143a:	08 95       	ret

0000143c <__tablejump2__>:
    143c:	ee 0f       	add	r30, r30
    143e:	ff 1f       	adc	r31, r31

00001440 <__tablejump__>:
    1440:	05 90       	lpm	r0, Z+
    1442:	f4 91       	lpm	r31, Z
    1444:	e0 2d       	mov	r30, r0
    1446:	09 94       	ijmp

00001448 <__udivmodhi4>:
    1448:	aa 1b       	sub	r26, r26
    144a:	bb 1b       	sub	r27, r27
    144c:	51 e1       	ldi	r21, 0x11	; 17
    144e:	07 c0       	rjmp	.+14     	; 0x145e <__udivmodhi4_ep>

00001450 <__udivmodhi4_loop>:
    1450:	aa 1f       	adc	r26, r26
    1452:	bb 1f       	adc	r27, r27
    1454:	a6 17       	cp	r26, r22
    1456:	b7 07       	cpc	r27, r23
    1458:	10 f0       	brcs	.+4      	; 0x145e <__udivmodhi4_ep>
    145a:	a6 1b       	sub	r26, r22
    145c:	b7 0b       	sbc	r27, r23

0000145e <__udivmodhi4_ep>:
    145e:	88 1f       	adc	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	5a 95       	dec	r21
    1464:	a9 f7       	brne	.-22     	; 0x1450 <__udivmodhi4_loop>
    1466:	80 95       	com	r24
    1468:	90 95       	com	r25
    146a:	bc 01       	movw	r22, r24
    146c:	cd 01       	movw	r24, r26
    146e:	08 95       	ret

00001470 <fdevopen>:
    1470:	0f 93       	push	r16
    1472:	1f 93       	push	r17
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
    1478:	ec 01       	movw	r28, r24
    147a:	8b 01       	movw	r16, r22
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	31 f4       	brne	.+12     	; 0x148c <fdevopen+0x1c>
    1480:	61 15       	cp	r22, r1
    1482:	71 05       	cpc	r23, r1
    1484:	19 f4       	brne	.+6      	; 0x148c <fdevopen+0x1c>
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	38 c0       	rjmp	.+112    	; 0x14fc <fdevopen+0x8c>
    148c:	6e e0       	ldi	r22, 0x0E	; 14
    148e:	70 e0       	ldi	r23, 0x00	; 0
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 94 96 0c 	call	0x192c	; 0x192c <calloc>
    1498:	fc 01       	movw	r30, r24
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	a1 f3       	breq	.-24     	; 0x1486 <fdevopen+0x16>
    149e:	80 e8       	ldi	r24, 0x80	; 128
    14a0:	83 83       	std	Z+3, r24	; 0x03
    14a2:	01 15       	cp	r16, r1
    14a4:	11 05       	cpc	r17, r1
    14a6:	71 f0       	breq	.+28     	; 0x14c4 <fdevopen+0x54>
    14a8:	13 87       	std	Z+11, r17	; 0x0b
    14aa:	02 87       	std	Z+10, r16	; 0x0a
    14ac:	81 e8       	ldi	r24, 0x81	; 129
    14ae:	83 83       	std	Z+3, r24	; 0x03
    14b0:	80 91 b3 01 	lds	r24, 0x01B3
    14b4:	90 91 b4 01 	lds	r25, 0x01B4
    14b8:	89 2b       	or	r24, r25
    14ba:	21 f4       	brne	.+8      	; 0x14c4 <fdevopen+0x54>
    14bc:	f0 93 b4 01 	sts	0x01B4, r31
    14c0:	e0 93 b3 01 	sts	0x01B3, r30
    14c4:	20 97       	sbiw	r28, 0x00	; 0
    14c6:	c9 f0       	breq	.+50     	; 0x14fa <fdevopen+0x8a>
    14c8:	d1 87       	std	Z+9, r29	; 0x09
    14ca:	c0 87       	std	Z+8, r28	; 0x08
    14cc:	83 81       	ldd	r24, Z+3	; 0x03
    14ce:	82 60       	ori	r24, 0x02	; 2
    14d0:	83 83       	std	Z+3, r24	; 0x03
    14d2:	80 91 b5 01 	lds	r24, 0x01B5
    14d6:	90 91 b6 01 	lds	r25, 0x01B6
    14da:	89 2b       	or	r24, r25
    14dc:	71 f4       	brne	.+28     	; 0x14fa <fdevopen+0x8a>
    14de:	f0 93 b6 01 	sts	0x01B6, r31
    14e2:	e0 93 b5 01 	sts	0x01B5, r30
    14e6:	80 91 b7 01 	lds	r24, 0x01B7
    14ea:	90 91 b8 01 	lds	r25, 0x01B8
    14ee:	89 2b       	or	r24, r25
    14f0:	21 f4       	brne	.+8      	; 0x14fa <fdevopen+0x8a>
    14f2:	f0 93 b8 01 	sts	0x01B8, r31
    14f6:	e0 93 b7 01 	sts	0x01B7, r30
    14fa:	cf 01       	movw	r24, r30
    14fc:	df 91       	pop	r29
    14fe:	cf 91       	pop	r28
    1500:	1f 91       	pop	r17
    1502:	0f 91       	pop	r16
    1504:	08 95       	ret

00001506 <printf>:
    1506:	a0 e0       	ldi	r26, 0x00	; 0
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e9 e8       	ldi	r30, 0x89	; 137
    150c:	fa e0       	ldi	r31, 0x0A	; 10
    150e:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__prologue_saves__+0x20>
    1512:	fe 01       	movw	r30, r28
    1514:	35 96       	adiw	r30, 0x05	; 5
    1516:	61 91       	ld	r22, Z+
    1518:	71 91       	ld	r23, Z+
    151a:	af 01       	movw	r20, r30
    151c:	80 91 b5 01 	lds	r24, 0x01B5
    1520:	90 91 b6 01 	lds	r25, 0x01B6
    1524:	0e 94 c4 0a 	call	0x1588	; 0x1588 <vfprintf>
    1528:	e2 e0       	ldi	r30, 0x02	; 2
    152a:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__epilogue_restores__+0x20>

0000152e <puts>:
    152e:	0f 93       	push	r16
    1530:	1f 93       	push	r17
    1532:	cf 93       	push	r28
    1534:	df 93       	push	r29
    1536:	e0 91 b5 01 	lds	r30, 0x01B5
    153a:	f0 91 b6 01 	lds	r31, 0x01B6
    153e:	23 81       	ldd	r18, Z+3	; 0x03
    1540:	21 ff       	sbrs	r18, 1
    1542:	1b c0       	rjmp	.+54     	; 0x157a <puts+0x4c>
    1544:	ec 01       	movw	r28, r24
    1546:	00 e0       	ldi	r16, 0x00	; 0
    1548:	10 e0       	ldi	r17, 0x00	; 0
    154a:	89 91       	ld	r24, Y+
    154c:	60 91 b5 01 	lds	r22, 0x01B5
    1550:	70 91 b6 01 	lds	r23, 0x01B6
    1554:	db 01       	movw	r26, r22
    1556:	18 96       	adiw	r26, 0x08	; 8
    1558:	ed 91       	ld	r30, X+
    155a:	fc 91       	ld	r31, X
    155c:	19 97       	sbiw	r26, 0x09	; 9
    155e:	88 23       	and	r24, r24
    1560:	31 f0       	breq	.+12     	; 0x156e <puts+0x40>
    1562:	09 95       	icall
    1564:	89 2b       	or	r24, r25
    1566:	89 f3       	breq	.-30     	; 0x154a <puts+0x1c>
    1568:	0f ef       	ldi	r16, 0xFF	; 255
    156a:	1f ef       	ldi	r17, 0xFF	; 255
    156c:	ee cf       	rjmp	.-36     	; 0x154a <puts+0x1c>
    156e:	8a e0       	ldi	r24, 0x0A	; 10
    1570:	09 95       	icall
    1572:	89 2b       	or	r24, r25
    1574:	11 f4       	brne	.+4      	; 0x157a <puts+0x4c>
    1576:	c8 01       	movw	r24, r16
    1578:	02 c0       	rjmp	.+4      	; 0x157e <puts+0x50>
    157a:	8f ef       	ldi	r24, 0xFF	; 255
    157c:	9f ef       	ldi	r25, 0xFF	; 255
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	1f 91       	pop	r17
    1584:	0f 91       	pop	r16
    1586:	08 95       	ret

00001588 <vfprintf>:
    1588:	ac e0       	ldi	r26, 0x0C	; 12
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	ea ec       	ldi	r30, 0xCA	; 202
    158e:	fa e0       	ldi	r31, 0x0A	; 10
    1590:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__prologue_saves__>
    1594:	7c 01       	movw	r14, r24
    1596:	6b 01       	movw	r12, r22
    1598:	8a 01       	movw	r16, r20
    159a:	fc 01       	movw	r30, r24
    159c:	17 82       	std	Z+7, r1	; 0x07
    159e:	16 82       	std	Z+6, r1	; 0x06
    15a0:	83 81       	ldd	r24, Z+3	; 0x03
    15a2:	81 ff       	sbrs	r24, 1
    15a4:	bd c1       	rjmp	.+890    	; 0x1920 <vfprintf+0x398>
    15a6:	ce 01       	movw	r24, r28
    15a8:	01 96       	adiw	r24, 0x01	; 1
    15aa:	4c 01       	movw	r8, r24
    15ac:	f7 01       	movw	r30, r14
    15ae:	93 81       	ldd	r25, Z+3	; 0x03
    15b0:	f6 01       	movw	r30, r12
    15b2:	93 fd       	sbrc	r25, 3
    15b4:	85 91       	lpm	r24, Z+
    15b6:	93 ff       	sbrs	r25, 3
    15b8:	81 91       	ld	r24, Z+
    15ba:	6f 01       	movw	r12, r30
    15bc:	88 23       	and	r24, r24
    15be:	09 f4       	brne	.+2      	; 0x15c2 <vfprintf+0x3a>
    15c0:	ab c1       	rjmp	.+854    	; 0x1918 <vfprintf+0x390>
    15c2:	85 32       	cpi	r24, 0x25	; 37
    15c4:	39 f4       	brne	.+14     	; 0x15d4 <vfprintf+0x4c>
    15c6:	93 fd       	sbrc	r25, 3
    15c8:	85 91       	lpm	r24, Z+
    15ca:	93 ff       	sbrs	r25, 3
    15cc:	81 91       	ld	r24, Z+
    15ce:	6f 01       	movw	r12, r30
    15d0:	85 32       	cpi	r24, 0x25	; 37
    15d2:	29 f4       	brne	.+10     	; 0x15de <vfprintf+0x56>
    15d4:	b7 01       	movw	r22, r14
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <fputc>
    15dc:	e7 cf       	rjmp	.-50     	; 0x15ac <vfprintf+0x24>
    15de:	51 2c       	mov	r5, r1
    15e0:	31 2c       	mov	r3, r1
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	20 32       	cpi	r18, 0x20	; 32
    15e6:	a0 f4       	brcc	.+40     	; 0x1610 <vfprintf+0x88>
    15e8:	8b 32       	cpi	r24, 0x2B	; 43
    15ea:	69 f0       	breq	.+26     	; 0x1606 <vfprintf+0x7e>
    15ec:	30 f4       	brcc	.+12     	; 0x15fa <vfprintf+0x72>
    15ee:	80 32       	cpi	r24, 0x20	; 32
    15f0:	59 f0       	breq	.+22     	; 0x1608 <vfprintf+0x80>
    15f2:	83 32       	cpi	r24, 0x23	; 35
    15f4:	69 f4       	brne	.+26     	; 0x1610 <vfprintf+0x88>
    15f6:	20 61       	ori	r18, 0x10	; 16
    15f8:	2c c0       	rjmp	.+88     	; 0x1652 <vfprintf+0xca>
    15fa:	8d 32       	cpi	r24, 0x2D	; 45
    15fc:	39 f0       	breq	.+14     	; 0x160c <vfprintf+0x84>
    15fe:	80 33       	cpi	r24, 0x30	; 48
    1600:	39 f4       	brne	.+14     	; 0x1610 <vfprintf+0x88>
    1602:	21 60       	ori	r18, 0x01	; 1
    1604:	26 c0       	rjmp	.+76     	; 0x1652 <vfprintf+0xca>
    1606:	22 60       	ori	r18, 0x02	; 2
    1608:	24 60       	ori	r18, 0x04	; 4
    160a:	23 c0       	rjmp	.+70     	; 0x1652 <vfprintf+0xca>
    160c:	28 60       	ori	r18, 0x08	; 8
    160e:	21 c0       	rjmp	.+66     	; 0x1652 <vfprintf+0xca>
    1610:	27 fd       	sbrc	r18, 7
    1612:	27 c0       	rjmp	.+78     	; 0x1662 <vfprintf+0xda>
    1614:	30 ed       	ldi	r19, 0xD0	; 208
    1616:	38 0f       	add	r19, r24
    1618:	3a 30       	cpi	r19, 0x0A	; 10
    161a:	78 f4       	brcc	.+30     	; 0x163a <vfprintf+0xb2>
    161c:	26 ff       	sbrs	r18, 6
    161e:	06 c0       	rjmp	.+12     	; 0x162c <vfprintf+0xa4>
    1620:	fa e0       	ldi	r31, 0x0A	; 10
    1622:	5f 9e       	mul	r5, r31
    1624:	30 0d       	add	r19, r0
    1626:	11 24       	eor	r1, r1
    1628:	53 2e       	mov	r5, r19
    162a:	13 c0       	rjmp	.+38     	; 0x1652 <vfprintf+0xca>
    162c:	8a e0       	ldi	r24, 0x0A	; 10
    162e:	38 9e       	mul	r3, r24
    1630:	30 0d       	add	r19, r0
    1632:	11 24       	eor	r1, r1
    1634:	33 2e       	mov	r3, r19
    1636:	20 62       	ori	r18, 0x20	; 32
    1638:	0c c0       	rjmp	.+24     	; 0x1652 <vfprintf+0xca>
    163a:	8e 32       	cpi	r24, 0x2E	; 46
    163c:	21 f4       	brne	.+8      	; 0x1646 <vfprintf+0xbe>
    163e:	26 fd       	sbrc	r18, 6
    1640:	6b c1       	rjmp	.+726    	; 0x1918 <vfprintf+0x390>
    1642:	20 64       	ori	r18, 0x40	; 64
    1644:	06 c0       	rjmp	.+12     	; 0x1652 <vfprintf+0xca>
    1646:	8c 36       	cpi	r24, 0x6C	; 108
    1648:	11 f4       	brne	.+4      	; 0x164e <vfprintf+0xc6>
    164a:	20 68       	ori	r18, 0x80	; 128
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <vfprintf+0xca>
    164e:	88 36       	cpi	r24, 0x68	; 104
    1650:	41 f4       	brne	.+16     	; 0x1662 <vfprintf+0xda>
    1652:	f6 01       	movw	r30, r12
    1654:	93 fd       	sbrc	r25, 3
    1656:	85 91       	lpm	r24, Z+
    1658:	93 ff       	sbrs	r25, 3
    165a:	81 91       	ld	r24, Z+
    165c:	6f 01       	movw	r12, r30
    165e:	81 11       	cpse	r24, r1
    1660:	c1 cf       	rjmp	.-126    	; 0x15e4 <vfprintf+0x5c>
    1662:	98 2f       	mov	r25, r24
    1664:	9f 7d       	andi	r25, 0xDF	; 223
    1666:	95 54       	subi	r25, 0x45	; 69
    1668:	93 30       	cpi	r25, 0x03	; 3
    166a:	28 f4       	brcc	.+10     	; 0x1676 <vfprintf+0xee>
    166c:	0c 5f       	subi	r16, 0xFC	; 252
    166e:	1f 4f       	sbci	r17, 0xFF	; 255
    1670:	ff e3       	ldi	r31, 0x3F	; 63
    1672:	f9 83       	std	Y+1, r31	; 0x01
    1674:	0d c0       	rjmp	.+26     	; 0x1690 <vfprintf+0x108>
    1676:	83 36       	cpi	r24, 0x63	; 99
    1678:	31 f0       	breq	.+12     	; 0x1686 <vfprintf+0xfe>
    167a:	83 37       	cpi	r24, 0x73	; 115
    167c:	71 f0       	breq	.+28     	; 0x169a <vfprintf+0x112>
    167e:	83 35       	cpi	r24, 0x53	; 83
    1680:	09 f0       	breq	.+2      	; 0x1684 <vfprintf+0xfc>
    1682:	5b c0       	rjmp	.+182    	; 0x173a <vfprintf+0x1b2>
    1684:	22 c0       	rjmp	.+68     	; 0x16ca <vfprintf+0x142>
    1686:	f8 01       	movw	r30, r16
    1688:	80 81       	ld	r24, Z
    168a:	89 83       	std	Y+1, r24	; 0x01
    168c:	0e 5f       	subi	r16, 0xFE	; 254
    168e:	1f 4f       	sbci	r17, 0xFF	; 255
    1690:	44 24       	eor	r4, r4
    1692:	43 94       	inc	r4
    1694:	51 2c       	mov	r5, r1
    1696:	54 01       	movw	r10, r8
    1698:	15 c0       	rjmp	.+42     	; 0x16c4 <vfprintf+0x13c>
    169a:	38 01       	movw	r6, r16
    169c:	f2 e0       	ldi	r31, 0x02	; 2
    169e:	6f 0e       	add	r6, r31
    16a0:	71 1c       	adc	r7, r1
    16a2:	f8 01       	movw	r30, r16
    16a4:	a0 80       	ld	r10, Z
    16a6:	b1 80       	ldd	r11, Z+1	; 0x01
    16a8:	26 ff       	sbrs	r18, 6
    16aa:	03 c0       	rjmp	.+6      	; 0x16b2 <vfprintf+0x12a>
    16ac:	65 2d       	mov	r22, r5
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <vfprintf+0x12e>
    16b2:	6f ef       	ldi	r22, 0xFF	; 255
    16b4:	7f ef       	ldi	r23, 0xFF	; 255
    16b6:	c5 01       	movw	r24, r10
    16b8:	2c 87       	std	Y+12, r18	; 0x0c
    16ba:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <strnlen>
    16be:	2c 01       	movw	r4, r24
    16c0:	83 01       	movw	r16, r6
    16c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    16c4:	2f 77       	andi	r18, 0x7F	; 127
    16c6:	22 2e       	mov	r2, r18
    16c8:	17 c0       	rjmp	.+46     	; 0x16f8 <vfprintf+0x170>
    16ca:	38 01       	movw	r6, r16
    16cc:	f2 e0       	ldi	r31, 0x02	; 2
    16ce:	6f 0e       	add	r6, r31
    16d0:	71 1c       	adc	r7, r1
    16d2:	f8 01       	movw	r30, r16
    16d4:	a0 80       	ld	r10, Z
    16d6:	b1 80       	ldd	r11, Z+1	; 0x01
    16d8:	26 ff       	sbrs	r18, 6
    16da:	03 c0       	rjmp	.+6      	; 0x16e2 <vfprintf+0x15a>
    16dc:	65 2d       	mov	r22, r5
    16de:	70 e0       	ldi	r23, 0x00	; 0
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <vfprintf+0x15e>
    16e2:	6f ef       	ldi	r22, 0xFF	; 255
    16e4:	7f ef       	ldi	r23, 0xFF	; 255
    16e6:	c5 01       	movw	r24, r10
    16e8:	2c 87       	std	Y+12, r18	; 0x0c
    16ea:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <strnlen_P>
    16ee:	2c 01       	movw	r4, r24
    16f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    16f2:	20 68       	ori	r18, 0x80	; 128
    16f4:	22 2e       	mov	r2, r18
    16f6:	83 01       	movw	r16, r6
    16f8:	23 fc       	sbrc	r2, 3
    16fa:	1b c0       	rjmp	.+54     	; 0x1732 <vfprintf+0x1aa>
    16fc:	83 2d       	mov	r24, r3
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	48 16       	cp	r4, r24
    1702:	59 06       	cpc	r5, r25
    1704:	b0 f4       	brcc	.+44     	; 0x1732 <vfprintf+0x1aa>
    1706:	b7 01       	movw	r22, r14
    1708:	80 e2       	ldi	r24, 0x20	; 32
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <fputc>
    1710:	3a 94       	dec	r3
    1712:	f4 cf       	rjmp	.-24     	; 0x16fc <vfprintf+0x174>
    1714:	f5 01       	movw	r30, r10
    1716:	27 fc       	sbrc	r2, 7
    1718:	85 91       	lpm	r24, Z+
    171a:	27 fe       	sbrs	r2, 7
    171c:	81 91       	ld	r24, Z+
    171e:	5f 01       	movw	r10, r30
    1720:	b7 01       	movw	r22, r14
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <fputc>
    1728:	31 10       	cpse	r3, r1
    172a:	3a 94       	dec	r3
    172c:	f1 e0       	ldi	r31, 0x01	; 1
    172e:	4f 1a       	sub	r4, r31
    1730:	51 08       	sbc	r5, r1
    1732:	41 14       	cp	r4, r1
    1734:	51 04       	cpc	r5, r1
    1736:	71 f7       	brne	.-36     	; 0x1714 <vfprintf+0x18c>
    1738:	e5 c0       	rjmp	.+458    	; 0x1904 <vfprintf+0x37c>
    173a:	84 36       	cpi	r24, 0x64	; 100
    173c:	11 f0       	breq	.+4      	; 0x1742 <vfprintf+0x1ba>
    173e:	89 36       	cpi	r24, 0x69	; 105
    1740:	39 f5       	brne	.+78     	; 0x1790 <vfprintf+0x208>
    1742:	f8 01       	movw	r30, r16
    1744:	27 ff       	sbrs	r18, 7
    1746:	07 c0       	rjmp	.+14     	; 0x1756 <vfprintf+0x1ce>
    1748:	60 81       	ld	r22, Z
    174a:	71 81       	ldd	r23, Z+1	; 0x01
    174c:	82 81       	ldd	r24, Z+2	; 0x02
    174e:	93 81       	ldd	r25, Z+3	; 0x03
    1750:	0c 5f       	subi	r16, 0xFC	; 252
    1752:	1f 4f       	sbci	r17, 0xFF	; 255
    1754:	08 c0       	rjmp	.+16     	; 0x1766 <vfprintf+0x1de>
    1756:	60 81       	ld	r22, Z
    1758:	71 81       	ldd	r23, Z+1	; 0x01
    175a:	88 27       	eor	r24, r24
    175c:	77 fd       	sbrc	r23, 7
    175e:	80 95       	com	r24
    1760:	98 2f       	mov	r25, r24
    1762:	0e 5f       	subi	r16, 0xFE	; 254
    1764:	1f 4f       	sbci	r17, 0xFF	; 255
    1766:	2f 76       	andi	r18, 0x6F	; 111
    1768:	b2 2e       	mov	r11, r18
    176a:	97 ff       	sbrs	r25, 7
    176c:	09 c0       	rjmp	.+18     	; 0x1780 <vfprintf+0x1f8>
    176e:	90 95       	com	r25
    1770:	80 95       	com	r24
    1772:	70 95       	com	r23
    1774:	61 95       	neg	r22
    1776:	7f 4f       	sbci	r23, 0xFF	; 255
    1778:	8f 4f       	sbci	r24, 0xFF	; 255
    177a:	9f 4f       	sbci	r25, 0xFF	; 255
    177c:	20 68       	ori	r18, 0x80	; 128
    177e:	b2 2e       	mov	r11, r18
    1780:	2a e0       	ldi	r18, 0x0A	; 10
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	a4 01       	movw	r20, r8
    1786:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <__ultoa_invert>
    178a:	a8 2e       	mov	r10, r24
    178c:	a8 18       	sub	r10, r8
    178e:	44 c0       	rjmp	.+136    	; 0x1818 <vfprintf+0x290>
    1790:	85 37       	cpi	r24, 0x75	; 117
    1792:	29 f4       	brne	.+10     	; 0x179e <vfprintf+0x216>
    1794:	2f 7e       	andi	r18, 0xEF	; 239
    1796:	b2 2e       	mov	r11, r18
    1798:	2a e0       	ldi	r18, 0x0A	; 10
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	25 c0       	rjmp	.+74     	; 0x17e8 <vfprintf+0x260>
    179e:	f2 2f       	mov	r31, r18
    17a0:	f9 7f       	andi	r31, 0xF9	; 249
    17a2:	bf 2e       	mov	r11, r31
    17a4:	8f 36       	cpi	r24, 0x6F	; 111
    17a6:	c1 f0       	breq	.+48     	; 0x17d8 <vfprintf+0x250>
    17a8:	18 f4       	brcc	.+6      	; 0x17b0 <vfprintf+0x228>
    17aa:	88 35       	cpi	r24, 0x58	; 88
    17ac:	79 f0       	breq	.+30     	; 0x17cc <vfprintf+0x244>
    17ae:	b4 c0       	rjmp	.+360    	; 0x1918 <vfprintf+0x390>
    17b0:	80 37       	cpi	r24, 0x70	; 112
    17b2:	19 f0       	breq	.+6      	; 0x17ba <vfprintf+0x232>
    17b4:	88 37       	cpi	r24, 0x78	; 120
    17b6:	21 f0       	breq	.+8      	; 0x17c0 <vfprintf+0x238>
    17b8:	af c0       	rjmp	.+350    	; 0x1918 <vfprintf+0x390>
    17ba:	2f 2f       	mov	r18, r31
    17bc:	20 61       	ori	r18, 0x10	; 16
    17be:	b2 2e       	mov	r11, r18
    17c0:	b4 fe       	sbrs	r11, 4
    17c2:	0d c0       	rjmp	.+26     	; 0x17de <vfprintf+0x256>
    17c4:	8b 2d       	mov	r24, r11
    17c6:	84 60       	ori	r24, 0x04	; 4
    17c8:	b8 2e       	mov	r11, r24
    17ca:	09 c0       	rjmp	.+18     	; 0x17de <vfprintf+0x256>
    17cc:	24 ff       	sbrs	r18, 4
    17ce:	0a c0       	rjmp	.+20     	; 0x17e4 <vfprintf+0x25c>
    17d0:	9f 2f       	mov	r25, r31
    17d2:	96 60       	ori	r25, 0x06	; 6
    17d4:	b9 2e       	mov	r11, r25
    17d6:	06 c0       	rjmp	.+12     	; 0x17e4 <vfprintf+0x25c>
    17d8:	28 e0       	ldi	r18, 0x08	; 8
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	05 c0       	rjmp	.+10     	; 0x17e8 <vfprintf+0x260>
    17de:	20 e1       	ldi	r18, 0x10	; 16
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <vfprintf+0x260>
    17e4:	20 e1       	ldi	r18, 0x10	; 16
    17e6:	32 e0       	ldi	r19, 0x02	; 2
    17e8:	f8 01       	movw	r30, r16
    17ea:	b7 fe       	sbrs	r11, 7
    17ec:	07 c0       	rjmp	.+14     	; 0x17fc <vfprintf+0x274>
    17ee:	60 81       	ld	r22, Z
    17f0:	71 81       	ldd	r23, Z+1	; 0x01
    17f2:	82 81       	ldd	r24, Z+2	; 0x02
    17f4:	93 81       	ldd	r25, Z+3	; 0x03
    17f6:	0c 5f       	subi	r16, 0xFC	; 252
    17f8:	1f 4f       	sbci	r17, 0xFF	; 255
    17fa:	06 c0       	rjmp	.+12     	; 0x1808 <vfprintf+0x280>
    17fc:	60 81       	ld	r22, Z
    17fe:	71 81       	ldd	r23, Z+1	; 0x01
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	0e 5f       	subi	r16, 0xFE	; 254
    1806:	1f 4f       	sbci	r17, 0xFF	; 255
    1808:	a4 01       	movw	r20, r8
    180a:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <__ultoa_invert>
    180e:	a8 2e       	mov	r10, r24
    1810:	a8 18       	sub	r10, r8
    1812:	fb 2d       	mov	r31, r11
    1814:	ff 77       	andi	r31, 0x7F	; 127
    1816:	bf 2e       	mov	r11, r31
    1818:	b6 fe       	sbrs	r11, 6
    181a:	0b c0       	rjmp	.+22     	; 0x1832 <vfprintf+0x2aa>
    181c:	2b 2d       	mov	r18, r11
    181e:	2e 7f       	andi	r18, 0xFE	; 254
    1820:	a5 14       	cp	r10, r5
    1822:	50 f4       	brcc	.+20     	; 0x1838 <vfprintf+0x2b0>
    1824:	b4 fe       	sbrs	r11, 4
    1826:	0a c0       	rjmp	.+20     	; 0x183c <vfprintf+0x2b4>
    1828:	b2 fc       	sbrc	r11, 2
    182a:	08 c0       	rjmp	.+16     	; 0x183c <vfprintf+0x2b4>
    182c:	2b 2d       	mov	r18, r11
    182e:	2e 7e       	andi	r18, 0xEE	; 238
    1830:	05 c0       	rjmp	.+10     	; 0x183c <vfprintf+0x2b4>
    1832:	7a 2c       	mov	r7, r10
    1834:	2b 2d       	mov	r18, r11
    1836:	03 c0       	rjmp	.+6      	; 0x183e <vfprintf+0x2b6>
    1838:	7a 2c       	mov	r7, r10
    183a:	01 c0       	rjmp	.+2      	; 0x183e <vfprintf+0x2b6>
    183c:	75 2c       	mov	r7, r5
    183e:	24 ff       	sbrs	r18, 4
    1840:	0d c0       	rjmp	.+26     	; 0x185c <vfprintf+0x2d4>
    1842:	fe 01       	movw	r30, r28
    1844:	ea 0d       	add	r30, r10
    1846:	f1 1d       	adc	r31, r1
    1848:	80 81       	ld	r24, Z
    184a:	80 33       	cpi	r24, 0x30	; 48
    184c:	11 f4       	brne	.+4      	; 0x1852 <vfprintf+0x2ca>
    184e:	29 7e       	andi	r18, 0xE9	; 233
    1850:	09 c0       	rjmp	.+18     	; 0x1864 <vfprintf+0x2dc>
    1852:	22 ff       	sbrs	r18, 2
    1854:	06 c0       	rjmp	.+12     	; 0x1862 <vfprintf+0x2da>
    1856:	73 94       	inc	r7
    1858:	73 94       	inc	r7
    185a:	04 c0       	rjmp	.+8      	; 0x1864 <vfprintf+0x2dc>
    185c:	82 2f       	mov	r24, r18
    185e:	86 78       	andi	r24, 0x86	; 134
    1860:	09 f0       	breq	.+2      	; 0x1864 <vfprintf+0x2dc>
    1862:	73 94       	inc	r7
    1864:	23 fd       	sbrc	r18, 3
    1866:	13 c0       	rjmp	.+38     	; 0x188e <vfprintf+0x306>
    1868:	20 ff       	sbrs	r18, 0
    186a:	06 c0       	rjmp	.+12     	; 0x1878 <vfprintf+0x2f0>
    186c:	5a 2c       	mov	r5, r10
    186e:	73 14       	cp	r7, r3
    1870:	18 f4       	brcc	.+6      	; 0x1878 <vfprintf+0x2f0>
    1872:	53 0c       	add	r5, r3
    1874:	57 18       	sub	r5, r7
    1876:	73 2c       	mov	r7, r3
    1878:	73 14       	cp	r7, r3
    187a:	68 f4       	brcc	.+26     	; 0x1896 <vfprintf+0x30e>
    187c:	b7 01       	movw	r22, r14
    187e:	80 e2       	ldi	r24, 0x20	; 32
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	2c 87       	std	Y+12, r18	; 0x0c
    1884:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <fputc>
    1888:	73 94       	inc	r7
    188a:	2c 85       	ldd	r18, Y+12	; 0x0c
    188c:	f5 cf       	rjmp	.-22     	; 0x1878 <vfprintf+0x2f0>
    188e:	73 14       	cp	r7, r3
    1890:	10 f4       	brcc	.+4      	; 0x1896 <vfprintf+0x30e>
    1892:	37 18       	sub	r3, r7
    1894:	01 c0       	rjmp	.+2      	; 0x1898 <vfprintf+0x310>
    1896:	31 2c       	mov	r3, r1
    1898:	24 ff       	sbrs	r18, 4
    189a:	12 c0       	rjmp	.+36     	; 0x18c0 <vfprintf+0x338>
    189c:	b7 01       	movw	r22, r14
    189e:	80 e3       	ldi	r24, 0x30	; 48
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	2c 87       	std	Y+12, r18	; 0x0c
    18a4:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <fputc>
    18a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    18aa:	22 ff       	sbrs	r18, 2
    18ac:	17 c0       	rjmp	.+46     	; 0x18dc <vfprintf+0x354>
    18ae:	21 ff       	sbrs	r18, 1
    18b0:	03 c0       	rjmp	.+6      	; 0x18b8 <vfprintf+0x330>
    18b2:	88 e5       	ldi	r24, 0x58	; 88
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <vfprintf+0x334>
    18b8:	88 e7       	ldi	r24, 0x78	; 120
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	b7 01       	movw	r22, r14
    18be:	0c c0       	rjmp	.+24     	; 0x18d8 <vfprintf+0x350>
    18c0:	82 2f       	mov	r24, r18
    18c2:	86 78       	andi	r24, 0x86	; 134
    18c4:	59 f0       	breq	.+22     	; 0x18dc <vfprintf+0x354>
    18c6:	21 fd       	sbrc	r18, 1
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <vfprintf+0x346>
    18ca:	80 e2       	ldi	r24, 0x20	; 32
    18cc:	01 c0       	rjmp	.+2      	; 0x18d0 <vfprintf+0x348>
    18ce:	8b e2       	ldi	r24, 0x2B	; 43
    18d0:	27 fd       	sbrc	r18, 7
    18d2:	8d e2       	ldi	r24, 0x2D	; 45
    18d4:	b7 01       	movw	r22, r14
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <fputc>
    18dc:	a5 14       	cp	r10, r5
    18de:	38 f4       	brcc	.+14     	; 0x18ee <vfprintf+0x366>
    18e0:	b7 01       	movw	r22, r14
    18e2:	80 e3       	ldi	r24, 0x30	; 48
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <fputc>
    18ea:	5a 94       	dec	r5
    18ec:	f7 cf       	rjmp	.-18     	; 0x18dc <vfprintf+0x354>
    18ee:	aa 94       	dec	r10
    18f0:	f4 01       	movw	r30, r8
    18f2:	ea 0d       	add	r30, r10
    18f4:	f1 1d       	adc	r31, r1
    18f6:	80 81       	ld	r24, Z
    18f8:	b7 01       	movw	r22, r14
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <fputc>
    1900:	a1 10       	cpse	r10, r1
    1902:	f5 cf       	rjmp	.-22     	; 0x18ee <vfprintf+0x366>
    1904:	33 20       	and	r3, r3
    1906:	09 f4       	brne	.+2      	; 0x190a <vfprintf+0x382>
    1908:	51 ce       	rjmp	.-862    	; 0x15ac <vfprintf+0x24>
    190a:	b7 01       	movw	r22, r14
    190c:	80 e2       	ldi	r24, 0x20	; 32
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <fputc>
    1914:	3a 94       	dec	r3
    1916:	f6 cf       	rjmp	.-20     	; 0x1904 <vfprintf+0x37c>
    1918:	f7 01       	movw	r30, r14
    191a:	86 81       	ldd	r24, Z+6	; 0x06
    191c:	97 81       	ldd	r25, Z+7	; 0x07
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <vfprintf+0x39c>
    1920:	8f ef       	ldi	r24, 0xFF	; 255
    1922:	9f ef       	ldi	r25, 0xFF	; 255
    1924:	2c 96       	adiw	r28, 0x0c	; 12
    1926:	e2 e1       	ldi	r30, 0x12	; 18
    1928:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__epilogue_restores__>

0000192c <calloc>:
    192c:	0f 93       	push	r16
    192e:	1f 93       	push	r17
    1930:	cf 93       	push	r28
    1932:	df 93       	push	r29
    1934:	86 9f       	mul	r24, r22
    1936:	80 01       	movw	r16, r0
    1938:	87 9f       	mul	r24, r23
    193a:	10 0d       	add	r17, r0
    193c:	96 9f       	mul	r25, r22
    193e:	10 0d       	add	r17, r0
    1940:	11 24       	eor	r1, r1
    1942:	c8 01       	movw	r24, r16
    1944:	0e 94 b2 0c 	call	0x1964	; 0x1964 <malloc>
    1948:	ec 01       	movw	r28, r24
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	29 f0       	breq	.+10     	; 0x1958 <calloc+0x2c>
    194e:	a8 01       	movw	r20, r16
    1950:	60 e0       	ldi	r22, 0x00	; 0
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <memset>
    1958:	ce 01       	movw	r24, r28
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	1f 91       	pop	r17
    1960:	0f 91       	pop	r16
    1962:	08 95       	ret

00001964 <malloc>:
    1964:	cf 93       	push	r28
    1966:	df 93       	push	r29
    1968:	82 30       	cpi	r24, 0x02	; 2
    196a:	91 05       	cpc	r25, r1
    196c:	10 f4       	brcc	.+4      	; 0x1972 <malloc+0xe>
    196e:	82 e0       	ldi	r24, 0x02	; 2
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	e0 91 bb 01 	lds	r30, 0x01BB
    1976:	f0 91 bc 01 	lds	r31, 0x01BC
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	a0 e0       	ldi	r26, 0x00	; 0
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	30 97       	sbiw	r30, 0x00	; 0
    1984:	39 f1       	breq	.+78     	; 0x19d4 <malloc+0x70>
    1986:	40 81       	ld	r20, Z
    1988:	51 81       	ldd	r21, Z+1	; 0x01
    198a:	48 17       	cp	r20, r24
    198c:	59 07       	cpc	r21, r25
    198e:	b8 f0       	brcs	.+46     	; 0x19be <malloc+0x5a>
    1990:	48 17       	cp	r20, r24
    1992:	59 07       	cpc	r21, r25
    1994:	71 f4       	brne	.+28     	; 0x19b2 <malloc+0x4e>
    1996:	82 81       	ldd	r24, Z+2	; 0x02
    1998:	93 81       	ldd	r25, Z+3	; 0x03
    199a:	10 97       	sbiw	r26, 0x00	; 0
    199c:	29 f0       	breq	.+10     	; 0x19a8 <malloc+0x44>
    199e:	13 96       	adiw	r26, 0x03	; 3
    19a0:	9c 93       	st	X, r25
    19a2:	8e 93       	st	-X, r24
    19a4:	12 97       	sbiw	r26, 0x02	; 2
    19a6:	2c c0       	rjmp	.+88     	; 0x1a00 <malloc+0x9c>
    19a8:	90 93 bc 01 	sts	0x01BC, r25
    19ac:	80 93 bb 01 	sts	0x01BB, r24
    19b0:	27 c0       	rjmp	.+78     	; 0x1a00 <malloc+0x9c>
    19b2:	21 15       	cp	r18, r1
    19b4:	31 05       	cpc	r19, r1
    19b6:	31 f0       	breq	.+12     	; 0x19c4 <malloc+0x60>
    19b8:	42 17       	cp	r20, r18
    19ba:	53 07       	cpc	r21, r19
    19bc:	18 f0       	brcs	.+6      	; 0x19c4 <malloc+0x60>
    19be:	a9 01       	movw	r20, r18
    19c0:	db 01       	movw	r26, r22
    19c2:	01 c0       	rjmp	.+2      	; 0x19c6 <malloc+0x62>
    19c4:	ef 01       	movw	r28, r30
    19c6:	9a 01       	movw	r18, r20
    19c8:	bd 01       	movw	r22, r26
    19ca:	df 01       	movw	r26, r30
    19cc:	02 80       	ldd	r0, Z+2	; 0x02
    19ce:	f3 81       	ldd	r31, Z+3	; 0x03
    19d0:	e0 2d       	mov	r30, r0
    19d2:	d7 cf       	rjmp	.-82     	; 0x1982 <malloc+0x1e>
    19d4:	21 15       	cp	r18, r1
    19d6:	31 05       	cpc	r19, r1
    19d8:	f9 f0       	breq	.+62     	; 0x1a18 <malloc+0xb4>
    19da:	28 1b       	sub	r18, r24
    19dc:	39 0b       	sbc	r19, r25
    19de:	24 30       	cpi	r18, 0x04	; 4
    19e0:	31 05       	cpc	r19, r1
    19e2:	80 f4       	brcc	.+32     	; 0x1a04 <malloc+0xa0>
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	9b 81       	ldd	r25, Y+3	; 0x03
    19e8:	61 15       	cp	r22, r1
    19ea:	71 05       	cpc	r23, r1
    19ec:	21 f0       	breq	.+8      	; 0x19f6 <malloc+0x92>
    19ee:	fb 01       	movw	r30, r22
    19f0:	93 83       	std	Z+3, r25	; 0x03
    19f2:	82 83       	std	Z+2, r24	; 0x02
    19f4:	04 c0       	rjmp	.+8      	; 0x19fe <malloc+0x9a>
    19f6:	90 93 bc 01 	sts	0x01BC, r25
    19fa:	80 93 bb 01 	sts	0x01BB, r24
    19fe:	fe 01       	movw	r30, r28
    1a00:	32 96       	adiw	r30, 0x02	; 2
    1a02:	44 c0       	rjmp	.+136    	; 0x1a8c <malloc+0x128>
    1a04:	fe 01       	movw	r30, r28
    1a06:	e2 0f       	add	r30, r18
    1a08:	f3 1f       	adc	r31, r19
    1a0a:	81 93       	st	Z+, r24
    1a0c:	91 93       	st	Z+, r25
    1a0e:	22 50       	subi	r18, 0x02	; 2
    1a10:	31 09       	sbc	r19, r1
    1a12:	39 83       	std	Y+1, r19	; 0x01
    1a14:	28 83       	st	Y, r18
    1a16:	3a c0       	rjmp	.+116    	; 0x1a8c <malloc+0x128>
    1a18:	20 91 b9 01 	lds	r18, 0x01B9
    1a1c:	30 91 ba 01 	lds	r19, 0x01BA
    1a20:	23 2b       	or	r18, r19
    1a22:	41 f4       	brne	.+16     	; 0x1a34 <malloc+0xd0>
    1a24:	20 91 02 01 	lds	r18, 0x0102
    1a28:	30 91 03 01 	lds	r19, 0x0103
    1a2c:	30 93 ba 01 	sts	0x01BA, r19
    1a30:	20 93 b9 01 	sts	0x01B9, r18
    1a34:	20 91 00 01 	lds	r18, 0x0100
    1a38:	30 91 01 01 	lds	r19, 0x0101
    1a3c:	21 15       	cp	r18, r1
    1a3e:	31 05       	cpc	r19, r1
    1a40:	41 f4       	brne	.+16     	; 0x1a52 <malloc+0xee>
    1a42:	2d b7       	in	r18, 0x3d	; 61
    1a44:	3e b7       	in	r19, 0x3e	; 62
    1a46:	40 91 04 01 	lds	r20, 0x0104
    1a4a:	50 91 05 01 	lds	r21, 0x0105
    1a4e:	24 1b       	sub	r18, r20
    1a50:	35 0b       	sbc	r19, r21
    1a52:	e0 91 b9 01 	lds	r30, 0x01B9
    1a56:	f0 91 ba 01 	lds	r31, 0x01BA
    1a5a:	e2 17       	cp	r30, r18
    1a5c:	f3 07       	cpc	r31, r19
    1a5e:	a0 f4       	brcc	.+40     	; 0x1a88 <malloc+0x124>
    1a60:	2e 1b       	sub	r18, r30
    1a62:	3f 0b       	sbc	r19, r31
    1a64:	28 17       	cp	r18, r24
    1a66:	39 07       	cpc	r19, r25
    1a68:	78 f0       	brcs	.+30     	; 0x1a88 <malloc+0x124>
    1a6a:	ac 01       	movw	r20, r24
    1a6c:	4e 5f       	subi	r20, 0xFE	; 254
    1a6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a70:	24 17       	cp	r18, r20
    1a72:	35 07       	cpc	r19, r21
    1a74:	48 f0       	brcs	.+18     	; 0x1a88 <malloc+0x124>
    1a76:	4e 0f       	add	r20, r30
    1a78:	5f 1f       	adc	r21, r31
    1a7a:	50 93 ba 01 	sts	0x01BA, r21
    1a7e:	40 93 b9 01 	sts	0x01B9, r20
    1a82:	81 93       	st	Z+, r24
    1a84:	91 93       	st	Z+, r25
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <malloc+0x128>
    1a88:	e0 e0       	ldi	r30, 0x00	; 0
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	cf 01       	movw	r24, r30
    1a8e:	df 91       	pop	r29
    1a90:	cf 91       	pop	r28
    1a92:	08 95       	ret

00001a94 <free>:
    1a94:	cf 93       	push	r28
    1a96:	df 93       	push	r29
    1a98:	00 97       	sbiw	r24, 0x00	; 0
    1a9a:	09 f4       	brne	.+2      	; 0x1a9e <free+0xa>
    1a9c:	87 c0       	rjmp	.+270    	; 0x1bac <free+0x118>
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	32 97       	sbiw	r30, 0x02	; 2
    1aa2:	13 82       	std	Z+3, r1	; 0x03
    1aa4:	12 82       	std	Z+2, r1	; 0x02
    1aa6:	c0 91 bb 01 	lds	r28, 0x01BB
    1aaa:	d0 91 bc 01 	lds	r29, 0x01BC
    1aae:	20 97       	sbiw	r28, 0x00	; 0
    1ab0:	81 f4       	brne	.+32     	; 0x1ad2 <free+0x3e>
    1ab2:	20 81       	ld	r18, Z
    1ab4:	31 81       	ldd	r19, Z+1	; 0x01
    1ab6:	28 0f       	add	r18, r24
    1ab8:	39 1f       	adc	r19, r25
    1aba:	80 91 b9 01 	lds	r24, 0x01B9
    1abe:	90 91 ba 01 	lds	r25, 0x01BA
    1ac2:	82 17       	cp	r24, r18
    1ac4:	93 07       	cpc	r25, r19
    1ac6:	79 f5       	brne	.+94     	; 0x1b26 <free+0x92>
    1ac8:	f0 93 ba 01 	sts	0x01BA, r31
    1acc:	e0 93 b9 01 	sts	0x01B9, r30
    1ad0:	6d c0       	rjmp	.+218    	; 0x1bac <free+0x118>
    1ad2:	de 01       	movw	r26, r28
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	ae 17       	cp	r26, r30
    1ada:	bf 07       	cpc	r27, r31
    1adc:	50 f4       	brcc	.+20     	; 0x1af2 <free+0x5e>
    1ade:	12 96       	adiw	r26, 0x02	; 2
    1ae0:	4d 91       	ld	r20, X+
    1ae2:	5c 91       	ld	r21, X
    1ae4:	13 97       	sbiw	r26, 0x03	; 3
    1ae6:	9d 01       	movw	r18, r26
    1ae8:	41 15       	cp	r20, r1
    1aea:	51 05       	cpc	r21, r1
    1aec:	09 f1       	breq	.+66     	; 0x1b30 <free+0x9c>
    1aee:	da 01       	movw	r26, r20
    1af0:	f3 cf       	rjmp	.-26     	; 0x1ad8 <free+0x44>
    1af2:	b3 83       	std	Z+3, r27	; 0x03
    1af4:	a2 83       	std	Z+2, r26	; 0x02
    1af6:	40 81       	ld	r20, Z
    1af8:	51 81       	ldd	r21, Z+1	; 0x01
    1afa:	84 0f       	add	r24, r20
    1afc:	95 1f       	adc	r25, r21
    1afe:	8a 17       	cp	r24, r26
    1b00:	9b 07       	cpc	r25, r27
    1b02:	71 f4       	brne	.+28     	; 0x1b20 <free+0x8c>
    1b04:	8d 91       	ld	r24, X+
    1b06:	9c 91       	ld	r25, X
    1b08:	11 97       	sbiw	r26, 0x01	; 1
    1b0a:	84 0f       	add	r24, r20
    1b0c:	95 1f       	adc	r25, r21
    1b0e:	02 96       	adiw	r24, 0x02	; 2
    1b10:	91 83       	std	Z+1, r25	; 0x01
    1b12:	80 83       	st	Z, r24
    1b14:	12 96       	adiw	r26, 0x02	; 2
    1b16:	8d 91       	ld	r24, X+
    1b18:	9c 91       	ld	r25, X
    1b1a:	13 97       	sbiw	r26, 0x03	; 3
    1b1c:	93 83       	std	Z+3, r25	; 0x03
    1b1e:	82 83       	std	Z+2, r24	; 0x02
    1b20:	21 15       	cp	r18, r1
    1b22:	31 05       	cpc	r19, r1
    1b24:	29 f4       	brne	.+10     	; 0x1b30 <free+0x9c>
    1b26:	f0 93 bc 01 	sts	0x01BC, r31
    1b2a:	e0 93 bb 01 	sts	0x01BB, r30
    1b2e:	3e c0       	rjmp	.+124    	; 0x1bac <free+0x118>
    1b30:	d9 01       	movw	r26, r18
    1b32:	13 96       	adiw	r26, 0x03	; 3
    1b34:	fc 93       	st	X, r31
    1b36:	ee 93       	st	-X, r30
    1b38:	12 97       	sbiw	r26, 0x02	; 2
    1b3a:	4d 91       	ld	r20, X+
    1b3c:	5d 91       	ld	r21, X+
    1b3e:	a4 0f       	add	r26, r20
    1b40:	b5 1f       	adc	r27, r21
    1b42:	ea 17       	cp	r30, r26
    1b44:	fb 07       	cpc	r31, r27
    1b46:	79 f4       	brne	.+30     	; 0x1b66 <free+0xd2>
    1b48:	80 81       	ld	r24, Z
    1b4a:	91 81       	ldd	r25, Z+1	; 0x01
    1b4c:	84 0f       	add	r24, r20
    1b4e:	95 1f       	adc	r25, r21
    1b50:	02 96       	adiw	r24, 0x02	; 2
    1b52:	d9 01       	movw	r26, r18
    1b54:	11 96       	adiw	r26, 0x01	; 1
    1b56:	9c 93       	st	X, r25
    1b58:	8e 93       	st	-X, r24
    1b5a:	82 81       	ldd	r24, Z+2	; 0x02
    1b5c:	93 81       	ldd	r25, Z+3	; 0x03
    1b5e:	13 96       	adiw	r26, 0x03	; 3
    1b60:	9c 93       	st	X, r25
    1b62:	8e 93       	st	-X, r24
    1b64:	12 97       	sbiw	r26, 0x02	; 2
    1b66:	e0 e0       	ldi	r30, 0x00	; 0
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	19 f0       	breq	.+6      	; 0x1b78 <free+0xe4>
    1b72:	fe 01       	movw	r30, r28
    1b74:	ec 01       	movw	r28, r24
    1b76:	f9 cf       	rjmp	.-14     	; 0x1b6a <free+0xd6>
    1b78:	ce 01       	movw	r24, r28
    1b7a:	02 96       	adiw	r24, 0x02	; 2
    1b7c:	28 81       	ld	r18, Y
    1b7e:	39 81       	ldd	r19, Y+1	; 0x01
    1b80:	82 0f       	add	r24, r18
    1b82:	93 1f       	adc	r25, r19
    1b84:	20 91 b9 01 	lds	r18, 0x01B9
    1b88:	30 91 ba 01 	lds	r19, 0x01BA
    1b8c:	28 17       	cp	r18, r24
    1b8e:	39 07       	cpc	r19, r25
    1b90:	69 f4       	brne	.+26     	; 0x1bac <free+0x118>
    1b92:	30 97       	sbiw	r30, 0x00	; 0
    1b94:	29 f4       	brne	.+10     	; 0x1ba0 <free+0x10c>
    1b96:	10 92 bc 01 	sts	0x01BC, r1
    1b9a:	10 92 bb 01 	sts	0x01BB, r1
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <free+0x110>
    1ba0:	13 82       	std	Z+3, r1	; 0x03
    1ba2:	12 82       	std	Z+2, r1	; 0x02
    1ba4:	d0 93 ba 01 	sts	0x01BA, r29
    1ba8:	c0 93 b9 01 	sts	0x01B9, r28
    1bac:	df 91       	pop	r29
    1bae:	cf 91       	pop	r28
    1bb0:	08 95       	ret

00001bb2 <strnlen_P>:
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	05 90       	lpm	r0, Z+
    1bb6:	61 50       	subi	r22, 0x01	; 1
    1bb8:	70 40       	sbci	r23, 0x00	; 0
    1bba:	01 10       	cpse	r0, r1
    1bbc:	d8 f7       	brcc	.-10     	; 0x1bb4 <strnlen_P+0x2>
    1bbe:	80 95       	com	r24
    1bc0:	90 95       	com	r25
    1bc2:	8e 0f       	add	r24, r30
    1bc4:	9f 1f       	adc	r25, r31
    1bc6:	08 95       	ret

00001bc8 <memset>:
    1bc8:	dc 01       	movw	r26, r24
    1bca:	01 c0       	rjmp	.+2      	; 0x1bce <memset+0x6>
    1bcc:	6d 93       	st	X+, r22
    1bce:	41 50       	subi	r20, 0x01	; 1
    1bd0:	50 40       	sbci	r21, 0x00	; 0
    1bd2:	e0 f7       	brcc	.-8      	; 0x1bcc <memset+0x4>
    1bd4:	08 95       	ret

00001bd6 <strnlen>:
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	61 50       	subi	r22, 0x01	; 1
    1bda:	70 40       	sbci	r23, 0x00	; 0
    1bdc:	01 90       	ld	r0, Z+
    1bde:	01 10       	cpse	r0, r1
    1be0:	d8 f7       	brcc	.-10     	; 0x1bd8 <strnlen+0x2>
    1be2:	80 95       	com	r24
    1be4:	90 95       	com	r25
    1be6:	8e 0f       	add	r24, r30
    1be8:	9f 1f       	adc	r25, r31
    1bea:	08 95       	ret

00001bec <fputc>:
    1bec:	0f 93       	push	r16
    1bee:	1f 93       	push	r17
    1bf0:	cf 93       	push	r28
    1bf2:	df 93       	push	r29
    1bf4:	18 2f       	mov	r17, r24
    1bf6:	09 2f       	mov	r16, r25
    1bf8:	eb 01       	movw	r28, r22
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	81 fd       	sbrc	r24, 1
    1bfe:	03 c0       	rjmp	.+6      	; 0x1c06 <fputc+0x1a>
    1c00:	8f ef       	ldi	r24, 0xFF	; 255
    1c02:	9f ef       	ldi	r25, 0xFF	; 255
    1c04:	20 c0       	rjmp	.+64     	; 0x1c46 <fputc+0x5a>
    1c06:	82 ff       	sbrs	r24, 2
    1c08:	10 c0       	rjmp	.+32     	; 0x1c2a <fputc+0x3e>
    1c0a:	4e 81       	ldd	r20, Y+6	; 0x06
    1c0c:	5f 81       	ldd	r21, Y+7	; 0x07
    1c0e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c10:	3d 81       	ldd	r19, Y+5	; 0x05
    1c12:	42 17       	cp	r20, r18
    1c14:	53 07       	cpc	r21, r19
    1c16:	7c f4       	brge	.+30     	; 0x1c36 <fputc+0x4a>
    1c18:	e8 81       	ld	r30, Y
    1c1a:	f9 81       	ldd	r31, Y+1	; 0x01
    1c1c:	9f 01       	movw	r18, r30
    1c1e:	2f 5f       	subi	r18, 0xFF	; 255
    1c20:	3f 4f       	sbci	r19, 0xFF	; 255
    1c22:	39 83       	std	Y+1, r19	; 0x01
    1c24:	28 83       	st	Y, r18
    1c26:	10 83       	st	Z, r17
    1c28:	06 c0       	rjmp	.+12     	; 0x1c36 <fputc+0x4a>
    1c2a:	e8 85       	ldd	r30, Y+8	; 0x08
    1c2c:	f9 85       	ldd	r31, Y+9	; 0x09
    1c2e:	81 2f       	mov	r24, r17
    1c30:	09 95       	icall
    1c32:	89 2b       	or	r24, r25
    1c34:	29 f7       	brne	.-54     	; 0x1c00 <fputc+0x14>
    1c36:	2e 81       	ldd	r18, Y+6	; 0x06
    1c38:	3f 81       	ldd	r19, Y+7	; 0x07
    1c3a:	2f 5f       	subi	r18, 0xFF	; 255
    1c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3e:	3f 83       	std	Y+7, r19	; 0x07
    1c40:	2e 83       	std	Y+6, r18	; 0x06
    1c42:	81 2f       	mov	r24, r17
    1c44:	90 2f       	mov	r25, r16
    1c46:	df 91       	pop	r29
    1c48:	cf 91       	pop	r28
    1c4a:	1f 91       	pop	r17
    1c4c:	0f 91       	pop	r16
    1c4e:	08 95       	ret

00001c50 <__ultoa_invert>:
    1c50:	fa 01       	movw	r30, r20
    1c52:	aa 27       	eor	r26, r26
    1c54:	28 30       	cpi	r18, 0x08	; 8
    1c56:	51 f1       	breq	.+84     	; 0x1cac <__ultoa_invert+0x5c>
    1c58:	20 31       	cpi	r18, 0x10	; 16
    1c5a:	81 f1       	breq	.+96     	; 0x1cbc <__ultoa_invert+0x6c>
    1c5c:	e8 94       	clt
    1c5e:	6f 93       	push	r22
    1c60:	6e 7f       	andi	r22, 0xFE	; 254
    1c62:	6e 5f       	subi	r22, 0xFE	; 254
    1c64:	7f 4f       	sbci	r23, 0xFF	; 255
    1c66:	8f 4f       	sbci	r24, 0xFF	; 255
    1c68:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6a:	af 4f       	sbci	r26, 0xFF	; 255
    1c6c:	b1 e0       	ldi	r27, 0x01	; 1
    1c6e:	3e d0       	rcall	.+124    	; 0x1cec <__ultoa_invert+0x9c>
    1c70:	b4 e0       	ldi	r27, 0x04	; 4
    1c72:	3c d0       	rcall	.+120    	; 0x1cec <__ultoa_invert+0x9c>
    1c74:	67 0f       	add	r22, r23
    1c76:	78 1f       	adc	r23, r24
    1c78:	89 1f       	adc	r24, r25
    1c7a:	9a 1f       	adc	r25, r26
    1c7c:	a1 1d       	adc	r26, r1
    1c7e:	68 0f       	add	r22, r24
    1c80:	79 1f       	adc	r23, r25
    1c82:	8a 1f       	adc	r24, r26
    1c84:	91 1d       	adc	r25, r1
    1c86:	a1 1d       	adc	r26, r1
    1c88:	6a 0f       	add	r22, r26
    1c8a:	71 1d       	adc	r23, r1
    1c8c:	81 1d       	adc	r24, r1
    1c8e:	91 1d       	adc	r25, r1
    1c90:	a1 1d       	adc	r26, r1
    1c92:	20 d0       	rcall	.+64     	; 0x1cd4 <__ultoa_invert+0x84>
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <__ultoa_invert+0x48>
    1c96:	68 94       	set
    1c98:	3f 91       	pop	r19
    1c9a:	2a e0       	ldi	r18, 0x0A	; 10
    1c9c:	26 9f       	mul	r18, r22
    1c9e:	11 24       	eor	r1, r1
    1ca0:	30 19       	sub	r19, r0
    1ca2:	30 5d       	subi	r19, 0xD0	; 208
    1ca4:	31 93       	st	Z+, r19
    1ca6:	de f6       	brtc	.-74     	; 0x1c5e <__ultoa_invert+0xe>
    1ca8:	cf 01       	movw	r24, r30
    1caa:	08 95       	ret
    1cac:	46 2f       	mov	r20, r22
    1cae:	47 70       	andi	r20, 0x07	; 7
    1cb0:	40 5d       	subi	r20, 0xD0	; 208
    1cb2:	41 93       	st	Z+, r20
    1cb4:	b3 e0       	ldi	r27, 0x03	; 3
    1cb6:	0f d0       	rcall	.+30     	; 0x1cd6 <__ultoa_invert+0x86>
    1cb8:	c9 f7       	brne	.-14     	; 0x1cac <__ultoa_invert+0x5c>
    1cba:	f6 cf       	rjmp	.-20     	; 0x1ca8 <__ultoa_invert+0x58>
    1cbc:	46 2f       	mov	r20, r22
    1cbe:	4f 70       	andi	r20, 0x0F	; 15
    1cc0:	40 5d       	subi	r20, 0xD0	; 208
    1cc2:	4a 33       	cpi	r20, 0x3A	; 58
    1cc4:	18 f0       	brcs	.+6      	; 0x1ccc <__ultoa_invert+0x7c>
    1cc6:	49 5d       	subi	r20, 0xD9	; 217
    1cc8:	31 fd       	sbrc	r19, 1
    1cca:	40 52       	subi	r20, 0x20	; 32
    1ccc:	41 93       	st	Z+, r20
    1cce:	02 d0       	rcall	.+4      	; 0x1cd4 <__ultoa_invert+0x84>
    1cd0:	a9 f7       	brne	.-22     	; 0x1cbc <__ultoa_invert+0x6c>
    1cd2:	ea cf       	rjmp	.-44     	; 0x1ca8 <__ultoa_invert+0x58>
    1cd4:	b4 e0       	ldi	r27, 0x04	; 4
    1cd6:	a6 95       	lsr	r26
    1cd8:	97 95       	ror	r25
    1cda:	87 95       	ror	r24
    1cdc:	77 95       	ror	r23
    1cde:	67 95       	ror	r22
    1ce0:	ba 95       	dec	r27
    1ce2:	c9 f7       	brne	.-14     	; 0x1cd6 <__ultoa_invert+0x86>
    1ce4:	00 97       	sbiw	r24, 0x00	; 0
    1ce6:	61 05       	cpc	r22, r1
    1ce8:	71 05       	cpc	r23, r1
    1cea:	08 95       	ret
    1cec:	9b 01       	movw	r18, r22
    1cee:	ac 01       	movw	r20, r24
    1cf0:	0a 2e       	mov	r0, r26
    1cf2:	06 94       	lsr	r0
    1cf4:	57 95       	ror	r21
    1cf6:	47 95       	ror	r20
    1cf8:	37 95       	ror	r19
    1cfa:	27 95       	ror	r18
    1cfc:	ba 95       	dec	r27
    1cfe:	c9 f7       	brne	.-14     	; 0x1cf2 <__ultoa_invert+0xa2>
    1d00:	62 0f       	add	r22, r18
    1d02:	73 1f       	adc	r23, r19
    1d04:	84 1f       	adc	r24, r20
    1d06:	95 1f       	adc	r25, r21
    1d08:	a0 1d       	adc	r26, r0
    1d0a:	08 95       	ret

00001d0c <__prologue_saves__>:
    1d0c:	2f 92       	push	r2
    1d0e:	3f 92       	push	r3
    1d10:	4f 92       	push	r4
    1d12:	5f 92       	push	r5
    1d14:	6f 92       	push	r6
    1d16:	7f 92       	push	r7
    1d18:	8f 92       	push	r8
    1d1a:	9f 92       	push	r9
    1d1c:	af 92       	push	r10
    1d1e:	bf 92       	push	r11
    1d20:	cf 92       	push	r12
    1d22:	df 92       	push	r13
    1d24:	ef 92       	push	r14
    1d26:	ff 92       	push	r15
    1d28:	0f 93       	push	r16
    1d2a:	1f 93       	push	r17
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
    1d34:	ca 1b       	sub	r28, r26
    1d36:	db 0b       	sbc	r29, r27
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	09 94       	ijmp

00001d44 <__epilogue_restores__>:
    1d44:	2a 88       	ldd	r2, Y+18	; 0x12
    1d46:	39 88       	ldd	r3, Y+17	; 0x11
    1d48:	48 88       	ldd	r4, Y+16	; 0x10
    1d4a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d4c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d4e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d50:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d52:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d54:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d56:	b9 84       	ldd	r11, Y+9	; 0x09
    1d58:	c8 84       	ldd	r12, Y+8	; 0x08
    1d5a:	df 80       	ldd	r13, Y+7	; 0x07
    1d5c:	ee 80       	ldd	r14, Y+6	; 0x06
    1d5e:	fd 80       	ldd	r15, Y+5	; 0x05
    1d60:	0c 81       	ldd	r16, Y+4	; 0x04
    1d62:	1b 81       	ldd	r17, Y+3	; 0x03
    1d64:	aa 81       	ldd	r26, Y+2	; 0x02
    1d66:	b9 81       	ldd	r27, Y+1	; 0x01
    1d68:	ce 0f       	add	r28, r30
    1d6a:	d1 1d       	adc	r29, r1
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	de bf       	out	0x3e, r29	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	ed 01       	movw	r28, r26
    1d78:	08 95       	ret

00001d7a <_exit>:
    1d7a:	f8 94       	cli

00001d7c <__stop_program>:
    1d7c:	ff cf       	rjmp	.-2      	; 0x1d7c <__stop_program>
