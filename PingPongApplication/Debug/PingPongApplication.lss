
PingPongApplication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000026e  00800100  00002678  0000270c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002678  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080036e  0080036e  0000297a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000297a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000378  00000000  00000000  000029d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000044bc  00000000  00000000  00002d4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001268  00000000  00000000  0000720a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000016d7  00000000  00000000  00008472  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000aa0  00000000  00000000  00009b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a4f  00000000  00000000  0000a5ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000029fc  00000000  00000000  0000b03b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002c0  00000000  00000000  0000da37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 01 	jmp	0x266	; 0x266 <__ctors_end>
       4:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
       8:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
       c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      10:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      14:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      18:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      1c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      20:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      24:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      28:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      2c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      30:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      34:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__vector_13>
      38:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      3c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      40:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      44:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      48:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      4c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      50:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      54:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      58:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      5c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      60:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      64:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      68:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      6c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      70:	f4 0d       	add	r31, r4
      72:	f9 0d       	add	r31, r9
      74:	fe 0d       	add	r31, r14
      76:	06 0e       	add	r0, r22
      78:	0f 0e       	add	r0, r31
      7a:	18 0e       	add	r1, r24
      7c:	21 0e       	add	r2, r17
      7e:	2f 0e       	add	r2, r31
      80:	2a 0e       	add	r2, r26
      82:	34 0e       	add	r3, r20
      84:	39 0e       	add	r3, r25
      86:	3e 0e       	add	r3, r30
      88:	43 0e       	add	r4, r19

0000008a <__trampolines_end>:
      8a:	00 00       	nop
      8c:	00 00       	nop
      8e:	00 00       	nop
      90:	00 5e       	subi	r16, 0xE0	; 224
      92:	00 00       	nop
      94:	00 0e       	add	r0, r16
      96:	00 0e       	add	r0, r16
      98:	00 28       	or	r0, r0
      9a:	7c 28       	or	r7, r12
      9c:	7c 28       	or	r7, r12
      9e:	08 54       	subi	r16, 0x48	; 72
      a0:	7c 54       	subi	r23, 0x4C	; 76
      a2:	20 26       	eor	r2, r16
      a4:	10 08       	sbc	r1, r0
      a6:	64 00       	.word	0x0064	; ????
      a8:	28 54       	subi	r18, 0x48	; 72
      aa:	28 40       	sbci	r18, 0x08	; 8
      ac:	00 00       	nop
      ae:	00 0e       	add	r0, r16
      b0:	00 00       	nop
      b2:	00 3c       	cpi	r16, 0xC0	; 192
      b4:	42 00       	.word	0x0042	; ????
      b6:	00 00       	nop
      b8:	42 3c       	cpi	r20, 0xC2	; 194
      ba:	00 00       	nop
      bc:	00 54       	subi	r16, 0x40	; 64
      be:	38 54       	subi	r19, 0x48	; 72
      c0:	00 10       	cpse	r0, r0
      c2:	10 7c       	andi	r17, 0xC0	; 192
      c4:	10 10       	cpse	r1, r0
      c6:	00 80       	ld	r0, Z
      c8:	60 20       	and	r6, r0
      ca:	00 10       	cpse	r0, r0
      cc:	10 10       	cpse	r1, r0
      ce:	10 00       	.word	0x0010	; ????
      d0:	00 60       	ori	r16, 0x00	; 0
      d2:	60 00       	.word	0x0060	; ????
      d4:	00 20       	and	r0, r0
      d6:	10 08       	sbc	r1, r0
      d8:	04 00       	.word	0x0004	; ????
      da:	00 3c       	cpi	r16, 0xC0	; 192
      dc:	42 3c       	cpi	r20, 0xC2	; 194
      de:	00 00       	nop
      e0:	44 7e       	andi	r20, 0xE4	; 228
      e2:	40 00       	.word	0x0040	; ????
      e4:	44 62       	ori	r20, 0x24	; 36
      e6:	52 4c       	sbci	r21, 0xC2	; 194
      e8:	00 22       	and	r0, r16
      ea:	4a 4a       	sbci	r20, 0xAA	; 170
      ec:	36 00       	.word	0x0036	; ????
      ee:	18 14       	cp	r1, r8
      f0:	7e 10       	cpse	r7, r14
      f2:	00 2e       	mov	r0, r16
      f4:	4a 4a       	sbci	r20, 0xAA	; 170
      f6:	32 00       	.word	0x0032	; ????
      f8:	3c 4a       	sbci	r19, 0xAC	; 172
      fa:	4a 30       	cpi	r20, 0x0A	; 10
      fc:	00 02       	muls	r16, r16
      fe:	62 1a       	sub	r6, r18
     100:	06 00       	.word	0x0006	; ????
     102:	34 4a       	sbci	r19, 0xA4	; 164
     104:	4a 34       	cpi	r20, 0x4A	; 74
     106:	00 0c       	add	r0, r0
     108:	52 52       	subi	r21, 0x22	; 34
     10a:	3c 00       	.word	0x003c	; ????
     10c:	00 6c       	ori	r16, 0xC0	; 192
     10e:	6c 00       	.word	0x006c	; ????
     110:	00 80       	ld	r0, Z
     112:	6c 2c       	mov	r6, r12
     114:	00 00       	nop
     116:	00 10       	cpse	r0, r0
     118:	28 44       	sbci	r18, 0x48	; 72
     11a:	00 28       	or	r0, r0
     11c:	28 28       	or	r2, r8
     11e:	28 00       	.word	0x0028	; ????
     120:	00 44       	sbci	r16, 0x40	; 64
     122:	28 10       	cpse	r2, r8
     124:	00 00       	nop
     126:	04 52       	subi	r16, 0x24	; 36
     128:	0c 00       	.word	0x000c	; ????
     12a:	3c 42       	sbci	r19, 0x2C	; 44
     12c:	5a 1c       	adc	r5, r10
     12e:	00 7c       	andi	r16, 0xC0	; 192
     130:	12 12       	cpse	r1, r18
     132:	7c 00       	.word	0x007c	; ????
     134:	7e 4a       	sbci	r23, 0xAE	; 174
     136:	4a 34       	cpi	r20, 0x4A	; 74
     138:	00 3c       	cpi	r16, 0xC0	; 192
     13a:	42 42       	sbci	r20, 0x22	; 34
     13c:	24 00       	.word	0x0024	; ????
     13e:	7e 42       	sbci	r23, 0x2E	; 46
     140:	42 3c       	cpi	r20, 0xC2	; 194
     142:	00 7e       	andi	r16, 0xE0	; 224
     144:	4a 4a       	sbci	r20, 0xAA	; 170
     146:	42 00       	.word	0x0042	; ????
     148:	7e 0a       	sbc	r7, r30
     14a:	0a 02       	muls	r16, r26
     14c:	00 3c       	cpi	r16, 0xC0	; 192
     14e:	42 52       	subi	r20, 0x22	; 34
     150:	74 00       	.word	0x0074	; ????
     152:	7e 08       	sbc	r7, r14
     154:	08 7e       	andi	r16, 0xE8	; 232
     156:	00 00       	nop
     158:	42 7e       	andi	r20, 0xE2	; 226
     15a:	42 00       	.word	0x0042	; ????
     15c:	20 40       	sbci	r18, 0x00	; 0
     15e:	40 3e       	cpi	r20, 0xE0	; 224
     160:	00 7e       	andi	r16, 0xE0	; 224
     162:	18 24       	eor	r1, r8
     164:	42 00       	.word	0x0042	; ????
     166:	7e 40       	sbci	r23, 0x0E	; 14
     168:	40 40       	sbci	r20, 0x00	; 0
     16a:	00 7e       	andi	r16, 0xE0	; 224
     16c:	0c 0c       	add	r0, r12
     16e:	7e 00       	.word	0x007e	; ????
     170:	7e 0c       	add	r7, r14
     172:	30 7e       	andi	r19, 0xE0	; 224
     174:	00 3c       	cpi	r16, 0xC0	; 192
     176:	42 42       	sbci	r20, 0x22	; 34
     178:	3c 00       	.word	0x003c	; ????
     17a:	7e 12       	cpse	r7, r30
     17c:	12 0c       	add	r1, r2
     17e:	00 3c       	cpi	r16, 0xC0	; 192
     180:	62 42       	sbci	r22, 0x22	; 34
     182:	bc 00       	.word	0x00bc	; ????
     184:	7e 12       	cpse	r7, r30
     186:	32 4c       	sbci	r19, 0xC2	; 194
     188:	00 24       	eor	r0, r0
     18a:	4a 52       	subi	r20, 0x2A	; 42
     18c:	24 00       	.word	0x0024	; ????
     18e:	00 02       	muls	r16, r16
     190:	7e 02       	muls	r23, r30
     192:	00 3e       	cpi	r16, 0xE0	; 224
     194:	40 40       	sbci	r20, 0x00	; 0
     196:	3e 00       	.word	0x003e	; ????
     198:	1e 60       	ori	r17, 0x0E	; 14
     19a:	60 1e       	adc	r6, r16
     19c:	00 7e       	andi	r16, 0xE0	; 224
     19e:	30 30       	cpi	r19, 0x00	; 0
     1a0:	7e 00       	.word	0x007e	; ????
     1a2:	66 18       	sub	r6, r6
     1a4:	18 66       	ori	r17, 0x68	; 104
     1a6:	00 00       	nop
     1a8:	0e 70       	andi	r16, 0x0E	; 14
     1aa:	0e 00       	.word	0x000e	; ????
     1ac:	62 52       	subi	r22, 0x22	; 34
     1ae:	4a 46       	sbci	r20, 0x6A	; 106
     1b0:	00 00       	nop
     1b2:	7e 42       	sbci	r23, 0x2E	; 46
     1b4:	42 00       	.word	0x0042	; ????
     1b6:	04 08       	sbc	r0, r4
     1b8:	10 20       	and	r1, r0
     1ba:	00 00       	nop
     1bc:	42 42       	sbci	r20, 0x22	; 34
     1be:	7e 00       	.word	0x007e	; ????
     1c0:	00 04       	cpc	r0, r0
     1c2:	02 04       	cpc	r0, r2
     1c4:	00 40       	sbci	r16, 0x00	; 0
     1c6:	40 40       	sbci	r20, 0x00	; 0
     1c8:	40 00       	.word	0x0040	; ????
     1ca:	00 02       	muls	r16, r16
     1cc:	04 00       	.word	0x0004	; ????
     1ce:	00 30       	cpi	r16, 0x00	; 0
     1d0:	48 28       	or	r4, r8
     1d2:	78 00       	.word	0x0078	; ????
     1d4:	7e 48       	sbci	r23, 0x8E	; 142
     1d6:	48 30       	cpi	r20, 0x08	; 8
     1d8:	00 30       	cpi	r16, 0x00	; 0
     1da:	48 48       	sbci	r20, 0x88	; 136
     1dc:	00 00       	nop
     1de:	30 48       	sbci	r19, 0x80	; 128
     1e0:	48 7e       	andi	r20, 0xE8	; 232
     1e2:	00 30       	cpi	r16, 0x00	; 0
     1e4:	68 58       	subi	r22, 0x88	; 136
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	10 7c       	andi	r17, 0xC0	; 192
     1ea:	12 04       	cpc	r1, r2
     1ec:	00 50       	subi	r16, 0x00	; 0
     1ee:	a8 a8       	ldd	r10, Y+48	; 0x30
     1f0:	98 00       	.word	0x0098	; ????
     1f2:	7e 08       	sbc	r7, r14
     1f4:	08 70       	andi	r16, 0x08	; 8
     1f6:	00 00       	nop
     1f8:	48 7a       	andi	r20, 0xA8	; 168
     1fa:	40 00       	.word	0x0040	; ????
     1fc:	00 40       	sbci	r16, 0x00	; 0
     1fe:	80 7a       	andi	r24, 0xA0	; 160
     200:	00 7e       	andi	r16, 0xE0	; 224
     202:	10 28       	or	r1, r0
     204:	40 00       	.word	0x0040	; ????
     206:	00 42       	sbci	r16, 0x20	; 32
     208:	7e 40       	sbci	r23, 0x0E	; 14
     20a:	00 78       	andi	r16, 0x80	; 128
     20c:	10 18       	sub	r1, r0
     20e:	70 00       	.word	0x0070	; ????
     210:	78 08       	sbc	r7, r8
     212:	08 70       	andi	r16, 0x08	; 8
     214:	00 30       	cpi	r16, 0x00	; 0
     216:	48 48       	sbci	r20, 0x88	; 136
     218:	30 00       	.word	0x0030	; ????
     21a:	f8 48       	sbci	r31, 0x88	; 136
     21c:	48 30       	cpi	r20, 0x08	; 8
     21e:	00 30       	cpi	r16, 0x00	; 0
     220:	48 48       	sbci	r20, 0x88	; 136
     222:	f8 00       	.word	0x00f8	; ????
     224:	78 08       	sbc	r7, r8
     226:	08 10       	cpse	r0, r8
     228:	00 50       	subi	r16, 0x00	; 0
     22a:	58 68       	ori	r21, 0x88	; 136
     22c:	28 00       	.word	0x0028	; ????
     22e:	08 3e       	cpi	r16, 0xE8	; 232
     230:	48 40       	sbci	r20, 0x08	; 8
     232:	00 38       	cpi	r16, 0x80	; 128
     234:	40 40       	sbci	r20, 0x00	; 0
     236:	78 00       	.word	0x0078	; ????
     238:	00 38       	cpi	r16, 0x80	; 128
     23a:	40 38       	cpi	r20, 0x80	; 128
     23c:	00 78       	andi	r16, 0x80	; 128
     23e:	60 60       	ori	r22, 0x00	; 0
     240:	78 00       	.word	0x0078	; ????
     242:	48 30       	cpi	r20, 0x08	; 8
     244:	30 48       	sbci	r19, 0x80	; 128
     246:	00 18       	sub	r0, r0
     248:	a0 40       	sbci	r26, 0x00	; 0
     24a:	38 00       	.word	0x0038	; ????
     24c:	48 68       	ori	r20, 0x88	; 136
     24e:	58 48       	sbci	r21, 0x88	; 136
     250:	00 00       	nop
     252:	08 3c       	cpi	r16, 0xC8	; 200
     254:	42 00       	.word	0x0042	; ????
     256:	00 00       	nop
     258:	7e 00       	.word	0x007e	; ????
     25a:	00 00       	nop
     25c:	42 3c       	cpi	r20, 0xC2	; 194
     25e:	08 00       	.word	0x0008	; ????
     260:	04 02       	muls	r16, r20
     262:	04 02       	muls	r16, r20
	...

00000266 <__ctors_end>:
     266:	11 24       	eor	r1, r1
     268:	1f be       	out	0x3f, r1	; 63
     26a:	cf ef       	ldi	r28, 0xFF	; 255
     26c:	d4 e0       	ldi	r29, 0x04	; 4
     26e:	de bf       	out	0x3e, r29	; 62
     270:	cd bf       	out	0x3d, r28	; 61

00000272 <__do_copy_data>:
     272:	13 e0       	ldi	r17, 0x03	; 3
     274:	a0 e0       	ldi	r26, 0x00	; 0
     276:	b1 e0       	ldi	r27, 0x01	; 1
     278:	e8 e7       	ldi	r30, 0x78	; 120
     27a:	f6 e2       	ldi	r31, 0x26	; 38
     27c:	02 c0       	rjmp	.+4      	; 0x282 <__do_copy_data+0x10>
     27e:	05 90       	lpm	r0, Z+
     280:	0d 92       	st	X+, r0
     282:	ae 36       	cpi	r26, 0x6E	; 110
     284:	b1 07       	cpc	r27, r17
     286:	d9 f7       	brne	.-10     	; 0x27e <__do_copy_data+0xc>

00000288 <__do_clear_bss>:
     288:	23 e0       	ldi	r18, 0x03	; 3
     28a:	ae e6       	ldi	r26, 0x6E	; 110
     28c:	b3 e0       	ldi	r27, 0x03	; 3
     28e:	01 c0       	rjmp	.+2      	; 0x292 <.do_clear_bss_start>

00000290 <.do_clear_bss_loop>:
     290:	1d 92       	st	X+, r1

00000292 <.do_clear_bss_start>:
     292:	a6 38       	cpi	r26, 0x86	; 134
     294:	b2 07       	cpc	r27, r18
     296:	e1 f7       	brne	.-8      	; 0x290 <.do_clear_bss_loop>
     298:	0e 94 10 07 	call	0xe20	; 0xe20 <main>
     29c:	0c 94 3a 13 	jmp	0x2674	; 0x2674 <_exit>

000002a0 <__bad_interrupt>:
     2a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002a4 <ADC_read>:
****************************************************************************/
uint8_t ADC_read(uint8_t channel)
{
	volatile uint8_t* ext_adc = (uint8_t*) ADC_BASE_ADDR;
	
	*ext_adc = channel;
     2a4:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2a8:	89 ef       	ldi	r24, 0xF9	; 249
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <ADC_read+0x8>
     2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <ADC_read+0xe>
     2b2:	00 00       	nop
	_delay_ms(1);
	return *ext_adc;
     2b4:	80 91 00 14 	lds	r24, 0x1400
     2b8:	08 95       	ret

000002ba <CAN_init>:
* \brief Initialize CAN communication with node 2
*
****************************************************************************/
void CAN_init()
{
	mcp_init();
     2ba:	0e 94 15 03 	call	0x62a	; 0x62a <mcp_init>
	/* Turn off mask/filters, receive any message, rollover enabled */
	mcp_modify_bit(MCP_RXB0CTRL, 0b01100100, 0xFF);
     2be:	4f ef       	ldi	r20, 0xFF	; 255
     2c0:	64 e6       	ldi	r22, 0x64	; 100
     2c2:	80 e6       	ldi	r24, 0x60	; 96
     2c4:	0e 94 3b 03 	call	0x676	; 0x676 <mcp_modify_bit>
	/* Loopback mode enabled */
	mcp_modify_bit(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     2c8:	40 e0       	ldi	r20, 0x00	; 0
     2ca:	60 ee       	ldi	r22, 0xE0	; 224
     2cc:	8f e0       	ldi	r24, 0x0F	; 15
     2ce:	0e 94 3b 03 	call	0x676	; 0x676 <mcp_modify_bit>
     2d2:	08 95       	ret

000002d4 <CAN_send_message>:
*
* \param in message
* \return result of the CAN operation
****************************************************************************/
uint8_t CAN_send_message(CANMessage message)
{
     2d4:	df 92       	push	r13
     2d6:	ef 92       	push	r14
     2d8:	ff 92       	push	r15
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
     2e6:	2a 97       	sbiw	r28, 0x0a	; 10
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	f8 94       	cli
     2ec:	de bf       	out	0x3e, r29	; 62
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	cd bf       	out	0x3d, r28	; 61
     2f2:	09 83       	std	Y+1, r16	; 0x01
     2f4:	e1 2e       	mov	r14, r17
     2f6:	1a 83       	std	Y+2, r17	; 0x02
     2f8:	2b 83       	std	Y+3, r18	; 0x03
     2fa:	3c 83       	std	Y+4, r19	; 0x04
     2fc:	4d 83       	std	Y+5, r20	; 0x05
     2fe:	5e 83       	std	Y+6, r21	; 0x06
     300:	6f 83       	std	Y+7, r22	; 0x07
     302:	78 87       	std	Y+8, r23	; 0x08
     304:	89 87       	std	Y+9, r24	; 0x09
     306:	9a 87       	std	Y+10, r25	; 0x0a
	uint8_t i;
	uint8_t ctrl = mcp_read(MCP_TXB0CTRL);
     308:	80 e3       	ldi	r24, 0x30	; 48
     30a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <mcp_read>
	
	if (test_bit(ctrl, TXREQ))
     30e:	98 2f       	mov	r25, r24
     310:	98 70       	andi	r25, 0x08	; 8
     312:	d9 2e       	mov	r13, r25
     314:	83 fd       	sbrc	r24, 3
     316:	2b c0       	rjmp	.+86     	; 0x36e <CAN_send_message+0x9a>
	{
		return MESSAGE_PENDING;
	}
	/* Use lower 8bits of ID */
	mcp_write_byte(MCP_TXB0SIDL, (uint8_t)(message.ID << 5));
     318:	60 2f       	mov	r22, r16
     31a:	62 95       	swap	r22
     31c:	66 0f       	add	r22, r22
     31e:	60 7e       	andi	r22, 0xE0	; 224
     320:	82 e3       	ldi	r24, 0x32	; 50
     322:	0e 94 27 03 	call	0x64e	; 0x64e <mcp_write_byte>
	mcp_write_byte(MCP_TXB0SIDH, (uint8_t)(message.ID >> 3));
     326:	60 2f       	mov	r22, r16
     328:	66 95       	lsr	r22
     32a:	66 95       	lsr	r22
     32c:	66 95       	lsr	r22
     32e:	81 e3       	ldi	r24, 0x31	; 49
     330:	0e 94 27 03 	call	0x64e	; 0x64e <mcp_write_byte>
	
	mcp_write_byte(MCP_TXB0DLC, (message.length) & 0x0F);
     334:	6e 2d       	mov	r22, r14
     336:	6f 70       	andi	r22, 0x0F	; 15
     338:	85 e3       	ldi	r24, 0x35	; 53
     33a:	0e 94 27 03 	call	0x64e	; 0x64e <mcp_write_byte>
	
	for (i = 0; i < message.length; i++)
     33e:	ee 20       	and	r14, r14
     340:	91 f0       	breq	.+36     	; 0x366 <CAN_send_message+0x92>
     342:	8e 01       	movw	r16, r28
     344:	0d 5f       	subi	r16, 0xFD	; 253
     346:	1f 4f       	sbci	r17, 0xFF	; 255
     348:	e6 e3       	ldi	r30, 0x36	; 54
     34a:	ee 0e       	add	r14, r30
     34c:	0f 2e       	mov	r0, r31
     34e:	f6 e3       	ldi	r31, 0x36	; 54
     350:	ff 2e       	mov	r15, r31
     352:	f0 2d       	mov	r31, r0
	{
		mcp_write_byte(MCP_TXB0D0 + i, message.data_array[i]);
     354:	f8 01       	movw	r30, r16
     356:	61 91       	ld	r22, Z+
     358:	8f 01       	movw	r16, r30
     35a:	8f 2d       	mov	r24, r15
     35c:	0e 94 27 03 	call	0x64e	; 0x64e <mcp_write_byte>
     360:	f3 94       	inc	r15
	mcp_write_byte(MCP_TXB0SIDL, (uint8_t)(message.ID << 5));
	mcp_write_byte(MCP_TXB0SIDH, (uint8_t)(message.ID >> 3));
	
	mcp_write_byte(MCP_TXB0DLC, (message.length) & 0x0F);
	
	for (i = 0; i < message.length; i++)
     362:	fe 10       	cpse	r15, r14
     364:	f7 cf       	rjmp	.-18     	; 0x354 <CAN_send_message+0x80>
	{
		mcp_write_byte(MCP_TXB0D0 + i, message.data_array[i]);
	}
	
	mcp_request_to_send(1);
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	0e 94 55 03 	call	0x6aa	; 0x6aa <mcp_request_to_send>

	return SUCCESS;
     36c:	02 c0       	rjmp	.+4      	; 0x372 <CAN_send_message+0x9e>
	uint8_t i;
	uint8_t ctrl = mcp_read(MCP_TXB0CTRL);
	
	if (test_bit(ctrl, TXREQ))
	{
		return MESSAGE_PENDING;
     36e:	dd 24       	eor	r13, r13
     370:	d3 94       	inc	r13
	}
	
	mcp_request_to_send(1);

	return SUCCESS;
}
     372:	8d 2d       	mov	r24, r13
     374:	2a 96       	adiw	r28, 0x0a	; 10
     376:	0f b6       	in	r0, 0x3f	; 63
     378:	f8 94       	cli
     37a:	de bf       	out	0x3e, r29	; 62
     37c:	0f be       	out	0x3f, r0	; 63
     37e:	cd bf       	out	0x3d, r28	; 61
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	df 90       	pop	r13
     38e:	08 95       	ret

00000390 <CAN_receive_message>:
*
* \param out message
* \return result of the CAN operation
****************************************************************************/
uint8_t CAN_receive_message(CANMessage* message)
{
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	ec 01       	movw	r28, r24
	uint8_t i = 0;
	uint8_t received = mcp_read(MCP_CANINTF) & (0x01);
     398:	8c e2       	ldi	r24, 0x2C	; 44
     39a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <mcp_read>
	if (received)
     39e:	80 ff       	sbrs	r24, 0
     3a0:	2a c0       	rjmp	.+84     	; 0x3f6 <CAN_receive_message+0x66>
	{
		mcp_modify_bit(MCP_CANINTF, 0x01, 0);
     3a2:	40 e0       	ldi	r20, 0x00	; 0
     3a4:	61 e0       	ldi	r22, 0x01	; 1
     3a6:	8c e2       	ldi	r24, 0x2C	; 44
     3a8:	0e 94 3b 03 	call	0x676	; 0x676 <mcp_modify_bit>
		message->ID = (mcp_read(MCP_RXB0SIDH) << 3);
     3ac:	81 e6       	ldi	r24, 0x61	; 97
     3ae:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <mcp_read>
     3b2:	18 2f       	mov	r17, r24
     3b4:	11 0f       	add	r17, r17
     3b6:	11 0f       	add	r17, r17
     3b8:	11 0f       	add	r17, r17
     3ba:	18 83       	st	Y, r17
		message->ID |= (mcp_read(MCP_RXB0SIDL) >> 5);
     3bc:	82 e6       	ldi	r24, 0x62	; 98
     3be:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <mcp_read>
     3c2:	82 95       	swap	r24
     3c4:	86 95       	lsr	r24
     3c6:	87 70       	andi	r24, 0x07	; 7
     3c8:	18 2b       	or	r17, r24
     3ca:	18 83       	st	Y, r17
		
		message->length = mcp_read(MCP_RXB0DLC) & (0x0F);
     3cc:	85 e6       	ldi	r24, 0x65	; 101
     3ce:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <mcp_read>
     3d2:	8f 70       	andi	r24, 0x0F	; 15
     3d4:	89 83       	std	Y+1, r24	; 0x01
		
		for (i = 0; i < message->length; i++)
     3d6:	88 23       	and	r24, r24
     3d8:	81 f0       	breq	.+32     	; 0x3fa <CAN_receive_message+0x6a>
     3da:	10 e0       	ldi	r17, 0x00	; 0
		{
			message->data_array[i] = mcp_read(MCP_RXB0D0 + i);
     3dc:	86 e6       	ldi	r24, 0x66	; 102
     3de:	81 0f       	add	r24, r17
     3e0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <mcp_read>
     3e4:	fe 01       	movw	r30, r28
     3e6:	e1 0f       	add	r30, r17
     3e8:	f1 1d       	adc	r31, r1
     3ea:	82 83       	std	Z+2, r24	; 0x02
		message->ID = (mcp_read(MCP_RXB0SIDH) << 3);
		message->ID |= (mcp_read(MCP_RXB0SIDL) >> 5);
		
		message->length = mcp_read(MCP_RXB0DLC) & (0x0F);
		
		for (i = 0; i < message->length; i++)
     3ec:	1f 5f       	subi	r17, 0xFF	; 255
     3ee:	89 81       	ldd	r24, Y+1	; 0x01
     3f0:	18 17       	cp	r17, r24
     3f2:	a0 f3       	brcs	.-24     	; 0x3dc <CAN_receive_message+0x4c>
     3f4:	04 c0       	rjmp	.+8      	; 0x3fe <CAN_receive_message+0x6e>
			message->data_array[i] = mcp_read(MCP_RXB0D0 + i);
		}
	}
	else
	{
		return NO_NEW_MESSAGE;
     3f6:	82 e0       	ldi	r24, 0x02	; 2
     3f8:	03 c0       	rjmp	.+6      	; 0x400 <CAN_receive_message+0x70>
	}
	
	return SUCCESS;
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	01 c0       	rjmp	.+2      	; 0x400 <CAN_receive_message+0x70>
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	08 95       	ret

00000408 <send_joystick_possition>:
* \param in joystick position
* \param in touchpad data
* \return result of the CAN send operation
****************************************************************************/
uint8_t send_joystick_possition(JoystickPosition joystick_position, TouchpadData touchpad_data)
{
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
     414:	2a 97       	sbiw	r28, 0x0a	; 10
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	f8 94       	cli
     41a:	de bf       	out	0x3e, r29	; 62
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	cd bf       	out	0x3d, r28	; 61
	message.data_array[3] = (uint8_t) (touchpad_data.leftTouchPad);
	
	message.data_array[4] = (uint8_t) (touchpad_data.rightButton);
	message.data_array[5] = (uint8_t) (touchpad_data.leftButton);
	
	return CAN_send_message(message);
     420:	01 e0       	ldi	r16, 0x01	; 1
     422:	16 e0       	ldi	r17, 0x06	; 6
     424:	28 2f       	mov	r18, r24
     426:	39 2f       	mov	r19, r25
     428:	89 85       	ldd	r24, Y+9	; 0x09
     42a:	9a 85       	ldd	r25, Y+10	; 0x0a
     42c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <CAN_send_message>
}
     430:	2a 96       	adiw	r28, 0x0a	; 10
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	f8 94       	cli
     436:	de bf       	out	0x3e, r29	; 62
     438:	0f be       	out	0x3f, r0	; 63
     43a:	cd bf       	out	0x3d, r28	; 61
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	1f 91       	pop	r17
     442:	0f 91       	pop	r16
     444:	08 95       	ret

00000446 <send_game_mode>:
*
* \param in game mode
* \return result of the CAN send operation
****************************************************************************/
uint8_t send_game_mode(GameModes mode)
{
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
     452:	2a 97       	sbiw	r28, 0x0a	; 10
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
	message.ID = 0x02;
	message.length = 1;
	
	message.data_array[0]= (uint8_t) (mode);
	
	return CAN_send_message(message);
     45e:	02 e0       	ldi	r16, 0x02	; 2
     460:	11 e0       	ldi	r17, 0x01	; 1
     462:	28 2f       	mov	r18, r24
     464:	3c 81       	ldd	r19, Y+4	; 0x04
     466:	4d 81       	ldd	r20, Y+5	; 0x05
     468:	5e 81       	ldd	r21, Y+6	; 0x06
     46a:	6f 81       	ldd	r22, Y+7	; 0x07
     46c:	78 85       	ldd	r23, Y+8	; 0x08
     46e:	89 85       	ldd	r24, Y+9	; 0x09
     470:	9a 85       	ldd	r25, Y+10	; 0x0a
     472:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <CAN_send_message>
}
     476:	2a 96       	adiw	r28, 0x0a	; 10
     478:	0f b6       	in	r0, 0x3f	; 63
     47a:	f8 94       	cli
     47c:	de bf       	out	0x3e, r29	; 62
     47e:	0f be       	out	0x3f, r0	; 63
     480:	cd bf       	out	0x3d, r28	; 61
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	1f 91       	pop	r17
     488:	0f 91       	pop	r16
     48a:	08 95       	ret

0000048c <EEPROM_write>:
#include <stdio.h>

void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
     48c:	e1 99       	sbic	0x1c, 1	; 28
     48e:	fe cf       	rjmp	.-4      	; 0x48c <EEPROM_write>
	/* Set up address and data registers */
	EEAR = uiAddress;
     490:	9f bb       	out	0x1f, r25	; 31
     492:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
     494:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
     496:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
     498:	e1 9a       	sbi	0x1c, 1	; 28
     49a:	08 95       	ret

0000049c <EEPROM_read>:
}

uint8_t EEPROM_read(uint16_t uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
     49c:	e1 99       	sbic	0x1c, 1	; 28
     49e:	fe cf       	rjmp	.-4      	; 0x49c <EEPROM_read>
	/* Set up address register */
	EEAR = uiAddress;
     4a0:	9f bb       	out	0x1f, r25	; 31
     4a2:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
     4a4:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     4a6:	8d b3       	in	r24, 0x1d	; 29
     4a8:	08 95       	ret

000004aa <read_joystick_position>:
*
* \param in calibration data
* \return Joystick position
****************************************************************************/
JoystickPosition read_joystick_position()
{
     4aa:	cf 93       	push	r28
	JoystickPosition position;

	position.xaxis = ADC_read(ADC_CH2);
     4ac:	85 e0       	ldi	r24, 0x05	; 5
     4ae:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_read>
     4b2:	c8 2f       	mov	r28, r24
	//position.xaxis = ((((position.xaxis - calibration.xaxis)*100)/255)-50)*2;

	position.yaxis = ADC_read(ADC_CH1);
     4b4:	84 e0       	ldi	r24, 0x04	; 4
     4b6:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_read>
     4ba:	98 2f       	mov	r25, r24
	//position.yaxis = ((((position.yaxis - calibration.yaxis)*100)/255)-50)*2;
	
	return position;
}
     4bc:	8c 2f       	mov	r24, r28
     4be:	cf 91       	pop	r28
     4c0:	08 95       	ret

000004c2 <read_joystick_direction>:
* \brief Read joystick direction according to joystick position data
*
* \return Joystick direction
****************************************************************************/
JoystickDirection read_joystick_direction(JoystickPosition joystickPos)
{
     4c2:	68 2f       	mov	r22, r24
	JoystickDirection xAxes, yAxes, retVal;
	
	if (joystickPos.xaxis > 220)
     4c4:	8d 3d       	cpi	r24, 0xDD	; 221
     4c6:	20 f4       	brcc	.+8      	; 0x4d0 <read_joystick_direction+0xe>
	{
		xAxes = Right;
	}
	else if (joystickPos.xaxis < 20)
     4c8:	84 31       	cpi	r24, 0x14	; 20
     4ca:	20 f4       	brcc	.+8      	; 0x4d4 <read_joystick_direction+0x12>
	{
		xAxes = Left;
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	03 c0       	rjmp	.+6      	; 0x4d6 <read_joystick_direction+0x14>
{
	JoystickDirection xAxes, yAxes, retVal;
	
	if (joystickPos.xaxis > 220)
	{
		xAxes = Right;
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <read_joystick_direction+0x14>
	{
		xAxes = Left;
	}
	else
	{
		xAxes = Neutral;
     4d4:	84 e0       	ldi	r24, 0x04	; 4
	}
	
	if (joystickPos.yaxis > 220)
     4d6:	9d 3d       	cpi	r25, 0xDD	; 221
     4d8:	20 f4       	brcc	.+8      	; 0x4e2 <read_joystick_direction+0x20>
	{
		yAxes = Up;
	}
	else if (joystickPos.yaxis < 20)
     4da:	94 31       	cpi	r25, 0x14	; 20
     4dc:	20 f4       	brcc	.+8      	; 0x4e6 <read_joystick_direction+0x24>
	{
		yAxes = Down;
     4de:	e3 e0       	ldi	r30, 0x03	; 3
     4e0:	03 c0       	rjmp	.+6      	; 0x4e8 <read_joystick_direction+0x26>
		xAxes = Neutral;
	}
	
	if (joystickPos.yaxis > 220)
	{
		yAxes = Up;
     4e2:	e2 e0       	ldi	r30, 0x02	; 2
     4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <read_joystick_direction+0x26>
	else if (joystickPos.yaxis < 20)
	{
		yAxes = Down;
	}
	else{
		yAxes = Neutral;
     4e6:	e4 e0       	ldi	r30, 0x04	; 4
	}
	
	if(abs(joystickPos.yaxis-145) > abs(joystickPos.xaxis-135))
     4e8:	29 2f       	mov	r18, r25
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	21 59       	subi	r18, 0x91	; 145
     4ee:	31 09       	sbc	r19, r1
     4f0:	a9 01       	movw	r20, r18
     4f2:	33 23       	and	r19, r19
     4f4:	24 f4       	brge	.+8      	; 0x4fe <read_joystick_direction+0x3c>
     4f6:	44 27       	eor	r20, r20
     4f8:	55 27       	eor	r21, r21
     4fa:	42 1b       	sub	r20, r18
     4fc:	53 0b       	sbc	r21, r19
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	67 58       	subi	r22, 0x87	; 135
     502:	71 09       	sbc	r23, r1
     504:	9b 01       	movw	r18, r22
     506:	77 23       	and	r23, r23
     508:	24 f4       	brge	.+8      	; 0x512 <__stack+0x13>
     50a:	22 27       	eor	r18, r18
     50c:	33 27       	eor	r19, r19
     50e:	26 1b       	sub	r18, r22
     510:	37 0b       	sbc	r19, r23
     512:	24 17       	cp	r18, r20
     514:	35 07       	cpc	r19, r21
     516:	0c f4       	brge	.+2      	; 0x51a <__stack+0x1b>
	{
		retVal = yAxes;
     518:	8e 2f       	mov	r24, r30
	{
		retVal = xAxes;
	}
	
	return retVal;
}
     51a:	08 95       	ret

0000051c <read_touchpad_data>:
* \brief Read Touchpad data
*
* \return Touchpad data
****************************************************************************/
TouchpadData read_touchpad_data()
{
     51c:	cf 93       	push	r28
	TouchpadData touchpad;
	touchpad.rightTouchPad = ADC_read(ADC_CH3);
     51e:	86 e0       	ldi	r24, 0x06	; 6
     520:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_read>
     524:	c8 2f       	mov	r28, r24
	touchpad.leftTouchPad = ADC_read(ADC_CH4);
     526:	87 e0       	ldi	r24, 0x07	; 7
     528:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_read>
     52c:	78 2f       	mov	r23, r24
	
	if(test_bit(BUTTON_PORT, LEFT_BUTTON_PIN))
     52e:	85 9b       	sbis	0x10, 5	; 16
     530:	02 c0       	rjmp	.+4      	; 0x536 <read_touchpad_data+0x1a>
	{
		touchpad.leftButton = 1;
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	01 c0       	rjmp	.+2      	; 0x538 <read_touchpad_data+0x1c>
	}
	else
	{
		touchpad.leftButton = 0;
     536:	90 e0       	ldi	r25, 0x00	; 0
	}
	if(test_bit(BUTTON_PORT, RIGHT_BUTTON_PIN))
     538:	84 9b       	sbis	0x10, 4	; 16
     53a:	02 c0       	rjmp	.+4      	; 0x540 <read_touchpad_data+0x24>
	{
		touchpad.rightButton = 1;
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	01 c0       	rjmp	.+2      	; 0x542 <read_touchpad_data+0x26>
	}
	else
	{
		touchpad.rightButton = 0;
     540:	80 e0       	ldi	r24, 0x00	; 0
	}
	return touchpad;
}
     542:	6c 2f       	mov	r22, r28
     544:	cf 91       	pop	r28
     546:	08 95       	ret

00000548 <change_xaxis>:
***********************************************************************************/
JoystickDirection change_xaxis(JoystickDirection direction)
{
	static JoystickDirection old_x_direction = Neutral;
	
	if(direction!= Right && direction != Left)
     548:	82 30       	cpi	r24, 0x02	; 2
     54a:	20 f0       	brcs	.+8      	; 0x554 <change_xaxis+0xc>
	{
		old_x_direction = Neutral;
     54c:	84 e0       	ldi	r24, 0x04	; 4
     54e:	80 93 07 01 	sts	0x0107, r24
		return Neutral;
     552:	08 95       	ret
	}
	
	if (old_x_direction != direction)
     554:	90 91 07 01 	lds	r25, 0x0107
     558:	98 17       	cp	r25, r24
     55a:	19 f0       	breq	.+6      	; 0x562 <change_xaxis+0x1a>
	{
		old_x_direction = direction;
     55c:	80 93 07 01 	sts	0x0107, r24
		return direction;
     560:	08 95       	ret
	}
	
	old_x_direction = direction;
	return Neutral;
     562:	84 e0       	ldi	r24, 0x04	; 4
}
     564:	08 95       	ret

00000566 <change_yaxis>:
***********************************************************************************/
JoystickDirection change_yaxis(JoystickDirection direction)
{
	static JoystickDirection old_y_direction = Neutral;
	
	if(direction!= Up && direction != Down)
     566:	9e ef       	ldi	r25, 0xFE	; 254
     568:	98 0f       	add	r25, r24
     56a:	92 30       	cpi	r25, 0x02	; 2
     56c:	20 f0       	brcs	.+8      	; 0x576 <change_yaxis+0x10>
	{
		old_y_direction = Neutral;
     56e:	84 e0       	ldi	r24, 0x04	; 4
     570:	80 93 06 01 	sts	0x0106, r24
		return Neutral;
     574:	08 95       	ret
	}
	
	if (old_y_direction != direction)
     576:	90 91 06 01 	lds	r25, 0x0106
     57a:	98 17       	cp	r25, r24
     57c:	19 f0       	breq	.+6      	; 0x584 <change_yaxis+0x1e>
	{
		old_y_direction = direction;
     57e:	80 93 06 01 	sts	0x0106, r24
		return direction;
     582:	08 95       	ret
	}
	
	old_y_direction = direction;
	return Neutral;
     584:	84 e0       	ldi	r24, 0x04	; 4
}
     586:	08 95       	ret

00000588 <change_touchpad_data>:
	ChangeTouchpadData ret_val;
	
	ret_val.rightButton = 0;
	ret_val.leftButton = 0;
	
	if (old_touchpad_data.leftButton == 0 && new_touchpad_data.leftButton == 1)
     588:	20 91 71 03 	lds	r18, 0x0371
     58c:	21 11       	cpse	r18, r1
     58e:	05 c0       	rjmp	.+10     	; 0x59a <change_touchpad_data+0x12>
     590:	91 30       	cpi	r25, 0x01	; 1
     592:	19 f4       	brne	.+6      	; 0x59a <change_touchpad_data+0x12>
	{
		old_touchpad_data.leftButton = 1;
     594:	90 93 71 03 	sts	0x0371, r25
		ret_val.leftButton = 1;
     598:	0c c0       	rjmp	.+24     	; 0x5b2 <change_touchpad_data+0x2a>
	}
	else if (old_touchpad_data.leftButton == 1 && new_touchpad_data.leftButton == 0)
     59a:	20 91 71 03 	lds	r18, 0x0371
     59e:	21 30       	cpi	r18, 0x01	; 1
     5a0:	29 f4       	brne	.+10     	; 0x5ac <change_touchpad_data+0x24>
     5a2:	91 11       	cpse	r25, r1
     5a4:	05 c0       	rjmp	.+10     	; 0x5b0 <change_touchpad_data+0x28>
	{
		old_touchpad_data.leftButton = 0;
     5a6:	10 92 71 03 	sts	0x0371, r1
     5aa:	03 c0       	rjmp	.+6      	; 0x5b2 <change_touchpad_data+0x2a>
{
	static TouchpadData old_touchpad_data;
	ChangeTouchpadData ret_val;
	
	ret_val.rightButton = 0;
	ret_val.leftButton = 0;
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	01 c0       	rjmp	.+2      	; 0x5b2 <change_touchpad_data+0x2a>
     5b0:	90 e0       	ldi	r25, 0x00	; 0
	else if (old_touchpad_data.leftButton == 1 && new_touchpad_data.leftButton == 0)
	{
		old_touchpad_data.leftButton = 0;
	}
	
	if (old_touchpad_data.rightButton == 0 && new_touchpad_data.rightButton == 1)
     5b2:	20 91 70 03 	lds	r18, 0x0370
     5b6:	21 11       	cpse	r18, r1
     5b8:	05 c0       	rjmp	.+10     	; 0x5c4 <change_touchpad_data+0x3c>
     5ba:	81 30       	cpi	r24, 0x01	; 1
     5bc:	19 f4       	brne	.+6      	; 0x5c4 <change_touchpad_data+0x3c>
	{
		old_touchpad_data.rightButton = 1;
     5be:	80 93 70 03 	sts	0x0370, r24
		ret_val.rightButton = 1;
     5c2:	08 95       	ret
	}
	else if (old_touchpad_data.rightButton == 1 && new_touchpad_data.rightButton == 0)
     5c4:	20 91 70 03 	lds	r18, 0x0370
     5c8:	21 30       	cpi	r18, 0x01	; 1
     5ca:	29 f4       	brne	.+10     	; 0x5d6 <change_touchpad_data+0x4e>
     5cc:	81 11       	cpse	r24, r1
     5ce:	05 c0       	rjmp	.+10     	; 0x5da <change_touchpad_data+0x52>
	{
		old_touchpad_data.rightButton = 0;
     5d0:	10 92 70 03 	sts	0x0370, r1
     5d4:	08 95       	ret
ChangeTouchpadData change_touchpad_data(TouchpadData new_touchpad_data)
{
	static TouchpadData old_touchpad_data;
	ChangeTouchpadData ret_val;
	
	ret_val.rightButton = 0;
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	08 95       	ret
     5da:	80 e0       	ldi	r24, 0x00	; 0
	{
		old_touchpad_data.rightButton = 0;
	}
	
	return ret_val;
     5dc:	08 95       	ret

000005de <mcp_turn_on>:
* \brief Enable communication with CAN controller
*
****************************************************************************/
void mcp_turn_on()
{
	PORTB &= ~(1 << DD_CS);
     5de:	c4 98       	cbi	0x18, 4	; 24
     5e0:	08 95       	ret

000005e2 <mcp_turn_off>:
* \brief Disable communication with CAN controller
*
****************************************************************************/
void mcp_turn_off()
{
	PORTB |= (1 << DD_CS);
     5e2:	c4 9a       	sbi	0x18, 4	; 24
     5e4:	08 95       	ret

000005e6 <mcp_reset>:
* \brief Reset the CAN controller
*
****************************************************************************/
void mcp_reset()
{
	mcp_turn_on();
     5e6:	0e 94 ef 02 	call	0x5de	; 0x5de <mcp_turn_on>
	
	SPI_write(MCP_RESET);
     5ea:	80 ec       	ldi	r24, 0xC0	; 192
     5ec:	0e 94 8f 07 	call	0xf1e	; 0xf1e <SPI_write>
	
	mcp_turn_off();
     5f0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <mcp_turn_off>
     5f4:	08 95       	ret

000005f6 <mcp_read>:
*
* \param in address from which shall be read
* \return data
****************************************************************************/
uint8_t mcp_read(uint8_t address)
{
     5f6:	1f 93       	push	r17
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	1f 92       	push	r1
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
     602:	18 2f       	mov	r17, r24
	volatile uint8_t retVal;
	
	mcp_turn_on();
     604:	0e 94 ef 02 	call	0x5de	; 0x5de <mcp_turn_on>
	
	SPI_write(MCP_READ);
     608:	83 e0       	ldi	r24, 0x03	; 3
     60a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <SPI_write>
	SPI_write(address);
     60e:	81 2f       	mov	r24, r17
     610:	0e 94 8f 07 	call	0xf1e	; 0xf1e <SPI_write>
	
	retVal = SPI_read();
     614:	0e 94 93 07 	call	0xf26	; 0xf26 <SPI_read>
     618:	89 83       	std	Y+1, r24	; 0x01
	
	mcp_turn_off();
     61a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <mcp_turn_off>
	
	return retVal;
     61e:	89 81       	ldd	r24, Y+1	; 0x01
}
     620:	0f 90       	pop	r0
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	1f 91       	pop	r17
     628:	08 95       	ret

0000062a <mcp_init>:
****************************************************************************/
uint8_t mcp_init()
{
	uint8_t tmp;
	
	SPI_init();
     62a:	0e 94 89 07 	call	0xf12	; 0xf12 <SPI_init>
	mcp_reset();
     62e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <mcp_reset>
	
	tmp = mcp_read(MCP_CANSTAT);
     632:	8e e0       	ldi	r24, 0x0E	; 14
     634:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <mcp_read>
	
	if ((tmp & MODE_MASK) != MODE_CONFIG)
     638:	80 7e       	andi	r24, 0xE0	; 224
     63a:	80 38       	cpi	r24, 0x80	; 128
     63c:	31 f0       	breq	.+12     	; 0x64a <mcp_init+0x20>
	{
		printf("MCP2515 NOT configured properly\n");
     63e:	8f e0       	ldi	r24, 0x0F	; 15
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <puts>
		return 1;
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	08 95       	ret
	}
	
	return 0;
     64a:	80 e0       	ldi	r24, 0x00	; 0
}
     64c:	08 95       	ret

0000064e <mcp_write_byte>:
*
* \param in address to which shall be write
* \return data
****************************************************************************/
void mcp_write_byte(uint8_t address, uint8_t byte)
{
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	d8 2f       	mov	r29, r24
     654:	c6 2f       	mov	r28, r22
	mcp_turn_on();
     656:	0e 94 ef 02 	call	0x5de	; 0x5de <mcp_turn_on>
	SPI_write(MCP_WRITE);
     65a:	82 e0       	ldi	r24, 0x02	; 2
     65c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <SPI_write>
	SPI_write(address);
     660:	8d 2f       	mov	r24, r29
     662:	0e 94 8f 07 	call	0xf1e	; 0xf1e <SPI_write>
	SPI_write(byte);
     666:	8c 2f       	mov	r24, r28
     668:	0e 94 8f 07 	call	0xf1e	; 0xf1e <SPI_write>
	mcp_turn_off();
     66c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <mcp_turn_off>
}
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	08 95       	ret

00000676 <mcp_modify_bit>:
* \param in address of the register
* \param in bit mask
* \param in new value of the register
****************************************************************************/
void mcp_modify_bit(uint8_t address, uint8_t mask, uint8_t byte)
{
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	18 2f       	mov	r17, r24
     67e:	d6 2f       	mov	r29, r22
     680:	c4 2f       	mov	r28, r20
	mcp_turn_on();
     682:	0e 94 ef 02 	call	0x5de	; 0x5de <mcp_turn_on>
	SPI_write(MCP_BITMOD);
     686:	85 e0       	ldi	r24, 0x05	; 5
     688:	0e 94 8f 07 	call	0xf1e	; 0xf1e <SPI_write>
	SPI_write(address);
     68c:	81 2f       	mov	r24, r17
     68e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <SPI_write>
	SPI_write(mask);
     692:	8d 2f       	mov	r24, r29
     694:	0e 94 8f 07 	call	0xf1e	; 0xf1e <SPI_write>
	SPI_write(byte);
     698:	8c 2f       	mov	r24, r28
     69a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <SPI_write>
	mcp_turn_off();
     69e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <mcp_turn_off>
}
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	08 95       	ret

000006aa <mcp_request_to_send>:
* \brief Request to send particular buffer
*
* \param in address of the buffer
****************************************************************************/
void mcp_request_to_send(uint8_t bits)
{
     6aa:	cf 93       	push	r28
     6ac:	c8 2f       	mov	r28, r24
	mcp_turn_on();
     6ae:	0e 94 ef 02 	call	0x5de	; 0x5de <mcp_turn_on>
	SPI_write(MCP_RTS | (bits & 0b00000111));
     6b2:	8c 2f       	mov	r24, r28
     6b4:	87 70       	andi	r24, 0x07	; 7
     6b6:	80 68       	ori	r24, 0x80	; 128
     6b8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <SPI_write>
	mcp_turn_off();
     6bc:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <mcp_turn_off>
     6c0:	cf 91       	pop	r28
     6c2:	08 95       	ret

000006c4 <init_oled>:
*
****************************************************************************/
void write_c(uint8_t command)
{
	volatile uint8_t *ext_oled = (uint8_t *) OLED_COMMAND_BASE_ADDR;
	ext_oled[0] = command;
     6c4:	e0 e0       	ldi	r30, 0x00	; 0
     6c6:	f0 e1       	ldi	r31, 0x10	; 16
     6c8:	8e ea       	ldi	r24, 0xAE	; 174
     6ca:	80 83       	st	Z, r24
     6cc:	81 ea       	ldi	r24, 0xA1	; 161
     6ce:	80 83       	st	Z, r24
     6d0:	8a ed       	ldi	r24, 0xDA	; 218
     6d2:	80 83       	st	Z, r24
     6d4:	82 e1       	ldi	r24, 0x12	; 18
     6d6:	80 83       	st	Z, r24
     6d8:	88 ec       	ldi	r24, 0xC8	; 200
     6da:	80 83       	st	Z, r24
     6dc:	88 ea       	ldi	r24, 0xA8	; 168
     6de:	80 83       	st	Z, r24
     6e0:	8f e3       	ldi	r24, 0x3F	; 63
     6e2:	80 83       	st	Z, r24
     6e4:	85 ed       	ldi	r24, 0xD5	; 213
     6e6:	80 83       	st	Z, r24
     6e8:	80 e8       	ldi	r24, 0x80	; 128
     6ea:	80 83       	st	Z, r24
     6ec:	81 e8       	ldi	r24, 0x81	; 129
     6ee:	80 83       	st	Z, r24
     6f0:	80 e5       	ldi	r24, 0x50	; 80
     6f2:	80 83       	st	Z, r24
     6f4:	89 ed       	ldi	r24, 0xD9	; 217
     6f6:	80 83       	st	Z, r24
     6f8:	81 e2       	ldi	r24, 0x21	; 33
     6fa:	80 83       	st	Z, r24
     6fc:	80 e2       	ldi	r24, 0x20	; 32
     6fe:	80 83       	st	Z, r24
     700:	10 82       	st	Z, r1
     702:	8b ed       	ldi	r24, 0xDB	; 219
     704:	80 83       	st	Z, r24
     706:	80 e3       	ldi	r24, 0x30	; 48
     708:	80 83       	st	Z, r24
     70a:	8d ea       	ldi	r24, 0xAD	; 173
     70c:	80 83       	st	Z, r24
     70e:	10 82       	st	Z, r1
     710:	84 ea       	ldi	r24, 0xA4	; 164
     712:	80 83       	st	Z, r24
     714:	86 ea       	ldi	r24, 0xA6	; 166
     716:	80 83       	st	Z, r24
     718:	8f ea       	ldi	r24, 0xAF	; 175
     71a:	80 83       	st	Z, r24
     71c:	08 95       	ret

0000071e <reset_position>:
     71e:	e0 e0       	ldi	r30, 0x00	; 0
     720:	f0 e1       	ldi	r31, 0x10	; 16
     722:	81 e2       	ldi	r24, 0x21	; 33
     724:	80 83       	st	Z, r24
     726:	10 82       	st	Z, r1
     728:	8f e7       	ldi	r24, 0x7F	; 127
     72a:	80 83       	st	Z, r24
     72c:	82 e2       	ldi	r24, 0x22	; 34
     72e:	80 83       	st	Z, r24
     730:	10 82       	st	Z, r1
     732:	87 e0       	ldi	r24, 0x07	; 7
     734:	80 83       	st	Z, r24
     736:	08 95       	ret

00000738 <refresh_oled>:
*
****************************************************************************/
void refresh_oled()
{
	uint16_t i;
	reset_position();
     738:	0e 94 8f 03 	call	0x71e	; 0x71e <reset_position>
     73c:	e0 e0       	ldi	r30, 0x00	; 0
     73e:	f8 e1       	ldi	r31, 0x18	; 24
*
****************************************************************************/
void write_d(uint8_t data)
{
	volatile uint8_t *ext_oled = (uint8_t *) OLED_DATA_BASE_ADDR;
	ext_oled[0] = data;
     740:	a0 e0       	ldi	r26, 0x00	; 0
     742:	b2 e1       	ldi	r27, 0x12	; 18
	volatile uint8_t *ext_ram = (uint8_t *) OLED_BASE_SRAM_ADDRESS;
	uint8_t oled_value;
	
	for (i = 0; i < OLED_ADDR_SPACE_LEN; i++)
	{
		oled_value = ext_ram[i];
     744:	81 91       	ld	r24, Z+
*
****************************************************************************/
void write_d(uint8_t data)
{
	volatile uint8_t *ext_oled = (uint8_t *) OLED_DATA_BASE_ADDR;
	ext_oled[0] = data;
     746:	8c 93       	st	X, r24
	uint16_t i;
	reset_position();
	volatile uint8_t *ext_ram = (uint8_t *) OLED_BASE_SRAM_ADDRESS;
	uint8_t oled_value;
	
	for (i = 0; i < OLED_ADDR_SPACE_LEN; i++)
     748:	e1 15       	cp	r30, r1
     74a:	8c e1       	ldi	r24, 0x1C	; 28
     74c:	f8 07       	cpc	r31, r24
     74e:	d1 f7       	brne	.-12     	; 0x744 <refresh_oled+0xc>
	{
		oled_value = ext_ram[i];
		write_d(oled_value);
	}
}
     750:	08 95       	ret

00000752 <clear_oled>:
/****************************************************************************
* \brief Clear OLED display
*
****************************************************************************/
void clear_oled()
{
     752:	e0 e0       	ldi	r30, 0x00	; 0
     754:	f8 e1       	ldi	r31, 0x18	; 24
	uint16_t i;
	volatile uint8_t *ext_ram = (uint8_t *) OLED_BASE_SRAM_ADDRESS;
	
	for (i = 0; i < OLED_ADDR_SPACE_LEN; i++)
	{
		ext_ram[i] = 0x00;
     756:	11 92       	st	Z+, r1
void clear_oled()
{
	uint16_t i;
	volatile uint8_t *ext_ram = (uint8_t *) OLED_BASE_SRAM_ADDRESS;
	
	for (i = 0; i < OLED_ADDR_SPACE_LEN; i++)
     758:	e1 15       	cp	r30, r1
     75a:	8c e1       	ldi	r24, 0x1C	; 28
     75c:	f8 07       	cpc	r31, r24
     75e:	d9 f7       	brne	.-10     	; 0x756 <clear_oled+0x4>
	{
		ext_ram[i] = 0x00;
	}
}
     760:	08 95       	ret

00000762 <set_pixel>:
****************************************************************************/
uint8_t set_pixel(uint8_t x,uint8_t y)
{
	volatile uint8_t *ext_ram = (uint8_t *) OLED_BASE_SRAM_ADDRESS;
	
	if (x > 127)
     762:	88 23       	and	r24, r24
     764:	e4 f0       	brlt	.+56     	; 0x79e <set_pixel+0x3c>
	{
		return 1;
	}
	else if (y > 64)
     766:	61 34       	cpi	r22, 0x41	; 65
     768:	e0 f4       	brcc	.+56     	; 0x7a2 <set_pixel+0x40>
	{
		return 1;
	}
	else
	{
		uint16_t page = y/8;
     76a:	e6 2f       	mov	r30, r22
     76c:	e6 95       	lsr	r30
     76e:	e6 95       	lsr	r30
     770:	e6 95       	lsr	r30
		uint16_t coloumn = page*128 + x;
     772:	40 e8       	ldi	r20, 0x80	; 128
     774:	e4 9f       	mul	r30, r20
     776:	f0 01       	movw	r30, r0
     778:	11 24       	eor	r1, r1
     77a:	e8 0f       	add	r30, r24
     77c:	f1 1d       	adc	r31, r1
		ext_ram[coloumn] |= (1 << (y % 8));
     77e:	f8 5e       	subi	r31, 0xE8	; 232
     780:	20 81       	ld	r18, Z
     782:	67 70       	andi	r22, 0x07	; 7
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	ac 01       	movw	r20, r24
     78a:	02 c0       	rjmp	.+4      	; 0x790 <set_pixel+0x2e>
     78c:	44 0f       	add	r20, r20
     78e:	55 1f       	adc	r21, r21
     790:	6a 95       	dec	r22
     792:	e2 f7       	brpl	.-8      	; 0x78c <set_pixel+0x2a>
     794:	ba 01       	movw	r22, r20
     796:	62 2b       	or	r22, r18
     798:	60 83       	st	Z, r22
	}
	return 0;
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	08 95       	ret
{
	volatile uint8_t *ext_ram = (uint8_t *) OLED_BASE_SRAM_ADDRESS;
	
	if (x > 127)
	{
		return 1;
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	08 95       	ret
	}
	else if (y > 64)
	{
		return 1;
     7a2:	81 e0       	ldi	r24, 0x01	; 1
		uint16_t page = y/8;
		uint16_t coloumn = page*128 + x;
		ext_ram[coloumn] |= (1 << (y % 8));
	}
	return 0;
}
     7a4:	08 95       	ret

000007a6 <unset_pixel>:
****************************************************************************/
uint8_t unset_pixel(uint8_t x, uint8_t y)
{
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	
	if (x > 127)
     7a6:	88 23       	and	r24, r24
     7a8:	ec f0       	brlt	.+58     	; 0x7e4 <unset_pixel+0x3e>
	{
		return 1;
	}
	else if (y > 64)
     7aa:	61 34       	cpi	r22, 0x41	; 65
     7ac:	e8 f4       	brcc	.+58     	; 0x7e8 <unset_pixel+0x42>
	{
		return 1;
	}
	else
	{
		uint16_t page = y/8;
     7ae:	e6 2f       	mov	r30, r22
     7b0:	e6 95       	lsr	r30
     7b2:	e6 95       	lsr	r30
     7b4:	e6 95       	lsr	r30
		uint16_t column = page * 128 + x;
     7b6:	40 e8       	ldi	r20, 0x80	; 128
     7b8:	e4 9f       	mul	r30, r20
     7ba:	f0 01       	movw	r30, r0
     7bc:	11 24       	eor	r1, r1
     7be:	e8 0f       	add	r30, r24
     7c0:	f1 1d       	adc	r31, r1
		ext_ram[column] &= ~(1 << (y % 8));
     7c2:	f8 5e       	subi	r31, 0xE8	; 232
     7c4:	20 81       	ld	r18, Z
     7c6:	67 70       	andi	r22, 0x07	; 7
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	ac 01       	movw	r20, r24
     7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <unset_pixel+0x2e>
     7d0:	44 0f       	add	r20, r20
     7d2:	55 1f       	adc	r21, r21
     7d4:	6a 95       	dec	r22
     7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <unset_pixel+0x2a>
     7d8:	ba 01       	movw	r22, r20
     7da:	60 95       	com	r22
     7dc:	62 23       	and	r22, r18
     7de:	60 83       	st	Z, r22
	}
	return 0;
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	08 95       	ret
{
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	
	if (x > 127)
	{
		return 1;
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	08 95       	ret
	}
	else if (y > 64)
	{
		return 1;
     7e8:	81 e0       	ldi	r24, 0x01	; 1
		uint16_t page = y/8;
		uint16_t column = page * 128 + x;
		ext_ram[column] &= ~(1 << (y % 8));
	}
	return 0;
}
     7ea:	08 95       	ret

000007ec <print_char>:
* \brief Print character on current position on OLED display
*
* \param in x Position of pixel that should be set
****************************************************************************/
void print_char(char character)
{
     7ec:	60 91 72 03 	lds	r22, 0x0372
     7f0:	70 91 73 03 	lds	r23, 0x0373
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	80 97       	sbiw	r24, 0x20	; 32
     7f8:	9c 01       	movw	r18, r24
     7fa:	22 0f       	add	r18, r18
     7fc:	33 1f       	adc	r19, r19
     7fe:	22 0f       	add	r18, r18
     800:	33 1f       	adc	r19, r19
     802:	82 0f       	add	r24, r18
     804:	93 1f       	adc	r25, r19
     806:	86 57       	subi	r24, 0x76	; 118
     808:	9f 4f       	sbci	r25, 0xFF	; 255
     80a:	db 01       	movw	r26, r22
     80c:	b8 5e       	subi	r27, 0xE8	; 232
     80e:	ab 01       	movw	r20, r22
     810:	4c 5f       	subi	r20, 0xFC	; 252
     812:	57 4e       	sbci	r21, 0xE7	; 231
	uint8_t i;
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
	
	for(i = 0; i < 4; i++)
	{
		ext_ram[position] = pgm_read_word_near(&(font[character-32][i]));
     814:	fc 01       	movw	r30, r24
     816:	25 91       	lpm	r18, Z+
     818:	34 91       	lpm	r19, Z
     81a:	2d 93       	st	X+, r18
     81c:	01 96       	adiw	r24, 0x01	; 1
void print_char(char character)
{
	uint8_t i;
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
	
	for(i = 0; i < 4; i++)
     81e:	a4 17       	cp	r26, r20
     820:	b5 07       	cpc	r27, r21
     822:	c1 f7       	brne	.-16     	; 0x814 <print_char+0x28>
     824:	6c 5f       	subi	r22, 0xFC	; 252
     826:	7f 4f       	sbci	r23, 0xFF	; 255
     828:	70 93 73 03 	sts	0x0373, r23
     82c:	60 93 72 03 	sts	0x0372, r22
     830:	08 95       	ret

00000832 <print_inverted_char>:
* \brief Print inverted character on current position on OLED display
*
* \param in x Position of pixel that should be set
****************************************************************************/
void print_inverted_char(char character)
{
     832:	60 91 72 03 	lds	r22, 0x0372
     836:	70 91 73 03 	lds	r23, 0x0373
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	80 97       	sbiw	r24, 0x20	; 32
     83e:	9c 01       	movw	r18, r24
     840:	22 0f       	add	r18, r18
     842:	33 1f       	adc	r19, r19
     844:	22 0f       	add	r18, r18
     846:	33 1f       	adc	r19, r19
     848:	82 0f       	add	r24, r18
     84a:	93 1f       	adc	r25, r19
     84c:	86 57       	subi	r24, 0x76	; 118
     84e:	9f 4f       	sbci	r25, 0xFF	; 255
     850:	db 01       	movw	r26, r22
     852:	b8 5e       	subi	r27, 0xE8	; 232
     854:	ab 01       	movw	r20, r22
     856:	4c 5f       	subi	r20, 0xFC	; 252
     858:	57 4e       	sbci	r21, 0xE7	; 231
	uint8_t i;
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
	
	for(i = 0; i < 4; i++)
	{
		ext_ram[position] = ~pgm_read_word_near(&(font[character-32][i]));
     85a:	fc 01       	movw	r30, r24
     85c:	25 91       	lpm	r18, Z+
     85e:	34 91       	lpm	r19, Z
     860:	20 95       	com	r18
     862:	2d 93       	st	X+, r18
     864:	01 96       	adiw	r24, 0x01	; 1
void print_inverted_char(char character)
{
	uint8_t i;
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
	
	for(i = 0; i < 4; i++)
     866:	a4 17       	cp	r26, r20
     868:	b5 07       	cpc	r27, r21
     86a:	b9 f7       	brne	.-18     	; 0x85a <print_inverted_char+0x28>
     86c:	6c 5f       	subi	r22, 0xFC	; 252
     86e:	7f 4f       	sbci	r23, 0xFF	; 255
     870:	70 93 73 03 	sts	0x0373, r23
     874:	60 93 72 03 	sts	0x0372, r22
     878:	08 95       	ret

0000087a <set_position>:
* \param in page Row on Y-axis
* \return Success/Failure
****************************************************************************/
uint8_t set_position(uint8_t column, uint8_t page)
{
	if (column > 32)
     87a:	81 32       	cpi	r24, 0x21	; 33
     87c:	90 f4       	brcc	.+36     	; 0x8a2 <set_position+0x28>
	{
		return 1;
	}
	else if (page > 8)
     87e:	69 30       	cpi	r22, 0x09	; 9
     880:	90 f4       	brcc	.+36     	; 0x8a6 <set_position+0x2c>
	{
		return 1;
	}
	
	position = page * 128 + column * 4;
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	20 e2       	ldi	r18, 0x20	; 32
     886:	62 9f       	mul	r22, r18
     888:	80 0d       	add	r24, r0
     88a:	91 1d       	adc	r25, r1
     88c:	11 24       	eor	r1, r1
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	88 0f       	add	r24, r24
     894:	99 1f       	adc	r25, r25
     896:	90 93 73 03 	sts	0x0373, r25
     89a:	80 93 72 03 	sts	0x0372, r24
	
	return 0;
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	08 95       	ret
****************************************************************************/
uint8_t set_position(uint8_t column, uint8_t page)
{
	if (column > 32)
	{
		return 1;
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	08 95       	ret
	}
	else if (page > 8)
	{
		return 1;
     8a6:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	position = page * 128 + column * 4;
	
	return 0;
}
     8a8:	08 95       	ret

000008aa <print_string>:
*
* \param in String that shall be printed
* \return Success/Failure
****************************************************************************/
uint8_t print_string(char* string)
{
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
	uint8_t i;
	uint8_t lenght  = strlen(string);
     8b2:	fc 01       	movw	r30, r24
     8b4:	01 90       	ld	r0, Z+
     8b6:	00 20       	and	r0, r0
     8b8:	e9 f7       	brne	.-6      	; 0x8b4 <print_string+0xa>
     8ba:	31 97       	sbiw	r30, 0x01	; 1
     8bc:	1e 2f       	mov	r17, r30
     8be:	18 1b       	sub	r17, r24
	for(i = 0; i < lenght; i++)
     8c0:	51 f0       	breq	.+20     	; 0x8d6 <print_string+0x2c>
     8c2:	08 2f       	mov	r16, r24
     8c4:	c0 2f       	mov	r28, r16
     8c6:	d9 2f       	mov	r29, r25
	{
		print_char(string[i]);
     8c8:	89 91       	ld	r24, Y+
     8ca:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
     8ce:	8c 2f       	mov	r24, r28
     8d0:	80 1b       	sub	r24, r16
****************************************************************************/
uint8_t print_string(char* string)
{
	uint8_t i;
	uint8_t lenght  = strlen(string);
	for(i = 0; i < lenght; i++)
     8d2:	81 17       	cp	r24, r17
     8d4:	c8 f3       	brcs	.-14     	; 0x8c8 <print_string+0x1e>
	{
		print_char(string[i]);
	}
	return 0;
}
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	08 95       	ret

000008e2 <revert_colour_line>:
void revert_colour_line(uint8_t line)
{
	uint8_t i;
	volatile uint8_t* ext_ram = (uint8_t*) OLED_BASE_SRAM_ADDRESS;
	
	for(i = (line * OLED_LINE_LENGTH_COLUMNS) + 2; i < ((line + 1) * OLED_LINE_LENGTH_COLUMNS); i++)
     8e2:	48 2f       	mov	r20, r24
     8e4:	47 95       	ror	r20
     8e6:	44 27       	eor	r20, r20
     8e8:	47 95       	ror	r20
     8ea:	4e 5f       	subi	r20, 0xFE	; 254
     8ec:	28 2f       	mov	r18, r24
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	2f 5f       	subi	r18, 0xFF	; 255
     8f2:	3f 4f       	sbci	r19, 0xFF	; 255
     8f4:	36 95       	lsr	r19
     8f6:	32 2f       	mov	r19, r18
     8f8:	22 27       	eor	r18, r18
     8fa:	37 95       	ror	r19
     8fc:	27 95       	ror	r18
     8fe:	84 2f       	mov	r24, r20
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	82 17       	cp	r24, r18
     904:	93 07       	cpc	r25, r19
     906:	6c f4       	brge	.+26     	; 0x922 <revert_colour_line+0x40>
	{
		ext_ram[i-1] = ~ext_ram[i-1];
     908:	e4 2f       	mov	r30, r20
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	e1 50       	subi	r30, 0x01	; 1
     90e:	f8 4e       	sbci	r31, 0xE8	; 232
     910:	80 81       	ld	r24, Z
     912:	80 95       	com	r24
     914:	80 83       	st	Z, r24
void revert_colour_line(uint8_t line)
{
	uint8_t i;
	volatile uint8_t* ext_ram = (uint8_t*) OLED_BASE_SRAM_ADDRESS;
	
	for(i = (line * OLED_LINE_LENGTH_COLUMNS) + 2; i < ((line + 1) * OLED_LINE_LENGTH_COLUMNS); i++)
     916:	4f 5f       	subi	r20, 0xFF	; 255
     918:	84 2f       	mov	r24, r20
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	82 17       	cp	r24, r18
     91e:	93 07       	cpc	r25, r19
     920:	9c f3       	brlt	.-26     	; 0x908 <revert_colour_line+0x26>
     922:	08 95       	ret

00000924 <end_game_animation>:
* \brief Make a end game animation
*
* \param in direction of the animation
****************************************************************************/
void end_game_animation(uint8_t dir)
{
     924:	ff 92       	push	r15
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	f8 2e       	mov	r15, r24
	uint8_t i;
	uint8_t start, end;
	start = dir == 0 ? 0 : OLED_WIDTH;
     930:	88 23       	and	r24, r24
     932:	19 f1       	breq	.+70     	; 0x97a <end_game_animation+0x56>
     934:	d0 e8       	ldi	r29, 0x80	; 128
	end = dir == 0 ? OLED_WIDTH : 0;
     936:	00 e0       	ldi	r16, 0x00	; 0
     938:	22 c0       	rjmp	.+68     	; 0x97e <end_game_animation+0x5a>
	
	while (start != end)
	{
		for (i = 0; i < OLED_HEIGHT; i++)
		{
			set_pixel(start, i);
     93a:	6c 2f       	mov	r22, r28
     93c:	8d 2f       	mov	r24, r29
     93e:	0e 94 b1 03 	call	0x762	; 0x762 <set_pixel>
	start = dir == 0 ? 0 : OLED_WIDTH;
	end = dir == 0 ? OLED_WIDTH : 0;
	
	while (start != end)
	{
		for (i = 0; i < OLED_HEIGHT; i++)
     942:	cf 5f       	subi	r28, 0xFF	; 255
     944:	c0 34       	cpi	r28, 0x40	; 64
     946:	c9 f7       	brne	.-14     	; 0x93a <end_game_animation+0x16>
		{
			set_pixel(start, i);
		}
		refresh_oled();
     948:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
		for (i = 0; i < OLED_HEIGHT; i++)
     94c:	c1 2f       	mov	r28, r17
		{
			unset_pixel(start, i);
     94e:	6c 2f       	mov	r22, r28
     950:	8d 2f       	mov	r24, r29
     952:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <unset_pixel>
		for (i = 0; i < OLED_HEIGHT; i++)
		{
			set_pixel(start, i);
		}
		refresh_oled();
		for (i = 0; i < OLED_HEIGHT; i++)
     956:	cf 5f       	subi	r28, 0xFF	; 255
     958:	c0 34       	cpi	r28, 0x40	; 64
     95a:	c9 f7       	brne	.-14     	; 0x94e <end_game_animation+0x2a>
		{
			unset_pixel(start, i);
		}
		start = dir == 0 ? start + 1 : start - 1;
     95c:	f1 10       	cpse	r15, r1
     95e:	02 c0       	rjmp	.+4      	; 0x964 <end_game_animation+0x40>
     960:	df 5f       	subi	r29, 0xFF	; 255
     962:	01 c0       	rjmp	.+2      	; 0x966 <end_game_animation+0x42>
     964:	d1 50       	subi	r29, 0x01	; 1
     966:	83 ec       	ldi	r24, 0xC3	; 195
     968:	99 e0       	ldi	r25, 0x09	; 9
     96a:	01 97       	sbiw	r24, 0x01	; 1
     96c:	f1 f7       	brne	.-4      	; 0x96a <end_game_animation+0x46>
     96e:	00 c0       	rjmp	.+0      	; 0x970 <end_game_animation+0x4c>
     970:	00 00       	nop
	uint8_t i;
	uint8_t start, end;
	start = dir == 0 ? 0 : OLED_WIDTH;
	end = dir == 0 ? OLED_WIDTH : 0;
	
	while (start != end)
     972:	0d 17       	cp	r16, r29
     974:	31 f0       	breq	.+12     	; 0x982 <end_game_animation+0x5e>
* \brief Make a end game animation
*
* \param in direction of the animation
****************************************************************************/
void end_game_animation(uint8_t dir)
{
     976:	c1 2f       	mov	r28, r17
     978:	e0 cf       	rjmp	.-64     	; 0x93a <end_game_animation+0x16>
	uint8_t i;
	uint8_t start, end;
	start = dir == 0 ? 0 : OLED_WIDTH;
     97a:	d0 e0       	ldi	r29, 0x00	; 0
	end = dir == 0 ? OLED_WIDTH : 0;
     97c:	00 e8       	ldi	r16, 0x80	; 128
* \brief Make a end game animation
*
* \param in direction of the animation
****************************************************************************/
void end_game_animation(uint8_t dir)
{
     97e:	10 e0       	ldi	r17, 0x00	; 0
     980:	fa cf       	rjmp	.-12     	; 0x976 <end_game_animation+0x52>
			unset_pixel(start, i);
		}
		start = dir == 0 ? start + 1 : start - 1;
		_delay_ms(10);
	}
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16
     98a:	ff 90       	pop	r15
     98c:	08 95       	ret

0000098e <init>:
* \brief Initialize all important peripherals and pins
*
****************************************************************************/
void init()
{
	USART_init(MYUBBR);
     98e:	8f e1       	ldi	r24, 0x1F	; 31
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <USART_init>
	/* Enables standard IO functions */
	fdevopen(USART_putchar, USART_getchar);
     996:	67 ef       	ldi	r22, 0xF7	; 247
     998:	77 e0       	ldi	r23, 0x07	; 7
     99a:	82 ef       	ldi	r24, 0xF2	; 242
     99c:	97 e0       	ldi	r25, 0x07	; 7
     99e:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <fdevopen>
	/* Enables external memory*/
	set_bit(MCUCR, SRE);
     9a2:	85 b7       	in	r24, 0x35	; 53
     9a4:	80 68       	ori	r24, 0x80	; 128
     9a6:	85 bf       	out	0x35, r24	; 53
	/* Pin 1 is set to output for the LED*/
	set_bit(DDRB, PB0);
     9a8:	b8 9a       	sbi	0x17, 0	; 23
	/* Pin is now driven LOW*/
	clear_bit(PORTB, PB0);
     9aa:	c0 98       	cbi	0x18, 0	; 24
	/* Initialize OLED display */
	init_oled();
     9ac:	0e 94 62 03 	call	0x6c4	; 0x6c4 <init_oled>
	interface_init();
     9b0:	0e 94 fb 07 	call	0xff6	; 0xff6 <interface_init>
     9b4:	08 95       	ret

000009b6 <led_toggle>:
* \brief Toggles the led connected to pin 1 (PORTB, PB0)
*
****************************************************************************/
void led_toggle()
{
	if (test_bit(PINB, PB0))
     9b6:	b0 9b       	sbis	0x16, 0	; 22
     9b8:	02 c0       	rjmp	.+4      	; 0x9be <led_toggle+0x8>
	{
		clear_bit(PORTB, PB0);
     9ba:	c0 98       	cbi	0x18, 0	; 24
     9bc:	08 95       	ret
	}
	else
	{
		set_bit(PORTB, PB0);
     9be:	c0 9a       	sbi	0x18, 0	; 24
     9c0:	08 95       	ret

000009c2 <high_score_read>:
/****************************************************************************
* \brief Read high scores from EEPROM
*
****************************************************************************/
high_score high_score_read()
{
     9c2:	8f 92       	push	r8
     9c4:	9f 92       	push	r9
     9c6:	af 92       	push	r10
     9c8:	bf 92       	push	r11
     9ca:	cf 92       	push	r12
     9cc:	df 92       	push	r13
     9ce:	ef 92       	push	r14
     9d0:	ff 92       	push	r15
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	cd b7       	in	r28, 0x3d	; 61
     9dc:	de b7       	in	r29, 0x3e	; 62
     9de:	a3 97       	sbiw	r28, 0x23	; 35
     9e0:	0f b6       	in	r0, 0x3f	; 63
     9e2:	f8 94       	cli
     9e4:	de bf       	out	0x3e, r29	; 62
     9e6:	0f be       	out	0x3f, r0	; 63
     9e8:	cd bf       	out	0x3d, r28	; 61
     9ea:	5c 01       	movw	r10, r24
     9ec:	c1 2c       	mov	r12, r1
     9ee:	d1 2c       	mov	r13, r1
     9f0:	81 2c       	mov	r8, r1
     9f2:	91 2c       	mov	r9, r1
     9f4:	14 c0       	rjmp	.+40     	; 0xa1e <high_score_read+0x5c>
	// Read usernames
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
	{
		for (j = 0; j < USERNAME_LENGTH; j++)
		{
			scores.username[i][j] = EEPROM_read(EEPROM_HIGH_SCORES_BASE_ADDR + i * USERNAME_LENGTH + j);
     9f6:	c8 01       	movw	r24, r16
     9f8:	8c 0d       	add	r24, r12
     9fa:	9d 1d       	adc	r25, r13
     9fc:	0e 94 4e 02 	call	0x49c	; 0x49c <EEPROM_read>
     a00:	f7 01       	movw	r30, r14
     a02:	81 93       	st	Z+, r24
     a04:	7f 01       	movw	r14, r30
     a06:	0f 5f       	subi	r16, 0xFF	; 255
     a08:	1f 4f       	sbci	r17, 0xFF	; 255
	high_score scores;
	uint8_t i, j;
	// Read usernames
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
	{
		for (j = 0; j < USERNAME_LENGTH; j++)
     a0a:	05 30       	cpi	r16, 0x05	; 5
     a0c:	11 05       	cpc	r17, r1
     a0e:	99 f7       	brne	.-26     	; 0x9f6 <high_score_read+0x34>
     a10:	f5 e0       	ldi	r31, 0x05	; 5
     a12:	cf 0e       	add	r12, r31
     a14:	d1 1c       	adc	r13, r1
high_score high_score_read()
{
	high_score scores;
	uint8_t i, j;
	// Read usernames
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
     a16:	89 e1       	ldi	r24, 0x19	; 25
     a18:	c8 16       	cp	r12, r24
     a1a:	d1 04       	cpc	r13, r1
     a1c:	51 f0       	breq	.+20     	; 0xa32 <high_score_read+0x70>
     a1e:	ee 24       	eor	r14, r14
     a20:	e3 94       	inc	r14
     a22:	f1 2c       	mov	r15, r1
     a24:	ec 0e       	add	r14, r28
     a26:	fd 1e       	adc	r15, r29
     a28:	ec 0c       	add	r14, r12
     a2a:	fd 1c       	adc	r15, r13
/****************************************************************************
* \brief Read high scores from EEPROM
*
****************************************************************************/
high_score high_score_read()
{
     a2c:	08 2d       	mov	r16, r8
     a2e:	19 2d       	mov	r17, r9
     a30:	e2 cf       	rjmp	.-60     	; 0x9f6 <high_score_read+0x34>
     a32:	7e 01       	movw	r14, r28
     a34:	ea e1       	ldi	r30, 0x1A	; 26
     a36:	ee 0e       	add	r14, r30
     a38:	f1 1c       	adc	r15, r1
	high_score scores;
	uint8_t i, j;
	// Read usernames
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
     a3a:	09 e1       	ldi	r16, 0x19	; 25
     a3c:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	// Read high scores
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
	{
		scores.score[i] = (uint16_t) EEPROM_read(EEPROM_HIGH_SCORES_BASE_ADDR + HIGH_SCORES_TABLE_LENGTH * USERNAME_LENGTH + (2 * i));
     a3e:	c8 01       	movw	r24, r16
     a40:	0e 94 4e 02 	call	0x49c	; 0x49c <EEPROM_read>
     a44:	d8 2e       	mov	r13, r24
		scores.score[i] <<= 8;
		scores.score[i] |= (uint16_t) EEPROM_read(EEPROM_HIGH_SCORES_BASE_ADDR + HIGH_SCORES_TABLE_LENGTH * USERNAME_LENGTH + (2 * i) + 1);
     a46:	c8 01       	movw	r24, r16
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	0e 94 4e 02 	call	0x49c	; 0x49c <EEPROM_read>
		}
	}
	// Read high scores
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
	{
		scores.score[i] = (uint16_t) EEPROM_read(EEPROM_HIGH_SCORES_BASE_ADDR + HIGH_SCORES_TABLE_LENGTH * USERNAME_LENGTH + (2 * i));
     a4e:	2d 2d       	mov	r18, r13
     a50:	30 e0       	ldi	r19, 0x00	; 0
		scores.score[i] <<= 8;
     a52:	32 2f       	mov	r19, r18
     a54:	22 27       	eor	r18, r18
		scores.score[i] |= (uint16_t) EEPROM_read(EEPROM_HIGH_SCORES_BASE_ADDR + HIGH_SCORES_TABLE_LENGTH * USERNAME_LENGTH + (2 * i) + 1);
     a56:	28 2b       	or	r18, r24
     a58:	f7 01       	movw	r30, r14
     a5a:	21 93       	st	Z+, r18
     a5c:	31 93       	st	Z+, r19
     a5e:	7f 01       	movw	r14, r30
     a60:	0e 5f       	subi	r16, 0xFE	; 254
     a62:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			scores.username[i][j] = EEPROM_read(EEPROM_HIGH_SCORES_BASE_ADDR + i * USERNAME_LENGTH + j);
		}
	}
	// Read high scores
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
     a64:	03 32       	cpi	r16, 0x23	; 35
     a66:	11 05       	cpc	r17, r1
     a68:	51 f7       	brne	.-44     	; 0xa3e <high_score_read+0x7c>
		scores.score[i] = (uint16_t) EEPROM_read(EEPROM_HIGH_SCORES_BASE_ADDR + HIGH_SCORES_TABLE_LENGTH * USERNAME_LENGTH + (2 * i));
		scores.score[i] <<= 8;
		scores.score[i] |= (uint16_t) EEPROM_read(EEPROM_HIGH_SCORES_BASE_ADDR + HIGH_SCORES_TABLE_LENGTH * USERNAME_LENGTH + (2 * i) + 1);
	}
	
	return scores;
     a6a:	83 e2       	ldi	r24, 0x23	; 35
     a6c:	fe 01       	movw	r30, r28
     a6e:	31 96       	adiw	r30, 0x01	; 1
     a70:	d5 01       	movw	r26, r10
     a72:	01 90       	ld	r0, Z+
     a74:	0d 92       	st	X+, r0
     a76:	8a 95       	dec	r24
     a78:	e1 f7       	brne	.-8      	; 0xa72 <high_score_read+0xb0>
}
     a7a:	c5 01       	movw	r24, r10
     a7c:	a3 96       	adiw	r28, 0x23	; 35
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	f8 94       	cli
     a82:	de bf       	out	0x3e, r29	; 62
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	cd bf       	out	0x3d, r28	; 61
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	ff 90       	pop	r15
     a92:	ef 90       	pop	r14
     a94:	df 90       	pop	r13
     a96:	cf 90       	pop	r12
     a98:	bf 90       	pop	r11
     a9a:	af 90       	pop	r10
     a9c:	9f 90       	pop	r9
     a9e:	8f 90       	pop	r8
     aa0:	08 95       	ret

00000aa2 <high_score_write>:
* \brief Write high scores to EEPROM
* \param in High scores
*
****************************************************************************/
void high_score_write(high_score scores)
{
     aa2:	8f 92       	push	r8
     aa4:	9f 92       	push	r9
     aa6:	af 92       	push	r10
     aa8:	bf 92       	push	r11
     aaa:	cf 92       	push	r12
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	cd b7       	in	r28, 0x3d	; 61
     abc:	de b7       	in	r29, 0x3e	; 62
     abe:	ce 01       	movw	r24, r28
     ac0:	0f 96       	adiw	r24, 0x0f	; 15
     ac2:	5c 01       	movw	r10, r24
     ac4:	c1 2c       	mov	r12, r1
     ac6:	d1 2c       	mov	r13, r1
     ac8:	81 2c       	mov	r8, r1
     aca:	91 2c       	mov	r9, r1
     acc:	17 c0       	rjmp	.+46     	; 0xafc <high_score_write+0x5a>
	// Write usernames
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
	{
		for (j = 0; j < USERNAME_LENGTH; j++)
		{
			EEPROM_write(EEPROM_HIGH_SCORES_BASE_ADDR + i * USERNAME_LENGTH + j, scores.username[i][j]);
     ace:	f7 01       	movw	r30, r14
     ad0:	61 91       	ld	r22, Z+
     ad2:	7f 01       	movw	r14, r30
     ad4:	c8 01       	movw	r24, r16
     ad6:	8c 0d       	add	r24, r12
     ad8:	9d 1d       	adc	r25, r13
     ada:	0e 94 46 02 	call	0x48c	; 0x48c <EEPROM_write>
     ade:	0f 5f       	subi	r16, 0xFF	; 255
     ae0:	1f 4f       	sbci	r17, 0xFF	; 255
{
	uint8_t i, j;
	// Write usernames
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
	{
		for (j = 0; j < USERNAME_LENGTH; j++)
     ae2:	05 30       	cpi	r16, 0x05	; 5
     ae4:	11 05       	cpc	r17, r1
     ae6:	99 f7       	brne	.-26     	; 0xace <high_score_write+0x2c>
     ae8:	f5 e0       	ldi	r31, 0x05	; 5
     aea:	af 0e       	add	r10, r31
     aec:	b1 1c       	adc	r11, r1
     aee:	85 e0       	ldi	r24, 0x05	; 5
     af0:	c8 0e       	add	r12, r24
     af2:	d1 1c       	adc	r13, r1
****************************************************************************/
void high_score_write(high_score scores)
{
	uint8_t i, j;
	// Write usernames
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
     af4:	99 e1       	ldi	r25, 0x19	; 25
     af6:	c9 16       	cp	r12, r25
     af8:	d1 04       	cpc	r13, r1
     afa:	21 f0       	breq	.+8      	; 0xb04 <high_score_write+0x62>
* \brief Write high scores to EEPROM
* \param in High scores
*
****************************************************************************/
void high_score_write(high_score scores)
{
     afc:	75 01       	movw	r14, r10
     afe:	08 2d       	mov	r16, r8
     b00:	19 2d       	mov	r17, r9
     b02:	e5 cf       	rjmp	.-54     	; 0xace <high_score_write+0x2c>
     b04:	7e 01       	movw	r14, r28
     b06:	e8 e2       	ldi	r30, 0x28	; 40
     b08:	ee 0e       	add	r14, r30
     b0a:	f1 1c       	adc	r15, r1
	uint8_t i, j;
	// Write usernames
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
     b0c:	09 e1       	ldi	r16, 0x19	; 25
     b0e:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	// Write high scores
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
	{
		EEPROM_write(EEPROM_HIGH_SCORES_BASE_ADDR + HIGH_SCORES_TABLE_LENGTH * USERNAME_LENGTH + (2 * i), (uint8_t) ((scores.score[i] >> 8) & 0xFF));
     b10:	f7 01       	movw	r30, r14
     b12:	d0 80       	ld	r13, Z
     b14:	61 81       	ldd	r22, Z+1	; 0x01
     b16:	f2 e0       	ldi	r31, 0x02	; 2
     b18:	ef 0e       	add	r14, r31
     b1a:	f1 1c       	adc	r15, r1
     b1c:	c8 01       	movw	r24, r16
     b1e:	0e 94 46 02 	call	0x48c	; 0x48c <EEPROM_write>
		EEPROM_write(EEPROM_HIGH_SCORES_BASE_ADDR + HIGH_SCORES_TABLE_LENGTH * USERNAME_LENGTH + (2 * i) + 1, (uint8_t) (scores.score[i] & 0xFF));
     b22:	6d 2d       	mov	r22, r13
     b24:	c8 01       	movw	r24, r16
     b26:	01 96       	adiw	r24, 0x01	; 1
     b28:	0e 94 46 02 	call	0x48c	; 0x48c <EEPROM_write>
     b2c:	0e 5f       	subi	r16, 0xFE	; 254
     b2e:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			EEPROM_write(EEPROM_HIGH_SCORES_BASE_ADDR + i * USERNAME_LENGTH + j, scores.username[i][j]);
		}
	}
	// Write high scores
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
     b30:	03 32       	cpi	r16, 0x23	; 35
     b32:	11 05       	cpc	r17, r1
     b34:	69 f7       	brne	.-38     	; 0xb10 <high_score_write+0x6e>
	{
		EEPROM_write(EEPROM_HIGH_SCORES_BASE_ADDR + HIGH_SCORES_TABLE_LENGTH * USERNAME_LENGTH + (2 * i), (uint8_t) ((scores.score[i] >> 8) & 0xFF));
		EEPROM_write(EEPROM_HIGH_SCORES_BASE_ADDR + HIGH_SCORES_TABLE_LENGTH * USERNAME_LENGTH + (2 * i) + 1, (uint8_t) (scores.score[i] & 0xFF));
	}
}
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	df 90       	pop	r13
     b44:	cf 90       	pop	r12
     b46:	bf 90       	pop	r11
     b48:	af 90       	pop	r10
     b4a:	9f 90       	pop	r9
     b4c:	8f 90       	pop	r8
     b4e:	08 95       	ret

00000b50 <SRAM_high_score_write>:
/****************************************************************************
* \brief Rewrite high scores from EEPROM to SRAM
*
****************************************************************************/
void SRAM_high_score_write()
{
     b50:	2f 92       	push	r2
     b52:	3f 92       	push	r3
     b54:	4f 92       	push	r4
     b56:	5f 92       	push	r5
     b58:	6f 92       	push	r6
     b5a:	7f 92       	push	r7
     b5c:	8f 92       	push	r8
     b5e:	9f 92       	push	r9
     b60:	af 92       	push	r10
     b62:	bf 92       	push	r11
     b64:	cf 92       	push	r12
     b66:	df 92       	push	r13
     b68:	ef 92       	push	r14
     b6a:	ff 92       	push	r15
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
     b78:	ac 97       	sbiw	r28, 0x2c	; 44
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	de bf       	out	0x3e, r29	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	cd bf       	out	0x3d, r28	; 61
	volatile uint8_t* high_scores_sram = (uint8_t*) SRAM_HIGH_SCORES_ADDR;
	char buffer[6];
	uint8_t len, i, j;
	high_score scores = high_score_read();
     b84:	ce 01       	movw	r24, r28
     b86:	07 96       	adiw	r24, 0x07	; 7
     b88:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <high_score_read>
     b8c:	3e 01       	movw	r6, r28
     b8e:	20 e2       	ldi	r18, 0x20	; 32
     b90:	62 0e       	add	r6, r18
     b92:	71 1c       	adc	r7, r1
     b94:	ce 01       	movw	r24, r28
     b96:	07 96       	adiw	r24, 0x07	; 7
     b98:	2c 01       	movw	r4, r24
     b9a:	c1 2c       	mov	r12, r1
     b9c:	d1 2c       	mov	r13, r1
     b9e:	08 e0       	ldi	r16, 0x08	; 8
     ba0:	10 e0       	ldi	r17, 0x00	; 0
	
	for(i = 0; i < HIGH_SCORES_TABLE_LENGTH; i ++)
	{
		snprintf(buffer, 6, "%u", scores.score[i]);
     ba2:	de 01       	movw	r26, r28
     ba4:	11 96       	adiw	r26, 0x01	; 1
     ba6:	7d 01       	movw	r14, r26
		len = strlen(buffer);
     ba8:	a1 2c       	mov	r10, r1
     baa:	91 2c       	mov	r9, r1
		for (j = 0; j < USERNAME_LENGTH; j++)
		{
			high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + j] = scores.username[i][j];
		}
		
		high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH] = ' ';
     bac:	68 94       	set
     bae:	bb 24       	eor	r11, r11
     bb0:	b5 f8       	bld	r11, 5
		high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH + 1] = ' ';
		high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH + 2] = ' ';
		
		for (j = 0; j < (5 - len); j ++)
     bb2:	0f 2e       	mov	r0, r31
     bb4:	f5 e0       	ldi	r31, 0x05	; 5
     bb6:	2f 2e       	mov	r2, r31
     bb8:	31 2c       	mov	r3, r1
     bba:	f0 2d       	mov	r31, r0
		{
			high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH + 3 + j] = ' ';
		}
		
		
		for (j = 0; j < len; j++)
     bbc:	ac a7       	std	Y+44, r26	; 0x2c
     bbe:	8f 2c       	mov	r8, r15
     bc0:	8d e0       	ldi	r24, 0x0D	; 13
     bc2:	9c e1       	ldi	r25, 0x1C	; 28
     bc4:	fc 01       	movw	r30, r24
     bc6:	ea 1b       	sub	r30, r26
     bc8:	fb 0b       	sbc	r31, r27
     bca:	fb a7       	std	Y+43, r31	; 0x2b
     bcc:	ea a7       	std	Y+42, r30	; 0x2a
	uint8_t len, i, j;
	high_score scores = high_score_read();
	
	for(i = 0; i < HIGH_SCORES_TABLE_LENGTH; i ++)
	{
		snprintf(buffer, 6, "%u", scores.score[i]);
     bce:	d3 01       	movw	r26, r6
     bd0:	8c 91       	ld	r24, X
     bd2:	11 96       	adiw	r26, 0x01	; 1
     bd4:	9c 91       	ld	r25, X
     bd6:	b2 e0       	ldi	r27, 0x02	; 2
     bd8:	6b 0e       	add	r6, r27
     bda:	71 1c       	adc	r7, r1
     bdc:	9f 93       	push	r25
     bde:	8f 93       	push	r24
     be0:	a5 e1       	ldi	r26, 0x15	; 21
     be2:	b2 e0       	ldi	r27, 0x02	; 2
     be4:	bf 93       	push	r27
     be6:	af 93       	push	r26
     be8:	1f 92       	push	r1
     bea:	f6 e0       	ldi	r31, 0x06	; 6
     bec:	ff 93       	push	r31
     bee:	ff 92       	push	r15
     bf0:	ef 92       	push	r14
     bf2:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <snprintf>
		len = strlen(buffer);
     bf6:	f7 01       	movw	r30, r14
     bf8:	01 90       	ld	r0, Z+
     bfa:	00 20       	and	r0, r0
     bfc:	e9 f7       	brne	.-6      	; 0xbf8 <SRAM_high_score_write+0xa8>
     bfe:	31 97       	sbiw	r30, 0x01	; 1
     c00:	af 01       	movw	r20, r30
     c02:	4e 19       	sub	r20, r14
     c04:	5f 09       	sbc	r21, r15
     c06:	64 2f       	mov	r22, r20
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	f8 94       	cli
     c0c:	de bf       	out	0x3e, r29	; 62
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	cd bf       	out	0x3d, r28	; 61
     c12:	f2 01       	movw	r30, r4
     c14:	8a 2d       	mov	r24, r10
     c16:	99 2d       	mov	r25, r9
     c18:	96 01       	movw	r18, r12
     c1a:	2b 5f       	subi	r18, 0xFB	; 251
     c1c:	33 4e       	sbci	r19, 0xE3	; 227
     c1e:	d9 01       	movw	r26, r18
     c20:	a8 0f       	add	r26, r24
     c22:	b9 1f       	adc	r27, r25
		
		for (j = 0; j < USERNAME_LENGTH; j++)
		{
			high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + j] = scores.username[i][j];
     c24:	71 91       	ld	r23, Z+
     c26:	7c 93       	st	X, r23
     c28:	01 96       	adiw	r24, 0x01	; 1
	for(i = 0; i < HIGH_SCORES_TABLE_LENGTH; i ++)
	{
		snprintf(buffer, 6, "%u", scores.score[i]);
		len = strlen(buffer);
		
		for (j = 0; j < USERNAME_LENGTH; j++)
     c2a:	85 30       	cpi	r24, 0x05	; 5
     c2c:	91 05       	cpc	r25, r1
     c2e:	b9 f7       	brne	.-18     	; 0xc1e <SRAM_high_score_write+0xce>
     c30:	f6 01       	movw	r30, r12
     c32:	e6 5f       	subi	r30, 0xF6	; 246
     c34:	f3 4e       	sbci	r31, 0xE3	; 227
		{
			high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + j] = scores.username[i][j];
		}
		
		high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH] = ' ';
     c36:	b0 82       	st	Z, r11
     c38:	31 96       	adiw	r30, 0x01	; 1
		high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH + 1] = ' ';
     c3a:	b0 82       	st	Z, r11
     c3c:	31 96       	adiw	r30, 0x01	; 1
		high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH + 2] = ' ';
     c3e:	b0 82       	st	Z, r11
		
		for (j = 0; j < (5 - len); j ++)
     c40:	c1 01       	movw	r24, r2
     c42:	84 1b       	sub	r24, r20
     c44:	91 09       	sbc	r25, r1
     c46:	18 16       	cp	r1, r24
     c48:	19 06       	cpc	r1, r25
     c4a:	7c f4       	brge	.+30     	; 0xc6a <SRAM_high_score_write+0x11a>
     c4c:	2a 2d       	mov	r18, r10
     c4e:	39 2d       	mov	r19, r9
     c50:	40 e0       	ldi	r20, 0x00	; 0
		{
			high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH + 3 + j] = ' ';
     c52:	20 0f       	add	r18, r16
     c54:	31 1f       	adc	r19, r17
     c56:	f9 01       	movw	r30, r18
     c58:	eb 5f       	subi	r30, 0xFB	; 251
     c5a:	f3 4e       	sbci	r31, 0xE3	; 227
     c5c:	b0 82       	st	Z, r11
		
		high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH] = ' ';
		high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH + 1] = ' ';
		high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH + 2] = ' ';
		
		for (j = 0; j < (5 - len); j ++)
     c5e:	4f 5f       	subi	r20, 0xFF	; 255
     c60:	24 2f       	mov	r18, r20
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	28 17       	cp	r18, r24
     c66:	39 07       	cpc	r19, r25
     c68:	a4 f3       	brlt	.-24     	; 0xc52 <SRAM_high_score_write+0x102>
		{
			high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH + 3 + j] = ' ';
		}
		
		
		for (j = 0; j < len; j++)
     c6a:	66 23       	and	r22, r22
     c6c:	89 f0       	breq	.+34     	; 0xc90 <SRAM_high_score_write+0x140>
     c6e:	ec a5       	ldd	r30, Y+44	; 0x2c
     c70:	f8 2d       	mov	r31, r8
     c72:	2a a5       	ldd	r18, Y+42	; 0x2a
     c74:	3b a5       	ldd	r19, Y+43	; 0x2b
     c76:	2c 0d       	add	r18, r12
     c78:	3d 1d       	adc	r19, r13
     c7a:	82 0f       	add	r24, r18
     c7c:	93 1f       	adc	r25, r19
     c7e:	dc 01       	movw	r26, r24
     c80:	ae 0f       	add	r26, r30
     c82:	bf 1f       	adc	r27, r31
		{
			high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH + 3 + (5 - len) + j] = buffer[j];
     c84:	21 91       	ld	r18, Z+
     c86:	2c 93       	st	X, r18
     c88:	2e 2f       	mov	r18, r30
     c8a:	2e 19       	sub	r18, r14
		{
			high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH + 3 + j] = ' ';
		}
		
		
		for (j = 0; j < len; j++)
     c8c:	26 17       	cp	r18, r22
     c8e:	b8 f3       	brcs	.-18     	; 0xc7e <SRAM_high_score_write+0x12e>
     c90:	03 5f       	subi	r16, 0xF3	; 243
     c92:	1f 4f       	sbci	r17, 0xFF	; 255
     c94:	3d e0       	ldi	r19, 0x0D	; 13
     c96:	c3 0e       	add	r12, r19
     c98:	d1 1c       	adc	r13, r1
     c9a:	85 e0       	ldi	r24, 0x05	; 5
     c9c:	48 0e       	add	r4, r24
     c9e:	51 1c       	adc	r5, r1
	volatile uint8_t* high_scores_sram = (uint8_t*) SRAM_HIGH_SCORES_ADDR;
	char buffer[6];
	uint8_t len, i, j;
	high_score scores = high_score_read();
	
	for(i = 0; i < HIGH_SCORES_TABLE_LENGTH; i ++)
     ca0:	91 e4       	ldi	r25, 0x41	; 65
     ca2:	c9 16       	cp	r12, r25
     ca4:	d1 04       	cpc	r13, r1
     ca6:	09 f0       	breq	.+2      	; 0xcaa <SRAM_high_score_write+0x15a>
     ca8:	92 cf       	rjmp	.-220    	; 0xbce <SRAM_high_score_write+0x7e>
		for (j = 0; j < len; j++)
		{
			high_scores_sram[SRAM_HIGH_SCORE_LENGTH * i + USERNAME_LENGTH + 3 + (5 - len) + j] = buffer[j];
		}
	}
}
     caa:	ac 96       	adiw	r28, 0x2c	; 44
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	f8 94       	cli
     cb0:	de bf       	out	0x3e, r29	; 62
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	cd bf       	out	0x3d, r28	; 61
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	ef 90       	pop	r14
     cc2:	df 90       	pop	r13
     cc4:	cf 90       	pop	r12
     cc6:	bf 90       	pop	r11
     cc8:	af 90       	pop	r10
     cca:	9f 90       	pop	r9
     ccc:	8f 90       	pop	r8
     cce:	7f 90       	pop	r7
     cd0:	6f 90       	pop	r6
     cd2:	5f 90       	pop	r5
     cd4:	4f 90       	pop	r4
     cd6:	3f 90       	pop	r3
     cd8:	2f 90       	pop	r2
     cda:	08 95       	ret

00000cdc <high_score_add>:
* \param in Username
* \param in Score
* \param out 0 if addition wasn't successful else position of new high score
****************************************************************************/
uint8_t high_score_add(char* name, uint16_t new_score)
{
     cdc:	bf 92       	push	r11
     cde:	cf 92       	push	r12
     ce0:	df 92       	push	r13
     ce2:	ef 92       	push	r14
     ce4:	ff 92       	push	r15
     ce6:	0f 93       	push	r16
     ce8:	1f 93       	push	r17
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	a3 97       	sbiw	r28, 0x23	; 35
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
     cfe:	d8 2e       	mov	r13, r24
     d00:	e9 2e       	mov	r14, r25
     d02:	8b 01       	movw	r16, r22
	uint8_t i, j, k;
	high_score scores = high_score_read();
     d04:	ce 01       	movw	r24, r28
     d06:	01 96       	adiw	r24, 0x01	; 1
     d08:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <high_score_read>
	
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
	{
		if (new_score > scores.score[i])
     d0c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d0e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d10:	80 17       	cp	r24, r16
     d12:	91 07       	cpc	r25, r17
     d14:	88 f4       	brcc	.+34     	; 0xd38 <high_score_add+0x5c>
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	90 e0       	ldi	r25, 0x00	; 0
uint8_t high_score_add(char* name, uint16_t new_score)
{
	uint8_t i, j, k;
	high_score scores = high_score_read();
	
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
     d1a:	f1 2c       	mov	r15, r1
     d1c:	ae 01       	movw	r20, r28
     d1e:	4e 5d       	subi	r20, 0xDE	; 222
     d20:	5f 4f       	sbci	r21, 0xFF	; 255
     d22:	9e 01       	movw	r18, r28
     d24:	20 5f       	subi	r18, 0xF0	; 240
     d26:	3f 4f       	sbci	r19, 0xFF	; 255
     d28:	68 94       	set
     d2a:	cc 24       	eor	r12, r12
     d2c:	c2 f8       	bld	r12, 2
	{
		if (new_score > scores.score[i])
		{
			for (j = HIGH_SCORES_TABLE_LENGTH - 1; j > i; j--)
			{
				scores.score[j] = scores.score[j - 1];
     d2e:	0f 2e       	mov	r0, r31
     d30:	f5 e0       	ldi	r31, 0x05	; 5
     d32:	bf 2e       	mov	r11, r31
     d34:	f0 2d       	mov	r31, r0
     d36:	10 c0       	rjmp	.+32     	; 0xd58 <high_score_add+0x7c>
     d38:	fe 01       	movw	r30, r28
     d3a:	7c 96       	adiw	r30, 0x1c	; 28
	uint8_t i, j, k;
	high_score scores = high_score_read();
	
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
	{
		if (new_score > scores.score[i])
     d3c:	21 e0       	ldi	r18, 0x01	; 1
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	f2 2e       	mov	r15, r18
     d42:	c9 01       	movw	r24, r18
     d44:	41 91       	ld	r20, Z+
     d46:	51 91       	ld	r21, Z+
     d48:	40 17       	cp	r20, r16
     d4a:	51 07       	cpc	r21, r17
     d4c:	08 f0       	brcs	.+2      	; 0xd50 <high_score_add+0x74>
     d4e:	51 c0       	rjmp	.+162    	; 0xdf2 <high_score_add+0x116>
		{
			for (j = HIGH_SCORES_TABLE_LENGTH - 1; j > i; j--)
     d50:	23 e0       	ldi	r18, 0x03	; 3
     d52:	2f 15       	cp	r18, r15
     d54:	18 f7       	brcc	.-58     	; 0xd1c <high_score_add+0x40>
     d56:	13 c0       	rjmp	.+38     	; 0xd7e <high_score_add+0xa2>
			{
				scores.score[j] = scores.score[j - 1];
     d58:	fa 01       	movw	r30, r20
     d5a:	72 91       	ld	r23, -Z
     d5c:	62 91       	ld	r22, -Z
     d5e:	af 01       	movw	r20, r30
     d60:	73 83       	std	Z+3, r23	; 0x03
     d62:	62 83       	std	Z+2, r22	; 0x02
     d64:	d9 01       	movw	r26, r18
     d66:	15 96       	adiw	r26, 0x05	; 5
     d68:	f9 01       	movw	r30, r18
     d6a:	6b 2d       	mov	r22, r11
				for (k = 0; k < USERNAME_LENGTH; k++)
				{
					scores.username[j][k] = scores.username[j - 1][k];
     d6c:	71 91       	ld	r23, Z+
     d6e:	7d 93       	st	X+, r23
     d70:	61 50       	subi	r22, 0x01	; 1
		if (new_score > scores.score[i])
		{
			for (j = HIGH_SCORES_TABLE_LENGTH - 1; j > i; j--)
			{
				scores.score[j] = scores.score[j - 1];
				for (k = 0; k < USERNAME_LENGTH; k++)
     d72:	e1 f7       	brne	.-8      	; 0xd6c <high_score_add+0x90>
	
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
	{
		if (new_score > scores.score[i])
		{
			for (j = HIGH_SCORES_TABLE_LENGTH - 1; j > i; j--)
     d74:	ca 94       	dec	r12
     d76:	25 50       	subi	r18, 0x05	; 5
     d78:	31 09       	sbc	r19, r1
     d7a:	fc 14       	cp	r15, r12
     d7c:	68 f3       	brcs	.-38     	; 0xd58 <high_score_add+0x7c>
				for (k = 0; k < USERNAME_LENGTH; k++)
				{
					scores.username[j][k] = scores.username[j - 1][k];
				}
			}
			scores.score[i] = new_score;
     d7e:	fc 01       	movw	r30, r24
     d80:	ee 0f       	add	r30, r30
     d82:	ff 1f       	adc	r31, r31
     d84:	21 e0       	ldi	r18, 0x01	; 1
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	2c 0f       	add	r18, r28
     d8a:	3d 1f       	adc	r19, r29
     d8c:	e2 0f       	add	r30, r18
     d8e:	f3 1f       	adc	r31, r19
     d90:	12 8f       	std	Z+26, r17	; 0x1a
     d92:	01 8f       	std	Z+25, r16	; 0x19
     d94:	ed 2d       	mov	r30, r13
     d96:	fe 2d       	mov	r31, r14
     d98:	dc 01       	movw	r26, r24
     d9a:	aa 0f       	add	r26, r26
     d9c:	bb 1f       	adc	r27, r27
     d9e:	aa 0f       	add	r26, r26
     da0:	bb 1f       	adc	r27, r27
     da2:	8a 0f       	add	r24, r26
     da4:	9b 1f       	adc	r25, r27
     da6:	d9 01       	movw	r26, r18
     da8:	a8 0f       	add	r26, r24
     daa:	b9 1f       	adc	r27, r25
     dac:	85 e0       	ldi	r24, 0x05	; 5
			for (k = 0; k < USERNAME_LENGTH; k++)
			{
				scores.username[i][k] = name[k];
     dae:	91 91       	ld	r25, Z+
     db0:	9d 93       	st	X+, r25
     db2:	81 50       	subi	r24, 0x01	; 1
				{
					scores.username[j][k] = scores.username[j - 1][k];
				}
			}
			scores.score[i] = new_score;
			for (k = 0; k < USERNAME_LENGTH; k++)
     db4:	e1 f7       	brne	.-8      	; 0xdae <high_score_add+0xd2>
			{
				scores.username[i][k] = name[k];
			}
			high_score_write(scores);
     db6:	8d b7       	in	r24, 0x3d	; 61
     db8:	9e b7       	in	r25, 0x3e	; 62
     dba:	83 97       	sbiw	r24, 0x23	; 35
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	9e bf       	out	0x3e, r25	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	8d bf       	out	0x3d, r24	; 61
     dc6:	ad b7       	in	r26, 0x3d	; 61
     dc8:	be b7       	in	r27, 0x3e	; 62
     dca:	11 96       	adiw	r26, 0x01	; 1
     dcc:	83 e2       	ldi	r24, 0x23	; 35
     dce:	fe 01       	movw	r30, r28
     dd0:	31 96       	adiw	r30, 0x01	; 1
     dd2:	01 90       	ld	r0, Z+
     dd4:	0d 92       	st	X+, r0
     dd6:	8a 95       	dec	r24
     dd8:	e1 f7       	brne	.-8      	; 0xdd2 <high_score_add+0xf6>
     dda:	0e 94 51 05 	call	0xaa2	; 0xaa2 <high_score_write>
			SRAM_high_score_write();
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	cd bf       	out	0x3d, r28	; 61
     de8:	0e 94 a8 05 	call	0xb50	; 0xb50 <SRAM_high_score_write>
			return i + 1;
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	8f 0d       	add	r24, r15
     df0:	07 c0       	rjmp	.+14     	; 0xe00 <high_score_add+0x124>
     df2:	2f 5f       	subi	r18, 0xFF	; 255
     df4:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t high_score_add(char* name, uint16_t new_score)
{
	uint8_t i, j, k;
	high_score scores = high_score_read();
	
	for (i = 0; i < HIGH_SCORES_TABLE_LENGTH; i++)
     df6:	25 30       	cpi	r18, 0x05	; 5
     df8:	31 05       	cpc	r19, r1
     dfa:	09 f0       	breq	.+2      	; 0xdfe <high_score_add+0x122>
     dfc:	a1 cf       	rjmp	.-190    	; 0xd40 <high_score_add+0x64>
			SRAM_high_score_write();
			return i + 1;
		}
	}
	
	return 0;
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	a3 96       	adiw	r28, 0x23	; 35
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	ff 90       	pop	r15
     e16:	ef 90       	pop	r14
     e18:	df 90       	pop	r13
     e1a:	cf 90       	pop	r12
     e1c:	bf 90       	pop	r11
     e1e:	08 95       	ret

00000e20 <main>:
//#include "MCP_DRIVER.h"
//#include "TIME_DRIVER.h"


int main(void)
{	
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
     e28:	a3 97       	sbiw	r28, 0x23	; 35
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	f8 94       	cli
     e2e:	de bf       	out	0x3e, r29	; 62
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	cd bf       	out	0x3d, r28	; 61
	//int i;

	clear_bit(DDRD, PD3);
     e34:	8b 98       	cbi	0x11, 3	; 17
	clear_bit(DDRD, PD2);
     e36:	8a 98       	cbi	0x11, 2	; 17
	
	init();
     e38:	0e 94 c7 04 	call	0x98e	; 0x98e <init>
	high_score scores;
	
	timer1_init();
     e3c:	0e 94 a3 07 	call	0xf46	; 0xf46 <timer1_init>
	
	CAN_init();
     e40:	0e 94 5d 01 	call	0x2ba	; 0x2ba <CAN_init>
	
	clear_oled();
     e44:	0e 94 a9 03 	call	0x752	; 0x752 <clear_oled>
	reset_position();
     e48:	0e 94 8f 03 	call	0x71e	; 0x71e <reset_position>
	refresh_oled();
     e4c:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	
	printf("start\n");
     e50:	88 e1       	ldi	r24, 0x18	; 24
     e52:	92 e0       	ldi	r25, 0x02	; 2
     e54:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <puts>
	printf("%d\n", sizeof(int));
     e58:	1f 92       	push	r1
     e5a:	82 e0       	ldi	r24, 0x02	; 2
     e5c:	8f 93       	push	r24
     e5e:	8e e1       	ldi	r24, 0x1E	; 30
     e60:	92 e0       	ldi	r25, 0x02	; 2
     e62:	9f 93       	push	r25
     e64:	8f 93       	push	r24
     e66:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <printf>
	
	
	strncpy ( scores.username[0], "KURVA\0", 6 );
     e6a:	86 e0       	ldi	r24, 0x06	; 6
     e6c:	e8 e0       	ldi	r30, 0x08	; 8
     e6e:	f1 e0       	ldi	r31, 0x01	; 1
     e70:	de 01       	movw	r26, r28
     e72:	11 96       	adiw	r26, 0x01	; 1
     e74:	01 90       	ld	r0, Z+
     e76:	0d 92       	st	X+, r0
     e78:	8a 95       	dec	r24
     e7a:	e1 f7       	brne	.-8      	; 0xe74 <main+0x54>
	strncpy ( scores.username[1], "KURVA\0", 6 );
     e7c:	86 e0       	ldi	r24, 0x06	; 6
     e7e:	e8 e0       	ldi	r30, 0x08	; 8
     e80:	f1 e0       	ldi	r31, 0x01	; 1
     e82:	de 01       	movw	r26, r28
     e84:	16 96       	adiw	r26, 0x06	; 6
     e86:	01 90       	ld	r0, Z+
     e88:	0d 92       	st	X+, r0
     e8a:	8a 95       	dec	r24
     e8c:	e1 f7       	brne	.-8      	; 0xe86 <main+0x66>
	strncpy ( scores.username[2], "KURVA\0", 6 );
     e8e:	86 e0       	ldi	r24, 0x06	; 6
     e90:	e8 e0       	ldi	r30, 0x08	; 8
     e92:	f1 e0       	ldi	r31, 0x01	; 1
     e94:	de 01       	movw	r26, r28
     e96:	1b 96       	adiw	r26, 0x0b	; 11
     e98:	01 90       	ld	r0, Z+
     e9a:	0d 92       	st	X+, r0
     e9c:	8a 95       	dec	r24
     e9e:	e1 f7       	brne	.-8      	; 0xe98 <main+0x78>
	strncpy ( scores.username[3], "KURVA\0", 6 );
     ea0:	86 e0       	ldi	r24, 0x06	; 6
     ea2:	e8 e0       	ldi	r30, 0x08	; 8
     ea4:	f1 e0       	ldi	r31, 0x01	; 1
     ea6:	de 01       	movw	r26, r28
     ea8:	50 96       	adiw	r26, 0x10	; 16
     eaa:	01 90       	ld	r0, Z+
     eac:	0d 92       	st	X+, r0
     eae:	8a 95       	dec	r24
     eb0:	e1 f7       	brne	.-8      	; 0xeaa <main+0x8a>
	strncpy ( scores.username[4], "KURVA\0", 6 );
     eb2:	86 e0       	ldi	r24, 0x06	; 6
     eb4:	e8 e0       	ldi	r30, 0x08	; 8
     eb6:	f1 e0       	ldi	r31, 0x01	; 1
     eb8:	de 01       	movw	r26, r28
     eba:	55 96       	adiw	r26, 0x15	; 21
     ebc:	01 90       	ld	r0, Z+
     ebe:	0d 92       	st	X+, r0
     ec0:	8a 95       	dec	r24
     ec2:	e1 f7       	brne	.-8      	; 0xebc <main+0x9c>
	scores.score[0] = 0x0000;
     ec4:	1b 8e       	std	Y+27, r1	; 0x1b
     ec6:	1a 8e       	std	Y+26, r1	; 0x1a
	scores.score[1] = 0x0000;
     ec8:	1d 8e       	std	Y+29, r1	; 0x1d
     eca:	1c 8e       	std	Y+28, r1	; 0x1c
	scores.score[2] = 0x0000;
     ecc:	1f 8e       	std	Y+31, r1	; 0x1f
     ece:	1e 8e       	std	Y+30, r1	; 0x1e
	scores.score[3] = 0x0000;
     ed0:	19 a2       	std	Y+33, r1	; 0x21
     ed2:	18 a2       	std	Y+32, r1	; 0x20
	scores.score[4] = 0x0000;
     ed4:	1b a2       	std	Y+35, r1	; 0x23
     ed6:	1a a2       	std	Y+34, r1	; 0x22
	
	high_score_write(scores);
     ed8:	8d b7       	in	r24, 0x3d	; 61
     eda:	9e b7       	in	r25, 0x3e	; 62
     edc:	83 97       	sbiw	r24, 0x23	; 35
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	9e bf       	out	0x3e, r25	; 62
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	8d bf       	out	0x3d, r24	; 61
     ee8:	ad b7       	in	r26, 0x3d	; 61
     eea:	be b7       	in	r27, 0x3e	; 62
     eec:	11 96       	adiw	r26, 0x01	; 1
     eee:	83 e2       	ldi	r24, 0x23	; 35
     ef0:	fe 01       	movw	r30, r28
     ef2:	31 96       	adiw	r30, 0x01	; 1
     ef4:	01 90       	ld	r0, Z+
     ef6:	0d 92       	st	X+, r0
     ef8:	8a 95       	dec	r24
     efa:	e1 f7       	brne	.-8      	; 0xef4 <main+0xd4>
     efc:	0e 94 51 05 	call	0xaa2	; 0xaa2 <high_score_write>
	
	sei();
     f00:	78 94       	sei
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
		interface_state_machine();
     f0c:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <interface_state_machine>
     f10:	fd cf       	rjmp	.-6      	; 0xf0c <main+0xec>

00000f12 <SPI_init>:
*
****************************************************************************/
void SPI_init()
{
	/* Drive MOSI, SCK and CS HIGH*/
	DDR_SPI |= (1 << DD_MOSI) | (1 << DD_SCK) | (1 << DD_CS);
     f12:	87 b3       	in	r24, 0x17	; 23
     f14:	80 6b       	ori	r24, 0xB0	; 176
     f16:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master mode, clock rate fck/16*/
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     f18:	81 e5       	ldi	r24, 0x51	; 81
     f1a:	8d b9       	out	0x0d, r24	; 13
     f1c:	08 95       	ret

00000f1e <SPI_write>:
*
* \param in byte to be written
****************************************************************************/
void SPI_write(uint8_t data)
{
	SPDR = data;
     f1e:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1 << SPIF)));
     f20:	77 9b       	sbis	0x0e, 7	; 14
     f22:	fe cf       	rjmp	.-4      	; 0xf20 <SPI_write+0x2>
}
     f24:	08 95       	ret

00000f26 <SPI_read>:
* \brief Read data from slave unit
*
* \return Read data
****************************************************************************/
uint8_t SPI_read()
{
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	1f 92       	push	r1
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t retVal;
	SPDR = 0xFF;
     f30:	8f ef       	ldi	r24, 0xFF	; 255
     f32:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1 << SPIF)));
     f34:	77 9b       	sbis	0x0e, 7	; 14
     f36:	fe cf       	rjmp	.-4      	; 0xf34 <SPI_read+0xe>
	
	retVal = SPDR;
     f38:	8f b1       	in	r24, 0x0f	; 15
     f3a:	89 83       	std	Y+1, r24	; 0x01
	
	return retVal;
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	0f 90       	pop	r0
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	08 95       	ret

00000f46 <timer1_init>:
#include "TIME_DRIVER.h"
#include <avr/io.h>

void timer1_init()
{
	TCCR1A = 0x00; // normal mode, no force output, CTC mode
     f46:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00001101; // no noise canceling, CTC mode, 1024 prescaler
     f48:	8d e0       	ldi	r24, 0x0D	; 13
     f4a:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0x00; // value of the timer/counter
     f4c:	1d bc       	out	0x2d, r1	; 45
     f4e:	1c bc       	out	0x2c, r1	; 44
	OCR1A = 4800; // interrupt trigger value (trigger frequency is 0.999Hz)
     f50:	80 ec       	ldi	r24, 0xC0	; 192
     f52:	92 e1       	ldi	r25, 0x12	; 18
     f54:	9b bd       	out	0x2b, r25	; 43
     f56:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= 0b01000000; // interrupt enable
     f58:	89 b7       	in	r24, 0x39	; 57
     f5a:	80 64       	ori	r24, 0x40	; 64
     f5c:	89 bf       	out	0x39, r24	; 57
     f5e:	08 95       	ret

00000f60 <timer1_reset>:
}

void timer1_reset()
{
	current_time = 0;
     f60:	10 92 75 03 	sts	0x0375, r1
     f64:	10 92 74 03 	sts	0x0374, r1
     f68:	08 95       	ret

00000f6a <timer1_get_time>:
}

uint16_t timer1_get_time()
{
	return current_time;
     f6a:	80 91 74 03 	lds	r24, 0x0374
     f6e:	90 91 75 03 	lds	r25, 0x0375
}
     f72:	08 95       	ret

00000f74 <__vector_13>:

ISR(TIMER1_COMPA_vect)
{
     f74:	1f 92       	push	r1
     f76:	0f 92       	push	r0
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	0f 92       	push	r0
     f7c:	11 24       	eor	r1, r1
     f7e:	2f 93       	push	r18
     f80:	3f 93       	push	r19
     f82:	4f 93       	push	r20
     f84:	5f 93       	push	r21
     f86:	6f 93       	push	r22
     f88:	7f 93       	push	r23
     f8a:	8f 93       	push	r24
     f8c:	9f 93       	push	r25
     f8e:	af 93       	push	r26
     f90:	bf 93       	push	r27
     f92:	ef 93       	push	r30
     f94:	ff 93       	push	r31
	cli();
     f96:	f8 94       	cli
	current_time++;
     f98:	80 91 74 03 	lds	r24, 0x0374
     f9c:	90 91 75 03 	lds	r25, 0x0375
     fa0:	01 96       	adiw	r24, 0x01	; 1
     fa2:	90 93 75 03 	sts	0x0375, r25
     fa6:	80 93 74 03 	sts	0x0374, r24
	TCNT1 = 0x00;
     faa:	1d bc       	out	0x2d, r1	; 45
     fac:	1c bc       	out	0x2c, r1	; 44
	led_toggle();
     fae:	0e 94 db 04 	call	0x9b6	; 0x9b6 <led_toggle>
	sei();
     fb2:	78 94       	sei
     fb4:	ff 91       	pop	r31
     fb6:	ef 91       	pop	r30
     fb8:	bf 91       	pop	r27
     fba:	af 91       	pop	r26
     fbc:	9f 91       	pop	r25
     fbe:	8f 91       	pop	r24
     fc0:	7f 91       	pop	r23
     fc2:	6f 91       	pop	r22
     fc4:	5f 91       	pop	r21
     fc6:	4f 91       	pop	r20
     fc8:	3f 91       	pop	r19
     fca:	2f 91       	pop	r18
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <USART_init>:
 * \param ubrr Desired baud rate.
 ****************************************************************************/
void USART_init(uint16_t ubrr)
{
	//Set baud rate
	UBRR0H = (uint8_t) (ubrr>>8);
     fd6:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (uint8_t) ubrr;
     fd8:	89 b9       	out	0x09, r24	; 9
	// Enable receiver and transmitter
	UCSR0B = (1<< RXEN0) | (1<<TXEN0);
     fda:	88 e1       	ldi	r24, 0x18	; 24
     fdc:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 2 stop bit
	UCSR0C = (1<<URSEL0) | (3<<UCSZ00) ;
     fde:	86 e8       	ldi	r24, 0x86	; 134
     fe0:	80 bd       	out	0x20, r24	; 32
     fe2:	08 95       	ret

00000fe4 <USART_putchar>:
 * \param c Char to be sent.
 * \return Always 0.
 ****************************************************************************/
uint8_t USART_putchar(char c)
{
	loop_until_bit_is_set(UCSR0A, UDRE0);
     fe4:	5d 9b       	sbis	0x0b, 5	; 11
     fe6:	fe cf       	rjmp	.-4      	; 0xfe4 <USART_putchar>
	UDR0 = c;
     fe8:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	08 95       	ret

00000fee <USART_getchar>:
 * \return Received char.
 ****************************************************************************/
char USART_getchar()
{
	char c;
	loop_until_bit_is_set(UCSR0A, RXC0);
     fee:	5f 9b       	sbis	0x0b, 7	; 11
     ff0:	fe cf       	rjmp	.-4      	; 0xfee <USART_getchar>
	c = UDR0;
     ff2:	8c b1       	in	r24, 0x0c	; 12
	return c;
}
     ff4:	08 95       	ret

00000ff6 <interface_init>:
	volatile char *ext_ram = (char *) SRAM_USERNAME_ADDR;
	uint8_t i;
	
	for(i = 0; i < USERNAME_LENGTH; i++)
	{
		ext_ram[i] = 'A';
     ff6:	81 e4       	ldi	r24, 0x41	; 65
     ff8:	80 93 00 1c 	sts	0x1C00, r24
     ffc:	80 93 01 1c 	sts	0x1C01, r24
    1000:	80 93 02 1c 	sts	0x1C02, r24
    1004:	80 93 03 1c 	sts	0x1C03, r24
    1008:	80 93 04 1c 	sts	0x1C04, r24
	}
	
	SRAM_high_score_write();
    100c:	0e 94 a8 05 	call	0xb50	; 0xb50 <SRAM_high_score_write>
    1010:	08 95       	ret

00001012 <interface_username>:
* \brief Function call during the set username phase
*

****************************************************************************/
InterfaceState interface_username()
{
    1012:	4f 92       	push	r4
    1014:	5f 92       	push	r5
    1016:	6f 92       	push	r6
    1018:	7f 92       	push	r7
    101a:	8f 92       	push	r8
    101c:	9f 92       	push	r9
    101e:	af 92       	push	r10
    1020:	bf 92       	push	r11
    1022:	cf 92       	push	r12
    1024:	df 92       	push	r13
    1026:	ef 92       	push	r14
    1028:	ff 92       	push	r15
    102a:	0f 93       	push	r16
    102c:	1f 93       	push	r17
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	00 d0       	rcall	.+0      	; 0x1034 <interface_username+0x22>
    1034:	00 d0       	rcall	.+0      	; 0x1036 <interface_username+0x24>
    1036:	1f 92       	push	r1
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
	TouchpadData touch_data;
	char name[USERNAME_LENGTH];
	uint8_t index = 0;
	uint8_t i;
	
	clear_oled();
    103c:	0e 94 a9 03 	call	0x752	; 0x752 <clear_oled>
    1040:	ce 01       	movw	r24, r28
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	6c 01       	movw	r12, r24
    1046:	dc 01       	movw	r26, r24
    1048:	e0 e0       	ldi	r30, 0x00	; 0
    104a:	fc e1       	ldi	r31, 0x1C	; 28
	
	for(i=0; i<USERNAME_LENGTH;i++)
	{
		name[i] = ext_ram[i];
    104c:	81 91       	ld	r24, Z+
    104e:	8d 93       	st	X+, r24
	uint8_t index = 0;
	uint8_t i;
	
	clear_oled();
	
	for(i=0; i<USERNAME_LENGTH;i++)
    1050:	e5 30       	cpi	r30, 0x05	; 5
    1052:	9c e1       	ldi	r25, 0x1C	; 28
    1054:	f9 07       	cpc	r31, r25
    1056:	d1 f7       	brne	.-12     	; 0x104c <interface_username+0x3a>
	{
		name[i] = ext_ram[i];
	}
	
	position = read_joystick_position();
    1058:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
	direction = read_joystick_direction(position);
    105c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <read_joystick_direction>
    1060:	18 2f       	mov	r17, r24
	change_y = change_yaxis(direction);
    1062:	0e 94 b3 02 	call	0x566	; 0x566 <change_yaxis>
	change_x = change_xaxis(direction);
    1066:	81 2f       	mov	r24, r17
    1068:	0e 94 a4 02 	call	0x548	; 0x548 <change_xaxis>
	
	set_position(12, 0);
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	8c e0       	ldi	r24, 0x0C	; 12
    1070:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Username");
    1074:	82 e7       	ldi	r24, 0x72	; 114
    1076:	92 e0       	ldi	r25, 0x02	; 2
    1078:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	revert_colour_line(0);
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <revert_colour_line>
	
	set_position(4,4);
    1082:	64 e0       	ldi	r22, 0x04	; 4
    1084:	84 e0       	ldi	r24, 0x04	; 4
    1086:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	JoystickDirection direction;
	JoystickDirection change_y, change_x;
	ChangeTouchpadData change_touch_data;
	TouchpadData touch_data;
	char name[USERNAME_LENGTH];
	uint8_t index = 0;
    108a:	91 2c       	mov	r9, r1
		{
			index = (index + 1) % 5;
		}
		else if (change_x == Left)
		{
			index = index == 0 ? 4 : (index - 1);
    108c:	68 94       	set
    108e:	88 24       	eor	r8, r8
    1090:	82 f8       	bld	r8, 2
		change_y = change_yaxis(direction);
		change_x = change_xaxis(direction);
		
		if (change_x == Right)
		{
			index = (index + 1) % 5;
    1092:	0f 2e       	mov	r0, r31
    1094:	f5 e0       	ldi	r31, 0x05	; 5
    1096:	af 2e       	mov	r10, r31
    1098:	b1 2c       	mov	r11, r1
    109a:	f0 2d       	mov	r31, r0
		else if (change_y == Down)
		{
			name[index] = (name[index] == 'A') ? 'Z' : (name[index] - 1);
		}
		
		set_position(10, 4);
    109c:	5c 2c       	mov	r5, r12
    109e:	6d 2c       	mov	r6, r13
		for (i = 0; i < USERNAME_LENGTH; i++)
    10a0:	71 2c       	mov	r7, r1
	
	set_position(4,4);
	
	while (1)
	{
		position = read_joystick_position();
    10a2:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
		direction = read_joystick_direction(position);
    10a6:	0e 94 61 02 	call	0x4c2	; 0x4c2 <read_joystick_direction>
    10aa:	18 2f       	mov	r17, r24
		change_y = change_yaxis(direction);
    10ac:	0e 94 b3 02 	call	0x566	; 0x566 <change_yaxis>
    10b0:	08 2f       	mov	r16, r24
		change_x = change_xaxis(direction);
    10b2:	81 2f       	mov	r24, r17
    10b4:	0e 94 a4 02 	call	0x548	; 0x548 <change_xaxis>
		
		if (change_x == Right)
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	49 f4       	brne	.+18     	; 0x10ce <interface_username+0xbc>
		{
			index = (index + 1) % 5;
    10bc:	29 2d       	mov	r18, r9
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	c9 01       	movw	r24, r18
    10c2:	01 96       	adiw	r24, 0x01	; 1
    10c4:	b5 01       	movw	r22, r10
    10c6:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__divmodhi4>
    10ca:	98 2e       	mov	r9, r24
    10cc:	07 c0       	rjmp	.+14     	; 0x10dc <interface_username+0xca>
		}
		else if (change_x == Left)
    10ce:	81 11       	cpse	r24, r1
    10d0:	05 c0       	rjmp	.+10     	; 0x10dc <interface_username+0xca>
		{
			index = index == 0 ? 4 : (index - 1);
    10d2:	99 20       	and	r9, r9
    10d4:	11 f0       	breq	.+4      	; 0x10da <interface_username+0xc8>
    10d6:	9a 94       	dec	r9
    10d8:	01 c0       	rjmp	.+2      	; 0x10dc <interface_username+0xca>
    10da:	98 2c       	mov	r9, r8
		}
		
		if (change_y == Up)
    10dc:	02 30       	cpi	r16, 0x02	; 2
    10de:	b1 f4       	brne	.+44     	; 0x110c <interface_username+0xfa>
		{
			name[index] = (name[index] == 'Z') ? 'A' : (name[index] + 1);
    10e0:	89 2d       	mov	r24, r9
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	e1 e0       	ldi	r30, 0x01	; 1
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	ec 0f       	add	r30, r28
    10ea:	fd 1f       	adc	r31, r29
    10ec:	e8 0f       	add	r30, r24
    10ee:	f9 1f       	adc	r31, r25
    10f0:	20 81       	ld	r18, Z
    10f2:	2a 35       	cpi	r18, 0x5A	; 90
    10f4:	11 f0       	breq	.+4      	; 0x10fa <interface_username+0xe8>
    10f6:	2f 5f       	subi	r18, 0xFF	; 255
    10f8:	01 c0       	rjmp	.+2      	; 0x10fc <interface_username+0xea>
    10fa:	21 e4       	ldi	r18, 0x41	; 65
    10fc:	e1 e0       	ldi	r30, 0x01	; 1
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	ec 0f       	add	r30, r28
    1102:	fd 1f       	adc	r31, r29
    1104:	e8 0f       	add	r30, r24
    1106:	f9 1f       	adc	r31, r25
    1108:	20 83       	st	Z, r18
    110a:	17 c0       	rjmp	.+46     	; 0x113a <interface_username+0x128>
		}
		else if (change_y == Down)
    110c:	03 30       	cpi	r16, 0x03	; 3
    110e:	a9 f4       	brne	.+42     	; 0x113a <interface_username+0x128>
		{
			name[index] = (name[index] == 'A') ? 'Z' : (name[index] - 1);
    1110:	89 2d       	mov	r24, r9
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	e1 e0       	ldi	r30, 0x01	; 1
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	ec 0f       	add	r30, r28
    111a:	fd 1f       	adc	r31, r29
    111c:	e8 0f       	add	r30, r24
    111e:	f9 1f       	adc	r31, r25
    1120:	20 81       	ld	r18, Z
    1122:	21 34       	cpi	r18, 0x41	; 65
    1124:	11 f0       	breq	.+4      	; 0x112a <interface_username+0x118>
    1126:	21 50       	subi	r18, 0x01	; 1
    1128:	01 c0       	rjmp	.+2      	; 0x112c <interface_username+0x11a>
    112a:	2a e5       	ldi	r18, 0x5A	; 90
    112c:	e1 e0       	ldi	r30, 0x01	; 1
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	ec 0f       	add	r30, r28
    1132:	fd 1f       	adc	r31, r29
    1134:	e8 0f       	add	r30, r24
    1136:	f9 1f       	adc	r31, r25
    1138:	20 83       	st	Z, r18
		}
		
		set_position(10, 4);
    113a:	68 2d       	mov	r22, r8
    113c:	8a e0       	ldi	r24, 0x0A	; 10
    113e:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
    1142:	05 2d       	mov	r16, r5
    1144:	16 2d       	mov	r17, r6
		for (i = 0; i < USERNAME_LENGTH; i++)
    1146:	47 2c       	mov	r4, r7
		{
			if (i == index)
			{
				print_inverted_char(name[i]);
    1148:	ee 24       	eor	r14, r14
    114a:	e3 94       	inc	r14
    114c:	f1 2c       	mov	r15, r1
    114e:	ec 0e       	add	r14, r28
    1150:	fd 1e       	adc	r15, r29
    1152:	e9 0c       	add	r14, r9
    1154:	f1 1c       	adc	r15, r1
		}
		
		set_position(10, 4);
		for (i = 0; i < USERNAME_LENGTH; i++)
		{
			if (i == index)
    1156:	49 10       	cpse	r4, r9
    1158:	05 c0       	rjmp	.+10     	; 0x1164 <interface_username+0x152>
			{
				print_inverted_char(name[i]);
    115a:	f7 01       	movw	r30, r14
    115c:	80 81       	ld	r24, Z
    115e:	0e 94 19 04 	call	0x832	; 0x832 <print_inverted_char>
    1162:	04 c0       	rjmp	.+8      	; 0x116c <interface_username+0x15a>
			}
			else
			{
				print_char(name[i]);
    1164:	f8 01       	movw	r30, r16
    1166:	80 81       	ld	r24, Z
    1168:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
			}
			print_char(' ');
    116c:	80 e2       	ldi	r24, 0x20	; 32
    116e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
		{
			name[index] = (name[index] == 'A') ? 'Z' : (name[index] - 1);
		}
		
		set_position(10, 4);
		for (i = 0; i < USERNAME_LENGTH; i++)
    1172:	43 94       	inc	r4
    1174:	0f 5f       	subi	r16, 0xFF	; 255
    1176:	1f 4f       	sbci	r17, 0xFF	; 255
    1178:	f5 e0       	ldi	r31, 0x05	; 5
    117a:	4f 12       	cpse	r4, r31
    117c:	ec cf       	rjmp	.-40     	; 0x1156 <interface_username+0x144>
				print_char(name[i]);
			}
			print_char(' ');
		}
		
		refresh_oled();
    117e:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
		
		touch_data = read_touchpad_data();
    1182:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
    1186:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
		if (change_touch_data.rightButton)
    118a:	88 23       	and	r24, r24
    118c:	09 f4       	brne	.+2      	; 0x1190 <interface_username+0x17e>
    118e:	89 cf       	rjmp	.-238    	; 0x10a2 <interface_username+0x90>
    1190:	d6 01       	movw	r26, r12
    1192:	e0 e0       	ldi	r30, 0x00	; 0
    1194:	fc e1       	ldi	r31, 0x1C	; 28
		{
			for(i = 0; i < USERNAME_LENGTH; i++)
			{
				ext_ram[i] = name[i];
    1196:	8d 91       	ld	r24, X+
    1198:	81 93       	st	Z+, r24
		
		touch_data = read_touchpad_data();
		change_touch_data = change_touchpad_data(touch_data);
		if (change_touch_data.rightButton)
		{
			for(i = 0; i < USERNAME_LENGTH; i++)
    119a:	e5 30       	cpi	r30, 0x05	; 5
    119c:	8c e1       	ldi	r24, 0x1C	; 28
    119e:	f8 07       	cpc	r31, r24
    11a0:	d1 f7       	brne	.-12     	; 0x1196 <interface_username+0x184>
			}
			
			return State_NewGame;
		}
	}
}
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	1f 91       	pop	r17
    11b4:	0f 91       	pop	r16
    11b6:	ff 90       	pop	r15
    11b8:	ef 90       	pop	r14
    11ba:	df 90       	pop	r13
    11bc:	cf 90       	pop	r12
    11be:	bf 90       	pop	r11
    11c0:	af 90       	pop	r10
    11c2:	9f 90       	pop	r9
    11c4:	8f 90       	pop	r8
    11c6:	7f 90       	pop	r7
    11c8:	6f 90       	pop	r6
    11ca:	5f 90       	pop	r5
    11cc:	4f 90       	pop	r4
    11ce:	08 95       	ret

000011d0 <interface_new_game>:
* \brief Function call during the set new game phase
*

****************************************************************************/
InterfaceState interface_new_game()
{
    11d0:	0f 93       	push	r16
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
	JoystickDirection change_y, change_x;
	ChangeTouchpadData change_touch_data;
	TouchpadData touch_data;
	uint8_t scr_position = 0;
	
	clear_oled();
    11d8:	0e 94 a9 03 	call	0x752	; 0x752 <clear_oled>
	
	position = read_joystick_position();
    11dc:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
	direction = read_joystick_direction(position);
    11e0:	0e 94 61 02 	call	0x4c2	; 0x4c2 <read_joystick_direction>
    11e4:	c8 2f       	mov	r28, r24
	change_y = change_yaxis(direction);
    11e6:	0e 94 b3 02 	call	0x566	; 0x566 <change_yaxis>
	change_x = change_xaxis(direction);
    11ea:	8c 2f       	mov	r24, r28
    11ec:	0e 94 a4 02 	call	0x548	; 0x548 <change_xaxis>
	
	set_position(13, 0);
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	8d e0       	ldi	r24, 0x0D	; 13
    11f4:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("New game");
    11f8:	82 e2       	ldi	r24, 0x22	; 34
    11fa:	92 e0       	ldi	r25, 0x02	; 2
    11fc:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	revert_colour_line(0);
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	0e 94 71 04 	call	0x8e2	; 0x8e2 <revert_colour_line>
	set_position(3, 2);
    1206:	62 e0       	ldi	r22, 0x02	; 2
    1208:	83 e0       	ldi	r24, 0x03	; 3
    120a:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Tutorial");
    120e:	8b e2       	ldi	r24, 0x2B	; 43
    1210:	92 e0       	ldi	r25, 0x02	; 2
    1212:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	set_position(3, 3);
    1216:	63 e0       	ldi	r22, 0x03	; 3
    1218:	83 e0       	ldi	r24, 0x03	; 3
    121a:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Easy");
    121e:	84 e3       	ldi	r24, 0x34	; 52
    1220:	92 e0       	ldi	r25, 0x02	; 2
    1222:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	set_position(3, 4);
    1226:	64 e0       	ldi	r22, 0x04	; 4
    1228:	83 e0       	ldi	r24, 0x03	; 3
    122a:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Normal");
    122e:	89 e3       	ldi	r24, 0x39	; 57
    1230:	92 e0       	ldi	r25, 0x02	; 2
    1232:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	set_position(3, 5);
    1236:	65 e0       	ldi	r22, 0x05	; 5
    1238:	83 e0       	ldi	r24, 0x03	; 3
    123a:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Hard");
    123e:	80 e4       	ldi	r24, 0x40	; 64
    1240:	92 e0       	ldi	r25, 0x02	; 2
    1242:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	set_position(3, 6);
    1246:	66 e0       	ldi	r22, 0x06	; 6
    1248:	83 e0       	ldi	r24, 0x03	; 3
    124a:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Insane");
    124e:	85 e4       	ldi	r24, 0x45	; 69
    1250:	92 e0       	ldi	r25, 0x02	; 2
    1252:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	JoystickPosition position;
	JoystickDirection direction;
	JoystickDirection change_y, change_x;
	ChangeTouchpadData change_touch_data;
	TouchpadData touch_data;
	uint8_t scr_position = 0;
    1256:	c0 e0       	ldi	r28, 0x00	; 0
			print_char(' ');
			scr_position--;
		}
		else if (change_y == Down)
		{
			set_position(1, (scr_position % 5) + 2);
    1258:	0d ec       	ldi	r16, 0xCD	; 205
	set_position(3, 6);
	print_string("Insane");
	
	while(1)
	{
		position = read_joystick_position();
    125a:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
		direction = read_joystick_direction(position);
    125e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <read_joystick_direction>
    1262:	d8 2f       	mov	r29, r24
		change_y = change_yaxis(direction);
    1264:	0e 94 b3 02 	call	0x566	; 0x566 <change_yaxis>
    1268:	18 2f       	mov	r17, r24
		change_x = change_xaxis(direction);
    126a:	8d 2f       	mov	r24, r29
    126c:	0e 94 a4 02 	call	0x548	; 0x548 <change_xaxis>
		
		if (change_x == Right)
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	09 f4       	brne	.+2      	; 0x1276 <interface_new_game+0xa6>
    1274:	6f c0       	rjmp	.+222    	; 0x1354 <interface_new_game+0x184>
		{
			return State_Options;
		}
		else if (change_x == Left)
    1276:	88 23       	and	r24, r24
    1278:	09 f4       	brne	.+2      	; 0x127c <interface_new_game+0xac>
    127a:	6e c0       	rjmp	.+220    	; 0x1358 <interface_new_game+0x188>
		{
			return State_HighScores;
		}
		
		if (change_y == Up)
    127c:	12 30       	cpi	r17, 0x02	; 2
    127e:	a1 f4       	brne	.+40     	; 0x12a8 <interface_new_game+0xd8>
		{
			set_position(1, (scr_position % 5) + 2);
    1280:	c0 9f       	mul	r28, r16
    1282:	81 2d       	mov	r24, r1
    1284:	11 24       	eor	r1, r1
    1286:	86 95       	lsr	r24
    1288:	86 95       	lsr	r24
    128a:	98 2f       	mov	r25, r24
    128c:	99 0f       	add	r25, r25
    128e:	99 0f       	add	r25, r25
    1290:	89 0f       	add	r24, r25
    1292:	6c 2f       	mov	r22, r28
    1294:	68 1b       	sub	r22, r24
    1296:	6e 5f       	subi	r22, 0xFE	; 254
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
			print_char(' ');
    129e:	80 e2       	ldi	r24, 0x20	; 32
    12a0:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
			scr_position--;
    12a4:	c1 50       	subi	r28, 0x01	; 1
    12a6:	15 c0       	rjmp	.+42     	; 0x12d2 <interface_new_game+0x102>
		}
		else if (change_y == Down)
    12a8:	13 30       	cpi	r17, 0x03	; 3
    12aa:	99 f4       	brne	.+38     	; 0x12d2 <interface_new_game+0x102>
		{
			set_position(1, (scr_position % 5) + 2);
    12ac:	c0 9f       	mul	r28, r16
    12ae:	81 2d       	mov	r24, r1
    12b0:	11 24       	eor	r1, r1
    12b2:	86 95       	lsr	r24
    12b4:	86 95       	lsr	r24
    12b6:	98 2f       	mov	r25, r24
    12b8:	99 0f       	add	r25, r25
    12ba:	99 0f       	add	r25, r25
    12bc:	89 0f       	add	r24, r25
    12be:	6c 2f       	mov	r22, r28
    12c0:	68 1b       	sub	r22, r24
    12c2:	6e 5f       	subi	r22, 0xFE	; 254
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
			print_char(' ');
    12ca:	80 e2       	ldi	r24, 0x20	; 32
    12cc:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
			scr_position++;
    12d0:	cf 5f       	subi	r28, 0xFF	; 255
		}
		
		set_position(1, (scr_position % 5) + 2);
    12d2:	c0 9f       	mul	r28, r16
    12d4:	81 2d       	mov	r24, r1
    12d6:	11 24       	eor	r1, r1
    12d8:	86 95       	lsr	r24
    12da:	86 95       	lsr	r24
    12dc:	98 2f       	mov	r25, r24
    12de:	99 0f       	add	r25, r25
    12e0:	99 0f       	add	r25, r25
    12e2:	89 0f       	add	r24, r25
    12e4:	6c 2f       	mov	r22, r28
    12e6:	68 1b       	sub	r22, r24
    12e8:	6e 5f       	subi	r22, 0xFE	; 254
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
		print_char('#');
    12f0:	83 e2       	ldi	r24, 0x23	; 35
    12f2:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
		
		touch_data = read_touchpad_data();
    12f6:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
    12fa:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
		if (change_touch_data.rightButton)
    12fe:	88 23       	and	r24, r24
    1300:	31 f1       	breq	.+76     	; 0x134e <interface_new_game+0x17e>
		{
			switch(scr_position)
    1302:	c2 30       	cpi	r28, 0x02	; 2
    1304:	a9 f0       	breq	.+42     	; 0x1330 <interface_new_game+0x160>
    1306:	28 f4       	brcc	.+10     	; 0x1312 <interface_new_game+0x142>
    1308:	cc 23       	and	r28, r28
    130a:	41 f0       	breq	.+16     	; 0x131c <interface_new_game+0x14c>
    130c:	c1 30       	cpi	r28, 0x01	; 1
    130e:	59 f0       	breq	.+22     	; 0x1326 <interface_new_game+0x156>
    1310:	1e c0       	rjmp	.+60     	; 0x134e <interface_new_game+0x17e>
    1312:	c3 30       	cpi	r28, 0x03	; 3
    1314:	91 f0       	breq	.+36     	; 0x133a <interface_new_game+0x16a>
    1316:	c4 30       	cpi	r28, 0x04	; 4
    1318:	a9 f0       	breq	.+42     	; 0x1344 <interface_new_game+0x174>
    131a:	19 c0       	rjmp	.+50     	; 0x134e <interface_new_game+0x17e>
			{
				case 0:
				send_game_mode(Tutorial);
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	0e 94 23 02 	call	0x446	; 0x446 <send_game_mode>
				return State_Tutorial;
    1322:	82 e0       	ldi	r24, 0x02	; 2
    1324:	1a c0       	rjmp	.+52     	; 0x135a <interface_new_game+0x18a>
				case 1:
				send_game_mode(Easy);
    1326:	82 e0       	ldi	r24, 0x02	; 2
    1328:	0e 94 23 02 	call	0x446	; 0x446 <send_game_mode>
				return State_Easy;
    132c:	83 e0       	ldi	r24, 0x03	; 3
    132e:	15 c0       	rjmp	.+42     	; 0x135a <interface_new_game+0x18a>
				case 2:
				send_game_mode(Normal);
    1330:	83 e0       	ldi	r24, 0x03	; 3
    1332:	0e 94 23 02 	call	0x446	; 0x446 <send_game_mode>
				return State_Normal;
    1336:	84 e0       	ldi	r24, 0x04	; 4
    1338:	10 c0       	rjmp	.+32     	; 0x135a <interface_new_game+0x18a>
				case 3:
				send_game_mode(Hard);
    133a:	84 e0       	ldi	r24, 0x04	; 4
    133c:	0e 94 23 02 	call	0x446	; 0x446 <send_game_mode>
				return State_Hard;
    1340:	85 e0       	ldi	r24, 0x05	; 5
    1342:	0b c0       	rjmp	.+22     	; 0x135a <interface_new_game+0x18a>
				case 4:
				send_game_mode(Insane);
    1344:	85 e0       	ldi	r24, 0x05	; 5
    1346:	0e 94 23 02 	call	0x446	; 0x446 <send_game_mode>
				return State_Insane;
    134a:	86 e0       	ldi	r24, 0x06	; 6
    134c:	06 c0       	rjmp	.+12     	; 0x135a <interface_new_game+0x18a>
			}
		}
		refresh_oled();
    134e:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	}
    1352:	83 cf       	rjmp	.-250    	; 0x125a <interface_new_game+0x8a>
		change_y = change_yaxis(direction);
		change_x = change_xaxis(direction);
		
		if (change_x == Right)
		{
			return State_Options;
    1354:	87 e0       	ldi	r24, 0x07	; 7
    1356:	01 c0       	rjmp	.+2      	; 0x135a <interface_new_game+0x18a>
		}
		else if (change_x == Left)
		{
			return State_HighScores;
    1358:	88 e0       	ldi	r24, 0x08	; 8
				return State_Insane;
			}
		}
		refresh_oled();
	}
}
    135a:	df 91       	pop	r29
    135c:	cf 91       	pop	r28
    135e:	1f 91       	pop	r17
    1360:	0f 91       	pop	r16
    1362:	08 95       	ret

00001364 <interface_high_scores>:
/****************************************************************************
* \brief Function call during the set show high scores phase
*
****************************************************************************/
InterfaceState interface_high_scores()
{
    1364:	bf 92       	push	r11
    1366:	cf 92       	push	r12
    1368:	df 92       	push	r13
    136a:	ef 92       	push	r14
    136c:	ff 92       	push	r15
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
	JoystickDirection direction;
	JoystickDirection change_x;
	uint8_t i, j;
	volatile char* high_scores_sram = (char*) SRAM_HIGH_SCORES_ADDR;
	
	clear_oled();
    1376:	0e 94 a9 03 	call	0x752	; 0x752 <clear_oled>
	
	position = read_joystick_position();
    137a:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
	direction = read_joystick_direction(position);
    137e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <read_joystick_direction>
	change_x = change_xaxis(direction);
    1382:	0e 94 a4 02 	call	0x548	; 0x548 <change_xaxis>
	
	set_position(9,0);
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	89 e0       	ldi	r24, 0x09	; 9
    138a:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("High Scores");
    138e:	8c e4       	ldi	r24, 0x4C	; 76
    1390:	92 e0       	ldi	r25, 0x02	; 2
    1392:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	revert_colour_line(0);
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	0e 94 71 04 	call	0x8e2	; 0x8e2 <revert_colour_line>
    139c:	e1 2c       	mov	r14, r1
    139e:	f1 2c       	mov	r15, r1
    13a0:	68 94       	set
    13a2:	dd 24       	eor	r13, r13
    13a4:	d1 f8       	bld	r13, 1
	
	for(i = 0; i < (HIGH_SCORES_TABLE_LENGTH); i ++)
	{
		set_position(8, i + 2);
    13a6:	b1 2c       	mov	r11, r1
    13a8:	c1 2c       	mov	r12, r1
    13aa:	6d 2d       	mov	r22, r13
    13ac:	88 e0       	ldi	r24, 0x08	; 8
    13ae:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
    13b2:	cb 2d       	mov	r28, r11
    13b4:	dc 2d       	mov	r29, r12
    13b6:	87 01       	movw	r16, r14
    13b8:	0b 5f       	subi	r16, 0xFB	; 251
    13ba:	13 4e       	sbci	r17, 0xE3	; 227
    13bc:	f8 01       	movw	r30, r16
    13be:	ec 0f       	add	r30, r28
    13c0:	fd 1f       	adc	r31, r29
		for (j = 0; j < SRAM_HIGH_SCORE_LENGTH; j++)
		{
			print_char(high_scores_sram[i * SRAM_HIGH_SCORE_LENGTH + j]);
    13c2:	80 81       	ld	r24, Z
    13c4:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
    13c8:	21 96       	adiw	r28, 0x01	; 1
	revert_colour_line(0);
	
	for(i = 0; i < (HIGH_SCORES_TABLE_LENGTH); i ++)
	{
		set_position(8, i + 2);
		for (j = 0; j < SRAM_HIGH_SCORE_LENGTH; j++)
    13ca:	cd 30       	cpi	r28, 0x0D	; 13
    13cc:	d1 05       	cpc	r29, r1
    13ce:	b1 f7       	brne	.-20     	; 0x13bc <interface_high_scores+0x58>
    13d0:	d3 94       	inc	r13
    13d2:	8d e0       	ldi	r24, 0x0D	; 13
    13d4:	e8 0e       	add	r14, r24
    13d6:	f1 1c       	adc	r15, r1
	
	set_position(9,0);
	print_string("High Scores");
	revert_colour_line(0);
	
	for(i = 0; i < (HIGH_SCORES_TABLE_LENGTH); i ++)
    13d8:	87 e0       	ldi	r24, 0x07	; 7
    13da:	d8 12       	cpse	r13, r24
    13dc:	e6 cf       	rjmp	.-52     	; 0x13aa <interface_high_scores+0x46>
		{
			print_char(high_scores_sram[i * SRAM_HIGH_SCORE_LENGTH + j]);
		}
	}
	
	refresh_oled();
    13de:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	
	while(1)
	{
		position = read_joystick_position();
    13e2:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
		direction = read_joystick_direction(position);
    13e6:	0e 94 61 02 	call	0x4c2	; 0x4c2 <read_joystick_direction>
		change_x = change_xaxis(direction);
    13ea:	0e 94 a4 02 	call	0x548	; 0x548 <change_xaxis>
		
		if (change_x == Right)
    13ee:	81 30       	cpi	r24, 0x01	; 1
    13f0:	19 f0       	breq	.+6      	; 0x13f8 <interface_high_scores+0x94>
		{
			return State_NewGame;
		}
		else if (change_x == Left)
    13f2:	81 11       	cpse	r24, r1
    13f4:	f6 cf       	rjmp	.-20     	; 0x13e2 <interface_high_scores+0x7e>
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <interface_high_scores+0x98>
		direction = read_joystick_direction(position);
		change_x = change_xaxis(direction);
		
		if (change_x == Right)
		{
			return State_NewGame;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	01 c0       	rjmp	.+2      	; 0x13fe <interface_high_scores+0x9a>
		}
		else if (change_x == Left)
		{
			return State_Options;
    13fc:	87 e0       	ldi	r24, 0x07	; 7
		}
	}
	
}
    13fe:	df 91       	pop	r29
    1400:	cf 91       	pop	r28
    1402:	1f 91       	pop	r17
    1404:	0f 91       	pop	r16
    1406:	ff 90       	pop	r15
    1408:	ef 90       	pop	r14
    140a:	df 90       	pop	r13
    140c:	cf 90       	pop	r12
    140e:	bf 90       	pop	r11
    1410:	08 95       	ret

00001412 <interface_options>:
* \brief Function call during the options phase
*

****************************************************************************/
InterfaceState interface_options( )
{
    1412:	0f 93       	push	r16
    1414:	1f 93       	push	r17
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
	JoystickDirection change_y, change_x;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	uint8_t scr_position = 0;
	
	clear_oled();
    141a:	0e 94 a9 03 	call	0x752	; 0x752 <clear_oled>
	
	position = read_joystick_position();
    141e:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
	direction = read_joystick_direction(position);
    1422:	0e 94 61 02 	call	0x4c2	; 0x4c2 <read_joystick_direction>
    1426:	c8 2f       	mov	r28, r24
	change_y = change_yaxis(direction);
    1428:	0e 94 b3 02 	call	0x566	; 0x566 <change_yaxis>
	change_x = change_xaxis(direction);
    142c:	8c 2f       	mov	r24, r28
    142e:	0e 94 a4 02 	call	0x548	; 0x548 <change_xaxis>

	set_position(12,0);
    1432:	60 e0       	ldi	r22, 0x00	; 0
    1434:	8c e0       	ldi	r24, 0x0C	; 12
    1436:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Options");
    143a:	88 e5       	ldi	r24, 0x58	; 88
    143c:	92 e0       	ldi	r25, 0x02	; 2
    143e:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	revert_colour_line(0);
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	0e 94 71 04 	call	0x8e2	; 0x8e2 <revert_colour_line>
	set_position(3,3);
    1448:	63 e0       	ldi	r22, 0x03	; 3
    144a:	83 e0       	ldi	r24, 0x03	; 3
    144c:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Mode");
    1450:	80 e6       	ldi	r24, 0x60	; 96
    1452:	92 e0       	ldi	r25, 0x02	; 2
    1454:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	set_position(3,4);
    1458:	64 e0       	ldi	r22, 0x04	; 4
    145a:	83 e0       	ldi	r24, 0x03	; 3
    145c:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Sound");
    1460:	85 e6       	ldi	r24, 0x65	; 101
    1462:	92 e0       	ldi	r25, 0x02	; 2
    1464:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	set_position(3,5);
    1468:	65 e0       	ldi	r22, 0x05	; 5
    146a:	83 e0       	ldi	r24, 0x03	; 3
    146c:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Change Username");
    1470:	8b e6       	ldi	r24, 0x6B	; 107
    1472:	92 e0       	ldi	r25, 0x02	; 2
    1474:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	JoystickPosition position;
	JoystickDirection direction;
	JoystickDirection change_y, change_x;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	uint8_t scr_position = 0;
    1478:	c0 e0       	ldi	r28, 0x00	; 0
			print_char(' ');
			scr_position--;
		}
		else if (change_y == Down)
		{
			set_position(1, (scr_position % 3) + 3);
    147a:	0b ea       	ldi	r16, 0xAB	; 171
	set_position(3,5);
	print_string("Change Username");
	
	while(1)
	{
		position = read_joystick_position();
    147c:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
		direction = read_joystick_direction(position);
    1480:	0e 94 61 02 	call	0x4c2	; 0x4c2 <read_joystick_direction>
    1484:	d8 2f       	mov	r29, r24
		change_y = change_yaxis(direction);
    1486:	0e 94 b3 02 	call	0x566	; 0x566 <change_yaxis>
    148a:	18 2f       	mov	r17, r24
		change_x = change_xaxis(direction);
    148c:	8d 2f       	mov	r24, r29
    148e:	0e 94 a4 02 	call	0x548	; 0x548 <change_xaxis>
		
		if (change_x == Right)
    1492:	81 30       	cpi	r24, 0x01	; 1
    1494:	09 f4       	brne	.+2      	; 0x1498 <interface_options+0x86>
    1496:	4d c0       	rjmp	.+154    	; 0x1532 <interface_options+0x120>
		{
			return State_HighScores;
		}
		else if (change_x == Left)
    1498:	88 23       	and	r24, r24
    149a:	09 f4       	brne	.+2      	; 0x149e <interface_options+0x8c>
    149c:	4c c0       	rjmp	.+152    	; 0x1536 <interface_options+0x124>
		{
			return State_NewGame;
		}
		
		if (change_y == Up)
    149e:	12 30       	cpi	r17, 0x02	; 2
    14a0:	91 f4       	brne	.+36     	; 0x14c6 <interface_options+0xb4>
		{
			set_position(1, (scr_position % 3) + 3);
    14a2:	c0 9f       	mul	r28, r16
    14a4:	81 2d       	mov	r24, r1
    14a6:	11 24       	eor	r1, r1
    14a8:	86 95       	lsr	r24
    14aa:	98 2f       	mov	r25, r24
    14ac:	99 0f       	add	r25, r25
    14ae:	89 0f       	add	r24, r25
    14b0:	6c 2f       	mov	r22, r28
    14b2:	68 1b       	sub	r22, r24
    14b4:	6d 5f       	subi	r22, 0xFD	; 253
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
			print_char(' ');
    14bc:	80 e2       	ldi	r24, 0x20	; 32
    14be:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
			scr_position--;
    14c2:	c1 50       	subi	r28, 0x01	; 1
    14c4:	13 c0       	rjmp	.+38     	; 0x14ec <interface_options+0xda>
		}
		else if (change_y == Down)
    14c6:	13 30       	cpi	r17, 0x03	; 3
    14c8:	89 f4       	brne	.+34     	; 0x14ec <interface_options+0xda>
		{
			set_position(1, (scr_position % 3) + 3);
    14ca:	c0 9f       	mul	r28, r16
    14cc:	81 2d       	mov	r24, r1
    14ce:	11 24       	eor	r1, r1
    14d0:	86 95       	lsr	r24
    14d2:	98 2f       	mov	r25, r24
    14d4:	99 0f       	add	r25, r25
    14d6:	89 0f       	add	r24, r25
    14d8:	6c 2f       	mov	r22, r28
    14da:	68 1b       	sub	r22, r24
    14dc:	6d 5f       	subi	r22, 0xFD	; 253
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
			print_char(' ');
    14e4:	80 e2       	ldi	r24, 0x20	; 32
    14e6:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
			scr_position++;
    14ea:	cf 5f       	subi	r28, 0xFF	; 255
		}
		
		set_position(1, (scr_position % 3) + 3);
    14ec:	c0 9f       	mul	r28, r16
    14ee:	81 2d       	mov	r24, r1
    14f0:	11 24       	eor	r1, r1
    14f2:	86 95       	lsr	r24
    14f4:	98 2f       	mov	r25, r24
    14f6:	99 0f       	add	r25, r25
    14f8:	89 0f       	add	r24, r25
    14fa:	6c 2f       	mov	r22, r28
    14fc:	68 1b       	sub	r22, r24
    14fe:	6d 5f       	subi	r22, 0xFD	; 253
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
		print_char('#');
    1506:	83 e2       	ldi	r24, 0x23	; 35
    1508:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
		
		touch_data = read_touchpad_data();
    150c:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
    1510:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
		if (change_touch_data.rightButton)
    1514:	88 23       	and	r24, r24
    1516:	51 f0       	breq	.+20     	; 0x152c <interface_options+0x11a>
		{
			switch(scr_position)
    1518:	c1 30       	cpi	r28, 0x01	; 1
    151a:	79 f0       	breq	.+30     	; 0x153a <interface_options+0x128>
    151c:	18 f0       	brcs	.+6      	; 0x1524 <interface_options+0x112>
    151e:	c2 30       	cpi	r28, 0x02	; 2
    1520:	19 f0       	breq	.+6      	; 0x1528 <interface_options+0x116>
    1522:	04 c0       	rjmp	.+8      	; 0x152c <interface_options+0x11a>
			{
				case 0:
				return State_Mode;
    1524:	8a e0       	ldi	r24, 0x0A	; 10
    1526:	0a c0       	rjmp	.+20     	; 0x153c <interface_options+0x12a>
				case 1:
				return State_Sound;
				case 2:
				return State_Username;
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	08 c0       	rjmp	.+16     	; 0x153c <interface_options+0x12a>
			}
		}
		refresh_oled();
    152c:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	}
    1530:	a5 cf       	rjmp	.-182    	; 0x147c <interface_options+0x6a>
		change_y = change_yaxis(direction);
		change_x = change_xaxis(direction);
		
		if (change_x == Right)
		{
			return State_HighScores;
    1532:	88 e0       	ldi	r24, 0x08	; 8
    1534:	03 c0       	rjmp	.+6      	; 0x153c <interface_options+0x12a>
		}
		else if (change_x == Left)
		{
			return State_NewGame;
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	01 c0       	rjmp	.+2      	; 0x153c <interface_options+0x12a>
			switch(scr_position)
			{
				case 0:
				return State_Mode;
				case 1:
				return State_Sound;
    153a:	89 e0       	ldi	r24, 0x09	; 9
				return State_Username;
			}
		}
		refresh_oled();
	}
}
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	1f 91       	pop	r17
    1542:	0f 91       	pop	r16
    1544:	08 95       	ret

00001546 <interface_mode>:
* \brief Function call during the set mode phase
*

****************************************************************************/
InterfaceState interface_mode()
{
    1546:	cf 93       	push	r28
	JoystickDirection change_y;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	uint8_t scr_position = 0;
	
	clear_oled();
    1548:	0e 94 a9 03 	call	0x752	; 0x752 <clear_oled>
	
	position = read_joystick_position();
    154c:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
	direction = read_joystick_direction(position);
    1550:	0e 94 61 02 	call	0x4c2	; 0x4c2 <read_joystick_direction>
	change_y = change_yaxis(direction);
    1554:	0e 94 b3 02 	call	0x566	; 0x566 <change_yaxis>

	set_position(14,0);
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	8e e0       	ldi	r24, 0x0E	; 14
    155c:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Mode");
    1560:	80 e6       	ldi	r24, 0x60	; 96
    1562:	92 e0       	ldi	r25, 0x02	; 2
    1564:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	revert_colour_line(0);
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <revert_colour_line>
	set_position(3,3);
    156e:	63 e0       	ldi	r22, 0x03	; 3
    1570:	83 e0       	ldi	r24, 0x03	; 3
    1572:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Reverse");
    1576:	8b e7       	ldi	r24, 0x7B	; 123
    1578:	92 e0       	ldi	r25, 0x02	; 2
    157a:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	set_position(3,5);
    157e:	65 e0       	ldi	r22, 0x05	; 5
    1580:	83 e0       	ldi	r24, 0x03	; 3
    1582:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Normal");
    1586:	89 e3       	ldi	r24, 0x39	; 57
    1588:	92 e0       	ldi	r25, 0x02	; 2
    158a:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	
	
	set_position(1, (scr_position % 2) * 2 + 3);
    158e:	63 e0       	ldi	r22, 0x03	; 3
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_char('#');
    1596:	83 e2       	ldi	r24, 0x23	; 35
    1598:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
	JoystickPosition position;
	JoystickDirection direction;
	JoystickDirection change_y;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	uint8_t scr_position = 0;
    159c:	c0 e0       	ldi	r28, 0x00	; 0
	set_position(1, (scr_position % 2) * 2 + 3);
	print_char('#');
	
	while(1)
	{
		position = read_joystick_position();
    159e:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
		direction = read_joystick_direction(position);
    15a2:	0e 94 61 02 	call	0x4c2	; 0x4c2 <read_joystick_direction>
		change_y = change_yaxis(direction);
    15a6:	0e 94 b3 02 	call	0x566	; 0x566 <change_yaxis>
		
		if (change_y == Up)
    15aa:	82 30       	cpi	r24, 0x02	; 2
    15ac:	61 f4       	brne	.+24     	; 0x15c6 <interface_mode+0x80>
		{
			set_position(1, (scr_position % 2) * 2 + 3);
    15ae:	6c 2f       	mov	r22, r28
    15b0:	61 70       	andi	r22, 0x01	; 1
    15b2:	66 0f       	add	r22, r22
    15b4:	6d 5f       	subi	r22, 0xFD	; 253
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
			print_char(' ');
    15bc:	80 e2       	ldi	r24, 0x20	; 32
    15be:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
			scr_position--;
    15c2:	c1 50       	subi	r28, 0x01	; 1
    15c4:	0d c0       	rjmp	.+26     	; 0x15e0 <interface_mode+0x9a>
		}
		else if (change_y == Down)
    15c6:	83 30       	cpi	r24, 0x03	; 3
    15c8:	59 f4       	brne	.+22     	; 0x15e0 <interface_mode+0x9a>
		{
			set_position(1, (scr_position % 2) * 2 + 3);
    15ca:	6c 2f       	mov	r22, r28
    15cc:	61 70       	andi	r22, 0x01	; 1
    15ce:	66 0f       	add	r22, r22
    15d0:	6d 5f       	subi	r22, 0xFD	; 253
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
			print_char(' ');
    15d8:	80 e2       	ldi	r24, 0x20	; 32
    15da:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
			scr_position++;
    15de:	cf 5f       	subi	r28, 0xFF	; 255
		}
		
		set_position(1, (scr_position % 2) * 2 + 3);
    15e0:	6c 2f       	mov	r22, r28
    15e2:	61 70       	andi	r22, 0x01	; 1
    15e4:	66 0f       	add	r22, r22
    15e6:	6d 5f       	subi	r22, 0xFD	; 253
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
		print_char('#');
    15ee:	83 e2       	ldi	r24, 0x23	; 35
    15f0:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
		
		touch_data = read_touchpad_data();
    15f4:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
    15f8:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
		if (change_touch_data.rightButton)
    15fc:	88 23       	and	r24, r24
    15fe:	a9 f0       	breq	.+42     	; 0x162a <interface_mode+0xe4>
		{
			switch(scr_position)
    1600:	cc 23       	and	r28, r28
    1602:	19 f0       	breq	.+6      	; 0x160a <interface_mode+0xc4>
    1604:	c1 30       	cpi	r28, 0x01	; 1
    1606:	49 f0       	breq	.+18     	; 0x161a <interface_mode+0xd4>
    1608:	13 c0       	rjmp	.+38     	; 0x1630 <interface_mode+0xea>
			{
				case 0:
				send_game_mode(Reverse_settings);
    160a:	87 e0       	ldi	r24, 0x07	; 7
    160c:	0e 94 23 02 	call	0x446	; 0x446 <send_game_mode>
				printf("Normal\n");
    1610:	89 e3       	ldi	r24, 0x39	; 57
    1612:	92 e0       	ldi	r25, 0x02	; 2
    1614:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <puts>
				break;
    1618:	0b c0       	rjmp	.+22     	; 0x1630 <interface_mode+0xea>
				case 1:
				send_game_mode(Normal_settings);
    161a:	86 e0       	ldi	r24, 0x06	; 6
    161c:	0e 94 23 02 	call	0x446	; 0x446 <send_game_mode>
				printf("Reverse\n");
    1620:	8b e7       	ldi	r24, 0x7B	; 123
    1622:	92 e0       	ldi	r25, 0x02	; 2
    1624:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <puts>
				break;
    1628:	03 c0       	rjmp	.+6      	; 0x1630 <interface_mode+0xea>
			}
			return State_Options;
		}
		refresh_oled();
    162a:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	}
    162e:	b7 cf       	rjmp	.-146    	; 0x159e <interface_mode+0x58>
}
    1630:	87 e0       	ldi	r24, 0x07	; 7
    1632:	cf 91       	pop	r28
    1634:	08 95       	ret

00001636 <interface_sound>:
* \brief Function call during the set sound phase
*

****************************************************************************/
InterfaceState interface_sound()
{
    1636:	cf 93       	push	r28
	JoystickDirection change_y;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	uint8_t scr_position = 0;
	
	clear_oled();
    1638:	0e 94 a9 03 	call	0x752	; 0x752 <clear_oled>
	
	position = read_joystick_position();
    163c:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
	direction = read_joystick_direction(position);
    1640:	0e 94 61 02 	call	0x4c2	; 0x4c2 <read_joystick_direction>
	change_y = change_yaxis(direction);
    1644:	0e 94 b3 02 	call	0x566	; 0x566 <change_yaxis>

	set_position(14,0);
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	8e e0       	ldi	r24, 0x0E	; 14
    164c:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Sound");
    1650:	85 e6       	ldi	r24, 0x65	; 101
    1652:	92 e0       	ldi	r25, 0x02	; 2
    1654:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	revert_colour_line(0);
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <revert_colour_line>
	set_position(3,3);
    165e:	63 e0       	ldi	r22, 0x03	; 3
    1660:	83 e0       	ldi	r24, 0x03	; 3
    1662:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("On");
    1666:	83 e8       	ldi	r24, 0x83	; 131
    1668:	92 e0       	ldi	r25, 0x02	; 2
    166a:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	set_position(3,5);
    166e:	65 e0       	ldi	r22, 0x05	; 5
    1670:	83 e0       	ldi	r24, 0x03	; 3
    1672:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Off");
    1676:	86 e8       	ldi	r24, 0x86	; 134
    1678:	92 e0       	ldi	r25, 0x02	; 2
    167a:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	JoystickPosition position;
	JoystickDirection direction;
	JoystickDirection change_y;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	uint8_t scr_position = 0;
    167e:	c0 e0       	ldi	r28, 0x00	; 0
	set_position(3,5);
	print_string("Off");
	
	while(1)
	{
		position = read_joystick_position();
    1680:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
		direction = read_joystick_direction(position);
    1684:	0e 94 61 02 	call	0x4c2	; 0x4c2 <read_joystick_direction>
		change_y = change_yaxis(direction);
    1688:	0e 94 b3 02 	call	0x566	; 0x566 <change_yaxis>
		
		if (change_y == Up)
    168c:	82 30       	cpi	r24, 0x02	; 2
    168e:	61 f4       	brne	.+24     	; 0x16a8 <interface_sound+0x72>
		{
			set_position(1, (scr_position % 2) * 2 + 3);
    1690:	6c 2f       	mov	r22, r28
    1692:	61 70       	andi	r22, 0x01	; 1
    1694:	66 0f       	add	r22, r22
    1696:	6d 5f       	subi	r22, 0xFD	; 253
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
			print_char(' ');
    169e:	80 e2       	ldi	r24, 0x20	; 32
    16a0:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
			scr_position--;
    16a4:	c1 50       	subi	r28, 0x01	; 1
    16a6:	0d c0       	rjmp	.+26     	; 0x16c2 <interface_sound+0x8c>
		}
		else if (change_y == Down)
    16a8:	83 30       	cpi	r24, 0x03	; 3
    16aa:	59 f4       	brne	.+22     	; 0x16c2 <interface_sound+0x8c>
		{
			set_position(1, (scr_position % 2) * 2 + 3);
    16ac:	6c 2f       	mov	r22, r28
    16ae:	61 70       	andi	r22, 0x01	; 1
    16b0:	66 0f       	add	r22, r22
    16b2:	6d 5f       	subi	r22, 0xFD	; 253
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
			print_char(' ');
    16ba:	80 e2       	ldi	r24, 0x20	; 32
    16bc:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
			scr_position++;
    16c0:	cf 5f       	subi	r28, 0xFF	; 255
		}
		
		set_position(1, (scr_position % 2) * 2 + 3);
    16c2:	6c 2f       	mov	r22, r28
    16c4:	61 70       	andi	r22, 0x01	; 1
    16c6:	66 0f       	add	r22, r22
    16c8:	6d 5f       	subi	r22, 0xFD	; 253
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
		print_char('#');
    16d0:	83 e2       	ldi	r24, 0x23	; 35
    16d2:	0e 94 f6 03 	call	0x7ec	; 0x7ec <print_char>
		
		touch_data = read_touchpad_data();
    16d6:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
    16da:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
		if (change_touch_data.rightButton)
    16de:	88 23       	and	r24, r24
    16e0:	79 f0       	breq	.+30     	; 0x1700 <interface_sound+0xca>
		{
			switch(scr_position)
    16e2:	cc 23       	and	r28, r28
    16e4:	19 f0       	breq	.+6      	; 0x16ec <interface_sound+0xb6>
    16e6:	c1 30       	cpi	r28, 0x01	; 1
    16e8:	31 f0       	breq	.+12     	; 0x16f6 <interface_sound+0xc0>
    16ea:	0d c0       	rjmp	.+26     	; 0x1706 <interface_sound+0xd0>
			{
				case 0:
				printf("ON\n");
    16ec:	8a e8       	ldi	r24, 0x8A	; 138
    16ee:	92 e0       	ldi	r25, 0x02	; 2
    16f0:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <puts>
				break;
    16f4:	08 c0       	rjmp	.+16     	; 0x1706 <interface_sound+0xd0>
				case 1:
				printf("OFF\n");
    16f6:	8d e8       	ldi	r24, 0x8D	; 141
    16f8:	92 e0       	ldi	r25, 0x02	; 2
    16fa:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <puts>
				break;
    16fe:	03 c0       	rjmp	.+6      	; 0x1706 <interface_sound+0xd0>
			}
			return State_Options;
		}
		refresh_oled();
    1700:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	}
    1704:	bd cf       	rjmp	.-134    	; 0x1680 <interface_sound+0x4a>
}
    1706:	87 e0       	ldi	r24, 0x07	; 7
    1708:	cf 91       	pop	r28
    170a:	08 95       	ret

0000170c <interface_tutorial>:
/****************************************************************************
* \brief Function call during the set sound phase
*
****************************************************************************/
InterfaceState interface_tutorial()
{
    170c:	ef 92       	push	r14
    170e:	ff 92       	push	r15
    1710:	0f 93       	push	r16
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	JoystickPosition position;
	
	clear_oled();
    1718:	0e 94 a9 03 	call	0x752	; 0x752 <clear_oled>
	
	set_position(14,0);
    171c:	60 e0       	ldi	r22, 0x00	; 0
    171e:	8e e0       	ldi	r24, 0x0E	; 14
    1720:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Tutorial");
    1724:	8b e2       	ldi	r24, 0x2B	; 43
    1726:	92 e0       	ldi	r25, 0x02	; 2
    1728:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	revert_colour_line(0);
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <revert_colour_line>
	set_position(0,6);
    1732:	66 e0       	ldi	r22, 0x06	; 6
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("Press LEFT BUTTON to continue...");
    173a:	81 e9       	ldi	r24, 0x91	; 145
    173c:	92 e0       	ldi	r25, 0x02	; 2
    173e:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	refresh_oled();
    1742:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	
	set_position(0,1);
    1746:	61 e0       	ldi	r22, 0x01	; 1
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("To move servo move joystick");
    174e:	82 eb       	ldi	r24, 0xB2	; 178
    1750:	92 e0       	ldi	r25, 0x02	; 2
    1752:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	refresh_oled();
    1756:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	while(! change_touch_data.leftButton)
	{
		position = read_joystick_position();
		position.yaxis = 137;
    175a:	19 e8       	ldi	r17, 0x89	; 137
	set_position(0,1);
	print_string("To move servo move joystick");
	refresh_oled();
	while(! change_touch_data.leftButton)
	{
		position = read_joystick_position();
    175c:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
    1760:	f8 2e       	mov	r15, r24
		position.yaxis = 137;
    1762:	e1 2e       	mov	r14, r17
		touch_data = read_touchpad_data();
    1764:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
    1768:	d7 2f       	mov	r29, r23
    176a:	c9 2f       	mov	r28, r25
		touch_data.rightTouchPad = 127;
		touch_data.rightButton = 0;
		send_joystick_possition(position, touch_data);
    176c:	4f e7       	ldi	r20, 0x7F	; 127
    176e:	57 2f       	mov	r21, r23
    1770:	60 e0       	ldi	r22, 0x00	; 0
    1772:	79 2f       	mov	r23, r25
    1774:	8f 2d       	mov	r24, r15
    1776:	91 2f       	mov	r25, r17
    1778:	0e 94 04 02 	call	0x408	; 0x408 <send_joystick_possition>
		change_touch_data = change_touchpad_data(touch_data);
    177c:	6f e7       	ldi	r22, 0x7F	; 127
    177e:	7d 2f       	mov	r23, r29
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	9c 2f       	mov	r25, r28
    1784:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
	refresh_oled();
	
	set_position(0,1);
	print_string("To move servo move joystick");
	refresh_oled();
	while(! change_touch_data.leftButton)
    1788:	99 23       	and	r25, r25
    178a:	41 f3       	breq	.-48     	; 0x175c <interface_tutorial+0x50>
		send_joystick_possition(position, touch_data);
		change_touch_data = change_touchpad_data(touch_data);
	}
	change_touch_data.leftButton = 0;
	
	set_position(0,1);
    178c:	61 e0       	ldi	r22, 0x01	; 1
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("To move motor touch RIGHT SLIDER");
    1794:	8e ec       	ldi	r24, 0xCE	; 206
    1796:	92 e0       	ldi	r25, 0x02	; 2
    1798:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	refresh_oled();
    179c:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	
	while(! change_touch_data.leftButton)
	{
		touch_data = read_touchpad_data();
    17a0:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
    17a4:	06 2f       	mov	r16, r22
    17a6:	d7 2f       	mov	r29, r23
    17a8:	c9 2f       	mov	r28, r25
		touch_data.rightButton = 0;
		send_joystick_possition(position, touch_data);
    17aa:	46 2f       	mov	r20, r22
    17ac:	57 2f       	mov	r21, r23
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	79 2f       	mov	r23, r25
    17b2:	8f 2d       	mov	r24, r15
    17b4:	9e 2d       	mov	r25, r14
    17b6:	0e 94 04 02 	call	0x408	; 0x408 <send_joystick_possition>
		change_touch_data = change_touchpad_data(touch_data);
    17ba:	60 2f       	mov	r22, r16
    17bc:	7d 2f       	mov	r23, r29
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	9c 2f       	mov	r25, r28
    17c2:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
	
	set_position(0,1);
	print_string("To move motor touch RIGHT SLIDER");
	refresh_oled();
	
	while(! change_touch_data.leftButton)
    17c6:	99 23       	and	r25, r25
    17c8:	59 f3       	breq	.-42     	; 0x17a0 <interface_tutorial+0x94>
		send_joystick_possition(position, touch_data);
		change_touch_data = change_touchpad_data(touch_data);
	}
	change_touch_data.leftButton = 0;
	
	set_position(0,1);
    17ca:	61 e0       	ldi	r22, 0x01	; 1
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("  To shoot touch RIGHT BUTTON   ");
    17d2:	8f ee       	ldi	r24, 0xEF	; 239
    17d4:	92 e0       	ldi	r25, 0x02	; 2
    17d6:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	refresh_oled();
    17da:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	
	while(! change_touch_data.leftButton)
	{
		touch_data = read_touchpad_data();
    17de:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
    17e2:	d7 2f       	mov	r29, r23
    17e4:	18 2f       	mov	r17, r24
    17e6:	c9 2f       	mov	r28, r25
		touch_data.rightTouchPad = 127;
		send_joystick_possition(position, touch_data);
    17e8:	4f e7       	ldi	r20, 0x7F	; 127
    17ea:	57 2f       	mov	r21, r23
    17ec:	68 2f       	mov	r22, r24
    17ee:	79 2f       	mov	r23, r25
    17f0:	8f 2d       	mov	r24, r15
    17f2:	9e 2d       	mov	r25, r14
    17f4:	0e 94 04 02 	call	0x408	; 0x408 <send_joystick_possition>
		change_touch_data = change_touchpad_data(touch_data);
    17f8:	6f e7       	ldi	r22, 0x7F	; 127
    17fa:	7d 2f       	mov	r23, r29
    17fc:	81 2f       	mov	r24, r17
    17fe:	9c 2f       	mov	r25, r28
    1800:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
	
	set_position(0,1);
	print_string("  To shoot touch RIGHT BUTTON   ");
	refresh_oled();
	
	while(! change_touch_data.leftButton)
    1804:	99 23       	and	r25, r25
    1806:	59 f3       	breq	.-42     	; 0x17de <interface_tutorial+0xd2>
		send_joystick_possition(position, touch_data);
		change_touch_data = change_touchpad_data(touch_data);
	}
	change_touch_data.leftButton = 0;
	
	set_position(0,1);
    1808:	61 e0       	ldi	r22, 0x01	; 1
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("    Try everything together     ");
    1810:	80 e1       	ldi	r24, 0x10	; 16
    1812:	93 e0       	ldi	r25, 0x03	; 3
    1814:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	refresh_oled();
    1818:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	
	while(! change_touch_data.leftButton)
	{
		touch_data = read_touchpad_data();
    181c:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
    1820:	06 2f       	mov	r16, r22
    1822:	d7 2f       	mov	r29, r23
    1824:	18 2f       	mov	r17, r24
    1826:	c9 2f       	mov	r28, r25
		position = read_joystick_position();
    1828:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
		send_joystick_possition(position, touch_data);
    182c:	40 2f       	mov	r20, r16
    182e:	5d 2f       	mov	r21, r29
    1830:	61 2f       	mov	r22, r17
    1832:	7c 2f       	mov	r23, r28
    1834:	0e 94 04 02 	call	0x408	; 0x408 <send_joystick_possition>
		change_touch_data = change_touchpad_data(touch_data);
    1838:	60 2f       	mov	r22, r16
    183a:	7d 2f       	mov	r23, r29
    183c:	81 2f       	mov	r24, r17
    183e:	9c 2f       	mov	r25, r28
    1840:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
	
	set_position(0,1);
	print_string("    Try everything together     ");
	refresh_oled();
	
	while(! change_touch_data.leftButton)
    1844:	99 23       	and	r25, r25
    1846:	51 f3       	breq	.-44     	; 0x181c <interface_tutorial+0x110>
	}
	change_touch_data.leftButton = 0;
	change_touch_data.rightButton = 0;
	
	return State_NewGame;
}
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	df 91       	pop	r29
    184c:	cf 91       	pop	r28
    184e:	1f 91       	pop	r17
    1850:	0f 91       	pop	r16
    1852:	ff 90       	pop	r15
    1854:	ef 90       	pop	r14
    1856:	08 95       	ret

00001858 <interface_print_mode>:
* \brief Print out game mode on OLED
*
* \param in game mode
****************************************************************************/
InterfaceState interface_print_mode(GameModes mode)
{
    1858:	cf 93       	push	r28
    185a:	c8 2f       	mov	r28, r24
	
	clear_oled();
    185c:	0e 94 a9 03 	call	0x752	; 0x752 <clear_oled>
	current_mode = mode;
    1860:	c0 93 77 03 	sts	0x0377, r28
	switch (mode)
    1864:	c3 30       	cpi	r28, 0x03	; 3
    1866:	91 f0       	breq	.+36     	; 0x188c <interface_print_mode+0x34>
    1868:	18 f4       	brcc	.+6      	; 0x1870 <interface_print_mode+0x18>
    186a:	c2 30       	cpi	r28, 0x02	; 2
    186c:	31 f0       	breq	.+12     	; 0x187a <interface_print_mode+0x22>
    186e:	28 c0       	rjmp	.+80     	; 0x18c0 <interface_print_mode+0x68>
    1870:	c4 30       	cpi	r28, 0x04	; 4
    1872:	a9 f0       	breq	.+42     	; 0x189e <interface_print_mode+0x46>
    1874:	c5 30       	cpi	r28, 0x05	; 5
    1876:	e1 f0       	breq	.+56     	; 0x18b0 <interface_print_mode+0x58>
    1878:	23 c0       	rjmp	.+70     	; 0x18c0 <interface_print_mode+0x68>
	{
		case Easy :
		set_position(14,0);
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	8e e0       	ldi	r24, 0x0E	; 14
    187e:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
		print_string("Easy");
    1882:	84 e3       	ldi	r24, 0x34	; 52
    1884:	92 e0       	ldi	r25, 0x02	; 2
    1886:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
		break;
    188a:	1a c0       	rjmp	.+52     	; 0x18c0 <interface_print_mode+0x68>
		
		case Normal :
		set_position(12,0);
    188c:	60 e0       	ldi	r22, 0x00	; 0
    188e:	8c e0       	ldi	r24, 0x0C	; 12
    1890:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
		print_string("Normal");
    1894:	89 e3       	ldi	r24, 0x39	; 57
    1896:	92 e0       	ldi	r25, 0x02	; 2
    1898:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
		break;
    189c:	11 c0       	rjmp	.+34     	; 0x18c0 <interface_print_mode+0x68>
		
		case Hard :
		set_position(12,0);
    189e:	60 e0       	ldi	r22, 0x00	; 0
    18a0:	8c e0       	ldi	r24, 0x0C	; 12
    18a2:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
		print_string("Hard");
    18a6:	80 e4       	ldi	r24, 0x40	; 64
    18a8:	92 e0       	ldi	r25, 0x02	; 2
    18aa:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
		break;
    18ae:	08 c0       	rjmp	.+16     	; 0x18c0 <interface_print_mode+0x68>
		
		case Insane :
		set_position(12,0);
    18b0:	60 e0       	ldi	r22, 0x00	; 0
    18b2:	8c e0       	ldi	r24, 0x0C	; 12
    18b4:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
		print_string("Insane");
    18b8:	85 e4       	ldi	r24, 0x45	; 69
    18ba:	92 e0       	ldi	r25, 0x02	; 2
    18bc:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
		break;
		
		default :
		break;
	}
	revert_colour_line(0);
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	0e 94 71 04 	call	0x8e2	; 0x8e2 <revert_colour_line>
	refresh_oled();
    18c6:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	
	return State_Playing;
	
}
    18ca:	8b e0       	ldi	r24, 0x0B	; 11
    18cc:	cf 91       	pop	r28
    18ce:	08 95       	ret

000018d0 <interface_playing>:
* \brief Main function running while playing the game
*
* 
****************************************************************************/
InterfaceState interface_playing()
{
    18d0:	3f 92       	push	r3
    18d2:	4f 92       	push	r4
    18d4:	5f 92       	push	r5
    18d6:	6f 92       	push	r6
    18d8:	7f 92       	push	r7
    18da:	8f 92       	push	r8
    18dc:	9f 92       	push	r9
    18de:	af 92       	push	r10
    18e0:	bf 92       	push	r11
    18e2:	cf 92       	push	r12
    18e4:	df 92       	push	r13
    18e6:	ef 92       	push	r14
    18e8:	ff 92       	push	r15
    18ea:	0f 93       	push	r16
    18ec:	1f 93       	push	r17
    18ee:	cf 93       	push	r28
    18f0:	df 93       	push	r29
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	63 97       	sbiw	r28, 0x13	; 19
    18f8:	0f b6       	in	r0, 0x3f	; 63
    18fa:	f8 94       	cli
    18fc:	de bf       	out	0x3e, r29	; 62
    18fe:	0f be       	out	0x3f, r0	; 63
    1900:	cd bf       	out	0x3d, r28	; 61
	JoystickPosition position;
	char buffer[9];
	uint16_t old_time = 0;
	uint16_t current_time = 0;
	
	set_position(13,4);
    1902:	64 e0       	ldi	r22, 0x04	; 4
    1904:	8d e0       	ldi	r24, 0x0D	; 13
    1906:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("SHOOT");
    190a:	81 e3       	ldi	r24, 0x31	; 49
    190c:	93 e0       	ldi	r25, 0x03	; 3
    190e:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	refresh_oled();
    1912:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	
	touch_data = read_touchpad_data();
    1916:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
	change_touch_data = change_touchpad_data(touch_data);
    191a:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
	
	while (!change_touch_data.rightButton)
    191e:	81 11       	cpse	r24, r1
    1920:	06 c0       	rjmp	.+12     	; 0x192e <interface_playing+0x5e>
	{
		touch_data = read_touchpad_data();
    1922:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
    1926:	0e 94 c4 02 	call	0x588	; 0x588 <change_touchpad_data>
	refresh_oled();
	
	touch_data = read_touchpad_data();
	change_touch_data = change_touchpad_data(touch_data);
	
	while (!change_touch_data.rightButton)
    192a:	88 23       	and	r24, r24
    192c:	d1 f3       	breq	.-12     	; 0x1922 <interface_playing+0x52>
	{
		touch_data = read_touchpad_data();
		change_touch_data = change_touchpad_data(touch_data);
	}
	
	set_position(13,4);
    192e:	64 e0       	ldi	r22, 0x04	; 4
    1930:	8d e0       	ldi	r24, 0x0D	; 13
    1932:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("     ");
    1936:	8b e2       	ldi	r24, 0x2B	; 43
    1938:	93 e0       	ldi	r25, 0x03	; 3
    193a:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	refresh_oled();
    193e:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	
	timer1_reset();
    1942:	0e 94 b0 07 	call	0xf60	; 0xf60 <timer1_reset>
	current_time = old_time = timer1_get_time();
    1946:	0e 94 b5 07 	call	0xf6a	; 0xf6a <timer1_get_time>
    194a:	8c 01       	movw	r16, r24
		if (current_time != old_time)
		{
			current_score = old_time * 10;
			set_position(13,2);
			print_string("Time");
			snprintf(buffer, 9, "%02d:%02d:%02d",old_time / 3600 , old_time / 60, old_time % 60);
    194c:	0f 2e       	mov	r0, r31
    194e:	fc e3       	ldi	r31, 0x3C	; 60
    1950:	4f 2e       	mov	r4, r31
    1952:	f0 2d       	mov	r31, r0
    1954:	0f 2e       	mov	r0, r31
    1956:	f0 e1       	ldi	r31, 0x10	; 16
    1958:	8f 2e       	mov	r8, r31
    195a:	fe e0       	ldi	r31, 0x0E	; 14
    195c:	9f 2e       	mov	r9, r31
    195e:	f0 2d       	mov	r31, r0
    1960:	0f 2e       	mov	r0, r31
    1962:	fc e3       	ldi	r31, 0x3C	; 60
    1964:	af 2e       	mov	r10, r31
    1966:	f3 e0       	ldi	r31, 0x03	; 3
    1968:	bf 2e       	mov	r11, r31
    196a:	f0 2d       	mov	r31, r0
    196c:	0f 2e       	mov	r0, r31
    196e:	f9 e0       	ldi	r31, 0x09	; 9
    1970:	5f 2e       	mov	r5, r31
    1972:	f0 2d       	mov	r31, r0
    1974:	7e 01       	movw	r14, r28
    1976:	4b e0       	ldi	r20, 0x0B	; 11
    1978:	e4 0e       	add	r14, r20
    197a:	f1 1c       	adc	r15, r1
			set_position(11,3);
			print_string(buffer);
			set_position(13,4);
			print_string("Score"); 
			snprintf(buffer, 9, "%05d",current_score);
    197c:	0f 2e       	mov	r0, r31
    197e:	f1 e5       	ldi	r31, 0x51	; 81
    1980:	6f 2e       	mov	r6, r31
    1982:	f3 e0       	ldi	r31, 0x03	; 3
    1984:	7f 2e       	mov	r7, r31
    1986:	f0 2d       	mov	r31, r0
			old_time = current_time;
		}
		
		if(CAN_receive_message(&canMessageNode2) != SUCCESS)
		{
			canMessageNode2.ID = 0xFF;
    1988:	33 24       	eor	r3, r3
    198a:	3a 94       	dec	r3
    198c:	01 c0       	rjmp	.+2      	; 0x1990 <interface_playing+0xc0>
    198e:	86 01       	movw	r16, r12
	timer1_reset();
	current_time = old_time = timer1_get_time();
	
	do
	{
		position = read_joystick_position();
    1990:	0e 94 55 02 	call	0x4aa	; 0x4aa <read_joystick_position>
    1994:	6c 01       	movw	r12, r24
		touch_data = read_touchpad_data();
    1996:	0e 94 8e 02 	call	0x51c	; 0x51c <read_touchpad_data>
		
		send_joystick_possition(position, touch_data);
    199a:	ab 01       	movw	r20, r22
    199c:	bc 01       	movw	r22, r24
    199e:	c6 01       	movw	r24, r12
    19a0:	0e 94 04 02 	call	0x408	; 0x408 <send_joystick_possition>
    19a4:	89 ef       	ldi	r24, 0xF9	; 249
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <interface_playing+0xd8>
    19ac:	00 c0       	rjmp	.+0      	; 0x19ae <interface_playing+0xde>
    19ae:	00 00       	nop
		_delay_ms(1);
		
		current_time = timer1_get_time();
    19b0:	0e 94 b5 07 	call	0xf6a	; 0xf6a <timer1_get_time>
    19b4:	6c 01       	movw	r12, r24

		if (current_time != old_time)
    19b6:	80 17       	cp	r24, r16
    19b8:	91 07       	cpc	r25, r17
    19ba:	09 f4       	brne	.+2      	; 0x19be <interface_playing+0xee>
    19bc:	6b c0       	rjmp	.+214    	; 0x1a94 <interface_playing+0x1c4>
		{
			current_score = old_time * 10;
    19be:	98 01       	movw	r18, r16
    19c0:	22 0f       	add	r18, r18
    19c2:	33 1f       	adc	r19, r19
    19c4:	c8 01       	movw	r24, r16
    19c6:	88 0f       	add	r24, r24
    19c8:	99 1f       	adc	r25, r25
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	88 0f       	add	r24, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	82 0f       	add	r24, r18
    19d4:	93 1f       	adc	r25, r19
    19d6:	90 93 79 03 	sts	0x0379, r25
    19da:	80 93 78 03 	sts	0x0378, r24
			set_position(13,2);
    19de:	62 e0       	ldi	r22, 0x02	; 2
    19e0:	8d e0       	ldi	r24, 0x0D	; 13
    19e2:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
			print_string("Time");
    19e6:	87 e3       	ldi	r24, 0x37	; 55
    19e8:	93 e0       	ldi	r25, 0x03	; 3
    19ea:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
			snprintf(buffer, 9, "%02d:%02d:%02d",old_time / 3600 , old_time / 60, old_time % 60);
    19ee:	98 01       	movw	r18, r16
    19f0:	a9 e8       	ldi	r26, 0x89	; 137
    19f2:	b8 e8       	ldi	r27, 0x88	; 136
    19f4:	0e 94 76 0e 	call	0x1cec	; 0x1cec <__umulhisi3>
    19f8:	96 95       	lsr	r25
    19fa:	87 95       	ror	r24
    19fc:	92 95       	swap	r25
    19fe:	82 95       	swap	r24
    1a00:	8f 70       	andi	r24, 0x0F	; 15
    1a02:	89 27       	eor	r24, r25
    1a04:	9f 70       	andi	r25, 0x0F	; 15
    1a06:	89 27       	eor	r24, r25
    1a08:	48 9e       	mul	r4, r24
    1a0a:	90 01       	movw	r18, r0
    1a0c:	49 9e       	mul	r4, r25
    1a0e:	30 0d       	add	r19, r0
    1a10:	11 24       	eor	r1, r1
    1a12:	a8 01       	movw	r20, r16
    1a14:	42 1b       	sub	r20, r18
    1a16:	53 0b       	sbc	r21, r19
    1a18:	9a 01       	movw	r18, r20
    1a1a:	3f 93       	push	r19
    1a1c:	4f 93       	push	r20
    1a1e:	9f 93       	push	r25
    1a20:	8f 93       	push	r24
    1a22:	c8 01       	movw	r24, r16
    1a24:	b4 01       	movw	r22, r8
    1a26:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <__udivmodhi4>
    1a2a:	7f 93       	push	r23
    1a2c:	6f 93       	push	r22
    1a2e:	bf 92       	push	r11
    1a30:	af 92       	push	r10
    1a32:	1f 92       	push	r1
    1a34:	5f 92       	push	r5
    1a36:	ff 92       	push	r15
    1a38:	ef 92       	push	r14
    1a3a:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <snprintf>
			set_position(11,3);
    1a3e:	63 e0       	ldi	r22, 0x03	; 3
    1a40:	8b e0       	ldi	r24, 0x0B	; 11
    1a42:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
			print_string(buffer);
    1a46:	c7 01       	movw	r24, r14
    1a48:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
			set_position(13,4);
    1a4c:	64 e0       	ldi	r22, 0x04	; 4
    1a4e:	8d e0       	ldi	r24, 0x0D	; 13
    1a50:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
			print_string("Score"); 
    1a54:	8b e4       	ldi	r24, 0x4B	; 75
    1a56:	93 e0       	ldi	r25, 0x03	; 3
    1a58:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
			snprintf(buffer, 9, "%05d",current_score);
    1a5c:	80 91 79 03 	lds	r24, 0x0379
    1a60:	8f 93       	push	r24
    1a62:	80 91 78 03 	lds	r24, 0x0378
    1a66:	8f 93       	push	r24
    1a68:	7f 92       	push	r7
    1a6a:	6f 92       	push	r6
    1a6c:	1f 92       	push	r1
    1a6e:	5f 92       	push	r5
    1a70:	ff 92       	push	r15
    1a72:	ef 92       	push	r14
    1a74:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <snprintf>
			set_position(13,5);
    1a78:	65 e0       	ldi	r22, 0x05	; 5
    1a7a:	8d e0       	ldi	r24, 0x0D	; 13
    1a7c:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
			print_string(buffer);
    1a80:	c7 01       	movw	r24, r14
    1a82:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
			
			refresh_oled();
    1a86:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
			old_time = current_time;
		}
		
		if(CAN_receive_message(&canMessageNode2) != SUCCESS)
    1a94:	ce 01       	movw	r24, r28
    1a96:	01 96       	adiw	r24, 0x01	; 1
    1a98:	0e 94 c8 01 	call	0x390	; 0x390 <CAN_receive_message>
    1a9c:	88 23       	and	r24, r24
    1a9e:	11 f0       	breq	.+4      	; 0x1aa4 <interface_playing+0x1d4>
		{
			canMessageNode2.ID = 0xFF;
    1aa0:	39 82       	std	Y+1, r3	; 0x01
    1aa2:	75 cf       	rjmp	.-278    	; 0x198e <interface_playing+0xbe>
		}
		
	} while(canMessageNode2.ID != 0x05);//current_time <= 10);//canMessageNode2.ID != 0x05);
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	85 30       	cpi	r24, 0x05	; 5
    1aa8:	09 f0       	breq	.+2      	; 0x1aac <interface_playing+0x1dc>
    1aaa:	71 cf       	rjmp	.-286    	; 0x198e <interface_playing+0xbe>
	
	return State_Endgame;
}
    1aac:	8c e0       	ldi	r24, 0x0C	; 12
    1aae:	63 96       	adiw	r28, 0x13	; 19
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	f8 94       	cli
    1ab4:	de bf       	out	0x3e, r29	; 62
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	cd bf       	out	0x3d, r28	; 61
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
    1abe:	1f 91       	pop	r17
    1ac0:	0f 91       	pop	r16
    1ac2:	ff 90       	pop	r15
    1ac4:	ef 90       	pop	r14
    1ac6:	df 90       	pop	r13
    1ac8:	cf 90       	pop	r12
    1aca:	bf 90       	pop	r11
    1acc:	af 90       	pop	r10
    1ace:	9f 90       	pop	r9
    1ad0:	8f 90       	pop	r8
    1ad2:	7f 90       	pop	r7
    1ad4:	6f 90       	pop	r6
    1ad6:	5f 90       	pop	r5
    1ad8:	4f 90       	pop	r4
    1ada:	3f 90       	pop	r3
    1adc:	08 95       	ret

00001ade <inteface_end_game>:
* \brief Animations and high-scores handling
*
* 
****************************************************************************/
InterfaceState inteface_end_game()
{
    1ade:	0f 93       	push	r16
    1ae0:	1f 93       	push	r17
    1ae2:	cf 93       	push	r28
    1ae4:	df 93       	push	r29
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	61 97       	sbiw	r28, 0x11	; 17
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	de 01       	movw	r26, r28
    1af8:	11 96       	adiw	r26, 0x01	; 1
    1afa:	e0 e0       	ldi	r30, 0x00	; 0
    1afc:	fc e1       	ldi	r31, 0x1C	; 28
	char position_info[11];
	uint8_t i;
	
	for(i = 0; i < USERNAME_LENGTH; i++)
	{
		name[i] = ext_ram[i];
    1afe:	81 91       	ld	r24, Z+
    1b00:	8d 93       	st	X+, r24
	volatile char *ext_ram = (char *) SRAM_USERNAME_ADDR;
	char name[USERNAME_LENGTH + 1];
	char position_info[11];
	uint8_t i;
	
	for(i = 0; i < USERNAME_LENGTH; i++)
    1b02:	e5 30       	cpi	r30, 0x05	; 5
    1b04:	8c e1       	ldi	r24, 0x1C	; 28
    1b06:	f8 07       	cpc	r31, r24
    1b08:	d1 f7       	brne	.-12     	; 0x1afe <inteface_end_game+0x20>
	{
		name[i] = ext_ram[i];
	}
	name[USERNAME_LENGTH] = '\0';
    1b0a:	1e 82       	std	Y+6, r1	; 0x06
	
	position = high_score_add(name, current_score);
    1b0c:	60 91 78 03 	lds	r22, 0x0378
    1b10:	70 91 79 03 	lds	r23, 0x0379
    1b14:	ce 01       	movw	r24, r28
    1b16:	01 96       	adiw	r24, 0x01	; 1
    1b18:	0e 94 6e 06 	call	0xcdc	; 0xcdc <high_score_add>
    1b1c:	18 2f       	mov	r17, r24
	
	end_game_animation(0);
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	0e 94 92 04 	call	0x924	; 0x924 <end_game_animation>
	clear_oled();
    1b24:	0e 94 a9 03 	call	0x752	; 0x752 <clear_oled>
	set_position(10,3);
    1b28:	63 e0       	ldi	r22, 0x03	; 3
    1b2a:	8a e0       	ldi	r24, 0x0A	; 10
    1b2c:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
	print_string("GAME OVER!");
    1b30:	86 e5       	ldi	r24, 0x56	; 86
    1b32:	93 e0       	ldi	r25, 0x03	; 3
    1b34:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
	if (position)
    1b38:	11 23       	and	r17, r17
    1b3a:	e1 f0       	breq	.+56     	; 0x1b74 <inteface_end_game+0x96>
	{
		set_position(10,4);
    1b3c:	64 e0       	ldi	r22, 0x04	; 4
    1b3e:	8a e0       	ldi	r24, 0x0A	; 10
    1b40:	0e 94 3d 04 	call	0x87a	; 0x87a <set_position>
		snprintf(position_info, 11, "You are #%d", position);
    1b44:	1f 92       	push	r1
    1b46:	1f 93       	push	r17
    1b48:	81 e6       	ldi	r24, 0x61	; 97
    1b4a:	93 e0       	ldi	r25, 0x03	; 3
    1b4c:	9f 93       	push	r25
    1b4e:	8f 93       	push	r24
    1b50:	1f 92       	push	r1
    1b52:	8b e0       	ldi	r24, 0x0B	; 11
    1b54:	8f 93       	push	r24
    1b56:	8e 01       	movw	r16, r28
    1b58:	09 5f       	subi	r16, 0xF9	; 249
    1b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5c:	1f 93       	push	r17
    1b5e:	0f 93       	push	r16
    1b60:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <snprintf>
		print_string(position_info);
    1b64:	c8 01       	movw	r24, r16
    1b66:	0e 94 55 04 	call	0x8aa	; 0x8aa <print_string>
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	cd bf       	out	0x3d, r28	; 61
	}
	
	refresh_oled();
    1b74:	0e 94 9c 03 	call	0x738	; 0x738 <refresh_oled>
	
	old_time = current_time = timer1_get_time();
    1b78:	0e 94 b5 07 	call	0xf6a	; 0xf6a <timer1_get_time>
    1b7c:	90 93 7b 03 	sts	0x037B, r25
    1b80:	80 93 7a 03 	sts	0x037A, r24
	old_time += 3;
    1b84:	8c 01       	movw	r16, r24
    1b86:	0d 5f       	subi	r16, 0xFD	; 253
    1b88:	1f 4f       	sbci	r17, 0xFF	; 255
	while(current_time <= old_time)
    1b8a:	80 91 7a 03 	lds	r24, 0x037A
    1b8e:	90 91 7b 03 	lds	r25, 0x037B
    1b92:	08 17       	cp	r16, r24
    1b94:	19 07       	cpc	r17, r25
    1b96:	68 f0       	brcs	.+26     	; 0x1bb2 <inteface_end_game+0xd4>
	{
		current_time = timer1_get_time();
    1b98:	0e 94 b5 07 	call	0xf6a	; 0xf6a <timer1_get_time>
    1b9c:	90 93 7b 03 	sts	0x037B, r25
    1ba0:	80 93 7a 03 	sts	0x037A, r24
	
	refresh_oled();
	
	old_time = current_time = timer1_get_time();
	old_time += 3;
	while(current_time <= old_time)
    1ba4:	20 91 7a 03 	lds	r18, 0x037A
    1ba8:	30 91 7b 03 	lds	r19, 0x037B
    1bac:	02 17       	cp	r16, r18
    1bae:	13 07       	cpc	r17, r19
    1bb0:	98 f7       	brcc	.-26     	; 0x1b98 <inteface_end_game+0xba>
	{
		current_time = timer1_get_time();
	}
	end_game_animation(1);
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	0e 94 92 04 	call	0x924	; 0x924 <end_game_animation>
	
	return State_HighScores;
    1bb8:	88 e0       	ldi	r24, 0x08	; 8
    1bba:	61 96       	adiw	r28, 0x11	; 17
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	de bf       	out	0x3e, r29	; 62
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	cd bf       	out	0x3d, r28	; 61
    1bc6:	df 91       	pop	r29
    1bc8:	cf 91       	pop	r28
    1bca:	1f 91       	pop	r17
    1bcc:	0f 91       	pop	r16
    1bce:	08 95       	ret

00001bd0 <interface_state_machine>:
****************************************************************************/
void interface_state_machine()
{
	static InterfaceState state = State_Username;
	
	switch(state)
    1bd0:	80 91 76 03 	lds	r24, 0x0376
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	8d 30       	cpi	r24, 0x0D	; 13
    1bd8:	91 05       	cpc	r25, r1
    1bda:	08 f0       	brcs	.+2      	; 0x1bde <interface_state_machine+0xe>
    1bdc:	58 c0       	rjmp	.+176    	; 0x1c8e <interface_state_machine+0xbe>
    1bde:	fc 01       	movw	r30, r24
    1be0:	e8 5c       	subi	r30, 0xC8	; 200
    1be2:	ff 4f       	sbci	r31, 0xFF	; 255
    1be4:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__tablejump2__>
	{
		case State_Username :
		state = interface_username();
    1be8:	0e 94 09 08 	call	0x1012	; 0x1012 <interface_username>
    1bec:	80 93 76 03 	sts	0x0376, r24
		break;
    1bf0:	08 95       	ret
		
		case State_NewGame :
		state = interface_new_game();
    1bf2:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <interface_new_game>
    1bf6:	80 93 76 03 	sts	0x0376, r24
		break;
    1bfa:	08 95       	ret
		
		case State_Tutorial :
		send_game_mode(Tutorial);
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	0e 94 23 02 	call	0x446	; 0x446 <send_game_mode>
		state = interface_tutorial();
    1c02:	0e 94 86 0b 	call	0x170c	; 0x170c <interface_tutorial>
    1c06:	80 93 76 03 	sts	0x0376, r24
		break;
    1c0a:	08 95       	ret
		
		case State_Easy :
		send_game_mode(Easy);
    1c0c:	82 e0       	ldi	r24, 0x02	; 2
    1c0e:	0e 94 23 02 	call	0x446	; 0x446 <send_game_mode>
		state = interface_print_mode(Easy);
    1c12:	82 e0       	ldi	r24, 0x02	; 2
    1c14:	0e 94 2c 0c 	call	0x1858	; 0x1858 <interface_print_mode>
    1c18:	80 93 76 03 	sts	0x0376, r24
		break;
    1c1c:	08 95       	ret
		
		case State_Normal :
		send_game_mode(Normal);
    1c1e:	83 e0       	ldi	r24, 0x03	; 3
    1c20:	0e 94 23 02 	call	0x446	; 0x446 <send_game_mode>
		state = interface_print_mode(Normal);
    1c24:	83 e0       	ldi	r24, 0x03	; 3
    1c26:	0e 94 2c 0c 	call	0x1858	; 0x1858 <interface_print_mode>
    1c2a:	80 93 76 03 	sts	0x0376, r24
		break;
    1c2e:	08 95       	ret
		
		case State_Hard :
		send_game_mode(Hard);
    1c30:	84 e0       	ldi	r24, 0x04	; 4
    1c32:	0e 94 23 02 	call	0x446	; 0x446 <send_game_mode>
		state = interface_print_mode(Hard);
    1c36:	84 e0       	ldi	r24, 0x04	; 4
    1c38:	0e 94 2c 0c 	call	0x1858	; 0x1858 <interface_print_mode>
    1c3c:	80 93 76 03 	sts	0x0376, r24
		break;
    1c40:	08 95       	ret
		
		case State_Insane :
		send_game_mode(Insane);
    1c42:	85 e0       	ldi	r24, 0x05	; 5
    1c44:	0e 94 23 02 	call	0x446	; 0x446 <send_game_mode>
		state = interface_print_mode(Insane);
    1c48:	85 e0       	ldi	r24, 0x05	; 5
    1c4a:	0e 94 2c 0c 	call	0x1858	; 0x1858 <interface_print_mode>
    1c4e:	80 93 76 03 	sts	0x0376, r24
		break;
    1c52:	08 95       	ret
		
		case State_HighScores :
		state = interface_high_scores();
    1c54:	0e 94 b2 09 	call	0x1364	; 0x1364 <interface_high_scores>
    1c58:	80 93 76 03 	sts	0x0376, r24
		break;
    1c5c:	08 95       	ret
		
		case State_Options :
		state = interface_options();
    1c5e:	0e 94 09 0a 	call	0x1412	; 0x1412 <interface_options>
    1c62:	80 93 76 03 	sts	0x0376, r24
		break;
    1c66:	08 95       	ret
		
		case State_Sound :
		state = interface_sound();
    1c68:	0e 94 1b 0b 	call	0x1636	; 0x1636 <interface_sound>
    1c6c:	80 93 76 03 	sts	0x0376, r24
		break;
    1c70:	08 95       	ret
		
		case  State_Mode :
		state = interface_mode();
    1c72:	0e 94 a3 0a 	call	0x1546	; 0x1546 <interface_mode>
    1c76:	80 93 76 03 	sts	0x0376, r24
		break;
    1c7a:	08 95       	ret
		
		case State_Playing:
		state = interface_playing();
    1c7c:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <interface_playing>
    1c80:	80 93 76 03 	sts	0x0376, r24
		break;
    1c84:	08 95       	ret
		
		case State_Endgame:
		state = inteface_end_game();
    1c86:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <inteface_end_game>
    1c8a:	80 93 76 03 	sts	0x0376, r24
    1c8e:	08 95       	ret

00001c90 <__udivmodhi4>:
    1c90:	aa 1b       	sub	r26, r26
    1c92:	bb 1b       	sub	r27, r27
    1c94:	51 e1       	ldi	r21, 0x11	; 17
    1c96:	07 c0       	rjmp	.+14     	; 0x1ca6 <__udivmodhi4_ep>

00001c98 <__udivmodhi4_loop>:
    1c98:	aa 1f       	adc	r26, r26
    1c9a:	bb 1f       	adc	r27, r27
    1c9c:	a6 17       	cp	r26, r22
    1c9e:	b7 07       	cpc	r27, r23
    1ca0:	10 f0       	brcs	.+4      	; 0x1ca6 <__udivmodhi4_ep>
    1ca2:	a6 1b       	sub	r26, r22
    1ca4:	b7 0b       	sbc	r27, r23

00001ca6 <__udivmodhi4_ep>:
    1ca6:	88 1f       	adc	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	5a 95       	dec	r21
    1cac:	a9 f7       	brne	.-22     	; 0x1c98 <__udivmodhi4_loop>
    1cae:	80 95       	com	r24
    1cb0:	90 95       	com	r25
    1cb2:	bc 01       	movw	r22, r24
    1cb4:	cd 01       	movw	r24, r26
    1cb6:	08 95       	ret

00001cb8 <__divmodhi4>:
    1cb8:	97 fb       	bst	r25, 7
    1cba:	07 2e       	mov	r0, r23
    1cbc:	16 f4       	brtc	.+4      	; 0x1cc2 <__divmodhi4+0xa>
    1cbe:	00 94       	com	r0
    1cc0:	07 d0       	rcall	.+14     	; 0x1cd0 <__divmodhi4_neg1>
    1cc2:	77 fd       	sbrc	r23, 7
    1cc4:	09 d0       	rcall	.+18     	; 0x1cd8 <__divmodhi4_neg2>
    1cc6:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <__udivmodhi4>
    1cca:	07 fc       	sbrc	r0, 7
    1ccc:	05 d0       	rcall	.+10     	; 0x1cd8 <__divmodhi4_neg2>
    1cce:	3e f4       	brtc	.+14     	; 0x1cde <__divmodhi4_exit>

00001cd0 <__divmodhi4_neg1>:
    1cd0:	90 95       	com	r25
    1cd2:	81 95       	neg	r24
    1cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd6:	08 95       	ret

00001cd8 <__divmodhi4_neg2>:
    1cd8:	70 95       	com	r23
    1cda:	61 95       	neg	r22
    1cdc:	7f 4f       	sbci	r23, 0xFF	; 255

00001cde <__divmodhi4_exit>:
    1cde:	08 95       	ret

00001ce0 <__tablejump2__>:
    1ce0:	ee 0f       	add	r30, r30
    1ce2:	ff 1f       	adc	r31, r31

00001ce4 <__tablejump__>:
    1ce4:	05 90       	lpm	r0, Z+
    1ce6:	f4 91       	lpm	r31, Z
    1ce8:	e0 2d       	mov	r30, r0
    1cea:	09 94       	ijmp

00001cec <__umulhisi3>:
    1cec:	a2 9f       	mul	r26, r18
    1cee:	b0 01       	movw	r22, r0
    1cf0:	b3 9f       	mul	r27, r19
    1cf2:	c0 01       	movw	r24, r0
    1cf4:	a3 9f       	mul	r26, r19
    1cf6:	70 0d       	add	r23, r0
    1cf8:	81 1d       	adc	r24, r1
    1cfa:	11 24       	eor	r1, r1
    1cfc:	91 1d       	adc	r25, r1
    1cfe:	b2 9f       	mul	r27, r18
    1d00:	70 0d       	add	r23, r0
    1d02:	81 1d       	adc	r24, r1
    1d04:	11 24       	eor	r1, r1
    1d06:	91 1d       	adc	r25, r1
    1d08:	08 95       	ret

00001d0a <fdevopen>:
    1d0a:	0f 93       	push	r16
    1d0c:	1f 93       	push	r17
    1d0e:	cf 93       	push	r28
    1d10:	df 93       	push	r29
    1d12:	ec 01       	movw	r28, r24
    1d14:	8b 01       	movw	r16, r22
    1d16:	00 97       	sbiw	r24, 0x00	; 0
    1d18:	31 f4       	brne	.+12     	; 0x1d26 <fdevopen+0x1c>
    1d1a:	61 15       	cp	r22, r1
    1d1c:	71 05       	cpc	r23, r1
    1d1e:	19 f4       	brne	.+6      	; 0x1d26 <fdevopen+0x1c>
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	38 c0       	rjmp	.+112    	; 0x1d96 <fdevopen+0x8c>
    1d26:	6e e0       	ldi	r22, 0x0E	; 14
    1d28:	70 e0       	ldi	r23, 0x00	; 0
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	0e 94 13 11 	call	0x2226	; 0x2226 <calloc>
    1d32:	fc 01       	movw	r30, r24
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	a1 f3       	breq	.-24     	; 0x1d20 <fdevopen+0x16>
    1d38:	80 e8       	ldi	r24, 0x80	; 128
    1d3a:	83 83       	std	Z+3, r24	; 0x03
    1d3c:	01 15       	cp	r16, r1
    1d3e:	11 05       	cpc	r17, r1
    1d40:	71 f0       	breq	.+28     	; 0x1d5e <fdevopen+0x54>
    1d42:	13 87       	std	Z+11, r17	; 0x0b
    1d44:	02 87       	std	Z+10, r16	; 0x0a
    1d46:	81 e8       	ldi	r24, 0x81	; 129
    1d48:	83 83       	std	Z+3, r24	; 0x03
    1d4a:	80 91 7c 03 	lds	r24, 0x037C
    1d4e:	90 91 7d 03 	lds	r25, 0x037D
    1d52:	89 2b       	or	r24, r25
    1d54:	21 f4       	brne	.+8      	; 0x1d5e <fdevopen+0x54>
    1d56:	f0 93 7d 03 	sts	0x037D, r31
    1d5a:	e0 93 7c 03 	sts	0x037C, r30
    1d5e:	20 97       	sbiw	r28, 0x00	; 0
    1d60:	c9 f0       	breq	.+50     	; 0x1d94 <fdevopen+0x8a>
    1d62:	d1 87       	std	Z+9, r29	; 0x09
    1d64:	c0 87       	std	Z+8, r28	; 0x08
    1d66:	83 81       	ldd	r24, Z+3	; 0x03
    1d68:	82 60       	ori	r24, 0x02	; 2
    1d6a:	83 83       	std	Z+3, r24	; 0x03
    1d6c:	80 91 7e 03 	lds	r24, 0x037E
    1d70:	90 91 7f 03 	lds	r25, 0x037F
    1d74:	89 2b       	or	r24, r25
    1d76:	71 f4       	brne	.+28     	; 0x1d94 <fdevopen+0x8a>
    1d78:	f0 93 7f 03 	sts	0x037F, r31
    1d7c:	e0 93 7e 03 	sts	0x037E, r30
    1d80:	80 91 80 03 	lds	r24, 0x0380
    1d84:	90 91 81 03 	lds	r25, 0x0381
    1d88:	89 2b       	or	r24, r25
    1d8a:	21 f4       	brne	.+8      	; 0x1d94 <fdevopen+0x8a>
    1d8c:	f0 93 81 03 	sts	0x0381, r31
    1d90:	e0 93 80 03 	sts	0x0380, r30
    1d94:	cf 01       	movw	r24, r30
    1d96:	df 91       	pop	r29
    1d98:	cf 91       	pop	r28
    1d9a:	1f 91       	pop	r17
    1d9c:	0f 91       	pop	r16
    1d9e:	08 95       	ret

00001da0 <printf>:
    1da0:	a0 e0       	ldi	r26, 0x00	; 0
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e6 ed       	ldi	r30, 0xD6	; 214
    1da6:	fe e0       	ldi	r31, 0x0E	; 14
    1da8:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__prologue_saves__+0x20>
    1dac:	fe 01       	movw	r30, r28
    1dae:	35 96       	adiw	r30, 0x05	; 5
    1db0:	61 91       	ld	r22, Z+
    1db2:	71 91       	ld	r23, Z+
    1db4:	af 01       	movw	r20, r30
    1db6:	80 91 7e 03 	lds	r24, 0x037E
    1dba:	90 91 7f 03 	lds	r25, 0x037F
    1dbe:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <vfprintf>
    1dc2:	e2 e0       	ldi	r30, 0x02	; 2
    1dc4:	0c 94 2f 13 	jmp	0x265e	; 0x265e <__epilogue_restores__+0x20>

00001dc8 <puts>:
    1dc8:	0f 93       	push	r16
    1dca:	1f 93       	push	r17
    1dcc:	cf 93       	push	r28
    1dce:	df 93       	push	r29
    1dd0:	e0 91 7e 03 	lds	r30, 0x037E
    1dd4:	f0 91 7f 03 	lds	r31, 0x037F
    1dd8:	23 81       	ldd	r18, Z+3	; 0x03
    1dda:	21 ff       	sbrs	r18, 1
    1ddc:	1b c0       	rjmp	.+54     	; 0x1e14 <puts+0x4c>
    1dde:	ec 01       	movw	r28, r24
    1de0:	00 e0       	ldi	r16, 0x00	; 0
    1de2:	10 e0       	ldi	r17, 0x00	; 0
    1de4:	89 91       	ld	r24, Y+
    1de6:	60 91 7e 03 	lds	r22, 0x037E
    1dea:	70 91 7f 03 	lds	r23, 0x037F
    1dee:	db 01       	movw	r26, r22
    1df0:	18 96       	adiw	r26, 0x08	; 8
    1df2:	ed 91       	ld	r30, X+
    1df4:	fc 91       	ld	r31, X
    1df6:	19 97       	sbiw	r26, 0x09	; 9
    1df8:	88 23       	and	r24, r24
    1dfa:	31 f0       	breq	.+12     	; 0x1e08 <puts+0x40>
    1dfc:	09 95       	icall
    1dfe:	89 2b       	or	r24, r25
    1e00:	89 f3       	breq	.-30     	; 0x1de4 <puts+0x1c>
    1e02:	0f ef       	ldi	r16, 0xFF	; 255
    1e04:	1f ef       	ldi	r17, 0xFF	; 255
    1e06:	ee cf       	rjmp	.-36     	; 0x1de4 <puts+0x1c>
    1e08:	8a e0       	ldi	r24, 0x0A	; 10
    1e0a:	09 95       	icall
    1e0c:	89 2b       	or	r24, r25
    1e0e:	11 f4       	brne	.+4      	; 0x1e14 <puts+0x4c>
    1e10:	c8 01       	movw	r24, r16
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <puts+0x50>
    1e14:	8f ef       	ldi	r24, 0xFF	; 255
    1e16:	9f ef       	ldi	r25, 0xFF	; 255
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	1f 91       	pop	r17
    1e1e:	0f 91       	pop	r16
    1e20:	08 95       	ret

00001e22 <snprintf>:
    1e22:	ae e0       	ldi	r26, 0x0E	; 14
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e7 e1       	ldi	r30, 0x17	; 23
    1e28:	ff e0       	ldi	r31, 0x0F	; 15
    1e2a:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__prologue_saves__+0x1c>
    1e2e:	0d 89       	ldd	r16, Y+21	; 0x15
    1e30:	1e 89       	ldd	r17, Y+22	; 0x16
    1e32:	8f 89       	ldd	r24, Y+23	; 0x17
    1e34:	98 8d       	ldd	r25, Y+24	; 0x18
    1e36:	26 e0       	ldi	r18, 0x06	; 6
    1e38:	2c 83       	std	Y+4, r18	; 0x04
    1e3a:	1a 83       	std	Y+2, r17	; 0x02
    1e3c:	09 83       	std	Y+1, r16	; 0x01
    1e3e:	97 ff       	sbrs	r25, 7
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <snprintf+0x24>
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	90 e8       	ldi	r25, 0x80	; 128
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	9e 83       	std	Y+6, r25	; 0x06
    1e4a:	8d 83       	std	Y+5, r24	; 0x05
    1e4c:	ae 01       	movw	r20, r28
    1e4e:	45 5e       	subi	r20, 0xE5	; 229
    1e50:	5f 4f       	sbci	r21, 0xFF	; 255
    1e52:	69 8d       	ldd	r22, Y+25	; 0x19
    1e54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e56:	ce 01       	movw	r24, r28
    1e58:	01 96       	adiw	r24, 0x01	; 1
    1e5a:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <vfprintf>
    1e5e:	4d 81       	ldd	r20, Y+5	; 0x05
    1e60:	5e 81       	ldd	r21, Y+6	; 0x06
    1e62:	57 fd       	sbrc	r21, 7
    1e64:	0a c0       	rjmp	.+20     	; 0x1e7a <snprintf+0x58>
    1e66:	2f 81       	ldd	r18, Y+7	; 0x07
    1e68:	38 85       	ldd	r19, Y+8	; 0x08
    1e6a:	42 17       	cp	r20, r18
    1e6c:	53 07       	cpc	r21, r19
    1e6e:	0c f4       	brge	.+2      	; 0x1e72 <snprintf+0x50>
    1e70:	9a 01       	movw	r18, r20
    1e72:	f8 01       	movw	r30, r16
    1e74:	e2 0f       	add	r30, r18
    1e76:	f3 1f       	adc	r31, r19
    1e78:	10 82       	st	Z, r1
    1e7a:	2e 96       	adiw	r28, 0x0e	; 14
    1e7c:	e4 e0       	ldi	r30, 0x04	; 4
    1e7e:	0c 94 2d 13 	jmp	0x265a	; 0x265a <__epilogue_restores__+0x1c>

00001e82 <vfprintf>:
    1e82:	ac e0       	ldi	r26, 0x0C	; 12
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e7 e4       	ldi	r30, 0x47	; 71
    1e88:	ff e0       	ldi	r31, 0x0F	; 15
    1e8a:	0c 94 03 13 	jmp	0x2606	; 0x2606 <__prologue_saves__>
    1e8e:	7c 01       	movw	r14, r24
    1e90:	6b 01       	movw	r12, r22
    1e92:	8a 01       	movw	r16, r20
    1e94:	fc 01       	movw	r30, r24
    1e96:	17 82       	std	Z+7, r1	; 0x07
    1e98:	16 82       	std	Z+6, r1	; 0x06
    1e9a:	83 81       	ldd	r24, Z+3	; 0x03
    1e9c:	81 ff       	sbrs	r24, 1
    1e9e:	bd c1       	rjmp	.+890    	; 0x221a <vfprintf+0x398>
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	01 96       	adiw	r24, 0x01	; 1
    1ea4:	4c 01       	movw	r8, r24
    1ea6:	f7 01       	movw	r30, r14
    1ea8:	93 81       	ldd	r25, Z+3	; 0x03
    1eaa:	f6 01       	movw	r30, r12
    1eac:	93 fd       	sbrc	r25, 3
    1eae:	85 91       	lpm	r24, Z+
    1eb0:	93 ff       	sbrs	r25, 3
    1eb2:	81 91       	ld	r24, Z+
    1eb4:	6f 01       	movw	r12, r30
    1eb6:	88 23       	and	r24, r24
    1eb8:	09 f4       	brne	.+2      	; 0x1ebc <vfprintf+0x3a>
    1eba:	ab c1       	rjmp	.+854    	; 0x2212 <vfprintf+0x390>
    1ebc:	85 32       	cpi	r24, 0x25	; 37
    1ebe:	39 f4       	brne	.+14     	; 0x1ece <vfprintf+0x4c>
    1ec0:	93 fd       	sbrc	r25, 3
    1ec2:	85 91       	lpm	r24, Z+
    1ec4:	93 ff       	sbrs	r25, 3
    1ec6:	81 91       	ld	r24, Z+
    1ec8:	6f 01       	movw	r12, r30
    1eca:	85 32       	cpi	r24, 0x25	; 37
    1ecc:	29 f4       	brne	.+10     	; 0x1ed8 <vfprintf+0x56>
    1ece:	b7 01       	movw	r22, r14
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	0e 94 73 12 	call	0x24e6	; 0x24e6 <fputc>
    1ed6:	e7 cf       	rjmp	.-50     	; 0x1ea6 <vfprintf+0x24>
    1ed8:	51 2c       	mov	r5, r1
    1eda:	31 2c       	mov	r3, r1
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	20 32       	cpi	r18, 0x20	; 32
    1ee0:	a0 f4       	brcc	.+40     	; 0x1f0a <vfprintf+0x88>
    1ee2:	8b 32       	cpi	r24, 0x2B	; 43
    1ee4:	69 f0       	breq	.+26     	; 0x1f00 <vfprintf+0x7e>
    1ee6:	30 f4       	brcc	.+12     	; 0x1ef4 <vfprintf+0x72>
    1ee8:	80 32       	cpi	r24, 0x20	; 32
    1eea:	59 f0       	breq	.+22     	; 0x1f02 <vfprintf+0x80>
    1eec:	83 32       	cpi	r24, 0x23	; 35
    1eee:	69 f4       	brne	.+26     	; 0x1f0a <vfprintf+0x88>
    1ef0:	20 61       	ori	r18, 0x10	; 16
    1ef2:	2c c0       	rjmp	.+88     	; 0x1f4c <vfprintf+0xca>
    1ef4:	8d 32       	cpi	r24, 0x2D	; 45
    1ef6:	39 f0       	breq	.+14     	; 0x1f06 <vfprintf+0x84>
    1ef8:	80 33       	cpi	r24, 0x30	; 48
    1efa:	39 f4       	brne	.+14     	; 0x1f0a <vfprintf+0x88>
    1efc:	21 60       	ori	r18, 0x01	; 1
    1efe:	26 c0       	rjmp	.+76     	; 0x1f4c <vfprintf+0xca>
    1f00:	22 60       	ori	r18, 0x02	; 2
    1f02:	24 60       	ori	r18, 0x04	; 4
    1f04:	23 c0       	rjmp	.+70     	; 0x1f4c <vfprintf+0xca>
    1f06:	28 60       	ori	r18, 0x08	; 8
    1f08:	21 c0       	rjmp	.+66     	; 0x1f4c <vfprintf+0xca>
    1f0a:	27 fd       	sbrc	r18, 7
    1f0c:	27 c0       	rjmp	.+78     	; 0x1f5c <vfprintf+0xda>
    1f0e:	30 ed       	ldi	r19, 0xD0	; 208
    1f10:	38 0f       	add	r19, r24
    1f12:	3a 30       	cpi	r19, 0x0A	; 10
    1f14:	78 f4       	brcc	.+30     	; 0x1f34 <vfprintf+0xb2>
    1f16:	26 ff       	sbrs	r18, 6
    1f18:	06 c0       	rjmp	.+12     	; 0x1f26 <vfprintf+0xa4>
    1f1a:	fa e0       	ldi	r31, 0x0A	; 10
    1f1c:	5f 9e       	mul	r5, r31
    1f1e:	30 0d       	add	r19, r0
    1f20:	11 24       	eor	r1, r1
    1f22:	53 2e       	mov	r5, r19
    1f24:	13 c0       	rjmp	.+38     	; 0x1f4c <vfprintf+0xca>
    1f26:	8a e0       	ldi	r24, 0x0A	; 10
    1f28:	38 9e       	mul	r3, r24
    1f2a:	30 0d       	add	r19, r0
    1f2c:	11 24       	eor	r1, r1
    1f2e:	33 2e       	mov	r3, r19
    1f30:	20 62       	ori	r18, 0x20	; 32
    1f32:	0c c0       	rjmp	.+24     	; 0x1f4c <vfprintf+0xca>
    1f34:	8e 32       	cpi	r24, 0x2E	; 46
    1f36:	21 f4       	brne	.+8      	; 0x1f40 <vfprintf+0xbe>
    1f38:	26 fd       	sbrc	r18, 6
    1f3a:	6b c1       	rjmp	.+726    	; 0x2212 <vfprintf+0x390>
    1f3c:	20 64       	ori	r18, 0x40	; 64
    1f3e:	06 c0       	rjmp	.+12     	; 0x1f4c <vfprintf+0xca>
    1f40:	8c 36       	cpi	r24, 0x6C	; 108
    1f42:	11 f4       	brne	.+4      	; 0x1f48 <vfprintf+0xc6>
    1f44:	20 68       	ori	r18, 0x80	; 128
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <vfprintf+0xca>
    1f48:	88 36       	cpi	r24, 0x68	; 104
    1f4a:	41 f4       	brne	.+16     	; 0x1f5c <vfprintf+0xda>
    1f4c:	f6 01       	movw	r30, r12
    1f4e:	93 fd       	sbrc	r25, 3
    1f50:	85 91       	lpm	r24, Z+
    1f52:	93 ff       	sbrs	r25, 3
    1f54:	81 91       	ld	r24, Z+
    1f56:	6f 01       	movw	r12, r30
    1f58:	81 11       	cpse	r24, r1
    1f5a:	c1 cf       	rjmp	.-126    	; 0x1ede <vfprintf+0x5c>
    1f5c:	98 2f       	mov	r25, r24
    1f5e:	9f 7d       	andi	r25, 0xDF	; 223
    1f60:	95 54       	subi	r25, 0x45	; 69
    1f62:	93 30       	cpi	r25, 0x03	; 3
    1f64:	28 f4       	brcc	.+10     	; 0x1f70 <vfprintf+0xee>
    1f66:	0c 5f       	subi	r16, 0xFC	; 252
    1f68:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6a:	ff e3       	ldi	r31, 0x3F	; 63
    1f6c:	f9 83       	std	Y+1, r31	; 0x01
    1f6e:	0d c0       	rjmp	.+26     	; 0x1f8a <vfprintf+0x108>
    1f70:	83 36       	cpi	r24, 0x63	; 99
    1f72:	31 f0       	breq	.+12     	; 0x1f80 <vfprintf+0xfe>
    1f74:	83 37       	cpi	r24, 0x73	; 115
    1f76:	71 f0       	breq	.+28     	; 0x1f94 <vfprintf+0x112>
    1f78:	83 35       	cpi	r24, 0x53	; 83
    1f7a:	09 f0       	breq	.+2      	; 0x1f7e <vfprintf+0xfc>
    1f7c:	5b c0       	rjmp	.+182    	; 0x2034 <vfprintf+0x1b2>
    1f7e:	22 c0       	rjmp	.+68     	; 0x1fc4 <vfprintf+0x142>
    1f80:	f8 01       	movw	r30, r16
    1f82:	80 81       	ld	r24, Z
    1f84:	89 83       	std	Y+1, r24	; 0x01
    1f86:	0e 5f       	subi	r16, 0xFE	; 254
    1f88:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8a:	44 24       	eor	r4, r4
    1f8c:	43 94       	inc	r4
    1f8e:	51 2c       	mov	r5, r1
    1f90:	54 01       	movw	r10, r8
    1f92:	15 c0       	rjmp	.+42     	; 0x1fbe <vfprintf+0x13c>
    1f94:	38 01       	movw	r6, r16
    1f96:	f2 e0       	ldi	r31, 0x02	; 2
    1f98:	6f 0e       	add	r6, r31
    1f9a:	71 1c       	adc	r7, r1
    1f9c:	f8 01       	movw	r30, r16
    1f9e:	a0 80       	ld	r10, Z
    1fa0:	b1 80       	ldd	r11, Z+1	; 0x01
    1fa2:	26 ff       	sbrs	r18, 6
    1fa4:	03 c0       	rjmp	.+6      	; 0x1fac <vfprintf+0x12a>
    1fa6:	65 2d       	mov	r22, r5
    1fa8:	70 e0       	ldi	r23, 0x00	; 0
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <vfprintf+0x12e>
    1fac:	6f ef       	ldi	r22, 0xFF	; 255
    1fae:	7f ef       	ldi	r23, 0xFF	; 255
    1fb0:	c5 01       	movw	r24, r10
    1fb2:	2c 87       	std	Y+12, r18	; 0x0c
    1fb4:	0e 94 68 12 	call	0x24d0	; 0x24d0 <strnlen>
    1fb8:	2c 01       	movw	r4, r24
    1fba:	83 01       	movw	r16, r6
    1fbc:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fbe:	2f 77       	andi	r18, 0x7F	; 127
    1fc0:	22 2e       	mov	r2, r18
    1fc2:	17 c0       	rjmp	.+46     	; 0x1ff2 <vfprintf+0x170>
    1fc4:	38 01       	movw	r6, r16
    1fc6:	f2 e0       	ldi	r31, 0x02	; 2
    1fc8:	6f 0e       	add	r6, r31
    1fca:	71 1c       	adc	r7, r1
    1fcc:	f8 01       	movw	r30, r16
    1fce:	a0 80       	ld	r10, Z
    1fd0:	b1 80       	ldd	r11, Z+1	; 0x01
    1fd2:	26 ff       	sbrs	r18, 6
    1fd4:	03 c0       	rjmp	.+6      	; 0x1fdc <vfprintf+0x15a>
    1fd6:	65 2d       	mov	r22, r5
    1fd8:	70 e0       	ldi	r23, 0x00	; 0
    1fda:	02 c0       	rjmp	.+4      	; 0x1fe0 <vfprintf+0x15e>
    1fdc:	6f ef       	ldi	r22, 0xFF	; 255
    1fde:	7f ef       	ldi	r23, 0xFF	; 255
    1fe0:	c5 01       	movw	r24, r10
    1fe2:	2c 87       	std	Y+12, r18	; 0x0c
    1fe4:	0e 94 56 12 	call	0x24ac	; 0x24ac <strnlen_P>
    1fe8:	2c 01       	movw	r4, r24
    1fea:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fec:	20 68       	ori	r18, 0x80	; 128
    1fee:	22 2e       	mov	r2, r18
    1ff0:	83 01       	movw	r16, r6
    1ff2:	23 fc       	sbrc	r2, 3
    1ff4:	1b c0       	rjmp	.+54     	; 0x202c <vfprintf+0x1aa>
    1ff6:	83 2d       	mov	r24, r3
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	48 16       	cp	r4, r24
    1ffc:	59 06       	cpc	r5, r25
    1ffe:	b0 f4       	brcc	.+44     	; 0x202c <vfprintf+0x1aa>
    2000:	b7 01       	movw	r22, r14
    2002:	80 e2       	ldi	r24, 0x20	; 32
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	0e 94 73 12 	call	0x24e6	; 0x24e6 <fputc>
    200a:	3a 94       	dec	r3
    200c:	f4 cf       	rjmp	.-24     	; 0x1ff6 <vfprintf+0x174>
    200e:	f5 01       	movw	r30, r10
    2010:	27 fc       	sbrc	r2, 7
    2012:	85 91       	lpm	r24, Z+
    2014:	27 fe       	sbrs	r2, 7
    2016:	81 91       	ld	r24, Z+
    2018:	5f 01       	movw	r10, r30
    201a:	b7 01       	movw	r22, r14
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	0e 94 73 12 	call	0x24e6	; 0x24e6 <fputc>
    2022:	31 10       	cpse	r3, r1
    2024:	3a 94       	dec	r3
    2026:	f1 e0       	ldi	r31, 0x01	; 1
    2028:	4f 1a       	sub	r4, r31
    202a:	51 08       	sbc	r5, r1
    202c:	41 14       	cp	r4, r1
    202e:	51 04       	cpc	r5, r1
    2030:	71 f7       	brne	.-36     	; 0x200e <vfprintf+0x18c>
    2032:	e5 c0       	rjmp	.+458    	; 0x21fe <vfprintf+0x37c>
    2034:	84 36       	cpi	r24, 0x64	; 100
    2036:	11 f0       	breq	.+4      	; 0x203c <vfprintf+0x1ba>
    2038:	89 36       	cpi	r24, 0x69	; 105
    203a:	39 f5       	brne	.+78     	; 0x208a <vfprintf+0x208>
    203c:	f8 01       	movw	r30, r16
    203e:	27 ff       	sbrs	r18, 7
    2040:	07 c0       	rjmp	.+14     	; 0x2050 <vfprintf+0x1ce>
    2042:	60 81       	ld	r22, Z
    2044:	71 81       	ldd	r23, Z+1	; 0x01
    2046:	82 81       	ldd	r24, Z+2	; 0x02
    2048:	93 81       	ldd	r25, Z+3	; 0x03
    204a:	0c 5f       	subi	r16, 0xFC	; 252
    204c:	1f 4f       	sbci	r17, 0xFF	; 255
    204e:	08 c0       	rjmp	.+16     	; 0x2060 <vfprintf+0x1de>
    2050:	60 81       	ld	r22, Z
    2052:	71 81       	ldd	r23, Z+1	; 0x01
    2054:	88 27       	eor	r24, r24
    2056:	77 fd       	sbrc	r23, 7
    2058:	80 95       	com	r24
    205a:	98 2f       	mov	r25, r24
    205c:	0e 5f       	subi	r16, 0xFE	; 254
    205e:	1f 4f       	sbci	r17, 0xFF	; 255
    2060:	2f 76       	andi	r18, 0x6F	; 111
    2062:	b2 2e       	mov	r11, r18
    2064:	97 ff       	sbrs	r25, 7
    2066:	09 c0       	rjmp	.+18     	; 0x207a <vfprintf+0x1f8>
    2068:	90 95       	com	r25
    206a:	80 95       	com	r24
    206c:	70 95       	com	r23
    206e:	61 95       	neg	r22
    2070:	7f 4f       	sbci	r23, 0xFF	; 255
    2072:	8f 4f       	sbci	r24, 0xFF	; 255
    2074:	9f 4f       	sbci	r25, 0xFF	; 255
    2076:	20 68       	ori	r18, 0x80	; 128
    2078:	b2 2e       	mov	r11, r18
    207a:	2a e0       	ldi	r18, 0x0A	; 10
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	a4 01       	movw	r20, r8
    2080:	0e 94 a5 12 	call	0x254a	; 0x254a <__ultoa_invert>
    2084:	a8 2e       	mov	r10, r24
    2086:	a8 18       	sub	r10, r8
    2088:	44 c0       	rjmp	.+136    	; 0x2112 <vfprintf+0x290>
    208a:	85 37       	cpi	r24, 0x75	; 117
    208c:	29 f4       	brne	.+10     	; 0x2098 <vfprintf+0x216>
    208e:	2f 7e       	andi	r18, 0xEF	; 239
    2090:	b2 2e       	mov	r11, r18
    2092:	2a e0       	ldi	r18, 0x0A	; 10
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	25 c0       	rjmp	.+74     	; 0x20e2 <vfprintf+0x260>
    2098:	f2 2f       	mov	r31, r18
    209a:	f9 7f       	andi	r31, 0xF9	; 249
    209c:	bf 2e       	mov	r11, r31
    209e:	8f 36       	cpi	r24, 0x6F	; 111
    20a0:	c1 f0       	breq	.+48     	; 0x20d2 <vfprintf+0x250>
    20a2:	18 f4       	brcc	.+6      	; 0x20aa <vfprintf+0x228>
    20a4:	88 35       	cpi	r24, 0x58	; 88
    20a6:	79 f0       	breq	.+30     	; 0x20c6 <vfprintf+0x244>
    20a8:	b4 c0       	rjmp	.+360    	; 0x2212 <vfprintf+0x390>
    20aa:	80 37       	cpi	r24, 0x70	; 112
    20ac:	19 f0       	breq	.+6      	; 0x20b4 <vfprintf+0x232>
    20ae:	88 37       	cpi	r24, 0x78	; 120
    20b0:	21 f0       	breq	.+8      	; 0x20ba <vfprintf+0x238>
    20b2:	af c0       	rjmp	.+350    	; 0x2212 <vfprintf+0x390>
    20b4:	2f 2f       	mov	r18, r31
    20b6:	20 61       	ori	r18, 0x10	; 16
    20b8:	b2 2e       	mov	r11, r18
    20ba:	b4 fe       	sbrs	r11, 4
    20bc:	0d c0       	rjmp	.+26     	; 0x20d8 <vfprintf+0x256>
    20be:	8b 2d       	mov	r24, r11
    20c0:	84 60       	ori	r24, 0x04	; 4
    20c2:	b8 2e       	mov	r11, r24
    20c4:	09 c0       	rjmp	.+18     	; 0x20d8 <vfprintf+0x256>
    20c6:	24 ff       	sbrs	r18, 4
    20c8:	0a c0       	rjmp	.+20     	; 0x20de <vfprintf+0x25c>
    20ca:	9f 2f       	mov	r25, r31
    20cc:	96 60       	ori	r25, 0x06	; 6
    20ce:	b9 2e       	mov	r11, r25
    20d0:	06 c0       	rjmp	.+12     	; 0x20de <vfprintf+0x25c>
    20d2:	28 e0       	ldi	r18, 0x08	; 8
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	05 c0       	rjmp	.+10     	; 0x20e2 <vfprintf+0x260>
    20d8:	20 e1       	ldi	r18, 0x10	; 16
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	02 c0       	rjmp	.+4      	; 0x20e2 <vfprintf+0x260>
    20de:	20 e1       	ldi	r18, 0x10	; 16
    20e0:	32 e0       	ldi	r19, 0x02	; 2
    20e2:	f8 01       	movw	r30, r16
    20e4:	b7 fe       	sbrs	r11, 7
    20e6:	07 c0       	rjmp	.+14     	; 0x20f6 <vfprintf+0x274>
    20e8:	60 81       	ld	r22, Z
    20ea:	71 81       	ldd	r23, Z+1	; 0x01
    20ec:	82 81       	ldd	r24, Z+2	; 0x02
    20ee:	93 81       	ldd	r25, Z+3	; 0x03
    20f0:	0c 5f       	subi	r16, 0xFC	; 252
    20f2:	1f 4f       	sbci	r17, 0xFF	; 255
    20f4:	06 c0       	rjmp	.+12     	; 0x2102 <vfprintf+0x280>
    20f6:	60 81       	ld	r22, Z
    20f8:	71 81       	ldd	r23, Z+1	; 0x01
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	0e 5f       	subi	r16, 0xFE	; 254
    2100:	1f 4f       	sbci	r17, 0xFF	; 255
    2102:	a4 01       	movw	r20, r8
    2104:	0e 94 a5 12 	call	0x254a	; 0x254a <__ultoa_invert>
    2108:	a8 2e       	mov	r10, r24
    210a:	a8 18       	sub	r10, r8
    210c:	fb 2d       	mov	r31, r11
    210e:	ff 77       	andi	r31, 0x7F	; 127
    2110:	bf 2e       	mov	r11, r31
    2112:	b6 fe       	sbrs	r11, 6
    2114:	0b c0       	rjmp	.+22     	; 0x212c <vfprintf+0x2aa>
    2116:	2b 2d       	mov	r18, r11
    2118:	2e 7f       	andi	r18, 0xFE	; 254
    211a:	a5 14       	cp	r10, r5
    211c:	50 f4       	brcc	.+20     	; 0x2132 <vfprintf+0x2b0>
    211e:	b4 fe       	sbrs	r11, 4
    2120:	0a c0       	rjmp	.+20     	; 0x2136 <vfprintf+0x2b4>
    2122:	b2 fc       	sbrc	r11, 2
    2124:	08 c0       	rjmp	.+16     	; 0x2136 <vfprintf+0x2b4>
    2126:	2b 2d       	mov	r18, r11
    2128:	2e 7e       	andi	r18, 0xEE	; 238
    212a:	05 c0       	rjmp	.+10     	; 0x2136 <vfprintf+0x2b4>
    212c:	7a 2c       	mov	r7, r10
    212e:	2b 2d       	mov	r18, r11
    2130:	03 c0       	rjmp	.+6      	; 0x2138 <vfprintf+0x2b6>
    2132:	7a 2c       	mov	r7, r10
    2134:	01 c0       	rjmp	.+2      	; 0x2138 <vfprintf+0x2b6>
    2136:	75 2c       	mov	r7, r5
    2138:	24 ff       	sbrs	r18, 4
    213a:	0d c0       	rjmp	.+26     	; 0x2156 <vfprintf+0x2d4>
    213c:	fe 01       	movw	r30, r28
    213e:	ea 0d       	add	r30, r10
    2140:	f1 1d       	adc	r31, r1
    2142:	80 81       	ld	r24, Z
    2144:	80 33       	cpi	r24, 0x30	; 48
    2146:	11 f4       	brne	.+4      	; 0x214c <vfprintf+0x2ca>
    2148:	29 7e       	andi	r18, 0xE9	; 233
    214a:	09 c0       	rjmp	.+18     	; 0x215e <vfprintf+0x2dc>
    214c:	22 ff       	sbrs	r18, 2
    214e:	06 c0       	rjmp	.+12     	; 0x215c <vfprintf+0x2da>
    2150:	73 94       	inc	r7
    2152:	73 94       	inc	r7
    2154:	04 c0       	rjmp	.+8      	; 0x215e <vfprintf+0x2dc>
    2156:	82 2f       	mov	r24, r18
    2158:	86 78       	andi	r24, 0x86	; 134
    215a:	09 f0       	breq	.+2      	; 0x215e <vfprintf+0x2dc>
    215c:	73 94       	inc	r7
    215e:	23 fd       	sbrc	r18, 3
    2160:	13 c0       	rjmp	.+38     	; 0x2188 <vfprintf+0x306>
    2162:	20 ff       	sbrs	r18, 0
    2164:	06 c0       	rjmp	.+12     	; 0x2172 <vfprintf+0x2f0>
    2166:	5a 2c       	mov	r5, r10
    2168:	73 14       	cp	r7, r3
    216a:	18 f4       	brcc	.+6      	; 0x2172 <vfprintf+0x2f0>
    216c:	53 0c       	add	r5, r3
    216e:	57 18       	sub	r5, r7
    2170:	73 2c       	mov	r7, r3
    2172:	73 14       	cp	r7, r3
    2174:	68 f4       	brcc	.+26     	; 0x2190 <vfprintf+0x30e>
    2176:	b7 01       	movw	r22, r14
    2178:	80 e2       	ldi	r24, 0x20	; 32
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	2c 87       	std	Y+12, r18	; 0x0c
    217e:	0e 94 73 12 	call	0x24e6	; 0x24e6 <fputc>
    2182:	73 94       	inc	r7
    2184:	2c 85       	ldd	r18, Y+12	; 0x0c
    2186:	f5 cf       	rjmp	.-22     	; 0x2172 <vfprintf+0x2f0>
    2188:	73 14       	cp	r7, r3
    218a:	10 f4       	brcc	.+4      	; 0x2190 <vfprintf+0x30e>
    218c:	37 18       	sub	r3, r7
    218e:	01 c0       	rjmp	.+2      	; 0x2192 <vfprintf+0x310>
    2190:	31 2c       	mov	r3, r1
    2192:	24 ff       	sbrs	r18, 4
    2194:	12 c0       	rjmp	.+36     	; 0x21ba <vfprintf+0x338>
    2196:	b7 01       	movw	r22, r14
    2198:	80 e3       	ldi	r24, 0x30	; 48
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	2c 87       	std	Y+12, r18	; 0x0c
    219e:	0e 94 73 12 	call	0x24e6	; 0x24e6 <fputc>
    21a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    21a4:	22 ff       	sbrs	r18, 2
    21a6:	17 c0       	rjmp	.+46     	; 0x21d6 <vfprintf+0x354>
    21a8:	21 ff       	sbrs	r18, 1
    21aa:	03 c0       	rjmp	.+6      	; 0x21b2 <vfprintf+0x330>
    21ac:	88 e5       	ldi	r24, 0x58	; 88
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <vfprintf+0x334>
    21b2:	88 e7       	ldi	r24, 0x78	; 120
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	b7 01       	movw	r22, r14
    21b8:	0c c0       	rjmp	.+24     	; 0x21d2 <vfprintf+0x350>
    21ba:	82 2f       	mov	r24, r18
    21bc:	86 78       	andi	r24, 0x86	; 134
    21be:	59 f0       	breq	.+22     	; 0x21d6 <vfprintf+0x354>
    21c0:	21 fd       	sbrc	r18, 1
    21c2:	02 c0       	rjmp	.+4      	; 0x21c8 <vfprintf+0x346>
    21c4:	80 e2       	ldi	r24, 0x20	; 32
    21c6:	01 c0       	rjmp	.+2      	; 0x21ca <vfprintf+0x348>
    21c8:	8b e2       	ldi	r24, 0x2B	; 43
    21ca:	27 fd       	sbrc	r18, 7
    21cc:	8d e2       	ldi	r24, 0x2D	; 45
    21ce:	b7 01       	movw	r22, r14
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	0e 94 73 12 	call	0x24e6	; 0x24e6 <fputc>
    21d6:	a5 14       	cp	r10, r5
    21d8:	38 f4       	brcc	.+14     	; 0x21e8 <vfprintf+0x366>
    21da:	b7 01       	movw	r22, r14
    21dc:	80 e3       	ldi	r24, 0x30	; 48
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	0e 94 73 12 	call	0x24e6	; 0x24e6 <fputc>
    21e4:	5a 94       	dec	r5
    21e6:	f7 cf       	rjmp	.-18     	; 0x21d6 <vfprintf+0x354>
    21e8:	aa 94       	dec	r10
    21ea:	f4 01       	movw	r30, r8
    21ec:	ea 0d       	add	r30, r10
    21ee:	f1 1d       	adc	r31, r1
    21f0:	80 81       	ld	r24, Z
    21f2:	b7 01       	movw	r22, r14
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	0e 94 73 12 	call	0x24e6	; 0x24e6 <fputc>
    21fa:	a1 10       	cpse	r10, r1
    21fc:	f5 cf       	rjmp	.-22     	; 0x21e8 <vfprintf+0x366>
    21fe:	33 20       	and	r3, r3
    2200:	09 f4       	brne	.+2      	; 0x2204 <vfprintf+0x382>
    2202:	51 ce       	rjmp	.-862    	; 0x1ea6 <vfprintf+0x24>
    2204:	b7 01       	movw	r22, r14
    2206:	80 e2       	ldi	r24, 0x20	; 32
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	0e 94 73 12 	call	0x24e6	; 0x24e6 <fputc>
    220e:	3a 94       	dec	r3
    2210:	f6 cf       	rjmp	.-20     	; 0x21fe <vfprintf+0x37c>
    2212:	f7 01       	movw	r30, r14
    2214:	86 81       	ldd	r24, Z+6	; 0x06
    2216:	97 81       	ldd	r25, Z+7	; 0x07
    2218:	02 c0       	rjmp	.+4      	; 0x221e <vfprintf+0x39c>
    221a:	8f ef       	ldi	r24, 0xFF	; 255
    221c:	9f ef       	ldi	r25, 0xFF	; 255
    221e:	2c 96       	adiw	r28, 0x0c	; 12
    2220:	e2 e1       	ldi	r30, 0x12	; 18
    2222:	0c 94 1f 13 	jmp	0x263e	; 0x263e <__epilogue_restores__>

00002226 <calloc>:
    2226:	0f 93       	push	r16
    2228:	1f 93       	push	r17
    222a:	cf 93       	push	r28
    222c:	df 93       	push	r29
    222e:	86 9f       	mul	r24, r22
    2230:	80 01       	movw	r16, r0
    2232:	87 9f       	mul	r24, r23
    2234:	10 0d       	add	r17, r0
    2236:	96 9f       	mul	r25, r22
    2238:	10 0d       	add	r17, r0
    223a:	11 24       	eor	r1, r1
    223c:	c8 01       	movw	r24, r16
    223e:	0e 94 2f 11 	call	0x225e	; 0x225e <malloc>
    2242:	ec 01       	movw	r28, r24
    2244:	00 97       	sbiw	r24, 0x00	; 0
    2246:	29 f0       	breq	.+10     	; 0x2252 <calloc+0x2c>
    2248:	a8 01       	movw	r20, r16
    224a:	60 e0       	ldi	r22, 0x00	; 0
    224c:	70 e0       	ldi	r23, 0x00	; 0
    224e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <memset>
    2252:	ce 01       	movw	r24, r28
    2254:	df 91       	pop	r29
    2256:	cf 91       	pop	r28
    2258:	1f 91       	pop	r17
    225a:	0f 91       	pop	r16
    225c:	08 95       	ret

0000225e <malloc>:
    225e:	cf 93       	push	r28
    2260:	df 93       	push	r29
    2262:	82 30       	cpi	r24, 0x02	; 2
    2264:	91 05       	cpc	r25, r1
    2266:	10 f4       	brcc	.+4      	; 0x226c <malloc+0xe>
    2268:	82 e0       	ldi	r24, 0x02	; 2
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	e0 91 84 03 	lds	r30, 0x0384
    2270:	f0 91 85 03 	lds	r31, 0x0385
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	a0 e0       	ldi	r26, 0x00	; 0
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	30 97       	sbiw	r30, 0x00	; 0
    227e:	39 f1       	breq	.+78     	; 0x22ce <malloc+0x70>
    2280:	40 81       	ld	r20, Z
    2282:	51 81       	ldd	r21, Z+1	; 0x01
    2284:	48 17       	cp	r20, r24
    2286:	59 07       	cpc	r21, r25
    2288:	b8 f0       	brcs	.+46     	; 0x22b8 <malloc+0x5a>
    228a:	48 17       	cp	r20, r24
    228c:	59 07       	cpc	r21, r25
    228e:	71 f4       	brne	.+28     	; 0x22ac <malloc+0x4e>
    2290:	82 81       	ldd	r24, Z+2	; 0x02
    2292:	93 81       	ldd	r25, Z+3	; 0x03
    2294:	10 97       	sbiw	r26, 0x00	; 0
    2296:	29 f0       	breq	.+10     	; 0x22a2 <malloc+0x44>
    2298:	13 96       	adiw	r26, 0x03	; 3
    229a:	9c 93       	st	X, r25
    229c:	8e 93       	st	-X, r24
    229e:	12 97       	sbiw	r26, 0x02	; 2
    22a0:	2c c0       	rjmp	.+88     	; 0x22fa <malloc+0x9c>
    22a2:	90 93 85 03 	sts	0x0385, r25
    22a6:	80 93 84 03 	sts	0x0384, r24
    22aa:	27 c0       	rjmp	.+78     	; 0x22fa <malloc+0x9c>
    22ac:	21 15       	cp	r18, r1
    22ae:	31 05       	cpc	r19, r1
    22b0:	31 f0       	breq	.+12     	; 0x22be <malloc+0x60>
    22b2:	42 17       	cp	r20, r18
    22b4:	53 07       	cpc	r21, r19
    22b6:	18 f0       	brcs	.+6      	; 0x22be <malloc+0x60>
    22b8:	a9 01       	movw	r20, r18
    22ba:	db 01       	movw	r26, r22
    22bc:	01 c0       	rjmp	.+2      	; 0x22c0 <malloc+0x62>
    22be:	ef 01       	movw	r28, r30
    22c0:	9a 01       	movw	r18, r20
    22c2:	bd 01       	movw	r22, r26
    22c4:	df 01       	movw	r26, r30
    22c6:	02 80       	ldd	r0, Z+2	; 0x02
    22c8:	f3 81       	ldd	r31, Z+3	; 0x03
    22ca:	e0 2d       	mov	r30, r0
    22cc:	d7 cf       	rjmp	.-82     	; 0x227c <malloc+0x1e>
    22ce:	21 15       	cp	r18, r1
    22d0:	31 05       	cpc	r19, r1
    22d2:	f9 f0       	breq	.+62     	; 0x2312 <malloc+0xb4>
    22d4:	28 1b       	sub	r18, r24
    22d6:	39 0b       	sbc	r19, r25
    22d8:	24 30       	cpi	r18, 0x04	; 4
    22da:	31 05       	cpc	r19, r1
    22dc:	80 f4       	brcc	.+32     	; 0x22fe <malloc+0xa0>
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	9b 81       	ldd	r25, Y+3	; 0x03
    22e2:	61 15       	cp	r22, r1
    22e4:	71 05       	cpc	r23, r1
    22e6:	21 f0       	breq	.+8      	; 0x22f0 <malloc+0x92>
    22e8:	fb 01       	movw	r30, r22
    22ea:	93 83       	std	Z+3, r25	; 0x03
    22ec:	82 83       	std	Z+2, r24	; 0x02
    22ee:	04 c0       	rjmp	.+8      	; 0x22f8 <malloc+0x9a>
    22f0:	90 93 85 03 	sts	0x0385, r25
    22f4:	80 93 84 03 	sts	0x0384, r24
    22f8:	fe 01       	movw	r30, r28
    22fa:	32 96       	adiw	r30, 0x02	; 2
    22fc:	44 c0       	rjmp	.+136    	; 0x2386 <malloc+0x128>
    22fe:	fe 01       	movw	r30, r28
    2300:	e2 0f       	add	r30, r18
    2302:	f3 1f       	adc	r31, r19
    2304:	81 93       	st	Z+, r24
    2306:	91 93       	st	Z+, r25
    2308:	22 50       	subi	r18, 0x02	; 2
    230a:	31 09       	sbc	r19, r1
    230c:	39 83       	std	Y+1, r19	; 0x01
    230e:	28 83       	st	Y, r18
    2310:	3a c0       	rjmp	.+116    	; 0x2386 <malloc+0x128>
    2312:	20 91 82 03 	lds	r18, 0x0382
    2316:	30 91 83 03 	lds	r19, 0x0383
    231a:	23 2b       	or	r18, r19
    231c:	41 f4       	brne	.+16     	; 0x232e <malloc+0xd0>
    231e:	20 91 02 01 	lds	r18, 0x0102
    2322:	30 91 03 01 	lds	r19, 0x0103
    2326:	30 93 83 03 	sts	0x0383, r19
    232a:	20 93 82 03 	sts	0x0382, r18
    232e:	20 91 00 01 	lds	r18, 0x0100
    2332:	30 91 01 01 	lds	r19, 0x0101
    2336:	21 15       	cp	r18, r1
    2338:	31 05       	cpc	r19, r1
    233a:	41 f4       	brne	.+16     	; 0x234c <malloc+0xee>
    233c:	2d b7       	in	r18, 0x3d	; 61
    233e:	3e b7       	in	r19, 0x3e	; 62
    2340:	40 91 04 01 	lds	r20, 0x0104
    2344:	50 91 05 01 	lds	r21, 0x0105
    2348:	24 1b       	sub	r18, r20
    234a:	35 0b       	sbc	r19, r21
    234c:	e0 91 82 03 	lds	r30, 0x0382
    2350:	f0 91 83 03 	lds	r31, 0x0383
    2354:	e2 17       	cp	r30, r18
    2356:	f3 07       	cpc	r31, r19
    2358:	a0 f4       	brcc	.+40     	; 0x2382 <malloc+0x124>
    235a:	2e 1b       	sub	r18, r30
    235c:	3f 0b       	sbc	r19, r31
    235e:	28 17       	cp	r18, r24
    2360:	39 07       	cpc	r19, r25
    2362:	78 f0       	brcs	.+30     	; 0x2382 <malloc+0x124>
    2364:	ac 01       	movw	r20, r24
    2366:	4e 5f       	subi	r20, 0xFE	; 254
    2368:	5f 4f       	sbci	r21, 0xFF	; 255
    236a:	24 17       	cp	r18, r20
    236c:	35 07       	cpc	r19, r21
    236e:	48 f0       	brcs	.+18     	; 0x2382 <malloc+0x124>
    2370:	4e 0f       	add	r20, r30
    2372:	5f 1f       	adc	r21, r31
    2374:	50 93 83 03 	sts	0x0383, r21
    2378:	40 93 82 03 	sts	0x0382, r20
    237c:	81 93       	st	Z+, r24
    237e:	91 93       	st	Z+, r25
    2380:	02 c0       	rjmp	.+4      	; 0x2386 <malloc+0x128>
    2382:	e0 e0       	ldi	r30, 0x00	; 0
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	cf 01       	movw	r24, r30
    2388:	df 91       	pop	r29
    238a:	cf 91       	pop	r28
    238c:	08 95       	ret

0000238e <free>:
    238e:	cf 93       	push	r28
    2390:	df 93       	push	r29
    2392:	00 97       	sbiw	r24, 0x00	; 0
    2394:	09 f4       	brne	.+2      	; 0x2398 <free+0xa>
    2396:	87 c0       	rjmp	.+270    	; 0x24a6 <free+0x118>
    2398:	fc 01       	movw	r30, r24
    239a:	32 97       	sbiw	r30, 0x02	; 2
    239c:	13 82       	std	Z+3, r1	; 0x03
    239e:	12 82       	std	Z+2, r1	; 0x02
    23a0:	c0 91 84 03 	lds	r28, 0x0384
    23a4:	d0 91 85 03 	lds	r29, 0x0385
    23a8:	20 97       	sbiw	r28, 0x00	; 0
    23aa:	81 f4       	brne	.+32     	; 0x23cc <free+0x3e>
    23ac:	20 81       	ld	r18, Z
    23ae:	31 81       	ldd	r19, Z+1	; 0x01
    23b0:	28 0f       	add	r18, r24
    23b2:	39 1f       	adc	r19, r25
    23b4:	80 91 82 03 	lds	r24, 0x0382
    23b8:	90 91 83 03 	lds	r25, 0x0383
    23bc:	82 17       	cp	r24, r18
    23be:	93 07       	cpc	r25, r19
    23c0:	79 f5       	brne	.+94     	; 0x2420 <free+0x92>
    23c2:	f0 93 83 03 	sts	0x0383, r31
    23c6:	e0 93 82 03 	sts	0x0382, r30
    23ca:	6d c0       	rjmp	.+218    	; 0x24a6 <free+0x118>
    23cc:	de 01       	movw	r26, r28
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	ae 17       	cp	r26, r30
    23d4:	bf 07       	cpc	r27, r31
    23d6:	50 f4       	brcc	.+20     	; 0x23ec <free+0x5e>
    23d8:	12 96       	adiw	r26, 0x02	; 2
    23da:	4d 91       	ld	r20, X+
    23dc:	5c 91       	ld	r21, X
    23de:	13 97       	sbiw	r26, 0x03	; 3
    23e0:	9d 01       	movw	r18, r26
    23e2:	41 15       	cp	r20, r1
    23e4:	51 05       	cpc	r21, r1
    23e6:	09 f1       	breq	.+66     	; 0x242a <free+0x9c>
    23e8:	da 01       	movw	r26, r20
    23ea:	f3 cf       	rjmp	.-26     	; 0x23d2 <free+0x44>
    23ec:	b3 83       	std	Z+3, r27	; 0x03
    23ee:	a2 83       	std	Z+2, r26	; 0x02
    23f0:	40 81       	ld	r20, Z
    23f2:	51 81       	ldd	r21, Z+1	; 0x01
    23f4:	84 0f       	add	r24, r20
    23f6:	95 1f       	adc	r25, r21
    23f8:	8a 17       	cp	r24, r26
    23fa:	9b 07       	cpc	r25, r27
    23fc:	71 f4       	brne	.+28     	; 0x241a <free+0x8c>
    23fe:	8d 91       	ld	r24, X+
    2400:	9c 91       	ld	r25, X
    2402:	11 97       	sbiw	r26, 0x01	; 1
    2404:	84 0f       	add	r24, r20
    2406:	95 1f       	adc	r25, r21
    2408:	02 96       	adiw	r24, 0x02	; 2
    240a:	91 83       	std	Z+1, r25	; 0x01
    240c:	80 83       	st	Z, r24
    240e:	12 96       	adiw	r26, 0x02	; 2
    2410:	8d 91       	ld	r24, X+
    2412:	9c 91       	ld	r25, X
    2414:	13 97       	sbiw	r26, 0x03	; 3
    2416:	93 83       	std	Z+3, r25	; 0x03
    2418:	82 83       	std	Z+2, r24	; 0x02
    241a:	21 15       	cp	r18, r1
    241c:	31 05       	cpc	r19, r1
    241e:	29 f4       	brne	.+10     	; 0x242a <free+0x9c>
    2420:	f0 93 85 03 	sts	0x0385, r31
    2424:	e0 93 84 03 	sts	0x0384, r30
    2428:	3e c0       	rjmp	.+124    	; 0x24a6 <free+0x118>
    242a:	d9 01       	movw	r26, r18
    242c:	13 96       	adiw	r26, 0x03	; 3
    242e:	fc 93       	st	X, r31
    2430:	ee 93       	st	-X, r30
    2432:	12 97       	sbiw	r26, 0x02	; 2
    2434:	4d 91       	ld	r20, X+
    2436:	5d 91       	ld	r21, X+
    2438:	a4 0f       	add	r26, r20
    243a:	b5 1f       	adc	r27, r21
    243c:	ea 17       	cp	r30, r26
    243e:	fb 07       	cpc	r31, r27
    2440:	79 f4       	brne	.+30     	; 0x2460 <free+0xd2>
    2442:	80 81       	ld	r24, Z
    2444:	91 81       	ldd	r25, Z+1	; 0x01
    2446:	84 0f       	add	r24, r20
    2448:	95 1f       	adc	r25, r21
    244a:	02 96       	adiw	r24, 0x02	; 2
    244c:	d9 01       	movw	r26, r18
    244e:	11 96       	adiw	r26, 0x01	; 1
    2450:	9c 93       	st	X, r25
    2452:	8e 93       	st	-X, r24
    2454:	82 81       	ldd	r24, Z+2	; 0x02
    2456:	93 81       	ldd	r25, Z+3	; 0x03
    2458:	13 96       	adiw	r26, 0x03	; 3
    245a:	9c 93       	st	X, r25
    245c:	8e 93       	st	-X, r24
    245e:	12 97       	sbiw	r26, 0x02	; 2
    2460:	e0 e0       	ldi	r30, 0x00	; 0
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	8a 81       	ldd	r24, Y+2	; 0x02
    2466:	9b 81       	ldd	r25, Y+3	; 0x03
    2468:	00 97       	sbiw	r24, 0x00	; 0
    246a:	19 f0       	breq	.+6      	; 0x2472 <free+0xe4>
    246c:	fe 01       	movw	r30, r28
    246e:	ec 01       	movw	r28, r24
    2470:	f9 cf       	rjmp	.-14     	; 0x2464 <free+0xd6>
    2472:	ce 01       	movw	r24, r28
    2474:	02 96       	adiw	r24, 0x02	; 2
    2476:	28 81       	ld	r18, Y
    2478:	39 81       	ldd	r19, Y+1	; 0x01
    247a:	82 0f       	add	r24, r18
    247c:	93 1f       	adc	r25, r19
    247e:	20 91 82 03 	lds	r18, 0x0382
    2482:	30 91 83 03 	lds	r19, 0x0383
    2486:	28 17       	cp	r18, r24
    2488:	39 07       	cpc	r19, r25
    248a:	69 f4       	brne	.+26     	; 0x24a6 <free+0x118>
    248c:	30 97       	sbiw	r30, 0x00	; 0
    248e:	29 f4       	brne	.+10     	; 0x249a <free+0x10c>
    2490:	10 92 85 03 	sts	0x0385, r1
    2494:	10 92 84 03 	sts	0x0384, r1
    2498:	02 c0       	rjmp	.+4      	; 0x249e <free+0x110>
    249a:	13 82       	std	Z+3, r1	; 0x03
    249c:	12 82       	std	Z+2, r1	; 0x02
    249e:	d0 93 83 03 	sts	0x0383, r29
    24a2:	c0 93 82 03 	sts	0x0382, r28
    24a6:	df 91       	pop	r29
    24a8:	cf 91       	pop	r28
    24aa:	08 95       	ret

000024ac <strnlen_P>:
    24ac:	fc 01       	movw	r30, r24
    24ae:	05 90       	lpm	r0, Z+
    24b0:	61 50       	subi	r22, 0x01	; 1
    24b2:	70 40       	sbci	r23, 0x00	; 0
    24b4:	01 10       	cpse	r0, r1
    24b6:	d8 f7       	brcc	.-10     	; 0x24ae <strnlen_P+0x2>
    24b8:	80 95       	com	r24
    24ba:	90 95       	com	r25
    24bc:	8e 0f       	add	r24, r30
    24be:	9f 1f       	adc	r25, r31
    24c0:	08 95       	ret

000024c2 <memset>:
    24c2:	dc 01       	movw	r26, r24
    24c4:	01 c0       	rjmp	.+2      	; 0x24c8 <memset+0x6>
    24c6:	6d 93       	st	X+, r22
    24c8:	41 50       	subi	r20, 0x01	; 1
    24ca:	50 40       	sbci	r21, 0x00	; 0
    24cc:	e0 f7       	brcc	.-8      	; 0x24c6 <memset+0x4>
    24ce:	08 95       	ret

000024d0 <strnlen>:
    24d0:	fc 01       	movw	r30, r24
    24d2:	61 50       	subi	r22, 0x01	; 1
    24d4:	70 40       	sbci	r23, 0x00	; 0
    24d6:	01 90       	ld	r0, Z+
    24d8:	01 10       	cpse	r0, r1
    24da:	d8 f7       	brcc	.-10     	; 0x24d2 <strnlen+0x2>
    24dc:	80 95       	com	r24
    24de:	90 95       	com	r25
    24e0:	8e 0f       	add	r24, r30
    24e2:	9f 1f       	adc	r25, r31
    24e4:	08 95       	ret

000024e6 <fputc>:
    24e6:	0f 93       	push	r16
    24e8:	1f 93       	push	r17
    24ea:	cf 93       	push	r28
    24ec:	df 93       	push	r29
    24ee:	18 2f       	mov	r17, r24
    24f0:	09 2f       	mov	r16, r25
    24f2:	eb 01       	movw	r28, r22
    24f4:	8b 81       	ldd	r24, Y+3	; 0x03
    24f6:	81 fd       	sbrc	r24, 1
    24f8:	03 c0       	rjmp	.+6      	; 0x2500 <fputc+0x1a>
    24fa:	8f ef       	ldi	r24, 0xFF	; 255
    24fc:	9f ef       	ldi	r25, 0xFF	; 255
    24fe:	20 c0       	rjmp	.+64     	; 0x2540 <fputc+0x5a>
    2500:	82 ff       	sbrs	r24, 2
    2502:	10 c0       	rjmp	.+32     	; 0x2524 <fputc+0x3e>
    2504:	4e 81       	ldd	r20, Y+6	; 0x06
    2506:	5f 81       	ldd	r21, Y+7	; 0x07
    2508:	2c 81       	ldd	r18, Y+4	; 0x04
    250a:	3d 81       	ldd	r19, Y+5	; 0x05
    250c:	42 17       	cp	r20, r18
    250e:	53 07       	cpc	r21, r19
    2510:	7c f4       	brge	.+30     	; 0x2530 <fputc+0x4a>
    2512:	e8 81       	ld	r30, Y
    2514:	f9 81       	ldd	r31, Y+1	; 0x01
    2516:	9f 01       	movw	r18, r30
    2518:	2f 5f       	subi	r18, 0xFF	; 255
    251a:	3f 4f       	sbci	r19, 0xFF	; 255
    251c:	39 83       	std	Y+1, r19	; 0x01
    251e:	28 83       	st	Y, r18
    2520:	10 83       	st	Z, r17
    2522:	06 c0       	rjmp	.+12     	; 0x2530 <fputc+0x4a>
    2524:	e8 85       	ldd	r30, Y+8	; 0x08
    2526:	f9 85       	ldd	r31, Y+9	; 0x09
    2528:	81 2f       	mov	r24, r17
    252a:	09 95       	icall
    252c:	89 2b       	or	r24, r25
    252e:	29 f7       	brne	.-54     	; 0x24fa <fputc+0x14>
    2530:	2e 81       	ldd	r18, Y+6	; 0x06
    2532:	3f 81       	ldd	r19, Y+7	; 0x07
    2534:	2f 5f       	subi	r18, 0xFF	; 255
    2536:	3f 4f       	sbci	r19, 0xFF	; 255
    2538:	3f 83       	std	Y+7, r19	; 0x07
    253a:	2e 83       	std	Y+6, r18	; 0x06
    253c:	81 2f       	mov	r24, r17
    253e:	90 2f       	mov	r25, r16
    2540:	df 91       	pop	r29
    2542:	cf 91       	pop	r28
    2544:	1f 91       	pop	r17
    2546:	0f 91       	pop	r16
    2548:	08 95       	ret

0000254a <__ultoa_invert>:
    254a:	fa 01       	movw	r30, r20
    254c:	aa 27       	eor	r26, r26
    254e:	28 30       	cpi	r18, 0x08	; 8
    2550:	51 f1       	breq	.+84     	; 0x25a6 <__ultoa_invert+0x5c>
    2552:	20 31       	cpi	r18, 0x10	; 16
    2554:	81 f1       	breq	.+96     	; 0x25b6 <__ultoa_invert+0x6c>
    2556:	e8 94       	clt
    2558:	6f 93       	push	r22
    255a:	6e 7f       	andi	r22, 0xFE	; 254
    255c:	6e 5f       	subi	r22, 0xFE	; 254
    255e:	7f 4f       	sbci	r23, 0xFF	; 255
    2560:	8f 4f       	sbci	r24, 0xFF	; 255
    2562:	9f 4f       	sbci	r25, 0xFF	; 255
    2564:	af 4f       	sbci	r26, 0xFF	; 255
    2566:	b1 e0       	ldi	r27, 0x01	; 1
    2568:	3e d0       	rcall	.+124    	; 0x25e6 <__ultoa_invert+0x9c>
    256a:	b4 e0       	ldi	r27, 0x04	; 4
    256c:	3c d0       	rcall	.+120    	; 0x25e6 <__ultoa_invert+0x9c>
    256e:	67 0f       	add	r22, r23
    2570:	78 1f       	adc	r23, r24
    2572:	89 1f       	adc	r24, r25
    2574:	9a 1f       	adc	r25, r26
    2576:	a1 1d       	adc	r26, r1
    2578:	68 0f       	add	r22, r24
    257a:	79 1f       	adc	r23, r25
    257c:	8a 1f       	adc	r24, r26
    257e:	91 1d       	adc	r25, r1
    2580:	a1 1d       	adc	r26, r1
    2582:	6a 0f       	add	r22, r26
    2584:	71 1d       	adc	r23, r1
    2586:	81 1d       	adc	r24, r1
    2588:	91 1d       	adc	r25, r1
    258a:	a1 1d       	adc	r26, r1
    258c:	20 d0       	rcall	.+64     	; 0x25ce <__ultoa_invert+0x84>
    258e:	09 f4       	brne	.+2      	; 0x2592 <__ultoa_invert+0x48>
    2590:	68 94       	set
    2592:	3f 91       	pop	r19
    2594:	2a e0       	ldi	r18, 0x0A	; 10
    2596:	26 9f       	mul	r18, r22
    2598:	11 24       	eor	r1, r1
    259a:	30 19       	sub	r19, r0
    259c:	30 5d       	subi	r19, 0xD0	; 208
    259e:	31 93       	st	Z+, r19
    25a0:	de f6       	brtc	.-74     	; 0x2558 <__ultoa_invert+0xe>
    25a2:	cf 01       	movw	r24, r30
    25a4:	08 95       	ret
    25a6:	46 2f       	mov	r20, r22
    25a8:	47 70       	andi	r20, 0x07	; 7
    25aa:	40 5d       	subi	r20, 0xD0	; 208
    25ac:	41 93       	st	Z+, r20
    25ae:	b3 e0       	ldi	r27, 0x03	; 3
    25b0:	0f d0       	rcall	.+30     	; 0x25d0 <__ultoa_invert+0x86>
    25b2:	c9 f7       	brne	.-14     	; 0x25a6 <__ultoa_invert+0x5c>
    25b4:	f6 cf       	rjmp	.-20     	; 0x25a2 <__ultoa_invert+0x58>
    25b6:	46 2f       	mov	r20, r22
    25b8:	4f 70       	andi	r20, 0x0F	; 15
    25ba:	40 5d       	subi	r20, 0xD0	; 208
    25bc:	4a 33       	cpi	r20, 0x3A	; 58
    25be:	18 f0       	brcs	.+6      	; 0x25c6 <__ultoa_invert+0x7c>
    25c0:	49 5d       	subi	r20, 0xD9	; 217
    25c2:	31 fd       	sbrc	r19, 1
    25c4:	40 52       	subi	r20, 0x20	; 32
    25c6:	41 93       	st	Z+, r20
    25c8:	02 d0       	rcall	.+4      	; 0x25ce <__ultoa_invert+0x84>
    25ca:	a9 f7       	brne	.-22     	; 0x25b6 <__ultoa_invert+0x6c>
    25cc:	ea cf       	rjmp	.-44     	; 0x25a2 <__ultoa_invert+0x58>
    25ce:	b4 e0       	ldi	r27, 0x04	; 4
    25d0:	a6 95       	lsr	r26
    25d2:	97 95       	ror	r25
    25d4:	87 95       	ror	r24
    25d6:	77 95       	ror	r23
    25d8:	67 95       	ror	r22
    25da:	ba 95       	dec	r27
    25dc:	c9 f7       	brne	.-14     	; 0x25d0 <__ultoa_invert+0x86>
    25de:	00 97       	sbiw	r24, 0x00	; 0
    25e0:	61 05       	cpc	r22, r1
    25e2:	71 05       	cpc	r23, r1
    25e4:	08 95       	ret
    25e6:	9b 01       	movw	r18, r22
    25e8:	ac 01       	movw	r20, r24
    25ea:	0a 2e       	mov	r0, r26
    25ec:	06 94       	lsr	r0
    25ee:	57 95       	ror	r21
    25f0:	47 95       	ror	r20
    25f2:	37 95       	ror	r19
    25f4:	27 95       	ror	r18
    25f6:	ba 95       	dec	r27
    25f8:	c9 f7       	brne	.-14     	; 0x25ec <__ultoa_invert+0xa2>
    25fa:	62 0f       	add	r22, r18
    25fc:	73 1f       	adc	r23, r19
    25fe:	84 1f       	adc	r24, r20
    2600:	95 1f       	adc	r25, r21
    2602:	a0 1d       	adc	r26, r0
    2604:	08 95       	ret

00002606 <__prologue_saves__>:
    2606:	2f 92       	push	r2
    2608:	3f 92       	push	r3
    260a:	4f 92       	push	r4
    260c:	5f 92       	push	r5
    260e:	6f 92       	push	r6
    2610:	7f 92       	push	r7
    2612:	8f 92       	push	r8
    2614:	9f 92       	push	r9
    2616:	af 92       	push	r10
    2618:	bf 92       	push	r11
    261a:	cf 92       	push	r12
    261c:	df 92       	push	r13
    261e:	ef 92       	push	r14
    2620:	ff 92       	push	r15
    2622:	0f 93       	push	r16
    2624:	1f 93       	push	r17
    2626:	cf 93       	push	r28
    2628:	df 93       	push	r29
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	ca 1b       	sub	r28, r26
    2630:	db 0b       	sbc	r29, r27
    2632:	0f b6       	in	r0, 0x3f	; 63
    2634:	f8 94       	cli
    2636:	de bf       	out	0x3e, r29	; 62
    2638:	0f be       	out	0x3f, r0	; 63
    263a:	cd bf       	out	0x3d, r28	; 61
    263c:	09 94       	ijmp

0000263e <__epilogue_restores__>:
    263e:	2a 88       	ldd	r2, Y+18	; 0x12
    2640:	39 88       	ldd	r3, Y+17	; 0x11
    2642:	48 88       	ldd	r4, Y+16	; 0x10
    2644:	5f 84       	ldd	r5, Y+15	; 0x0f
    2646:	6e 84       	ldd	r6, Y+14	; 0x0e
    2648:	7d 84       	ldd	r7, Y+13	; 0x0d
    264a:	8c 84       	ldd	r8, Y+12	; 0x0c
    264c:	9b 84       	ldd	r9, Y+11	; 0x0b
    264e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2650:	b9 84       	ldd	r11, Y+9	; 0x09
    2652:	c8 84       	ldd	r12, Y+8	; 0x08
    2654:	df 80       	ldd	r13, Y+7	; 0x07
    2656:	ee 80       	ldd	r14, Y+6	; 0x06
    2658:	fd 80       	ldd	r15, Y+5	; 0x05
    265a:	0c 81       	ldd	r16, Y+4	; 0x04
    265c:	1b 81       	ldd	r17, Y+3	; 0x03
    265e:	aa 81       	ldd	r26, Y+2	; 0x02
    2660:	b9 81       	ldd	r27, Y+1	; 0x01
    2662:	ce 0f       	add	r28, r30
    2664:	d1 1d       	adc	r29, r1
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	f8 94       	cli
    266a:	de bf       	out	0x3e, r29	; 62
    266c:	0f be       	out	0x3f, r0	; 63
    266e:	cd bf       	out	0x3d, r28	; 61
    2670:	ed 01       	movw	r28, r26
    2672:	08 95       	ret

00002674 <_exit>:
    2674:	f8 94       	cli

00002676 <__stop_program>:
    2676:	ff cf       	rjmp	.-2      	; 0x2676 <__stop_program>
