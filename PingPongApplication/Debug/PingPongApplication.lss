
PingPongApplication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013e  00800100  000017e2  00001876  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  0080023e  0080023e  000019b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019b4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002f8  00000000  00000000  000019e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003f1a  00000000  00000000  00001cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001162  00000000  00000000  00005bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012e1  00000000  00000000  00006d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000008d8  00000000  00000000  0000803c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000093a  00000000  00000000  00008914  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000226a  00000000  00000000  0000924e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000278  00000000  00000000  0000b4b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 01 	jmp	0x266	; 0x266 <__ctors_end>
       4:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
       8:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
       c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      10:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      14:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      18:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      1c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      20:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      24:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      28:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      2c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      30:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      34:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      38:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      3c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      40:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      44:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      48:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      4c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      50:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      54:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      58:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      5c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      60:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      64:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      68:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      6c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
      70:	ac 09       	sbc	r26, r12
      72:	b1 09       	sbc	r27, r1
      74:	b6 09       	sbc	r27, r6
      76:	be 09       	sbc	r27, r14
      78:	c7 09       	sbc	r28, r7
      7a:	d0 09       	sbc	r29, r0
      7c:	d9 09       	sbc	r29, r9
      7e:	e7 09       	sbc	r30, r7
      80:	e2 09       	sbc	r30, r2
      82:	ec 09       	sbc	r30, r12
      84:	f1 09       	sbc	r31, r1
      86:	f6 09       	sbc	r31, r6
      88:	fb 09       	sbc	r31, r11

0000008a <__trampolines_end>:
      8a:	00 00       	nop
      8c:	00 00       	nop
      8e:	00 00       	nop
      90:	00 5e       	subi	r16, 0xE0	; 224
      92:	00 00       	nop
      94:	00 0e       	add	r0, r16
      96:	00 0e       	add	r0, r16
      98:	00 28       	or	r0, r0
      9a:	7c 28       	or	r7, r12
      9c:	7c 28       	or	r7, r12
      9e:	08 54       	subi	r16, 0x48	; 72
      a0:	7c 54       	subi	r23, 0x4C	; 76
      a2:	20 26       	eor	r2, r16
      a4:	10 08       	sbc	r1, r0
      a6:	64 00       	.word	0x0064	; ????
      a8:	28 54       	subi	r18, 0x48	; 72
      aa:	28 40       	sbci	r18, 0x08	; 8
      ac:	00 00       	nop
      ae:	00 0e       	add	r0, r16
      b0:	00 00       	nop
      b2:	00 3c       	cpi	r16, 0xC0	; 192
      b4:	42 00       	.word	0x0042	; ????
      b6:	00 00       	nop
      b8:	42 3c       	cpi	r20, 0xC2	; 194
      ba:	00 00       	nop
      bc:	00 54       	subi	r16, 0x40	; 64
      be:	38 54       	subi	r19, 0x48	; 72
      c0:	00 10       	cpse	r0, r0
      c2:	10 7c       	andi	r17, 0xC0	; 192
      c4:	10 10       	cpse	r1, r0
      c6:	00 80       	ld	r0, Z
      c8:	60 20       	and	r6, r0
      ca:	00 10       	cpse	r0, r0
      cc:	10 10       	cpse	r1, r0
      ce:	10 00       	.word	0x0010	; ????
      d0:	00 60       	ori	r16, 0x00	; 0
      d2:	60 00       	.word	0x0060	; ????
      d4:	00 20       	and	r0, r0
      d6:	10 08       	sbc	r1, r0
      d8:	04 00       	.word	0x0004	; ????
      da:	00 3c       	cpi	r16, 0xC0	; 192
      dc:	42 3c       	cpi	r20, 0xC2	; 194
      de:	00 00       	nop
      e0:	44 7e       	andi	r20, 0xE4	; 228
      e2:	40 00       	.word	0x0040	; ????
      e4:	44 62       	ori	r20, 0x24	; 36
      e6:	52 4c       	sbci	r21, 0xC2	; 194
      e8:	00 22       	and	r0, r16
      ea:	4a 4a       	sbci	r20, 0xAA	; 170
      ec:	36 00       	.word	0x0036	; ????
      ee:	18 14       	cp	r1, r8
      f0:	7e 10       	cpse	r7, r14
      f2:	00 2e       	mov	r0, r16
      f4:	4a 4a       	sbci	r20, 0xAA	; 170
      f6:	32 00       	.word	0x0032	; ????
      f8:	3c 4a       	sbci	r19, 0xAC	; 172
      fa:	4a 30       	cpi	r20, 0x0A	; 10
      fc:	00 02       	muls	r16, r16
      fe:	62 1a       	sub	r6, r18
     100:	06 00       	.word	0x0006	; ????
     102:	34 4a       	sbci	r19, 0xA4	; 164
     104:	4a 34       	cpi	r20, 0x4A	; 74
     106:	00 0c       	add	r0, r0
     108:	52 52       	subi	r21, 0x22	; 34
     10a:	3c 00       	.word	0x003c	; ????
     10c:	00 6c       	ori	r16, 0xC0	; 192
     10e:	6c 00       	.word	0x006c	; ????
     110:	00 80       	ld	r0, Z
     112:	6c 2c       	mov	r6, r12
     114:	00 00       	nop
     116:	00 10       	cpse	r0, r0
     118:	28 44       	sbci	r18, 0x48	; 72
     11a:	00 28       	or	r0, r0
     11c:	28 28       	or	r2, r8
     11e:	28 00       	.word	0x0028	; ????
     120:	00 44       	sbci	r16, 0x40	; 64
     122:	28 10       	cpse	r2, r8
     124:	00 00       	nop
     126:	04 52       	subi	r16, 0x24	; 36
     128:	0c 00       	.word	0x000c	; ????
     12a:	3c 42       	sbci	r19, 0x2C	; 44
     12c:	5a 1c       	adc	r5, r10
     12e:	00 7c       	andi	r16, 0xC0	; 192
     130:	12 12       	cpse	r1, r18
     132:	7c 00       	.word	0x007c	; ????
     134:	7e 4a       	sbci	r23, 0xAE	; 174
     136:	4a 34       	cpi	r20, 0x4A	; 74
     138:	00 3c       	cpi	r16, 0xC0	; 192
     13a:	42 42       	sbci	r20, 0x22	; 34
     13c:	24 00       	.word	0x0024	; ????
     13e:	7e 42       	sbci	r23, 0x2E	; 46
     140:	42 3c       	cpi	r20, 0xC2	; 194
     142:	00 7e       	andi	r16, 0xE0	; 224
     144:	4a 4a       	sbci	r20, 0xAA	; 170
     146:	42 00       	.word	0x0042	; ????
     148:	7e 0a       	sbc	r7, r30
     14a:	0a 02       	muls	r16, r26
     14c:	00 3c       	cpi	r16, 0xC0	; 192
     14e:	42 52       	subi	r20, 0x22	; 34
     150:	74 00       	.word	0x0074	; ????
     152:	7e 08       	sbc	r7, r14
     154:	08 7e       	andi	r16, 0xE8	; 232
     156:	00 00       	nop
     158:	42 7e       	andi	r20, 0xE2	; 226
     15a:	42 00       	.word	0x0042	; ????
     15c:	20 40       	sbci	r18, 0x00	; 0
     15e:	40 3e       	cpi	r20, 0xE0	; 224
     160:	00 7e       	andi	r16, 0xE0	; 224
     162:	18 24       	eor	r1, r8
     164:	42 00       	.word	0x0042	; ????
     166:	7e 40       	sbci	r23, 0x0E	; 14
     168:	40 40       	sbci	r20, 0x00	; 0
     16a:	00 7e       	andi	r16, 0xE0	; 224
     16c:	0c 0c       	add	r0, r12
     16e:	7e 00       	.word	0x007e	; ????
     170:	7e 0c       	add	r7, r14
     172:	30 7e       	andi	r19, 0xE0	; 224
     174:	00 3c       	cpi	r16, 0xC0	; 192
     176:	42 42       	sbci	r20, 0x22	; 34
     178:	3c 00       	.word	0x003c	; ????
     17a:	7e 12       	cpse	r7, r30
     17c:	12 0c       	add	r1, r2
     17e:	00 3c       	cpi	r16, 0xC0	; 192
     180:	62 42       	sbci	r22, 0x22	; 34
     182:	bc 00       	.word	0x00bc	; ????
     184:	7e 12       	cpse	r7, r30
     186:	32 4c       	sbci	r19, 0xC2	; 194
     188:	00 24       	eor	r0, r0
     18a:	4a 52       	subi	r20, 0x2A	; 42
     18c:	24 00       	.word	0x0024	; ????
     18e:	00 02       	muls	r16, r16
     190:	7e 02       	muls	r23, r30
     192:	00 3e       	cpi	r16, 0xE0	; 224
     194:	40 40       	sbci	r20, 0x00	; 0
     196:	3e 00       	.word	0x003e	; ????
     198:	1e 60       	ori	r17, 0x0E	; 14
     19a:	60 1e       	adc	r6, r16
     19c:	00 7e       	andi	r16, 0xE0	; 224
     19e:	30 30       	cpi	r19, 0x00	; 0
     1a0:	7e 00       	.word	0x007e	; ????
     1a2:	66 18       	sub	r6, r6
     1a4:	18 66       	ori	r17, 0x68	; 104
     1a6:	00 00       	nop
     1a8:	0e 70       	andi	r16, 0x0E	; 14
     1aa:	0e 00       	.word	0x000e	; ????
     1ac:	62 52       	subi	r22, 0x22	; 34
     1ae:	4a 46       	sbci	r20, 0x6A	; 106
     1b0:	00 00       	nop
     1b2:	7e 42       	sbci	r23, 0x2E	; 46
     1b4:	42 00       	.word	0x0042	; ????
     1b6:	04 08       	sbc	r0, r4
     1b8:	10 20       	and	r1, r0
     1ba:	00 00       	nop
     1bc:	42 42       	sbci	r20, 0x22	; 34
     1be:	7e 00       	.word	0x007e	; ????
     1c0:	00 04       	cpc	r0, r0
     1c2:	02 04       	cpc	r0, r2
     1c4:	00 40       	sbci	r16, 0x00	; 0
     1c6:	40 40       	sbci	r20, 0x00	; 0
     1c8:	40 00       	.word	0x0040	; ????
     1ca:	00 02       	muls	r16, r16
     1cc:	04 00       	.word	0x0004	; ????
     1ce:	00 30       	cpi	r16, 0x00	; 0
     1d0:	48 28       	or	r4, r8
     1d2:	78 00       	.word	0x0078	; ????
     1d4:	7e 48       	sbci	r23, 0x8E	; 142
     1d6:	48 30       	cpi	r20, 0x08	; 8
     1d8:	00 30       	cpi	r16, 0x00	; 0
     1da:	48 48       	sbci	r20, 0x88	; 136
     1dc:	00 00       	nop
     1de:	30 48       	sbci	r19, 0x80	; 128
     1e0:	48 7e       	andi	r20, 0xE8	; 232
     1e2:	00 30       	cpi	r16, 0x00	; 0
     1e4:	68 58       	subi	r22, 0x88	; 136
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	10 7c       	andi	r17, 0xC0	; 192
     1ea:	12 04       	cpc	r1, r2
     1ec:	00 50       	subi	r16, 0x00	; 0
     1ee:	a8 a8       	ldd	r10, Y+48	; 0x30
     1f0:	98 00       	.word	0x0098	; ????
     1f2:	7e 08       	sbc	r7, r14
     1f4:	08 70       	andi	r16, 0x08	; 8
     1f6:	00 00       	nop
     1f8:	48 7a       	andi	r20, 0xA8	; 168
     1fa:	40 00       	.word	0x0040	; ????
     1fc:	00 40       	sbci	r16, 0x00	; 0
     1fe:	80 7a       	andi	r24, 0xA0	; 160
     200:	00 7e       	andi	r16, 0xE0	; 224
     202:	10 28       	or	r1, r0
     204:	40 00       	.word	0x0040	; ????
     206:	00 42       	sbci	r16, 0x20	; 32
     208:	7e 40       	sbci	r23, 0x0E	; 14
     20a:	00 78       	andi	r16, 0x80	; 128
     20c:	10 18       	sub	r1, r0
     20e:	70 00       	.word	0x0070	; ????
     210:	78 08       	sbc	r7, r8
     212:	08 70       	andi	r16, 0x08	; 8
     214:	00 30       	cpi	r16, 0x00	; 0
     216:	48 48       	sbci	r20, 0x88	; 136
     218:	30 00       	.word	0x0030	; ????
     21a:	f8 48       	sbci	r31, 0x88	; 136
     21c:	48 30       	cpi	r20, 0x08	; 8
     21e:	00 30       	cpi	r16, 0x00	; 0
     220:	48 48       	sbci	r20, 0x88	; 136
     222:	f8 00       	.word	0x00f8	; ????
     224:	78 08       	sbc	r7, r8
     226:	08 10       	cpse	r0, r8
     228:	00 50       	subi	r16, 0x00	; 0
     22a:	58 68       	ori	r21, 0x88	; 136
     22c:	28 00       	.word	0x0028	; ????
     22e:	08 3e       	cpi	r16, 0xE8	; 232
     230:	48 40       	sbci	r20, 0x08	; 8
     232:	00 38       	cpi	r16, 0x80	; 128
     234:	40 40       	sbci	r20, 0x00	; 0
     236:	78 00       	.word	0x0078	; ????
     238:	00 38       	cpi	r16, 0x80	; 128
     23a:	40 38       	cpi	r20, 0x80	; 128
     23c:	00 78       	andi	r16, 0x80	; 128
     23e:	60 60       	ori	r22, 0x00	; 0
     240:	78 00       	.word	0x0078	; ????
     242:	48 30       	cpi	r20, 0x08	; 8
     244:	30 48       	sbci	r19, 0x80	; 128
     246:	00 18       	sub	r0, r0
     248:	a0 40       	sbci	r26, 0x00	; 0
     24a:	38 00       	.word	0x0038	; ????
     24c:	48 68       	ori	r20, 0x88	; 136
     24e:	58 48       	sbci	r21, 0x88	; 136
     250:	00 00       	nop
     252:	08 3c       	cpi	r16, 0xC8	; 200
     254:	42 00       	.word	0x0042	; ????
     256:	00 00       	nop
     258:	7e 00       	.word	0x007e	; ????
     25a:	00 00       	nop
     25c:	42 3c       	cpi	r20, 0xC2	; 194
     25e:	08 00       	.word	0x0008	; ????
     260:	04 02       	muls	r16, r20
     262:	04 02       	muls	r16, r20
	...

00000266 <__ctors_end>:
     266:	11 24       	eor	r1, r1
     268:	1f be       	out	0x3f, r1	; 63
     26a:	cf ef       	ldi	r28, 0xFF	; 255
     26c:	d4 e0       	ldi	r29, 0x04	; 4
     26e:	de bf       	out	0x3e, r29	; 62
     270:	cd bf       	out	0x3d, r28	; 61

00000272 <__do_copy_data>:
     272:	12 e0       	ldi	r17, 0x02	; 2
     274:	a0 e0       	ldi	r26, 0x00	; 0
     276:	b1 e0       	ldi	r27, 0x01	; 1
     278:	e2 ee       	ldi	r30, 0xE2	; 226
     27a:	f7 e1       	ldi	r31, 0x17	; 23
     27c:	02 c0       	rjmp	.+4      	; 0x282 <__do_copy_data+0x10>
     27e:	05 90       	lpm	r0, Z+
     280:	0d 92       	st	X+, r0
     282:	ae 33       	cpi	r26, 0x3E	; 62
     284:	b1 07       	cpc	r27, r17
     286:	d9 f7       	brne	.-10     	; 0x27e <__do_copy_data+0xc>

00000288 <__do_clear_bss>:
     288:	22 e0       	ldi	r18, 0x02	; 2
     28a:	ae e3       	ldi	r26, 0x3E	; 62
     28c:	b2 e0       	ldi	r27, 0x02	; 2
     28e:	01 c0       	rjmp	.+2      	; 0x292 <.do_clear_bss_start>

00000290 <.do_clear_bss_loop>:
     290:	1d 92       	st	X+, r1

00000292 <.do_clear_bss_start>:
     292:	af 34       	cpi	r26, 0x4F	; 79
     294:	b2 07       	cpc	r27, r18
     296:	e1 f7       	brne	.-8      	; 0x290 <.do_clear_bss_loop>
     298:	0e 94 86 04 	call	0x90c	; 0x90c <main>
     29c:	0c 94 ef 0b 	jmp	0x17de	; 0x17de <_exit>

000002a0 <__bad_interrupt>:
     2a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002a4 <read_adc>:
****************************************************************************/
int read_adc(char channel)
{
	volatile char *ext_adc = (char *) ADC_BASE_ADDR;
	
	*ext_adc = channel;
     2a4:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2a8:	89 ef       	ldi	r24, 0xF9	; 249
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <read_adc+0x8>
     2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <read_adc+0xe>
     2b2:	00 00       	nop
	_delay_ms(1);
	return *ext_adc;
     2b4:	80 91 00 14 	lds	r24, 0x1400
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	08 95       	ret

000002bc <CAN_init>:
* \brief Initialize CAN communication with node 2
*
****************************************************************************/
void CAN_init()
{
	mcp_init();
     2bc:	0e 94 1e 03 	call	0x63c	; 0x63c <mcp_init>
	/* Turn off mask/filters, receive any message, rollover enabled */
	mcp_modify_bit(MCP_RXB0CTRL, 0b01100100, 0xFF);
     2c0:	4f ef       	ldi	r20, 0xFF	; 255
     2c2:	64 e6       	ldi	r22, 0x64	; 100
     2c4:	80 e6       	ldi	r24, 0x60	; 96
     2c6:	0e 94 44 03 	call	0x688	; 0x688 <mcp_modify_bit>
	/* Loopback mode enabled */
	mcp_modify_bit(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     2ca:	40 e0       	ldi	r20, 0x00	; 0
     2cc:	60 ee       	ldi	r22, 0xE0	; 224
     2ce:	8f e0       	ldi	r24, 0x0F	; 15
     2d0:	0e 94 44 03 	call	0x688	; 0x688 <mcp_modify_bit>
     2d4:	08 95       	ret

000002d6 <CAN_send_message>:
*
* \param in message
* \return result of the CAN operation
****************************************************************************/
uint8_t CAN_send_message(CANMessage message)
{
     2d6:	bf 92       	push	r11
     2d8:	cf 92       	push	r12
     2da:	df 92       	push	r13
     2dc:	ef 92       	push	r14
     2de:	ff 92       	push	r15
     2e0:	0f 93       	push	r16
     2e2:	1f 93       	push	r17
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
     2ec:	2a 97       	sbiw	r28, 0x0a	; 10
     2ee:	0f b6       	in	r0, 0x3f	; 63
     2f0:	f8 94       	cli
     2f2:	de bf       	out	0x3e, r29	; 62
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	cd bf       	out	0x3d, r28	; 61
     2f8:	09 83       	std	Y+1, r16	; 0x01
     2fa:	c1 2e       	mov	r12, r17
     2fc:	1a 83       	std	Y+2, r17	; 0x02
     2fe:	2b 83       	std	Y+3, r18	; 0x03
     300:	3c 83       	std	Y+4, r19	; 0x04
     302:	4d 83       	std	Y+5, r20	; 0x05
     304:	5e 83       	std	Y+6, r21	; 0x06
     306:	6f 83       	std	Y+7, r22	; 0x07
     308:	78 87       	std	Y+8, r23	; 0x08
     30a:	89 87       	std	Y+9, r24	; 0x09
     30c:	9a 87       	std	Y+10, r25	; 0x0a
     30e:	10 2f       	mov	r17, r16
	uint8_t ctrl = mcp_read(MCP_TXB0CTRL);
     310:	80 e3       	ldi	r24, 0x30	; 48
     312:	0e 94 04 03 	call	0x608	; 0x608 <mcp_read>
	
	if (test_bit(ctrl, TXREQ))
     316:	98 2f       	mov	r25, r24
     318:	98 70       	andi	r25, 0x08	; 8
     31a:	b9 2e       	mov	r11, r25
     31c:	83 fd       	sbrc	r24, 3
     31e:	2d c0       	rjmp	.+90     	; 0x37a <CAN_send_message+0xa4>
	{
		return MESSAGE_PENDING;
	}
	/* Use lower 8bits of ID */
	mcp_write_byte(MCP_TXB0SIDL, (uint8_t)(message.ID << 5));
     320:	61 2f       	mov	r22, r17
     322:	62 95       	swap	r22
     324:	66 0f       	add	r22, r22
     326:	60 7e       	andi	r22, 0xE0	; 224
     328:	82 e3       	ldi	r24, 0x32	; 50
     32a:	0e 94 30 03 	call	0x660	; 0x660 <mcp_write_byte>
	mcp_write_byte(MCP_TXB0SIDH, (uint8_t)(message.ID >> 3));
     32e:	61 2f       	mov	r22, r17
     330:	66 95       	lsr	r22
     332:	66 95       	lsr	r22
     334:	66 95       	lsr	r22
     336:	81 e3       	ldi	r24, 0x31	; 49
     338:	0e 94 30 03 	call	0x660	; 0x660 <mcp_write_byte>
	
	mcp_write_byte(MCP_TXB0DLC, (message.length) & 0x0F);
     33c:	6c 2d       	mov	r22, r12
     33e:	6f 70       	andi	r22, 0x0F	; 15
     340:	85 e3       	ldi	r24, 0x35	; 53
     342:	0e 94 30 03 	call	0x660	; 0x660 <mcp_write_byte>
	
	for (int i = 0; i < message.length; i++)
     346:	d1 2c       	mov	r13, r1
     348:	1c 14       	cp	r1, r12
     34a:	1d 04       	cpc	r1, r13
     34c:	94 f4       	brge	.+36     	; 0x372 <CAN_send_message+0x9c>
     34e:	7e 01       	movw	r14, r28
     350:	e3 e0       	ldi	r30, 0x03	; 3
     352:	ee 0e       	add	r14, r30
     354:	f1 1c       	adc	r15, r1
     356:	00 e0       	ldi	r16, 0x00	; 0
     358:	10 e0       	ldi	r17, 0x00	; 0
	{
		mcp_write_byte(MCP_TXB0D0 + i, message.data_array[i]);
     35a:	f7 01       	movw	r30, r14
     35c:	61 91       	ld	r22, Z+
     35e:	7f 01       	movw	r14, r30
     360:	86 e3       	ldi	r24, 0x36	; 54
     362:	80 0f       	add	r24, r16
     364:	0e 94 30 03 	call	0x660	; 0x660 <mcp_write_byte>
	mcp_write_byte(MCP_TXB0SIDL, (uint8_t)(message.ID << 5));
	mcp_write_byte(MCP_TXB0SIDH, (uint8_t)(message.ID >> 3));
	
	mcp_write_byte(MCP_TXB0DLC, (message.length) & 0x0F);
	
	for (int i = 0; i < message.length; i++)
     368:	0f 5f       	subi	r16, 0xFF	; 255
     36a:	1f 4f       	sbci	r17, 0xFF	; 255
     36c:	0c 15       	cp	r16, r12
     36e:	1d 05       	cpc	r17, r13
     370:	a4 f3       	brlt	.-24     	; 0x35a <CAN_send_message+0x84>
	{
		mcp_write_byte(MCP_TXB0D0 + i, message.data_array[i]);
	}
	
	mcp_request_to_send(1);
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	0e 94 5e 03 	call	0x6bc	; 0x6bc <mcp_request_to_send>

	return SUCCESS;
     378:	02 c0       	rjmp	.+4      	; 0x37e <CAN_send_message+0xa8>
{
	uint8_t ctrl = mcp_read(MCP_TXB0CTRL);
	
	if (test_bit(ctrl, TXREQ))
	{
		return MESSAGE_PENDING;
     37a:	bb 24       	eor	r11, r11
     37c:	b3 94       	inc	r11
	}
	
	mcp_request_to_send(1);

	return SUCCESS;
}
     37e:	8b 2d       	mov	r24, r11
     380:	2a 96       	adiw	r28, 0x0a	; 10
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	f8 94       	cli
     386:	de bf       	out	0x3e, r29	; 62
     388:	0f be       	out	0x3f, r0	; 63
     38a:	cd bf       	out	0x3d, r28	; 61
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	1f 91       	pop	r17
     392:	0f 91       	pop	r16
     394:	ff 90       	pop	r15
     396:	ef 90       	pop	r14
     398:	df 90       	pop	r13
     39a:	cf 90       	pop	r12
     39c:	bf 90       	pop	r11
     39e:	08 95       	ret

000003a0 <CAN_receive_message>:
*
* \param out message
* \return result of the CAN operation
****************************************************************************/
uint8_t CAN_receive_message(CANMessage* message)
{
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	8c 01       	movw	r16, r24
	int i = 0;
	uint8_t received = mcp_read(MCP_CANINTF) & (0x01);
     3ae:	8c e2       	ldi	r24, 0x2C	; 44
     3b0:	0e 94 04 03 	call	0x608	; 0x608 <mcp_read>
	if (received)
     3b4:	80 ff       	sbrs	r24, 0
     3b6:	34 c0       	rjmp	.+104    	; 0x420 <CAN_receive_message+0x80>
	{
		mcp_modify_bit(MCP_CANINTF, 0x01, 0);
     3b8:	40 e0       	ldi	r20, 0x00	; 0
     3ba:	61 e0       	ldi	r22, 0x01	; 1
     3bc:	8c e2       	ldi	r24, 0x2C	; 44
     3be:	0e 94 44 03 	call	0x688	; 0x688 <mcp_modify_bit>
		message->ID = (mcp_read(MCP_RXB0SIDH) << 3);
     3c2:	81 e6       	ldi	r24, 0x61	; 97
     3c4:	0e 94 04 03 	call	0x608	; 0x608 <mcp_read>
     3c8:	c8 2f       	mov	r28, r24
     3ca:	cc 0f       	add	r28, r28
     3cc:	cc 0f       	add	r28, r28
     3ce:	cc 0f       	add	r28, r28
     3d0:	f8 01       	movw	r30, r16
     3d2:	c0 83       	st	Z, r28
		message->ID |= (mcp_read(MCP_RXB0SIDL) >> 5);
     3d4:	82 e6       	ldi	r24, 0x62	; 98
     3d6:	0e 94 04 03 	call	0x608	; 0x608 <mcp_read>
     3da:	82 95       	swap	r24
     3dc:	86 95       	lsr	r24
     3de:	87 70       	andi	r24, 0x07	; 7
     3e0:	c8 2b       	or	r28, r24
     3e2:	f8 01       	movw	r30, r16
     3e4:	c0 83       	st	Z, r28
		
		message->length = mcp_read(MCP_RXB0DLC) & (0x0F);
     3e6:	85 e6       	ldi	r24, 0x65	; 101
     3e8:	0e 94 04 03 	call	0x608	; 0x608 <mcp_read>
     3ec:	8f 70       	andi	r24, 0x0F	; 15
     3ee:	f8 01       	movw	r30, r16
     3f0:	81 83       	std	Z+1, r24	; 0x01
		
		for (i = 0; i < message->length; i++)
     3f2:	88 23       	and	r24, r24
     3f4:	b9 f0       	breq	.+46     	; 0x424 <CAN_receive_message+0x84>
     3f6:	78 01       	movw	r14, r16
     3f8:	f2 e0       	ldi	r31, 0x02	; 2
     3fa:	ef 0e       	add	r14, r31
     3fc:	f1 1c       	adc	r15, r1
     3fe:	c0 e0       	ldi	r28, 0x00	; 0
     400:	d0 e0       	ldi	r29, 0x00	; 0
		{
			message->data_array[i] = mcp_read(MCP_RXB0D0 + i);
     402:	8c 2f       	mov	r24, r28
     404:	8a 59       	subi	r24, 0x9A	; 154
     406:	0e 94 04 03 	call	0x608	; 0x608 <mcp_read>
     40a:	f7 01       	movw	r30, r14
     40c:	81 93       	st	Z+, r24
     40e:	7f 01       	movw	r14, r30
		message->ID = (mcp_read(MCP_RXB0SIDH) << 3);
		message->ID |= (mcp_read(MCP_RXB0SIDL) >> 5);
		
		message->length = mcp_read(MCP_RXB0DLC) & (0x0F);
		
		for (i = 0; i < message->length; i++)
     410:	21 96       	adiw	r28, 0x01	; 1
     412:	f8 01       	movw	r30, r16
     414:	81 81       	ldd	r24, Z+1	; 0x01
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	c8 17       	cp	r28, r24
     41a:	d9 07       	cpc	r29, r25
     41c:	94 f3       	brlt	.-28     	; 0x402 <CAN_receive_message+0x62>
     41e:	04 c0       	rjmp	.+8      	; 0x428 <CAN_receive_message+0x88>
			message->data_array[i] = mcp_read(MCP_RXB0D0 + i);
		}
	}
	else
	{
		return NO_NEW_MESSAGE;
     420:	82 e0       	ldi	r24, 0x02	; 2
     422:	03 c0       	rjmp	.+6      	; 0x42a <CAN_receive_message+0x8a>
	}
	
	return SUCCESS;
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	01 c0       	rjmp	.+2      	; 0x42a <CAN_receive_message+0x8a>
     428:	80 e0       	ldi	r24, 0x00	; 0
}
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	1f 91       	pop	r17
     430:	0f 91       	pop	r16
     432:	ff 90       	pop	r15
     434:	ef 90       	pop	r14
     436:	08 95       	ret

00000438 <send_joystick_possition>:
* \param in joystick position
* \param in touchpad data
* \return result of the CAN send operation
****************************************************************************/
uint8_t send_joystick_possition(JoystickPosition joystick_position, TouchpadData touchpad_data)
{
     438:	0f 93       	push	r16
     43a:	1f 93       	push	r17
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
     444:	2a 97       	sbiw	r28, 0x0a	; 10
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	cd bf       	out	0x3d, r28	; 61
	message.data_array[3] = (uint8_t) (touchpad_data.leftTouchPad);
	
	message.data_array[4] = (uint8_t) (touchpad_data.rightButton);
	message.data_array[5] = (uint8_t) (touchpad_data.leftButton);
	
	return CAN_send_message(message);
     450:	01 e0       	ldi	r16, 0x01	; 1
     452:	16 e0       	ldi	r17, 0x06	; 6
     454:	28 2f       	mov	r18, r24
     456:	39 2f       	mov	r19, r25
     458:	89 85       	ldd	r24, Y+9	; 0x09
     45a:	9a 85       	ldd	r25, Y+10	; 0x0a
     45c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <CAN_send_message>
}
     460:	2a 96       	adiw	r28, 0x0a	; 10
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	f8 94       	cli
     466:	de bf       	out	0x3e, r29	; 62
     468:	0f be       	out	0x3f, r0	; 63
     46a:	cd bf       	out	0x3d, r28	; 61
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	0f 91       	pop	r16
     474:	08 95       	ret

00000476 <send_game_mode>:
*
* \param in game mode
* \return result of the CAN send operation
****************************************************************************/
uint8_t send_game_mode(GameModes mode)
{
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
     482:	2a 97       	sbiw	r28, 0x0a	; 10
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
	message.ID = 0x02;
	message.length = 1;
	
	message.data_array[0]= (uint8_t) (mode);
	
	return CAN_send_message(message);
     48e:	02 e0       	ldi	r16, 0x02	; 2
     490:	11 e0       	ldi	r17, 0x01	; 1
     492:	28 2f       	mov	r18, r24
     494:	3c 81       	ldd	r19, Y+4	; 0x04
     496:	4d 81       	ldd	r20, Y+5	; 0x05
     498:	5e 81       	ldd	r21, Y+6	; 0x06
     49a:	6f 81       	ldd	r22, Y+7	; 0x07
     49c:	78 85       	ldd	r23, Y+8	; 0x08
     49e:	89 85       	ldd	r24, Y+9	; 0x09
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <CAN_send_message>
}
     4a6:	2a 96       	adiw	r28, 0x0a	; 10
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	08 95       	ret

000004bc <read_joystick_position>:
*
* \param in calibration data
* \return Joystick position
****************************************************************************/
JoystickPosition read_joystick_position()
{
     4bc:	cf 93       	push	r28
	JoystickPosition position;

	position.xaxis = read_adc(ADC_CH2);
     4be:	85 e0       	ldi	r24, 0x05	; 5
     4c0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <read_adc>
     4c4:	c8 2f       	mov	r28, r24
	//position.xaxis = ((((position.xaxis - calibration.xaxis)*100)/255)-50)*2;

	position.yaxis = read_adc(ADC_CH1);
     4c6:	84 e0       	ldi	r24, 0x04	; 4
     4c8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <read_adc>
     4cc:	98 2f       	mov	r25, r24
	//position.yaxis = ((((position.yaxis - calibration.yaxis)*100)/255)-50)*2;
	
	return position;
}
     4ce:	8c 2f       	mov	r24, r28
     4d0:	cf 91       	pop	r28
     4d2:	08 95       	ret

000004d4 <read_joystick_direction>:
* \brief Read joystick direction according to joystick position data
*
* \return Joystick direction
****************************************************************************/
JoystickDirection read_joystick_direction(JoystickPosition joystickPos)
{
     4d4:	68 2f       	mov	r22, r24
	JoystickDirection xAxes, yAxes, retVal;
	
	if (joystickPos.xaxis > 220)
     4d6:	8d 3d       	cpi	r24, 0xDD	; 221
     4d8:	20 f4       	brcc	.+8      	; 0x4e2 <read_joystick_direction+0xe>
	{
		xAxes = Right;
	}
	else if (joystickPos.xaxis < 20)
     4da:	84 31       	cpi	r24, 0x14	; 20
     4dc:	20 f4       	brcc	.+8      	; 0x4e6 <read_joystick_direction+0x12>
	{
		xAxes = Left;
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	03 c0       	rjmp	.+6      	; 0x4e8 <read_joystick_direction+0x14>
{
	JoystickDirection xAxes, yAxes, retVal;
	
	if (joystickPos.xaxis > 220)
	{
		xAxes = Right;
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <read_joystick_direction+0x14>
	{
		xAxes = Left;
	}
	else
	{
		xAxes = Neutral;
     4e6:	84 e0       	ldi	r24, 0x04	; 4
	}
	
	if (joystickPos.yaxis > 220)
     4e8:	9d 3d       	cpi	r25, 0xDD	; 221
     4ea:	20 f4       	brcc	.+8      	; 0x4f4 <read_joystick_direction+0x20>
	{
		yAxes = Up;
	}
	else if (joystickPos.yaxis < 20)
     4ec:	94 31       	cpi	r25, 0x14	; 20
     4ee:	20 f4       	brcc	.+8      	; 0x4f8 <read_joystick_direction+0x24>
	{
		yAxes = Down;
     4f0:	e3 e0       	ldi	r30, 0x03	; 3
     4f2:	03 c0       	rjmp	.+6      	; 0x4fa <read_joystick_direction+0x26>
		xAxes = Neutral;
	}
	
	if (joystickPos.yaxis > 220)
	{
		yAxes = Up;
     4f4:	e2 e0       	ldi	r30, 0x02	; 2
     4f6:	01 c0       	rjmp	.+2      	; 0x4fa <read_joystick_direction+0x26>
	else if (joystickPos.yaxis < 20)
	{
		yAxes = Down;
	}
	else{
		yAxes = Neutral; 
     4f8:	e4 e0       	ldi	r30, 0x04	; 4
	}
	
	if(abs(joystickPos.yaxis-145) > abs(joystickPos.xaxis-135))
     4fa:	29 2f       	mov	r18, r25
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	21 59       	subi	r18, 0x91	; 145
     500:	31 09       	sbc	r19, r1
     502:	a9 01       	movw	r20, r18
     504:	33 23       	and	r19, r19
     506:	24 f4       	brge	.+8      	; 0x510 <__stack+0x11>
     508:	44 27       	eor	r20, r20
     50a:	55 27       	eor	r21, r21
     50c:	42 1b       	sub	r20, r18
     50e:	53 0b       	sbc	r21, r19
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	67 58       	subi	r22, 0x87	; 135
     514:	71 09       	sbc	r23, r1
     516:	9b 01       	movw	r18, r22
     518:	77 23       	and	r23, r23
     51a:	24 f4       	brge	.+8      	; 0x524 <__stack+0x25>
     51c:	22 27       	eor	r18, r18
     51e:	33 27       	eor	r19, r19
     520:	26 1b       	sub	r18, r22
     522:	37 0b       	sbc	r19, r23
     524:	24 17       	cp	r18, r20
     526:	35 07       	cpc	r19, r21
     528:	0c f4       	brge	.+2      	; 0x52c <__stack+0x2d>
	{
		retVal = yAxes;
     52a:	8e 2f       	mov	r24, r30
	{
		retVal = xAxes;
	}
	
	return retVal;
}
     52c:	08 95       	ret

0000052e <read_touchpad_data>:
* \brief Read Touchpad data
*
* \return Touchpad data
****************************************************************************/
TouchpadData read_touchpad_data()
{
     52e:	cf 93       	push	r28
	TouchpadData touchpad;
	touchpad.rightTouchPad = read_adc(ADC_CH3);
     530:	86 e0       	ldi	r24, 0x06	; 6
     532:	0e 94 52 01 	call	0x2a4	; 0x2a4 <read_adc>
     536:	c8 2f       	mov	r28, r24
	touchpad.leftTouchPad = read_adc(ADC_CH4);
     538:	87 e0       	ldi	r24, 0x07	; 7
     53a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <read_adc>
     53e:	78 2f       	mov	r23, r24
	
	if(test_bit(BUTTON_PORT, LEFT_BUTTON_PIN))
     540:	85 9b       	sbis	0x10, 5	; 16
     542:	02 c0       	rjmp	.+4      	; 0x548 <read_touchpad_data+0x1a>
	{
		touchpad.leftButton = 1;
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	01 c0       	rjmp	.+2      	; 0x54a <read_touchpad_data+0x1c>
	}
	else
	{
		touchpad.leftButton = 0;
     548:	90 e0       	ldi	r25, 0x00	; 0
	}
	if(test_bit(BUTTON_PORT, RIGHT_BUTTON_PIN))
     54a:	84 9b       	sbis	0x10, 4	; 16
     54c:	02 c0       	rjmp	.+4      	; 0x552 <read_touchpad_data+0x24>
	{
		touchpad.rightButton = 1;
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	01 c0       	rjmp	.+2      	; 0x554 <read_touchpad_data+0x26>
	}
	else
	{
		touchpad.rightButton = 0;	
     552:	80 e0       	ldi	r24, 0x00	; 0
	}
	return touchpad;
}
     554:	6c 2f       	mov	r22, r28
     556:	cf 91       	pop	r28
     558:	08 95       	ret

0000055a <change_xaxis>:
***********************************************************************************/
JoystickDirection change_xaxis(JoystickDirection direction)
{
	static JoystickDirection old_x_direction = Neutral;
	
	if(direction!= Right && direction != Left)
     55a:	82 30       	cpi	r24, 0x02	; 2
     55c:	20 f0       	brcs	.+8      	; 0x566 <change_xaxis+0xc>
	{
		old_x_direction = Neutral;
     55e:	84 e0       	ldi	r24, 0x04	; 4
     560:	80 93 07 01 	sts	0x0107, r24
		return Neutral;
     564:	08 95       	ret
	}
		
	if (old_x_direction != direction)
     566:	90 91 07 01 	lds	r25, 0x0107
     56a:	98 17       	cp	r25, r24
     56c:	19 f0       	breq	.+6      	; 0x574 <change_xaxis+0x1a>
	{
		old_x_direction = direction;
     56e:	80 93 07 01 	sts	0x0107, r24
		return direction;
     572:	08 95       	ret
	}
		
	old_x_direction = direction;
	return Neutral;
     574:	84 e0       	ldi	r24, 0x04	; 4
}
     576:	08 95       	ret

00000578 <change_yaxis>:
* \return Direction of joystick
***********************************************************************************/
JoystickDirection change_yaxis(JoystickDirection direction){
	static JoystickDirection old_y_direction = Neutral;
	
	if(direction!= Up && direction != Down)
     578:	9e ef       	ldi	r25, 0xFE	; 254
     57a:	98 0f       	add	r25, r24
     57c:	92 30       	cpi	r25, 0x02	; 2
     57e:	20 f0       	brcs	.+8      	; 0x588 <change_yaxis+0x10>
	{
		old_y_direction = Neutral;
     580:	84 e0       	ldi	r24, 0x04	; 4
     582:	80 93 06 01 	sts	0x0106, r24
		return Neutral;
     586:	08 95       	ret
	}
		
	if (old_y_direction != direction)
     588:	90 91 06 01 	lds	r25, 0x0106
     58c:	98 17       	cp	r25, r24
     58e:	19 f0       	breq	.+6      	; 0x596 <change_yaxis+0x1e>
	{
		old_y_direction = direction;
     590:	80 93 06 01 	sts	0x0106, r24
		return direction;
     594:	08 95       	ret
	}
	
	old_y_direction = direction;
	return Neutral;
     596:	84 e0       	ldi	r24, 0x04	; 4
}
     598:	08 95       	ret

0000059a <change_touchpad_data>:
	ChangeTouchpadData ret_val;
	
	ret_val.rightButton = 0;
	ret_val.leftButton = 0;
	
	if (old_touchpad_data.leftButton == 0 && new_touchpad_data.leftButton == 1)
     59a:	20 91 41 02 	lds	r18, 0x0241
     59e:	21 11       	cpse	r18, r1
     5a0:	05 c0       	rjmp	.+10     	; 0x5ac <change_touchpad_data+0x12>
     5a2:	91 30       	cpi	r25, 0x01	; 1
     5a4:	19 f4       	brne	.+6      	; 0x5ac <change_touchpad_data+0x12>
	{
		old_touchpad_data.leftButton = 1;
     5a6:	90 93 41 02 	sts	0x0241, r25
		ret_val.leftButton = 1;
     5aa:	0c c0       	rjmp	.+24     	; 0x5c4 <change_touchpad_data+0x2a>
	}
	else if (old_touchpad_data.leftButton == 1 && new_touchpad_data.leftButton == 0)
     5ac:	20 91 41 02 	lds	r18, 0x0241
     5b0:	21 30       	cpi	r18, 0x01	; 1
     5b2:	29 f4       	brne	.+10     	; 0x5be <change_touchpad_data+0x24>
     5b4:	91 11       	cpse	r25, r1
     5b6:	05 c0       	rjmp	.+10     	; 0x5c2 <change_touchpad_data+0x28>
	{
		old_touchpad_data.leftButton = 0;
     5b8:	10 92 41 02 	sts	0x0241, r1
     5bc:	03 c0       	rjmp	.+6      	; 0x5c4 <change_touchpad_data+0x2a>
{
	static TouchpadData old_touchpad_data;
	ChangeTouchpadData ret_val;
	
	ret_val.rightButton = 0;
	ret_val.leftButton = 0;
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <change_touchpad_data+0x2a>
     5c2:	90 e0       	ldi	r25, 0x00	; 0
	else if (old_touchpad_data.leftButton == 1 && new_touchpad_data.leftButton == 0)
	{
		old_touchpad_data.leftButton = 0;
	}
	
	if (old_touchpad_data.rightButton == 0 && new_touchpad_data.rightButton == 1)
     5c4:	20 91 40 02 	lds	r18, 0x0240
     5c8:	21 11       	cpse	r18, r1
     5ca:	05 c0       	rjmp	.+10     	; 0x5d6 <change_touchpad_data+0x3c>
     5cc:	81 30       	cpi	r24, 0x01	; 1
     5ce:	19 f4       	brne	.+6      	; 0x5d6 <change_touchpad_data+0x3c>
	{
		old_touchpad_data.rightButton = 1;
     5d0:	80 93 40 02 	sts	0x0240, r24
		ret_val.rightButton = 1;
     5d4:	08 95       	ret
	}
	else if (old_touchpad_data.rightButton == 1 && new_touchpad_data.rightButton == 0)
     5d6:	20 91 40 02 	lds	r18, 0x0240
     5da:	21 30       	cpi	r18, 0x01	; 1
     5dc:	29 f4       	brne	.+10     	; 0x5e8 <change_touchpad_data+0x4e>
     5de:	81 11       	cpse	r24, r1
     5e0:	05 c0       	rjmp	.+10     	; 0x5ec <change_touchpad_data+0x52>
	{
		old_touchpad_data.rightButton = 0;
     5e2:	10 92 40 02 	sts	0x0240, r1
     5e6:	08 95       	ret
ChangeTouchpadData change_touchpad_data(TouchpadData new_touchpad_data)
{
	static TouchpadData old_touchpad_data;
	ChangeTouchpadData ret_val;
	
	ret_val.rightButton = 0;
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	08 95       	ret
     5ec:	80 e0       	ldi	r24, 0x00	; 0
	{
		old_touchpad_data.rightButton = 0;
	}
	
	return ret_val;
     5ee:	08 95       	ret

000005f0 <mcp_turn_on>:
* \brief Enable communication with CAN controller 
*
****************************************************************************/
void mcp_turn_on()
{
	PORTB &= ~(1 << DD_CS);
     5f0:	c4 98       	cbi	0x18, 4	; 24
     5f2:	08 95       	ret

000005f4 <mcp_turn_off>:
* \brief Disable communication with CAN controller
*
****************************************************************************/
void mcp_turn_off()
{
	PORTB |= (1 << DD_CS);
     5f4:	c4 9a       	sbi	0x18, 4	; 24
     5f6:	08 95       	ret

000005f8 <mcp_reset>:
* \brief Reset the CAN controller
*
****************************************************************************/
void mcp_reset()
{
	mcp_turn_on();
     5f8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <mcp_turn_on>
	
	SPI_write(MCP_RESET);
     5fc:	80 ec       	ldi	r24, 0xC0	; 192
     5fe:	0e 94 a1 04 	call	0x942	; 0x942 <SPI_write>
	
	mcp_turn_off();
     602:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <mcp_turn_off>
     606:	08 95       	ret

00000608 <mcp_read>:
*
* \param in address from which shall be read
* \return data
****************************************************************************/
uint8_t mcp_read(uint8_t address)
{
     608:	1f 93       	push	r17
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	1f 92       	push	r1
     610:	cd b7       	in	r28, 0x3d	; 61
     612:	de b7       	in	r29, 0x3e	; 62
     614:	18 2f       	mov	r17, r24
	volatile uint8_t retVal;
	
	mcp_turn_on();
     616:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <mcp_turn_on>
	
	SPI_write(MCP_READ);
     61a:	83 e0       	ldi	r24, 0x03	; 3
     61c:	0e 94 a1 04 	call	0x942	; 0x942 <SPI_write>
	SPI_write(address);
     620:	81 2f       	mov	r24, r17
     622:	0e 94 a1 04 	call	0x942	; 0x942 <SPI_write>
	
	retVal = SPI_read();
     626:	0e 94 a5 04 	call	0x94a	; 0x94a <SPI_read>
     62a:	89 83       	std	Y+1, r24	; 0x01
	
	mcp_turn_off();
     62c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <mcp_turn_off>
	
	return retVal;
     630:	89 81       	ldd	r24, Y+1	; 0x01
}
     632:	0f 90       	pop	r0
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	1f 91       	pop	r17
     63a:	08 95       	ret

0000063c <mcp_init>:
****************************************************************************/
uint8_t mcp_init()
{
	uint8_t tmp;
	
	SPI_init();
     63c:	0e 94 9b 04 	call	0x936	; 0x936 <SPI_init>
	mcp_reset();
     640:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <mcp_reset>
	
	tmp = mcp_read(MCP_CANSTAT);
     644:	8e e0       	ldi	r24, 0x0E	; 14
     646:	0e 94 04 03 	call	0x608	; 0x608 <mcp_read>
	
	if ((tmp & MODE_MASK) != MODE_CONFIG)
     64a:	80 7e       	andi	r24, 0xE0	; 224
     64c:	80 38       	cpi	r24, 0x80	; 128
     64e:	31 f0       	breq	.+12     	; 0x65c <mcp_init+0x20>
	{
		printf("MCP2515 NOT configured properly\n");
     650:	88 e0       	ldi	r24, 0x08	; 8
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <puts>
		return 1;
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	08 95       	ret
	}
	
	return 0;
     65c:	80 e0       	ldi	r24, 0x00	; 0
}
     65e:	08 95       	ret

00000660 <mcp_write_byte>:
*
* \param in address to which shall be write
* \return data
****************************************************************************/
void mcp_write_byte(uint8_t address, uint8_t byte)
{
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	d8 2f       	mov	r29, r24
     666:	c6 2f       	mov	r28, r22
	mcp_turn_on();
     668:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <mcp_turn_on>
	SPI_write(MCP_WRITE);
     66c:	82 e0       	ldi	r24, 0x02	; 2
     66e:	0e 94 a1 04 	call	0x942	; 0x942 <SPI_write>
	SPI_write(address);
     672:	8d 2f       	mov	r24, r29
     674:	0e 94 a1 04 	call	0x942	; 0x942 <SPI_write>
	SPI_write(byte);
     678:	8c 2f       	mov	r24, r28
     67a:	0e 94 a1 04 	call	0x942	; 0x942 <SPI_write>
	mcp_turn_off();
     67e:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <mcp_turn_off>
}
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	08 95       	ret

00000688 <mcp_modify_bit>:
* \param in address of the register
* \param in bit mask
* \param in new value of the register
****************************************************************************/
void mcp_modify_bit(uint8_t address, uint8_t mask, uint8_t byte)
{
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	18 2f       	mov	r17, r24
     690:	d6 2f       	mov	r29, r22
     692:	c4 2f       	mov	r28, r20
	mcp_turn_on();
     694:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <mcp_turn_on>
	SPI_write(MCP_BITMOD);
     698:	85 e0       	ldi	r24, 0x05	; 5
     69a:	0e 94 a1 04 	call	0x942	; 0x942 <SPI_write>
	SPI_write(address);
     69e:	81 2f       	mov	r24, r17
     6a0:	0e 94 a1 04 	call	0x942	; 0x942 <SPI_write>
	SPI_write(mask);
     6a4:	8d 2f       	mov	r24, r29
     6a6:	0e 94 a1 04 	call	0x942	; 0x942 <SPI_write>
	SPI_write(byte);
     6aa:	8c 2f       	mov	r24, r28
     6ac:	0e 94 a1 04 	call	0x942	; 0x942 <SPI_write>
	mcp_turn_off();
     6b0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <mcp_turn_off>
}
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	1f 91       	pop	r17
     6ba:	08 95       	ret

000006bc <mcp_request_to_send>:
* \brief Request to send particular buffer
*
* \param in address of the buffer
****************************************************************************/
void mcp_request_to_send(uint8_t bits)
{
     6bc:	cf 93       	push	r28
     6be:	c8 2f       	mov	r28, r24
	mcp_turn_on();
     6c0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <mcp_turn_on>
	SPI_write(MCP_RTS | (bits & 0b00000111));
     6c4:	8c 2f       	mov	r24, r28
     6c6:	87 70       	andi	r24, 0x07	; 7
     6c8:	80 68       	ori	r24, 0x80	; 128
     6ca:	0e 94 a1 04 	call	0x942	; 0x942 <SPI_write>
	mcp_turn_off();
     6ce:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <mcp_turn_off>
}
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <init_oled>:
*
****************************************************************************/
void write_c(char command)
{
	volatile char *ext_oled = (char *) OLED_COMMAND_BASE_ADDR;
	ext_oled[0] = command;
     6d6:	e0 e0       	ldi	r30, 0x00	; 0
     6d8:	f0 e1       	ldi	r31, 0x10	; 16
     6da:	8e ea       	ldi	r24, 0xAE	; 174
     6dc:	80 83       	st	Z, r24
     6de:	81 ea       	ldi	r24, 0xA1	; 161
     6e0:	80 83       	st	Z, r24
     6e2:	8a ed       	ldi	r24, 0xDA	; 218
     6e4:	80 83       	st	Z, r24
     6e6:	82 e1       	ldi	r24, 0x12	; 18
     6e8:	80 83       	st	Z, r24
     6ea:	88 ec       	ldi	r24, 0xC8	; 200
     6ec:	80 83       	st	Z, r24
     6ee:	88 ea       	ldi	r24, 0xA8	; 168
     6f0:	80 83       	st	Z, r24
     6f2:	8f e3       	ldi	r24, 0x3F	; 63
     6f4:	80 83       	st	Z, r24
     6f6:	85 ed       	ldi	r24, 0xD5	; 213
     6f8:	80 83       	st	Z, r24
     6fa:	80 e8       	ldi	r24, 0x80	; 128
     6fc:	80 83       	st	Z, r24
     6fe:	81 e8       	ldi	r24, 0x81	; 129
     700:	80 83       	st	Z, r24
     702:	80 e5       	ldi	r24, 0x50	; 80
     704:	80 83       	st	Z, r24
     706:	89 ed       	ldi	r24, 0xD9	; 217
     708:	80 83       	st	Z, r24
     70a:	81 e2       	ldi	r24, 0x21	; 33
     70c:	80 83       	st	Z, r24
     70e:	80 e2       	ldi	r24, 0x20	; 32
     710:	80 83       	st	Z, r24
     712:	10 82       	st	Z, r1
     714:	8b ed       	ldi	r24, 0xDB	; 219
     716:	80 83       	st	Z, r24
     718:	80 e3       	ldi	r24, 0x30	; 48
     71a:	80 83       	st	Z, r24
     71c:	8d ea       	ldi	r24, 0xAD	; 173
     71e:	80 83       	st	Z, r24
     720:	10 82       	st	Z, r1
     722:	84 ea       	ldi	r24, 0xA4	; 164
     724:	80 83       	st	Z, r24
     726:	86 ea       	ldi	r24, 0xA6	; 166
     728:	80 83       	st	Z, r24
     72a:	8f ea       	ldi	r24, 0xAF	; 175
     72c:	80 83       	st	Z, r24
     72e:	08 95       	ret

00000730 <reset_position>:
     730:	e0 e0       	ldi	r30, 0x00	; 0
     732:	f0 e1       	ldi	r31, 0x10	; 16
     734:	81 e2       	ldi	r24, 0x21	; 33
     736:	80 83       	st	Z, r24
     738:	10 82       	st	Z, r1
     73a:	8f e7       	ldi	r24, 0x7F	; 127
     73c:	80 83       	st	Z, r24
     73e:	82 e2       	ldi	r24, 0x22	; 34
     740:	80 83       	st	Z, r24
     742:	10 82       	st	Z, r1
     744:	87 e0       	ldi	r24, 0x07	; 7
     746:	80 83       	st	Z, r24
     748:	08 95       	ret

0000074a <refresh_oled>:
* \brief Refresh OLED by rewriting all data from SRAM to OLED
*
****************************************************************************/
void refresh_oled()
{
	reset_position();
     74a:	0e 94 98 03 	call	0x730	; 0x730 <reset_position>
     74e:	e0 e0       	ldi	r30, 0x00	; 0
     750:	f8 e1       	ldi	r31, 0x18	; 24
*
****************************************************************************/
void write_d(char data)
{
	volatile char *ext_oled = (char *) OLED_DATA_BASE_ADDR;
	ext_oled[0] = data;
     752:	a0 e0       	ldi	r26, 0x00	; 0
     754:	b2 e1       	ldi	r27, 0x12	; 18
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	unsigned char oled_value;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
	{
		oled_value = ext_ram[i];
     756:	81 91       	ld	r24, Z+
*
****************************************************************************/
void write_d(char data)
{
	volatile char *ext_oled = (char *) OLED_DATA_BASE_ADDR;
	ext_oled[0] = data;
     758:	8c 93       	st	X, r24
{
	reset_position();
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	unsigned char oled_value;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
     75a:	e1 15       	cp	r30, r1
     75c:	8c e1       	ldi	r24, 0x1C	; 28
     75e:	f8 07       	cpc	r31, r24
     760:	d1 f7       	brne	.-12     	; 0x756 <refresh_oled+0xc>
	{
		oled_value = ext_ram[i];
		write_d(oled_value);
	}
}
     762:	08 95       	ret

00000764 <clear_oled>:
/****************************************************************************
* \brief Clear OLED display
*
****************************************************************************/
void clear_oled()
{
     764:	e0 e0       	ldi	r30, 0x00	; 0
     766:	f8 e1       	ldi	r31, 0x18	; 24
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
	{
		ext_ram[i] = 0x00;
     768:	11 92       	st	Z+, r1
****************************************************************************/
void clear_oled()
{
	volatile char *ext_ram = (char *) OLED_BASE_SRAM_ADDRESS;
	
	for (int i = 0; i < OLED_ADDR_SPACE_LEN; i++)
     76a:	e1 15       	cp	r30, r1
     76c:	8c e1       	ldi	r24, 0x1C	; 28
     76e:	f8 07       	cpc	r31, r24
     770:	d9 f7       	brne	.-10     	; 0x768 <clear_oled+0x4>
	{
		ext_ram[i] = 0x00;
	}
}
     772:	08 95       	ret

00000774 <print_char>:
* \brief Print character on current position on OLED display
*
* \param in x Position of pixel that should be set
****************************************************************************/
void print_char(char character)
{
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	c0 91 42 02 	lds	r28, 0x0242
     77c:	d0 91 43 02 	lds	r29, 0x0243
     780:	28 2f       	mov	r18, r24
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	20 52       	subi	r18, 0x20	; 32
     786:	31 09       	sbc	r19, r1
     788:	c9 01       	movw	r24, r18
     78a:	88 0f       	add	r24, r24
     78c:	99 1f       	adc	r25, r25
     78e:	88 0f       	add	r24, r24
     790:	99 1f       	adc	r25, r25
     792:	28 0f       	add	r18, r24
     794:	39 1f       	adc	r19, r25
     796:	26 57       	subi	r18, 0x76	; 118
     798:	3f 4f       	sbci	r19, 0xFF	; 255
     79a:	84 e0       	ldi	r24, 0x04	; 4
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	be 01       	movw	r22, r28
     7a0:	6c 5f       	subi	r22, 0xFC	; 252
     7a2:	77 4e       	sbci	r23, 0xE7	; 231
     7a4:	db 01       	movw	r26, r22
     7a6:	a8 1b       	sub	r26, r24
     7a8:	b9 0b       	sbc	r27, r25
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
	
	for(int i = 0; i < 4; i++)
	{
		ext_ram[position] = pgm_read_word_near(&(font[character-32][i]));
     7aa:	f9 01       	movw	r30, r18
     7ac:	45 91       	lpm	r20, Z+
     7ae:	54 91       	lpm	r21, Z
     7b0:	4c 93       	st	X, r20
     7b2:	01 97       	sbiw	r24, 0x01	; 1
     7b4:	2f 5f       	subi	r18, 0xFF	; 255
     7b6:	3f 4f       	sbci	r19, 0xFF	; 255
****************************************************************************/
void print_char(char character)
{
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
	
	for(int i = 0; i < 4; i++)
     7b8:	00 97       	sbiw	r24, 0x00	; 0
     7ba:	a1 f7       	brne	.-24     	; 0x7a4 <print_char+0x30>
     7bc:	24 96       	adiw	r28, 0x04	; 4
     7be:	d0 93 43 02 	sts	0x0243, r29
     7c2:	c0 93 42 02 	sts	0x0242, r28
	{
		ext_ram[position] = pgm_read_word_near(&(font[character-32][i]));
		position++;
	}
}
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	08 95       	ret

000007cc <print_inverted_char>:

void print_inverted_char(char character)
{
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	c0 91 42 02 	lds	r28, 0x0242
     7d4:	d0 91 43 02 	lds	r29, 0x0243
     7d8:	28 2f       	mov	r18, r24
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	20 52       	subi	r18, 0x20	; 32
     7de:	31 09       	sbc	r19, r1
     7e0:	c9 01       	movw	r24, r18
     7e2:	88 0f       	add	r24, r24
     7e4:	99 1f       	adc	r25, r25
     7e6:	88 0f       	add	r24, r24
     7e8:	99 1f       	adc	r25, r25
     7ea:	28 0f       	add	r18, r24
     7ec:	39 1f       	adc	r19, r25
     7ee:	26 57       	subi	r18, 0x76	; 118
     7f0:	3f 4f       	sbci	r19, 0xFF	; 255
     7f2:	84 e0       	ldi	r24, 0x04	; 4
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	be 01       	movw	r22, r28
     7f8:	6c 5f       	subi	r22, 0xFC	; 252
     7fa:	77 4e       	sbci	r23, 0xE7	; 231
     7fc:	db 01       	movw	r26, r22
     7fe:	a8 1b       	sub	r26, r24
     800:	b9 0b       	sbc	r27, r25
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
	
	for(int i = 0; i < 4; i++)
	{
		ext_ram[position] = ~pgm_read_word_near(&(font[character-32][i]));
     802:	f9 01       	movw	r30, r18
     804:	45 91       	lpm	r20, Z+
     806:	54 91       	lpm	r21, Z
     808:	40 95       	com	r20
     80a:	4c 93       	st	X, r20
     80c:	01 97       	sbiw	r24, 0x01	; 1
     80e:	2f 5f       	subi	r18, 0xFF	; 255
     810:	3f 4f       	sbci	r19, 0xFF	; 255

void print_inverted_char(char character)
{
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
	
	for(int i = 0; i < 4; i++)
     812:	00 97       	sbiw	r24, 0x00	; 0
     814:	99 f7       	brne	.-26     	; 0x7fc <print_inverted_char+0x30>
     816:	24 96       	adiw	r28, 0x04	; 4
     818:	d0 93 43 02 	sts	0x0243, r29
     81c:	c0 93 42 02 	sts	0x0242, r28
	{
		ext_ram[position] = ~pgm_read_word_near(&(font[character-32][i]));
		position++;
	}
}
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	08 95       	ret

00000826 <set_position>:
* \param in page Row on Y-axis
* \return Success/Failure
****************************************************************************/
int set_position(unsigned int column, unsigned int page)
{
	if (column > 32)
     826:	81 32       	cpi	r24, 0x21	; 33
     828:	91 05       	cpc	r25, r1
     82a:	c0 f4       	brcc	.+48     	; 0x85c <set_position+0x36>
	{
		return 1;
	}
	else if (page > 8)
     82c:	69 30       	cpi	r22, 0x09	; 9
     82e:	71 05       	cpc	r23, r1
     830:	c0 f4       	brcc	.+48     	; 0x862 <set_position+0x3c>
	{
		return 1;
	}
		
	position = page * 128 + column * 4;
     832:	66 0f       	add	r22, r22
     834:	77 1f       	adc	r23, r23
     836:	62 95       	swap	r22
     838:	72 95       	swap	r23
     83a:	70 7f       	andi	r23, 0xF0	; 240
     83c:	76 27       	eor	r23, r22
     83e:	60 7f       	andi	r22, 0xF0	; 240
     840:	76 27       	eor	r23, r22
     842:	86 0f       	add	r24, r22
     844:	97 1f       	adc	r25, r23
     846:	88 0f       	add	r24, r24
     848:	99 1f       	adc	r25, r25
     84a:	88 0f       	add	r24, r24
     84c:	99 1f       	adc	r25, r25
     84e:	90 93 43 02 	sts	0x0243, r25
     852:	80 93 42 02 	sts	0x0242, r24
	
	return 0;
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	08 95       	ret
****************************************************************************/
int set_position(unsigned int column, unsigned int page)
{
	if (column > 32)
	{
		return 1;
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	08 95       	ret
	}
	else if (page > 8)
	{
		return 1;
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	90 e0       	ldi	r25, 0x00	; 0
	}
		
	position = page * 128 + column * 4;
	
	return 0;
}
     866:	08 95       	ret

00000868 <print_string>:
*
* \param in String that shall be printed
* \return Success/Failure
****************************************************************************/
int print_string(char* string)
{
     868:	ef 92       	push	r14
     86a:	ff 92       	push	r15
     86c:	0f 93       	push	r16
     86e:	1f 93       	push	r17
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
	int lenght  = strlen(string);
     874:	fc 01       	movw	r30, r24
     876:	01 90       	ld	r0, Z+
     878:	00 20       	and	r0, r0
     87a:	e9 f7       	brne	.-6      	; 0x876 <print_string+0xe>
     87c:	31 97       	sbiw	r30, 0x01	; 1
     87e:	7f 01       	movw	r14, r30
     880:	e8 1a       	sub	r14, r24
     882:	f9 0a       	sbc	r15, r25
	for(int i = 0; i < lenght; i++)
     884:	1e 14       	cp	r1, r14
     886:	1f 04       	cpc	r1, r15
     888:	64 f4       	brge	.+24     	; 0x8a2 <print_string+0x3a>
     88a:	8c 01       	movw	r16, r24
     88c:	c0 e0       	ldi	r28, 0x00	; 0
     88e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		print_char(string[i]);
     890:	f8 01       	movw	r30, r16
     892:	81 91       	ld	r24, Z+
     894:	8f 01       	movw	r16, r30
     896:	0e 94 ba 03 	call	0x774	; 0x774 <print_char>
* \return Success/Failure
****************************************************************************/
int print_string(char* string)
{
	int lenght  = strlen(string);
	for(int i = 0; i < lenght; i++)
     89a:	21 96       	adiw	r28, 0x01	; 1
     89c:	ec 16       	cp	r14, r28
     89e:	fd 06       	cpc	r15, r29
     8a0:	b9 f7       	brne	.-18     	; 0x890 <print_string+0x28>
	{
		print_char(string[i]);
	}
	
	return 0;
}
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	1f 91       	pop	r17
     8ac:	0f 91       	pop	r16
     8ae:	ff 90       	pop	r15
     8b0:	ef 90       	pop	r14
     8b2:	08 95       	ret

000008b4 <revert_colour_line>:
****************************************************************************/
void revert_colour_line(unsigned char line)
{
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
		
	for(int i = (line * OLED_LINE_LENGTH_COLUMNS) + 2; i < ((line + 1) * OLED_LINE_LENGTH_COLUMNS); i++)
     8b4:	90 e8       	ldi	r25, 0x80	; 128
     8b6:	89 9f       	mul	r24, r25
     8b8:	f0 01       	movw	r30, r0
     8ba:	11 24       	eor	r1, r1
     8bc:	cf 01       	movw	r24, r30
     8be:	80 58       	subi	r24, 0x80	; 128
     8c0:	9f 4f       	sbci	r25, 0xFF	; 255
     8c2:	9f 01       	movw	r18, r30
     8c4:	2e 5f       	subi	r18, 0xFE	; 254
     8c6:	3f 4f       	sbci	r19, 0xFF	; 255
     8c8:	28 17       	cp	r18, r24
     8ca:	39 07       	cpc	r19, r25
     8cc:	54 f4       	brge	.+20     	; 0x8e2 <revert_colour_line+0x2e>
     8ce:	ef 5f       	subi	r30, 0xFF	; 255
     8d0:	f7 4e       	sbci	r31, 0xE7	; 231
     8d2:	81 50       	subi	r24, 0x01	; 1
     8d4:	98 4e       	sbci	r25, 0xE8	; 232
	{
		ext_ram[i-1] = ~ext_ram[i-1];
     8d6:	20 81       	ld	r18, Z
     8d8:	20 95       	com	r18
     8da:	21 93       	st	Z+, r18
****************************************************************************/
void revert_colour_line(unsigned char line)
{
	volatile char* ext_ram = (char*) OLED_BASE_SRAM_ADDRESS;
		
	for(int i = (line * OLED_LINE_LENGTH_COLUMNS) + 2; i < ((line + 1) * OLED_LINE_LENGTH_COLUMNS); i++)
     8dc:	e8 17       	cp	r30, r24
     8de:	f9 07       	cpc	r31, r25
     8e0:	d1 f7       	brne	.-12     	; 0x8d6 <revert_colour_line+0x22>
     8e2:	08 95       	ret

000008e4 <init>:
* \brief Initialize all important peripherals and pins
*
****************************************************************************/
void init()
{
	USART_init(MYUBBR);
     8e4:	8f e1       	ldi	r24, 0x1F	; 31
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 b5 04 	call	0x96a	; 0x96a <USART_init>
	/* Enables standard IO functions */	
	fdevopen(USART_putchar, USART_getchar);
     8ec:	62 ec       	ldi	r22, 0xC2	; 194
     8ee:	74 e0       	ldi	r23, 0x04	; 4
     8f0:	8c eb       	ldi	r24, 0xBC	; 188
     8f2:	94 e0       	ldi	r25, 0x04	; 4
     8f4:	0e 94 2d 0a 	call	0x145a	; 0x145a <fdevopen>
	/* Enables external memory*/
	set_bit(MCUCR, SRE);
     8f8:	85 b7       	in	r24, 0x35	; 53
     8fa:	80 68       	ori	r24, 0x80	; 128
     8fc:	85 bf       	out	0x35, r24	; 53
	/* Pin 1 is set to output for the LED*/
	set_bit(DDRB, PB0);
     8fe:	b8 9a       	sbi	0x17, 0	; 23
	/* Pin is now driven LOW*/
	clear_bit(PORTB, PB0);
     900:	c0 98       	cbi	0x18, 0	; 24
	/* Initialize OLED display */
	init_oled();
     902:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <init_oled>
	interface_init();
     906:	0e 94 c7 04 	call	0x98e	; 0x98e <interface_init>
     90a:	08 95       	ret

0000090c <main>:


int main(void)
{	

	clear_bit(DDRD, PD3);
     90c:	8b 98       	cbi	0x11, 3	; 17
	clear_bit(DDRD, PD2);
     90e:	8a 98       	cbi	0x11, 2	; 17
	
	init();
     910:	0e 94 72 04 	call	0x8e4	; 0x8e4 <init>
	

	//led_toggle();
	//SRAM_test();
	
	CAN_init();
     914:	0e 94 5e 01 	call	0x2bc	; 0x2bc <CAN_init>
	
	clear_oled();
     918:	0e 94 b2 03 	call	0x764	; 0x764 <clear_oled>
	reset_position();
     91c:	0e 94 98 03 	call	0x730	; 0x730 <reset_position>
	
	clear_oled();
     920:	0e 94 b2 03 	call	0x764	; 0x764 <clear_oled>
	refresh_oled();
     924:	0e 94 a5 03 	call	0x74a	; 0x74a <refresh_oled>
	canMessage.ID = 0xAA;
	canMessage.length = 1;
	canMessage.data_array[0] = 0x10;
	
	
	printf("start\n");
     928:	88 e2       	ldi	r24, 0x28	; 40
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <puts>
	high_score_write(scores);
	*/
	//sei();
	while(1)
	{
		interface_state_machine();
     930:	0e 94 9e 09 	call	0x133c	; 0x133c <interface_state_machine>
     934:	fd cf       	rjmp	.-6      	; 0x930 <main+0x24>

00000936 <SPI_init>:
*
****************************************************************************/
void SPI_init()
{
	/* Drive MOSI, SCK and CS HIGH*/
	DDR_SPI |= (1 << DD_MOSI) | (1 << DD_SCK) | (1 << DD_CS);
     936:	87 b3       	in	r24, 0x17	; 23
     938:	80 6b       	ori	r24, 0xB0	; 176
     93a:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master mode, clock rate fck/16*/
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     93c:	81 e5       	ldi	r24, 0x51	; 81
     93e:	8d b9       	out	0x0d, r24	; 13
     940:	08 95       	ret

00000942 <SPI_write>:
*
* \param in byte to be written
****************************************************************************/
void SPI_write(uint8_t data)
{
	SPDR = data;
     942:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1 << SPIF)));
     944:	77 9b       	sbis	0x0e, 7	; 14
     946:	fe cf       	rjmp	.-4      	; 0x944 <SPI_write+0x2>
}
     948:	08 95       	ret

0000094a <SPI_read>:
* \brief Read data from slave unit
*
* \return Read data
****************************************************************************/
uint8_t SPI_read()
{
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	1f 92       	push	r1
     950:	cd b7       	in	r28, 0x3d	; 61
     952:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t retVal;
	SPDR = 0xFF;
     954:	8f ef       	ldi	r24, 0xFF	; 255
     956:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1 << SPIF)));
     958:	77 9b       	sbis	0x0e, 7	; 14
     95a:	fe cf       	rjmp	.-4      	; 0x958 <SPI_read+0xe>
	
	retVal = SPDR;
     95c:	8f b1       	in	r24, 0x0f	; 15
     95e:	89 83       	std	Y+1, r24	; 0x01
	
	return retVal;
     960:	89 81       	ldd	r24, Y+1	; 0x01
     962:	0f 90       	pop	r0
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	08 95       	ret

0000096a <USART_init>:
 * \param ubrr Desired baud rate.
 ****************************************************************************/
void USART_init(unsigned int ubrr)
{
	//Set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
     96a:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
     96c:	89 b9       	out	0x09, r24	; 9
	// Enable receiver and transmitter
	UCSR0B = (1<< RXEN0) | (1<<TXEN0) | (1<<RXCIE0) | (1<<TXCIE0);
     96e:	88 ed       	ldi	r24, 0xD8	; 216
     970:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 2 stop bit
	UCSR0C = (1<<URSEL0) | (3<<UCSZ00) ;
     972:	86 e8       	ldi	r24, 0x86	; 134
     974:	80 bd       	out	0x20, r24	; 32
     976:	08 95       	ret

00000978 <USART_putchar>:
 * \param c Char to be sent.
 * \return Always 0.
 ****************************************************************************/
int USART_putchar(char c)
{
	loop_until_bit_is_set(UCSR0A, UDRE0);
     978:	5d 9b       	sbis	0x0b, 5	; 11
     97a:	fe cf       	rjmp	.-4      	; 0x978 <USART_putchar>
	UDR0 = c;
     97c:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	08 95       	ret

00000984 <USART_getchar>:
 * \return Received char.
 ****************************************************************************/
int USART_getchar()
{
	char c;
	loop_until_bit_is_set(UCSR0A, RXC0);
     984:	5f 9b       	sbis	0x0b, 7	; 11
     986:	fe cf       	rjmp	.-4      	; 0x984 <USART_getchar>
	c = UDR0;
     988:	8c b1       	in	r24, 0x0c	; 12
	return c;
}
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	08 95       	ret

0000098e <interface_init>:
	volatile char *high_scores_sram = (char *) EEPROM_HIGH_SCORES_BASE_ADDR;
	uint8_t i, j;
	
	for(i = 0; i < USERNAME_LENGTH; i++)
	{
		ext_ram[i] = 'A';
     98e:	81 e4       	ldi	r24, 0x41	; 65
     990:	80 93 00 1c 	sts	0x1C00, r24
     994:	80 93 01 1c 	sts	0x1C01, r24
     998:	80 93 02 1c 	sts	0x1C02, r24
     99c:	80 93 03 1c 	sts	0x1C03, r24
     9a0:	80 93 04 1c 	sts	0x1C04, r24
     9a4:	08 95       	ret

000009a6 <interface_username>:
* \brief Function call during the set username phase
*

****************************************************************************/
InterfaceState interface_username()
{
     9a6:	6f 92       	push	r6
     9a8:	7f 92       	push	r7
     9aa:	8f 92       	push	r8
     9ac:	9f 92       	push	r9
     9ae:	af 92       	push	r10
     9b0:	bf 92       	push	r11
     9b2:	cf 92       	push	r12
     9b4:	df 92       	push	r13
     9b6:	ef 92       	push	r14
     9b8:	ff 92       	push	r15
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	00 d0       	rcall	.+0      	; 0x9c4 <interface_username+0x1e>
     9c4:	00 d0       	rcall	.+0      	; 0x9c6 <interface_username+0x20>
     9c6:	1f 92       	push	r1
     9c8:	cd b7       	in	r28, 0x3d	; 61
     9ca:	de b7       	in	r29, 0x3e	; 62
     9cc:	de 01       	movw	r26, r28
     9ce:	11 96       	adiw	r26, 0x01	; 1
     9d0:	e0 e0       	ldi	r30, 0x00	; 0
     9d2:	fc e1       	ldi	r31, 0x1C	; 28
	char name[USERNAME_LENGTH];
	char index = 0;
	
	for(int i=0; i<USERNAME_LENGTH;i++)
	{
		name[i] = ext_ram[i];
     9d4:	81 91       	ld	r24, Z+
     9d6:	8d 93       	st	X+, r24
	ChangeTouchpadData change_touch_data;
	TouchpadData touch_data;
	char name[USERNAME_LENGTH];
	char index = 0;
	
	for(int i=0; i<USERNAME_LENGTH;i++)
     9d8:	e5 30       	cpi	r30, 0x05	; 5
     9da:	8c e1       	ldi	r24, 0x1C	; 28
     9dc:	f8 07       	cpc	r31, r24
     9de:	d1 f7       	brne	.-12     	; 0x9d4 <interface_username+0x2e>
	{
		name[i] = ext_ram[i];
	}
	
	position = read_joystick_position();
     9e0:	0e 94 5e 02 	call	0x4bc	; 0x4bc <read_joystick_position>
	direction = read_joystick_direction(position);
     9e4:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <read_joystick_direction>
     9e8:	18 2f       	mov	r17, r24
	change_y = change_yaxis(direction);
     9ea:	0e 94 bc 02 	call	0x578	; 0x578 <change_yaxis>
	change_x = change_xaxis(direction);
     9ee:	81 2f       	mov	r24, r17
     9f0:	0e 94 ad 02 	call	0x55a	; 0x55a <change_xaxis>
	
	set_position(12, 0);
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	8c e0       	ldi	r24, 0x0C	; 12
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
	print_string("Username");
     a00:	8e e7       	ldi	r24, 0x7E	; 126
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
	revert_colour_line(0);
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <revert_colour_line>
	
	set_position(4,4);
     a0e:	64 e0       	ldi	r22, 0x04	; 4
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	84 e0       	ldi	r24, 0x04	; 4
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
	JoystickDirection direction;
	JoystickDirection change_y, change_x;
	ChangeTouchpadData change_touch_data;
	TouchpadData touch_data;
	char name[USERNAME_LENGTH];
	char index = 0;
     a1a:	91 2c       	mov	r9, r1
		{
			index = (index + 1) % 5;
		}
		else if (change_x == Left)
		{
			index = index == 0 ? 4 : (index - 1);
     a1c:	68 94       	set
     a1e:	66 24       	eor	r6, r6
     a20:	62 f8       	bld	r6, 2
		change_y = change_yaxis(direction);
		change_x = change_xaxis(direction);
		
		if (change_x == Right)
		{
			index = (index + 1) % 5;
     a22:	0f 2e       	mov	r0, r31
     a24:	f5 e0       	ldi	r31, 0x05	; 5
     a26:	ef 2e       	mov	r14, r31
     a28:	f1 2c       	mov	r15, r1
     a2a:	f0 2d       	mov	r31, r0
		{
			name[index] = (name[index] == 'A') ? 'Z' : (name[index] - 1);
		}
		
		set_position(10, 4);
		for (int i = 0; i < 5; i++)
     a2c:	71 2c       	mov	r7, r1
     a2e:	81 2c       	mov	r8, r1
	
	set_position(4,4);
	
	while (1)
	{
		position = read_joystick_position();
     a30:	0e 94 5e 02 	call	0x4bc	; 0x4bc <read_joystick_position>
		direction = read_joystick_direction(position);
     a34:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <read_joystick_direction>
     a38:	18 2f       	mov	r17, r24
		change_y = change_yaxis(direction);
     a3a:	0e 94 bc 02 	call	0x578	; 0x578 <change_yaxis>
     a3e:	08 2f       	mov	r16, r24
		change_x = change_xaxis(direction);
     a40:	81 2f       	mov	r24, r17
     a42:	0e 94 ad 02 	call	0x55a	; 0x55a <change_xaxis>
		
		if (change_x == Right)
     a46:	81 30       	cpi	r24, 0x01	; 1
     a48:	49 f4       	brne	.+18     	; 0xa5c <interface_username+0xb6>
		{
			index = (index + 1) % 5;
     a4a:	29 2d       	mov	r18, r9
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	c9 01       	movw	r24, r18
     a50:	01 96       	adiw	r24, 0x01	; 1
     a52:	b7 01       	movw	r22, r14
     a54:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__divmodhi4>
     a58:	98 2e       	mov	r9, r24
     a5a:	07 c0       	rjmp	.+14     	; 0xa6a <interface_username+0xc4>
		}
		else if (change_x == Left)
     a5c:	81 11       	cpse	r24, r1
     a5e:	05 c0       	rjmp	.+10     	; 0xa6a <interface_username+0xc4>
		{
			index = index == 0 ? 4 : (index - 1);
     a60:	99 20       	and	r9, r9
     a62:	11 f0       	breq	.+4      	; 0xa68 <interface_username+0xc2>
     a64:	9a 94       	dec	r9
     a66:	01 c0       	rjmp	.+2      	; 0xa6a <interface_username+0xc4>
     a68:	96 2c       	mov	r9, r6
		}
		
		if (change_y == Up)
     a6a:	02 30       	cpi	r16, 0x02	; 2
     a6c:	b1 f4       	brne	.+44     	; 0xa9a <interface_username+0xf4>
		{
			name[index] = (name[index] == 'Z') ? 'A' : (name[index] + 1);
     a6e:	89 2d       	mov	r24, r9
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	e1 e0       	ldi	r30, 0x01	; 1
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	ec 0f       	add	r30, r28
     a78:	fd 1f       	adc	r31, r29
     a7a:	e8 0f       	add	r30, r24
     a7c:	f9 1f       	adc	r31, r25
     a7e:	20 81       	ld	r18, Z
     a80:	2a 35       	cpi	r18, 0x5A	; 90
     a82:	11 f0       	breq	.+4      	; 0xa88 <interface_username+0xe2>
     a84:	2f 5f       	subi	r18, 0xFF	; 255
     a86:	01 c0       	rjmp	.+2      	; 0xa8a <interface_username+0xe4>
     a88:	21 e4       	ldi	r18, 0x41	; 65
     a8a:	e1 e0       	ldi	r30, 0x01	; 1
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	ec 0f       	add	r30, r28
     a90:	fd 1f       	adc	r31, r29
     a92:	e8 0f       	add	r30, r24
     a94:	f9 1f       	adc	r31, r25
     a96:	20 83       	st	Z, r18
     a98:	17 c0       	rjmp	.+46     	; 0xac8 <interface_username+0x122>
		}
		else if (change_y == Down)
     a9a:	03 30       	cpi	r16, 0x03	; 3
     a9c:	a9 f4       	brne	.+42     	; 0xac8 <interface_username+0x122>
		{
			name[index] = (name[index] == 'A') ? 'Z' : (name[index] - 1);
     a9e:	89 2d       	mov	r24, r9
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	e1 e0       	ldi	r30, 0x01	; 1
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	ec 0f       	add	r30, r28
     aa8:	fd 1f       	adc	r31, r29
     aaa:	e8 0f       	add	r30, r24
     aac:	f9 1f       	adc	r31, r25
     aae:	20 81       	ld	r18, Z
     ab0:	21 34       	cpi	r18, 0x41	; 65
     ab2:	11 f0       	breq	.+4      	; 0xab8 <interface_username+0x112>
     ab4:	21 50       	subi	r18, 0x01	; 1
     ab6:	01 c0       	rjmp	.+2      	; 0xaba <interface_username+0x114>
     ab8:	2a e5       	ldi	r18, 0x5A	; 90
     aba:	e1 e0       	ldi	r30, 0x01	; 1
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	ec 0f       	add	r30, r28
     ac0:	fd 1f       	adc	r31, r29
     ac2:	e8 0f       	add	r30, r24
     ac4:	f9 1f       	adc	r31, r25
     ac6:	20 83       	st	Z, r18
		}
		
		set_position(10, 4);
     ac8:	64 e0       	ldi	r22, 0x04	; 4
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	8a e0       	ldi	r24, 0x0A	; 10
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
		for (int i = 0; i < 5; i++)
     ad4:	07 2d       	mov	r16, r7
     ad6:	18 2d       	mov	r17, r8
		{
			if (i == index)
     ad8:	c9 2c       	mov	r12, r9
     ada:	d1 2c       	mov	r13, r1
			{
				print_inverted_char(name[i]);
     adc:	aa 24       	eor	r10, r10
     ade:	a3 94       	inc	r10
     ae0:	b1 2c       	mov	r11, r1
     ae2:	ac 0e       	add	r10, r28
     ae4:	bd 1e       	adc	r11, r29
     ae6:	ac 0c       	add	r10, r12
     ae8:	bd 1c       	adc	r11, r13
		}
		
		set_position(10, 4);
		for (int i = 0; i < 5; i++)
		{
			if (i == index)
     aea:	c0 16       	cp	r12, r16
     aec:	d1 06       	cpc	r13, r17
     aee:	29 f4       	brne	.+10     	; 0xafa <interface_username+0x154>
			{
				print_inverted_char(name[i]);
     af0:	f5 01       	movw	r30, r10
     af2:	80 81       	ld	r24, Z
     af4:	0e 94 e6 03 	call	0x7cc	; 0x7cc <print_inverted_char>
     af8:	09 c0       	rjmp	.+18     	; 0xb0c <interface_username+0x166>
     afa:	e1 e0       	ldi	r30, 0x01	; 1
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	ec 0f       	add	r30, r28
     b00:	fd 1f       	adc	r31, r29
     b02:	e0 0f       	add	r30, r16
     b04:	f1 1f       	adc	r31, r17
			}
			else
			{
				print_char(name[i]);
     b06:	80 81       	ld	r24, Z
     b08:	0e 94 ba 03 	call	0x774	; 0x774 <print_char>
			}
			print_char(' ');
     b0c:	80 e2       	ldi	r24, 0x20	; 32
     b0e:	0e 94 ba 03 	call	0x774	; 0x774 <print_char>
		{
			name[index] = (name[index] == 'A') ? 'Z' : (name[index] - 1);
		}
		
		set_position(10, 4);
		for (int i = 0; i < 5; i++)
     b12:	0f 5f       	subi	r16, 0xFF	; 255
     b14:	1f 4f       	sbci	r17, 0xFF	; 255
     b16:	05 30       	cpi	r16, 0x05	; 5
     b18:	11 05       	cpc	r17, r1
     b1a:	39 f7       	brne	.-50     	; 0xaea <interface_username+0x144>
				print_char(name[i]);
			}
			print_char(' ');
		}
		
		refresh_oled();
     b1c:	0e 94 a5 03 	call	0x74a	; 0x74a <refresh_oled>
		
		touch_data = read_touchpad_data();
     b20:	0e 94 97 02 	call	0x52e	; 0x52e <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
     b24:	0e 94 cd 02 	call	0x59a	; 0x59a <change_touchpad_data>
		if (change_touch_data.rightButton)
     b28:	88 23       	and	r24, r24
     b2a:	09 f4       	brne	.+2      	; 0xb2e <interface_username+0x188>
     b2c:	81 cf       	rjmp	.-254    	; 0xa30 <interface_username+0x8a>
     b2e:	de 01       	movw	r26, r28
     b30:	11 96       	adiw	r26, 0x01	; 1
     b32:	e0 e0       	ldi	r30, 0x00	; 0
     b34:	fc e1       	ldi	r31, 0x1C	; 28
		{
			for(int i=0; i<USERNAME_LENGTH;i++)
			{
				ext_ram[i] = name[i];
     b36:	8d 91       	ld	r24, X+
     b38:	81 93       	st	Z+, r24
		
		touch_data = read_touchpad_data();
		change_touch_data = change_touchpad_data(touch_data);
		if (change_touch_data.rightButton)
		{
			for(int i=0; i<USERNAME_LENGTH;i++)
     b3a:	e5 30       	cpi	r30, 0x05	; 5
     b3c:	8c e1       	ldi	r24, 0x1C	; 28
     b3e:	f8 07       	cpc	r31, r24
     b40:	d1 f7       	brne	.-12     	; 0xb36 <interface_username+0x190>
			}
			
			return State_NewGame;
		}
	}	
}
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	0f 90       	pop	r0
     b4a:	0f 90       	pop	r0
     b4c:	0f 90       	pop	r0
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	ff 90       	pop	r15
     b58:	ef 90       	pop	r14
     b5a:	df 90       	pop	r13
     b5c:	cf 90       	pop	r12
     b5e:	bf 90       	pop	r11
     b60:	af 90       	pop	r10
     b62:	9f 90       	pop	r9
     b64:	8f 90       	pop	r8
     b66:	7f 90       	pop	r7
     b68:	6f 90       	pop	r6
     b6a:	08 95       	ret

00000b6c <interface_new_game>:
* \brief Function call during the set new game phase
*

****************************************************************************/
InterfaceState interface_new_game()
{
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
	JoystickDirection change_y, change_x;
	ChangeTouchpadData change_touch_data;
	TouchpadData touch_data;
	char scr_position = 0;
	
	position = read_joystick_position();
     b74:	0e 94 5e 02 	call	0x4bc	; 0x4bc <read_joystick_position>
	direction = read_joystick_direction(position);
     b78:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <read_joystick_direction>
     b7c:	c8 2f       	mov	r28, r24
	change_y = change_yaxis(direction);
     b7e:	0e 94 bc 02 	call	0x578	; 0x578 <change_yaxis>
	change_x = change_xaxis(direction);
     b82:	8c 2f       	mov	r24, r28
     b84:	0e 94 ad 02 	call	0x55a	; 0x55a <change_xaxis>
	
	set_position(13, 0);
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	8d e0       	ldi	r24, 0x0D	; 13
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
	print_string("New game");
     b94:	8e e2       	ldi	r24, 0x2E	; 46
     b96:	91 e0       	ldi	r25, 0x01	; 1
     b98:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
	revert_colour_line(0);
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <revert_colour_line>
	set_position(3, 2);
     ba2:	62 e0       	ldi	r22, 0x02	; 2
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	83 e0       	ldi	r24, 0x03	; 3
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
	print_string("Tutorial");
     bae:	87 e3       	ldi	r24, 0x37	; 55
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
	set_position(3, 3);
     bb6:	63 e0       	ldi	r22, 0x03	; 3
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
	print_string("Easy");
     bc2:	80 e4       	ldi	r24, 0x40	; 64
     bc4:	91 e0       	ldi	r25, 0x01	; 1
     bc6:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
	set_position(3, 4);
     bca:	64 e0       	ldi	r22, 0x04	; 4
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	83 e0       	ldi	r24, 0x03	; 3
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
	print_string("Normal");
     bd6:	85 e4       	ldi	r24, 0x45	; 69
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
	set_position(3, 5);
     bde:	65 e0       	ldi	r22, 0x05	; 5
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	83 e0       	ldi	r24, 0x03	; 3
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
	print_string("Hard");
     bea:	8c e4       	ldi	r24, 0x4C	; 76
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
	set_position(3, 6);
     bf2:	66 e0       	ldi	r22, 0x06	; 6
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	83 e0       	ldi	r24, 0x03	; 3
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
	print_string("Insane");
     bfe:	81 e5       	ldi	r24, 0x51	; 81
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
	JoystickPosition position;
	JoystickDirection direction;
	JoystickDirection change_y, change_x;
	ChangeTouchpadData change_touch_data;
	TouchpadData touch_data;
	char scr_position = 0;
     c06:	c0 e0       	ldi	r28, 0x00	; 0
			print_char(' ');
			scr_position--;
		}
		else if (change_y == Down)
		{
			set_position(1, (scr_position % 5) + 2);
     c08:	dd ec       	ldi	r29, 0xCD	; 205
	set_position(3, 6);
	print_string("Insane");
	
	while(1)
	{
		position = read_joystick_position();
     c0a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <read_joystick_position>
		direction = read_joystick_direction(position);
     c0e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <read_joystick_direction>
     c12:	18 2f       	mov	r17, r24
		change_y = change_yaxis(direction);
     c14:	0e 94 bc 02 	call	0x578	; 0x578 <change_yaxis>
     c18:	08 2f       	mov	r16, r24
		change_x = change_xaxis(direction);
     c1a:	81 2f       	mov	r24, r17
     c1c:	0e 94 ad 02 	call	0x55a	; 0x55a <change_xaxis>
		
		if (change_x == Right)
     c20:	81 30       	cpi	r24, 0x01	; 1
     c22:	09 f4       	brne	.+2      	; 0xc26 <interface_new_game+0xba>
     c24:	78 c0       	rjmp	.+240    	; 0xd16 <interface_new_game+0x1aa>
		{
			return State_Options;
		}
		else if (change_x == Left)
     c26:	88 23       	and	r24, r24
     c28:	09 f4       	brne	.+2      	; 0xc2c <interface_new_game+0xc0>
     c2a:	77 c0       	rjmp	.+238    	; 0xd1a <interface_new_game+0x1ae>
		{
			return State_HighScores;
		}
		
		if (change_y == Up)
     c2c:	02 30       	cpi	r16, 0x02	; 2
     c2e:	b9 f4       	brne	.+46     	; 0xc5e <interface_new_game+0xf2>
		{
			set_position(1, (scr_position % 5) + 2);
     c30:	cd 9f       	mul	r28, r29
     c32:	81 2d       	mov	r24, r1
     c34:	11 24       	eor	r1, r1
     c36:	86 95       	lsr	r24
     c38:	86 95       	lsr	r24
     c3a:	98 2f       	mov	r25, r24
     c3c:	99 0f       	add	r25, r25
     c3e:	99 0f       	add	r25, r25
     c40:	89 0f       	add	r24, r25
     c42:	6c 2f       	mov	r22, r28
     c44:	68 1b       	sub	r22, r24
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	6e 5f       	subi	r22, 0xFE	; 254
     c4a:	7f 4f       	sbci	r23, 0xFF	; 255
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
			print_char(' ');
     c54:	80 e2       	ldi	r24, 0x20	; 32
     c56:	0e 94 ba 03 	call	0x774	; 0x774 <print_char>
			scr_position--;
     c5a:	c1 50       	subi	r28, 0x01	; 1
     c5c:	18 c0       	rjmp	.+48     	; 0xc8e <interface_new_game+0x122>
		}
		else if (change_y == Down)
     c5e:	03 30       	cpi	r16, 0x03	; 3
     c60:	b1 f4       	brne	.+44     	; 0xc8e <interface_new_game+0x122>
		{
			set_position(1, (scr_position % 5) + 2);
     c62:	cd 9f       	mul	r28, r29
     c64:	81 2d       	mov	r24, r1
     c66:	11 24       	eor	r1, r1
     c68:	86 95       	lsr	r24
     c6a:	86 95       	lsr	r24
     c6c:	98 2f       	mov	r25, r24
     c6e:	99 0f       	add	r25, r25
     c70:	99 0f       	add	r25, r25
     c72:	89 0f       	add	r24, r25
     c74:	6c 2f       	mov	r22, r28
     c76:	68 1b       	sub	r22, r24
     c78:	70 e0       	ldi	r23, 0x00	; 0
     c7a:	6e 5f       	subi	r22, 0xFE	; 254
     c7c:	7f 4f       	sbci	r23, 0xFF	; 255
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
			print_char(' ');
     c86:	80 e2       	ldi	r24, 0x20	; 32
     c88:	0e 94 ba 03 	call	0x774	; 0x774 <print_char>
			scr_position++;
     c8c:	cf 5f       	subi	r28, 0xFF	; 255
		}
		
		set_position(1, (scr_position % 5) + 2);
     c8e:	cd 9f       	mul	r28, r29
     c90:	81 2d       	mov	r24, r1
     c92:	11 24       	eor	r1, r1
     c94:	86 95       	lsr	r24
     c96:	86 95       	lsr	r24
     c98:	98 2f       	mov	r25, r24
     c9a:	99 0f       	add	r25, r25
     c9c:	99 0f       	add	r25, r25
     c9e:	89 0f       	add	r24, r25
     ca0:	6c 2f       	mov	r22, r28
     ca2:	68 1b       	sub	r22, r24
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	6e 5f       	subi	r22, 0xFE	; 254
     ca8:	7f 4f       	sbci	r23, 0xFF	; 255
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
		print_char('#');
     cb2:	83 e2       	ldi	r24, 0x23	; 35
     cb4:	0e 94 ba 03 	call	0x774	; 0x774 <print_char>
		
		touch_data = read_touchpad_data();
     cb8:	0e 94 97 02 	call	0x52e	; 0x52e <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
     cbc:	0e 94 cd 02 	call	0x59a	; 0x59a <change_touchpad_data>
		if (change_touch_data.rightButton)
     cc0:	88 23       	and	r24, r24
     cc2:	31 f1       	breq	.+76     	; 0xd10 <interface_new_game+0x1a4>
		{
			switch(scr_position)
     cc4:	c2 30       	cpi	r28, 0x02	; 2
     cc6:	a9 f0       	breq	.+42     	; 0xcf2 <interface_new_game+0x186>
     cc8:	28 f4       	brcc	.+10     	; 0xcd4 <interface_new_game+0x168>
     cca:	cc 23       	and	r28, r28
     ccc:	41 f0       	breq	.+16     	; 0xcde <interface_new_game+0x172>
     cce:	c1 30       	cpi	r28, 0x01	; 1
     cd0:	59 f0       	breq	.+22     	; 0xce8 <interface_new_game+0x17c>
     cd2:	1e c0       	rjmp	.+60     	; 0xd10 <interface_new_game+0x1a4>
     cd4:	c3 30       	cpi	r28, 0x03	; 3
     cd6:	91 f0       	breq	.+36     	; 0xcfc <interface_new_game+0x190>
     cd8:	c4 30       	cpi	r28, 0x04	; 4
     cda:	a9 f0       	breq	.+42     	; 0xd06 <interface_new_game+0x19a>
     cdc:	19 c0       	rjmp	.+50     	; 0xd10 <interface_new_game+0x1a4>
			{
				case 0:
					send_game_mode(Tutorial);
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
					return State_Tutorial;
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	1a c0       	rjmp	.+52     	; 0xd1c <interface_new_game+0x1b0>
				case 1:
					send_game_mode(Easy);
     ce8:	82 e0       	ldi	r24, 0x02	; 2
     cea:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
					return State_Easy;
     cee:	83 e0       	ldi	r24, 0x03	; 3
     cf0:	15 c0       	rjmp	.+42     	; 0xd1c <interface_new_game+0x1b0>
				case 2:
					send_game_mode(Normal);
     cf2:	83 e0       	ldi	r24, 0x03	; 3
     cf4:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
					return State_Normal;
     cf8:	84 e0       	ldi	r24, 0x04	; 4
     cfa:	10 c0       	rjmp	.+32     	; 0xd1c <interface_new_game+0x1b0>
				case 3:
					send_game_mode(Hard);
     cfc:	84 e0       	ldi	r24, 0x04	; 4
     cfe:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
					return State_Hard;
     d02:	85 e0       	ldi	r24, 0x05	; 5
     d04:	0b c0       	rjmp	.+22     	; 0xd1c <interface_new_game+0x1b0>
				case 4:
					send_game_mode(Insane);
     d06:	85 e0       	ldi	r24, 0x05	; 5
     d08:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
					return State_Insane;
     d0c:	86 e0       	ldi	r24, 0x06	; 6
     d0e:	06 c0       	rjmp	.+12     	; 0xd1c <interface_new_game+0x1b0>
			}
		}
		refresh_oled();
     d10:	0e 94 a5 03 	call	0x74a	; 0x74a <refresh_oled>
	}
     d14:	7a cf       	rjmp	.-268    	; 0xc0a <interface_new_game+0x9e>
		change_y = change_yaxis(direction);
		change_x = change_xaxis(direction);
		
		if (change_x == Right)
		{
			return State_Options;
     d16:	87 e0       	ldi	r24, 0x07	; 7
     d18:	01 c0       	rjmp	.+2      	; 0xd1c <interface_new_game+0x1b0>
		}
		else if (change_x == Left)
		{
			return State_HighScores;
     d1a:	88 e0       	ldi	r24, 0x08	; 8
					return State_Insane;
			}
		}
		refresh_oled();
	}
}
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	08 95       	ret

00000d26 <interface_high_scores>:
	JoystickDirection direction;
	JoystickDirection change_x;
	char scr_position = 0;
	volatile char *high_scores = (char *) SRAM_HIGH_SCORES_ADDR;
	
	position = read_joystick_position();
     d26:	0e 94 5e 02 	call	0x4bc	; 0x4bc <read_joystick_position>
	direction = read_joystick_direction(position);
     d2a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <read_joystick_direction>
	change_x = change_xaxis(direction);
     d2e:	0e 94 ad 02 	call	0x55a	; 0x55a <change_xaxis>
	
	set_position(9,0);
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	89 e0       	ldi	r24, 0x09	; 9
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
	print_string("High Scores");
     d3e:	88 e5       	ldi	r24, 0x58	; 88
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
	revert_colour_line(0);
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <revert_colour_line>
		{
			print_char(high_scores[j + k]);
		}
	}*/
	
	refresh_oled();
     d4c:	0e 94 a5 03 	call	0x74a	; 0x74a <refresh_oled>
	
	while(1)
	{
		position = read_joystick_position();
     d50:	0e 94 5e 02 	call	0x4bc	; 0x4bc <read_joystick_position>
		direction = read_joystick_direction(position);
     d54:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <read_joystick_direction>
		change_x = change_xaxis(direction);
     d58:	0e 94 ad 02 	call	0x55a	; 0x55a <change_xaxis>
		
		if (change_x == Right)
     d5c:	81 30       	cpi	r24, 0x01	; 1
     d5e:	19 f0       	breq	.+6      	; 0xd66 <interface_high_scores+0x40>
		{
			return State_NewGame;
		}
		else if (change_x == Left)
     d60:	81 11       	cpse	r24, r1
     d62:	f6 cf       	rjmp	.-20     	; 0xd50 <interface_high_scores+0x2a>
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <interface_high_scores+0x44>
		direction = read_joystick_direction(position);
		change_x = change_xaxis(direction);
		
		if (change_x == Right)
		{
			return State_NewGame;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	08 95       	ret
		}
		else if (change_x == Left)
		{
			return State_Options;
     d6a:	87 e0       	ldi	r24, 0x07	; 7
		}
	}
		
}
     d6c:	08 95       	ret

00000d6e <interface_options>:
* \brief Function call during the options phase
*

****************************************************************************/
InterfaceState interface_options( )
{
     d6e:	0f 93       	push	r16
     d70:	1f 93       	push	r17
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
	JoystickDirection change_y, change_x;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	char scr_position = 0;
	
	position = read_joystick_position();
     d76:	0e 94 5e 02 	call	0x4bc	; 0x4bc <read_joystick_position>
	direction = read_joystick_direction(position);
     d7a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <read_joystick_direction>
     d7e:	c8 2f       	mov	r28, r24
	change_y = change_yaxis(direction);
     d80:	0e 94 bc 02 	call	0x578	; 0x578 <change_yaxis>
	change_x = change_xaxis(direction);
     d84:	8c 2f       	mov	r24, r28
     d86:	0e 94 ad 02 	call	0x55a	; 0x55a <change_xaxis>

	set_position(12,0);
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	8c e0       	ldi	r24, 0x0C	; 12
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
	print_string("Options");
     d96:	84 e6       	ldi	r24, 0x64	; 100
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
	revert_colour_line(0);
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <revert_colour_line>
	set_position(3,3);
     da4:	63 e0       	ldi	r22, 0x03	; 3
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
	print_string("Mode");
     db0:	8c e6       	ldi	r24, 0x6C	; 108
     db2:	91 e0       	ldi	r25, 0x01	; 1
     db4:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
	set_position(3,4);
     db8:	64 e0       	ldi	r22, 0x04	; 4
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	83 e0       	ldi	r24, 0x03	; 3
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
	print_string("Sound");
     dc4:	81 e7       	ldi	r24, 0x71	; 113
     dc6:	91 e0       	ldi	r25, 0x01	; 1
     dc8:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
	set_position(3,5);
     dcc:	65 e0       	ldi	r22, 0x05	; 5
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	83 e0       	ldi	r24, 0x03	; 3
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
	print_string("Change Username");
     dd8:	87 e7       	ldi	r24, 0x77	; 119
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
	JoystickPosition position;
	JoystickDirection direction;
	JoystickDirection change_y, change_x;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	char scr_position = 0;
     de0:	c0 e0       	ldi	r28, 0x00	; 0
			print_char(' ');
			scr_position--;
		}
		else if (change_y == Down)
		{
			set_position(1, (scr_position % 3) + 3);
     de2:	db ea       	ldi	r29, 0xAB	; 171
	set_position(3,5);
	print_string("Change Username");
	
	while(1)
	{
		position = read_joystick_position();
     de4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <read_joystick_position>
		direction = read_joystick_direction(position);
     de8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <read_joystick_direction>
     dec:	18 2f       	mov	r17, r24
		change_y = change_yaxis(direction);
     dee:	0e 94 bc 02 	call	0x578	; 0x578 <change_yaxis>
     df2:	08 2f       	mov	r16, r24
		change_x = change_xaxis(direction);
     df4:	81 2f       	mov	r24, r17
     df6:	0e 94 ad 02 	call	0x55a	; 0x55a <change_xaxis>
		
		if (change_x == Right)
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	09 f4       	brne	.+2      	; 0xe00 <interface_options+0x92>
     dfe:	56 c0       	rjmp	.+172    	; 0xeac <interface_options+0x13e>
		{
			return State_HighScores;
		}
		else if (change_x == Left)
     e00:	88 23       	and	r24, r24
     e02:	09 f4       	brne	.+2      	; 0xe06 <interface_options+0x98>
     e04:	55 c0       	rjmp	.+170    	; 0xeb0 <interface_options+0x142>
		{
			return State_NewGame;
		}
		
		if (change_y == Up)
     e06:	02 30       	cpi	r16, 0x02	; 2
     e08:	a9 f4       	brne	.+42     	; 0xe34 <interface_options+0xc6>
		{
			set_position(1, (scr_position % 3) + 3);
     e0a:	cd 9f       	mul	r28, r29
     e0c:	81 2d       	mov	r24, r1
     e0e:	11 24       	eor	r1, r1
     e10:	86 95       	lsr	r24
     e12:	98 2f       	mov	r25, r24
     e14:	99 0f       	add	r25, r25
     e16:	89 0f       	add	r24, r25
     e18:	6c 2f       	mov	r22, r28
     e1a:	68 1b       	sub	r22, r24
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	6d 5f       	subi	r22, 0xFD	; 253
     e20:	7f 4f       	sbci	r23, 0xFF	; 255
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
			print_char(' ');
     e2a:	80 e2       	ldi	r24, 0x20	; 32
     e2c:	0e 94 ba 03 	call	0x774	; 0x774 <print_char>
			scr_position--;
     e30:	c1 50       	subi	r28, 0x01	; 1
     e32:	16 c0       	rjmp	.+44     	; 0xe60 <interface_options+0xf2>
		}
		else if (change_y == Down)
     e34:	03 30       	cpi	r16, 0x03	; 3
     e36:	a1 f4       	brne	.+40     	; 0xe60 <interface_options+0xf2>
		{
			set_position(1, (scr_position % 3) + 3);
     e38:	cd 9f       	mul	r28, r29
     e3a:	81 2d       	mov	r24, r1
     e3c:	11 24       	eor	r1, r1
     e3e:	86 95       	lsr	r24
     e40:	98 2f       	mov	r25, r24
     e42:	99 0f       	add	r25, r25
     e44:	89 0f       	add	r24, r25
     e46:	6c 2f       	mov	r22, r28
     e48:	68 1b       	sub	r22, r24
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	6d 5f       	subi	r22, 0xFD	; 253
     e4e:	7f 4f       	sbci	r23, 0xFF	; 255
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
			print_char(' ');
     e58:	80 e2       	ldi	r24, 0x20	; 32
     e5a:	0e 94 ba 03 	call	0x774	; 0x774 <print_char>
			scr_position++;
     e5e:	cf 5f       	subi	r28, 0xFF	; 255
		}
		
		set_position(1, (scr_position % 3) + 3);
     e60:	cd 9f       	mul	r28, r29
     e62:	81 2d       	mov	r24, r1
     e64:	11 24       	eor	r1, r1
     e66:	86 95       	lsr	r24
     e68:	98 2f       	mov	r25, r24
     e6a:	99 0f       	add	r25, r25
     e6c:	89 0f       	add	r24, r25
     e6e:	6c 2f       	mov	r22, r28
     e70:	68 1b       	sub	r22, r24
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	6d 5f       	subi	r22, 0xFD	; 253
     e76:	7f 4f       	sbci	r23, 0xFF	; 255
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
		print_char('#');
     e80:	83 e2       	ldi	r24, 0x23	; 35
     e82:	0e 94 ba 03 	call	0x774	; 0x774 <print_char>
		
		touch_data = read_touchpad_data();
     e86:	0e 94 97 02 	call	0x52e	; 0x52e <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
     e8a:	0e 94 cd 02 	call	0x59a	; 0x59a <change_touchpad_data>
		if (change_touch_data.rightButton)
     e8e:	88 23       	and	r24, r24
     e90:	51 f0       	breq	.+20     	; 0xea6 <interface_options+0x138>
		{
			switch(scr_position)
     e92:	c1 30       	cpi	r28, 0x01	; 1
     e94:	79 f0       	breq	.+30     	; 0xeb4 <interface_options+0x146>
     e96:	18 f0       	brcs	.+6      	; 0xe9e <interface_options+0x130>
     e98:	c2 30       	cpi	r28, 0x02	; 2
     e9a:	19 f0       	breq	.+6      	; 0xea2 <interface_options+0x134>
     e9c:	04 c0       	rjmp	.+8      	; 0xea6 <interface_options+0x138>
			{
				case 0:
					return State_Mode;
     e9e:	8a e0       	ldi	r24, 0x0A	; 10
     ea0:	0a c0       	rjmp	.+20     	; 0xeb6 <interface_options+0x148>
				case 1:
					return State_Sound;
				case 2:
					return State_Username;
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	08 c0       	rjmp	.+16     	; 0xeb6 <interface_options+0x148>
			}
		}
		refresh_oled();
     ea6:	0e 94 a5 03 	call	0x74a	; 0x74a <refresh_oled>
	}
     eaa:	9c cf       	rjmp	.-200    	; 0xde4 <interface_options+0x76>
		change_y = change_yaxis(direction);
		change_x = change_xaxis(direction);
		
		if (change_x == Right)
		{
			return State_HighScores;
     eac:	88 e0       	ldi	r24, 0x08	; 8
     eae:	03 c0       	rjmp	.+6      	; 0xeb6 <interface_options+0x148>
		}
		else if (change_x == Left)
		{
			return State_NewGame;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	01 c0       	rjmp	.+2      	; 0xeb6 <interface_options+0x148>
			switch(scr_position)
			{
				case 0:
					return State_Mode;
				case 1:
					return State_Sound;
     eb4:	89 e0       	ldi	r24, 0x09	; 9
					return State_Username;
			}
		}
		refresh_oled();
	}
}
     eb6:	df 91       	pop	r29
     eb8:	cf 91       	pop	r28
     eba:	1f 91       	pop	r17
     ebc:	0f 91       	pop	r16
     ebe:	08 95       	ret

00000ec0 <interface_mode>:
* \brief Function call during the set mode phase
*

****************************************************************************/
InterfaceState interface_mode()
{
     ec0:	df 92       	push	r13
     ec2:	ef 92       	push	r14
     ec4:	ff 92       	push	r15
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
	JoystickDirection change_y;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	char scr_position = 0;
	
	position = read_joystick_position();
     ece:	0e 94 5e 02 	call	0x4bc	; 0x4bc <read_joystick_position>
	direction = read_joystick_direction(position);
     ed2:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <read_joystick_direction>
	change_y = change_yaxis(direction);
     ed6:	0e 94 bc 02 	call	0x578	; 0x578 <change_yaxis>

	set_position(14,0);
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	8e e0       	ldi	r24, 0x0E	; 14
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
	print_string("Mode");
     ee6:	8c e6       	ldi	r24, 0x6C	; 108
     ee8:	91 e0       	ldi	r25, 0x01	; 1
     eea:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
	revert_colour_line(0);
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <revert_colour_line>
	set_position(3,3);
     ef4:	63 e0       	ldi	r22, 0x03	; 3
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	83 e0       	ldi	r24, 0x03	; 3
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
	print_string("Reverse");
     f00:	87 e8       	ldi	r24, 0x87	; 135
     f02:	91 e0       	ldi	r25, 0x01	; 1
     f04:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
	set_position(3,5);
     f08:	65 e0       	ldi	r22, 0x05	; 5
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	83 e0       	ldi	r24, 0x03	; 3
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
	print_string("Normal");
     f14:	85 e4       	ldi	r24, 0x45	; 69
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
	
	
	set_position(1, (scr_position % 2) * 2 + 3);
     f1c:	63 e0       	ldi	r22, 0x03	; 3
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
	print_char('#');
     f28:	83 e2       	ldi	r24, 0x23	; 35
     f2a:	0e 94 ba 03 	call	0x774	; 0x774 <print_char>
	JoystickPosition position;
	JoystickDirection direction;
	JoystickDirection change_y;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	char scr_position = 0;
     f2e:	d1 2c       	mov	r13, r1
	set_position(1, (scr_position % 2) * 2 + 3);
	print_char('#');
	
	while(1)
	{
		position = read_joystick_position();
     f30:	0e 94 5e 02 	call	0x4bc	; 0x4bc <read_joystick_position>
		direction = read_joystick_direction(position);
     f34:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <read_joystick_direction>
		change_y = change_yaxis(direction);
     f38:	0e 94 bc 02 	call	0x578	; 0x578 <change_yaxis>
		
		if (change_y == Up)
     f3c:	82 30       	cpi	r24, 0x02	; 2
     f3e:	89 f4       	brne	.+34     	; 0xf62 <interface_mode+0xa2>
		{
			set_position(1, (scr_position % 2) * 2 + 3);
     f40:	0d 2d       	mov	r16, r13
     f42:	01 70       	andi	r16, 0x01	; 1
     f44:	10 e0       	ldi	r17, 0x00	; 0
     f46:	b8 01       	movw	r22, r16
     f48:	66 0f       	add	r22, r22
     f4a:	77 1f       	adc	r23, r23
     f4c:	6d 5f       	subi	r22, 0xFD	; 253
     f4e:	7f 4f       	sbci	r23, 0xFF	; 255
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
			print_char(' ');
     f58:	80 e2       	ldi	r24, 0x20	; 32
     f5a:	0e 94 ba 03 	call	0x774	; 0x774 <print_char>
			scr_position--;
     f5e:	da 94       	dec	r13
     f60:	13 c0       	rjmp	.+38     	; 0xf88 <interface_mode+0xc8>
		}
		else if (change_y == Down)
     f62:	83 30       	cpi	r24, 0x03	; 3
     f64:	89 f4       	brne	.+34     	; 0xf88 <interface_mode+0xc8>
		{
			set_position(1, (scr_position % 2) * 2 + 3);
     f66:	d0 fa       	bst	r13, 0
     f68:	ee 24       	eor	r14, r14
     f6a:	e0 f8       	bld	r14, 0
     f6c:	f1 2c       	mov	r15, r1
     f6e:	b7 01       	movw	r22, r14
     f70:	66 0f       	add	r22, r22
     f72:	77 1f       	adc	r23, r23
     f74:	6d 5f       	subi	r22, 0xFD	; 253
     f76:	7f 4f       	sbci	r23, 0xFF	; 255
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
			print_char(' ');
     f80:	80 e2       	ldi	r24, 0x20	; 32
     f82:	0e 94 ba 03 	call	0x774	; 0x774 <print_char>
			scr_position++;
     f86:	d3 94       	inc	r13
		}
		
		set_position(1, (scr_position % 2) * 2 + 3);
     f88:	8d 2d       	mov	r24, r13
     f8a:	81 70       	andi	r24, 0x01	; 1
     f8c:	c8 2f       	mov	r28, r24
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	d8 2f       	mov	r29, r24
     f92:	be 01       	movw	r22, r28
     f94:	66 0f       	add	r22, r22
     f96:	77 1f       	adc	r23, r23
     f98:	6d 5f       	subi	r22, 0xFD	; 253
     f9a:	7f 4f       	sbci	r23, 0xFF	; 255
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
		print_char('#');
     fa4:	83 e2       	ldi	r24, 0x23	; 35
     fa6:	0e 94 ba 03 	call	0x774	; 0x774 <print_char>
		
		touch_data = read_touchpad_data();
     faa:	0e 94 97 02 	call	0x52e	; 0x52e <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
     fae:	0e 94 cd 02 	call	0x59a	; 0x59a <change_touchpad_data>
		if (change_touch_data.rightButton)
     fb2:	88 23       	and	r24, r24
     fb4:	51 f0       	breq	.+20     	; 0xfca <interface_mode+0x10a>
		{
			switch(scr_position)
     fb6:	d1 10       	cpse	r13, r1
     fb8:	0b c0       	rjmp	.+22     	; 0xfd0 <interface_mode+0x110>
			{
				case 0:
					send_game_mode(Normal_settings);
     fba:	86 e0       	ldi	r24, 0x06	; 6
     fbc:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
					printf("Normal\n");
     fc0:	85 e4       	ldi	r24, 0x45	; 69
     fc2:	91 e0       	ldi	r25, 0x01	; 1
     fc4:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <puts>
					break;
     fc8:	03 c0       	rjmp	.+6      	; 0xfd0 <interface_mode+0x110>
					//printf("Reverse\n");
					break;
			}
			return State_Options;
		}
		refresh_oled();
     fca:	0e 94 a5 03 	call	0x74a	; 0x74a <refresh_oled>
	}
     fce:	b0 cf       	rjmp	.-160    	; 0xf30 <interface_mode+0x70>
}
     fd0:	87 e0       	ldi	r24, 0x07	; 7
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	1f 91       	pop	r17
     fd8:	0f 91       	pop	r16
     fda:	ff 90       	pop	r15
     fdc:	ef 90       	pop	r14
     fde:	df 90       	pop	r13
     fe0:	08 95       	ret

00000fe2 <interface_sound>:
* \brief Function call during the set sound phase
*

****************************************************************************/
InterfaceState interface_sound()
{
     fe2:	df 92       	push	r13
     fe4:	ef 92       	push	r14
     fe6:	ff 92       	push	r15
     fe8:	0f 93       	push	r16
     fea:	1f 93       	push	r17
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
	JoystickDirection change_y;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	char scr_position = 0;
	
	position = read_joystick_position();
     ff0:	0e 94 5e 02 	call	0x4bc	; 0x4bc <read_joystick_position>
	direction = read_joystick_direction(position);
     ff4:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <read_joystick_direction>
	change_y = change_yaxis(direction);
     ff8:	0e 94 bc 02 	call	0x578	; 0x578 <change_yaxis>

	set_position(14,0);
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	8e e0       	ldi	r24, 0x0E	; 14
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
	print_string("Sound");
    1008:	81 e7       	ldi	r24, 0x71	; 113
    100a:	91 e0       	ldi	r25, 0x01	; 1
    100c:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
	revert_colour_line(0);
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <revert_colour_line>
	set_position(3,3);
    1016:	63 e0       	ldi	r22, 0x03	; 3
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	83 e0       	ldi	r24, 0x03	; 3
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
	print_string("On");
    1022:	8f e8       	ldi	r24, 0x8F	; 143
    1024:	91 e0       	ldi	r25, 0x01	; 1
    1026:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
	set_position(3,5);
    102a:	65 e0       	ldi	r22, 0x05	; 5
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	83 e0       	ldi	r24, 0x03	; 3
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
	print_string("Off");
    1036:	82 e9       	ldi	r24, 0x92	; 146
    1038:	91 e0       	ldi	r25, 0x01	; 1
    103a:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
	JoystickPosition position;
	JoystickDirection direction;
	JoystickDirection change_y;
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	char scr_position = 0;
    103e:	d1 2c       	mov	r13, r1
	set_position(3,5);
	print_string("Off");
	
	while(1)
	{
		position = read_joystick_position();
    1040:	0e 94 5e 02 	call	0x4bc	; 0x4bc <read_joystick_position>
		direction = read_joystick_direction(position);
    1044:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <read_joystick_direction>
		change_y = change_yaxis(direction);
    1048:	0e 94 bc 02 	call	0x578	; 0x578 <change_yaxis>
		
		if (change_y == Up)
    104c:	82 30       	cpi	r24, 0x02	; 2
    104e:	89 f4       	brne	.+34     	; 0x1072 <interface_sound+0x90>
		{
			set_position(1, (scr_position % 2) * 2 + 3);
    1050:	0d 2d       	mov	r16, r13
    1052:	01 70       	andi	r16, 0x01	; 1
    1054:	10 e0       	ldi	r17, 0x00	; 0
    1056:	b8 01       	movw	r22, r16
    1058:	66 0f       	add	r22, r22
    105a:	77 1f       	adc	r23, r23
    105c:	6d 5f       	subi	r22, 0xFD	; 253
    105e:	7f 4f       	sbci	r23, 0xFF	; 255
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
			print_char(' ');
    1068:	80 e2       	ldi	r24, 0x20	; 32
    106a:	0e 94 ba 03 	call	0x774	; 0x774 <print_char>
			scr_position--;
    106e:	da 94       	dec	r13
    1070:	13 c0       	rjmp	.+38     	; 0x1098 <interface_sound+0xb6>
		}
		else if (change_y == Down)
    1072:	83 30       	cpi	r24, 0x03	; 3
    1074:	89 f4       	brne	.+34     	; 0x1098 <interface_sound+0xb6>
		{
			set_position(1, (scr_position % 2) * 2 + 3);
    1076:	d0 fa       	bst	r13, 0
    1078:	ee 24       	eor	r14, r14
    107a:	e0 f8       	bld	r14, 0
    107c:	f1 2c       	mov	r15, r1
    107e:	b7 01       	movw	r22, r14
    1080:	66 0f       	add	r22, r22
    1082:	77 1f       	adc	r23, r23
    1084:	6d 5f       	subi	r22, 0xFD	; 253
    1086:	7f 4f       	sbci	r23, 0xFF	; 255
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
			print_char(' ');
    1090:	80 e2       	ldi	r24, 0x20	; 32
    1092:	0e 94 ba 03 	call	0x774	; 0x774 <print_char>
			scr_position++;
    1096:	d3 94       	inc	r13
		}
		
		set_position(1, (scr_position % 2) * 2 + 3);
    1098:	8d 2d       	mov	r24, r13
    109a:	81 70       	andi	r24, 0x01	; 1
    109c:	c8 2f       	mov	r28, r24
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	d8 2f       	mov	r29, r24
    10a2:	be 01       	movw	r22, r28
    10a4:	66 0f       	add	r22, r22
    10a6:	77 1f       	adc	r23, r23
    10a8:	6d 5f       	subi	r22, 0xFD	; 253
    10aa:	7f 4f       	sbci	r23, 0xFF	; 255
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
		print_char('#');
    10b4:	83 e2       	ldi	r24, 0x23	; 35
    10b6:	0e 94 ba 03 	call	0x774	; 0x774 <print_char>
		
		touch_data = read_touchpad_data();
    10ba:	0e 94 97 02 	call	0x52e	; 0x52e <read_touchpad_data>
		change_touch_data = change_touchpad_data(touch_data);
    10be:	0e 94 cd 02 	call	0x59a	; 0x59a <change_touchpad_data>
		if (change_touch_data.rightButton)
    10c2:	88 23       	and	r24, r24
    10c4:	81 f0       	breq	.+32     	; 0x10e6 <interface_sound+0x104>
		{
			switch(scr_position)
    10c6:	dd 20       	and	r13, r13
    10c8:	21 f0       	breq	.+8      	; 0x10d2 <interface_sound+0xf0>
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	d8 16       	cp	r13, r24
    10ce:	31 f0       	breq	.+12     	; 0x10dc <interface_sound+0xfa>
    10d0:	0d c0       	rjmp	.+26     	; 0x10ec <interface_sound+0x10a>
			{
				case 0:
				printf("ON\n");
    10d2:	86 e9       	ldi	r24, 0x96	; 150
    10d4:	91 e0       	ldi	r25, 0x01	; 1
    10d6:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <puts>
				break;
    10da:	08 c0       	rjmp	.+16     	; 0x10ec <interface_sound+0x10a>
				case 1:
				printf("OFF\n");
    10dc:	89 e9       	ldi	r24, 0x99	; 153
    10de:	91 e0       	ldi	r25, 0x01	; 1
    10e0:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <puts>
				break;
    10e4:	03 c0       	rjmp	.+6      	; 0x10ec <interface_sound+0x10a>
			}
			return State_Options;
		}
		refresh_oled();
    10e6:	0e 94 a5 03 	call	0x74a	; 0x74a <refresh_oled>
	}
    10ea:	aa cf       	rjmp	.-172    	; 0x1040 <interface_sound+0x5e>
}
    10ec:	87 e0       	ldi	r24, 0x07	; 7
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	1f 91       	pop	r17
    10f4:	0f 91       	pop	r16
    10f6:	ff 90       	pop	r15
    10f8:	ef 90       	pop	r14
    10fa:	df 90       	pop	r13
    10fc:	08 95       	ret

000010fe <interface_tutorial>:
/****************************************************************************
* \brief Function call during the set sound phase
*
****************************************************************************/
InterfaceState interface_tutorial()
{
    10fe:	ef 92       	push	r14
    1100:	ff 92       	push	r15
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
	TouchpadData touch_data;
	ChangeTouchpadData change_touch_data;
	JoystickPosition position;
	set_position(14,0);
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	8e e0       	ldi	r24, 0x0E	; 14
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
	print_string("Tutorial");
    1116:	87 e3       	ldi	r24, 0x37	; 55
    1118:	91 e0       	ldi	r25, 0x01	; 1
    111a:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
	revert_colour_line(0);
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <revert_colour_line>
	set_position(0,6);
    1124:	66 e0       	ldi	r22, 0x06	; 6
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
	print_string("Press LEFT BUTTON to continue...");
    1130:	8d e9       	ldi	r24, 0x9D	; 157
    1132:	91 e0       	ldi	r25, 0x01	; 1
    1134:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
	refresh_oled();
    1138:	0e 94 a5 03 	call	0x74a	; 0x74a <refresh_oled>
	
	set_position(0,1);
    113c:	61 e0       	ldi	r22, 0x01	; 1
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
	print_string("To move servo move joystick");
    1148:	8e eb       	ldi	r24, 0xBE	; 190
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
	refresh_oled();
    1150:	0e 94 a5 03 	call	0x74a	; 0x74a <refresh_oled>
	while(! change_touch_data.leftButton)
	{
		position = read_joystick_position();
    1154:	0e 94 5e 02 	call	0x4bc	; 0x4bc <read_joystick_position>
    1158:	ec 01       	movw	r28, r24
		touch_data = read_touchpad_data();
    115a:	0e 94 97 02 	call	0x52e	; 0x52e <read_touchpad_data>
    115e:	07 2f       	mov	r16, r23
    1160:	19 2f       	mov	r17, r25
		touch_data.rightTouchPad = 127;
		touch_data.rightButton = 0;
		send_joystick_possition(position, touch_data);
    1162:	4f e7       	ldi	r20, 0x7F	; 127
    1164:	57 2f       	mov	r21, r23
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	79 2f       	mov	r23, r25
    116a:	ce 01       	movw	r24, r28
    116c:	0e 94 1c 02 	call	0x438	; 0x438 <send_joystick_possition>
		change_touch_data = change_touchpad_data(touch_data);
    1170:	6f e7       	ldi	r22, 0x7F	; 127
    1172:	70 2f       	mov	r23, r16
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	91 2f       	mov	r25, r17
    1178:	0e 94 cd 02 	call	0x59a	; 0x59a <change_touchpad_data>
	refresh_oled();
	
	set_position(0,1);
	print_string("To move servo move joystick");
	refresh_oled();
	while(! change_touch_data.leftButton)
    117c:	99 23       	and	r25, r25
    117e:	51 f3       	breq	.-44     	; 0x1154 <interface_tutorial+0x56>
		send_joystick_possition(position, touch_data);
		change_touch_data = change_touchpad_data(touch_data);
	}
	change_touch_data.leftButton = 0;
	
	set_position(0,1);
    1180:	61 e0       	ldi	r22, 0x01	; 1
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
	print_string("To move motor touch RIGHT SLIDER");
    118c:	8a ed       	ldi	r24, 0xDA	; 218
    118e:	91 e0       	ldi	r25, 0x01	; 1
    1190:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
	refresh_oled();
    1194:	0e 94 a5 03 	call	0x74a	; 0x74a <refresh_oled>
	
	while(! change_touch_data.leftButton)
	{
		touch_data = read_touchpad_data();
    1198:	0e 94 97 02 	call	0x52e	; 0x52e <read_touchpad_data>
    119c:	e6 2e       	mov	r14, r22
    119e:	07 2f       	mov	r16, r23
    11a0:	19 2f       	mov	r17, r25
		touch_data.rightButton = 0;
		send_joystick_possition(position, touch_data);
    11a2:	46 2f       	mov	r20, r22
    11a4:	57 2f       	mov	r21, r23
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	79 2f       	mov	r23, r25
    11aa:	ce 01       	movw	r24, r28
    11ac:	0e 94 1c 02 	call	0x438	; 0x438 <send_joystick_possition>
		change_touch_data = change_touchpad_data(touch_data);
    11b0:	6e 2d       	mov	r22, r14
    11b2:	70 2f       	mov	r23, r16
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	91 2f       	mov	r25, r17
    11b8:	0e 94 cd 02 	call	0x59a	; 0x59a <change_touchpad_data>
	
	set_position(0,1);
	print_string("To move motor touch RIGHT SLIDER");
	refresh_oled();
	
	while(! change_touch_data.leftButton)
    11bc:	99 23       	and	r25, r25
    11be:	61 f3       	breq	.-40     	; 0x1198 <interface_tutorial+0x9a>
		send_joystick_possition(position, touch_data);
		change_touch_data = change_touchpad_data(touch_data);
	}
	change_touch_data.leftButton = 0;
	
	set_position(0,1);
    11c0:	61 e0       	ldi	r22, 0x01	; 1
    11c2:	70 e0       	ldi	r23, 0x00	; 0
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
	print_string("  To shoot touch RIGHT BUTTON   ");
    11cc:	8b ef       	ldi	r24, 0xFB	; 251
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
	refresh_oled();
    11d4:	0e 94 a5 03 	call	0x74a	; 0x74a <refresh_oled>
	
	while(! change_touch_data.leftButton)
	{
		touch_data = read_touchpad_data();
    11d8:	0e 94 97 02 	call	0x52e	; 0x52e <read_touchpad_data>
    11dc:	07 2f       	mov	r16, r23
    11de:	f8 2e       	mov	r15, r24
    11e0:	19 2f       	mov	r17, r25
		touch_data.rightTouchPad = 127;
		send_joystick_possition(position, touch_data);
    11e2:	4f e7       	ldi	r20, 0x7F	; 127
    11e4:	57 2f       	mov	r21, r23
    11e6:	68 2f       	mov	r22, r24
    11e8:	79 2f       	mov	r23, r25
    11ea:	ce 01       	movw	r24, r28
    11ec:	0e 94 1c 02 	call	0x438	; 0x438 <send_joystick_possition>
		change_touch_data = change_touchpad_data(touch_data);
    11f0:	6f e7       	ldi	r22, 0x7F	; 127
    11f2:	70 2f       	mov	r23, r16
    11f4:	8f 2d       	mov	r24, r15
    11f6:	91 2f       	mov	r25, r17
    11f8:	0e 94 cd 02 	call	0x59a	; 0x59a <change_touchpad_data>
	
	set_position(0,1);
	print_string("  To shoot touch RIGHT BUTTON   ");
	refresh_oled();
	
	while(! change_touch_data.leftButton)
    11fc:	99 23       	and	r25, r25
    11fe:	61 f3       	breq	.-40     	; 0x11d8 <interface_tutorial+0xda>
		send_joystick_possition(position, touch_data);
		change_touch_data = change_touchpad_data(touch_data);
	}
	change_touch_data.leftButton = 0;
	
	set_position(0,1);
    1200:	61 e0       	ldi	r22, 0x01	; 1
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
	print_string("    Try everything together     ");
    120c:	8c e1       	ldi	r24, 0x1C	; 28
    120e:	92 e0       	ldi	r25, 0x02	; 2
    1210:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
	refresh_oled();
    1214:	0e 94 a5 03 	call	0x74a	; 0x74a <refresh_oled>
	
	while(! change_touch_data.leftButton)
	{
		touch_data = read_touchpad_data();
    1218:	0e 94 97 02 	call	0x52e	; 0x52e <read_touchpad_data>
    121c:	e6 2e       	mov	r14, r22
    121e:	07 2f       	mov	r16, r23
    1220:	f8 2e       	mov	r15, r24
    1222:	19 2f       	mov	r17, r25
		position = read_joystick_position();
    1224:	0e 94 5e 02 	call	0x4bc	; 0x4bc <read_joystick_position>
		send_joystick_possition(position, touch_data);
    1228:	4e 2d       	mov	r20, r14
    122a:	50 2f       	mov	r21, r16
    122c:	6f 2d       	mov	r22, r15
    122e:	71 2f       	mov	r23, r17
    1230:	0e 94 1c 02 	call	0x438	; 0x438 <send_joystick_possition>
		change_touch_data = change_touchpad_data(touch_data);
    1234:	6e 2d       	mov	r22, r14
    1236:	70 2f       	mov	r23, r16
    1238:	8f 2d       	mov	r24, r15
    123a:	91 2f       	mov	r25, r17
    123c:	0e 94 cd 02 	call	0x59a	; 0x59a <change_touchpad_data>
	
	set_position(0,1);
	print_string("    Try everything together     ");
	refresh_oled();
	
	while(! change_touch_data.leftButton)
    1240:	99 23       	and	r25, r25
    1242:	51 f3       	breq	.-44     	; 0x1218 <interface_tutorial+0x11a>
	}
	change_touch_data.leftButton = 0;
	change_touch_data.rightButton = 0;
	
	return State_NewGame;
}
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	1f 91       	pop	r17
    124c:	0f 91       	pop	r16
    124e:	ff 90       	pop	r15
    1250:	ef 90       	pop	r14
    1252:	08 95       	ret

00001254 <interface_print_mode>:
*
* \param in game mode
****************************************************************************/
InterfaceState interface_print_mode(GameModes mode)
{
	switch (mode)
    1254:	83 30       	cpi	r24, 0x03	; 3
    1256:	a1 f0       	breq	.+40     	; 0x1280 <interface_print_mode+0x2c>
    1258:	18 f4       	brcc	.+6      	; 0x1260 <interface_print_mode+0xc>
    125a:	82 30       	cpi	r24, 0x02	; 2
    125c:	31 f0       	breq	.+12     	; 0x126a <interface_print_mode+0x16>
    125e:	30 c0       	rjmp	.+96     	; 0x12c0 <interface_print_mode+0x6c>
    1260:	84 30       	cpi	r24, 0x04	; 4
    1262:	c9 f0       	breq	.+50     	; 0x1296 <interface_print_mode+0x42>
    1264:	85 30       	cpi	r24, 0x05	; 5
    1266:	11 f1       	breq	.+68     	; 0x12ac <interface_print_mode+0x58>
    1268:	2b c0       	rjmp	.+86     	; 0x12c0 <interface_print_mode+0x6c>
	{
		case Easy :
			set_position(14,0);
    126a:	60 e0       	ldi	r22, 0x00	; 0
    126c:	70 e0       	ldi	r23, 0x00	; 0
    126e:	8e e0       	ldi	r24, 0x0E	; 14
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
			print_string("Easy");
    1276:	80 e4       	ldi	r24, 0x40	; 64
    1278:	91 e0       	ldi	r25, 0x01	; 1
    127a:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
			break;
    127e:	20 c0       	rjmp	.+64     	; 0x12c0 <interface_print_mode+0x6c>
			
		case Normal :
			set_position(12,0);
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	70 e0       	ldi	r23, 0x00	; 0
    1284:	8c e0       	ldi	r24, 0x0C	; 12
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
			print_string("Normal");
    128c:	85 e4       	ldi	r24, 0x45	; 69
    128e:	91 e0       	ldi	r25, 0x01	; 1
    1290:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
			break;
    1294:	15 c0       	rjmp	.+42     	; 0x12c0 <interface_print_mode+0x6c>
			
		case Hard :
			set_position(12,0);
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	70 e0       	ldi	r23, 0x00	; 0
    129a:	8c e0       	ldi	r24, 0x0C	; 12
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
			print_string("Hard");
    12a2:	8c e4       	ldi	r24, 0x4C	; 76
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
			break;
    12aa:	0a c0       	rjmp	.+20     	; 0x12c0 <interface_print_mode+0x6c>
						
		case Insane :
			set_position(12,0);
    12ac:	60 e0       	ldi	r22, 0x00	; 0
    12ae:	70 e0       	ldi	r23, 0x00	; 0
    12b0:	8c e0       	ldi	r24, 0x0C	; 12
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	0e 94 13 04 	call	0x826	; 0x826 <set_position>
			print_string("Insane");
    12b8:	81 e5       	ldi	r24, 0x51	; 81
    12ba:	91 e0       	ldi	r25, 0x01	; 1
    12bc:	0e 94 34 04 	call	0x868	; 0x868 <print_string>
			break;
	}
	revert_colour_line(0);
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <revert_colour_line>
	refresh_oled();
    12c6:	0e 94 a5 03 	call	0x74a	; 0x74a <refresh_oled>
	
	return State_Playing;
	
}
    12ca:	8b e0       	ldi	r24, 0x0B	; 11
    12cc:	08 95       	ret

000012ce <interface_playing>:

InterfaceState interface_playing()
{
    12ce:	ff 92       	push	r15
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	2a 97       	sbiw	r28, 0x0a	; 10
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
		send_joystick_possition(position, data);
		_delay_ms(1);
		
		if(CAN_receive_message(&canMessageNode2) != SUCCESS)
		{
			canMessageNode2.ID = 0xFF;	
    12e8:	ff 24       	eor	r15, r15
    12ea:	fa 94       	dec	r15
	TouchpadData data;
	JoystickPosition position;
	
	do
	{
		position = read_joystick_position();
    12ec:	0e 94 5e 02 	call	0x4bc	; 0x4bc <read_joystick_position>
    12f0:	8c 01       	movw	r16, r24
		data = read_touchpad_data();
    12f2:	0e 94 97 02 	call	0x52e	; 0x52e <read_touchpad_data>
    12f6:	ab 01       	movw	r20, r22
    12f8:	bc 01       	movw	r22, r24
		
		send_joystick_possition(position, data);
    12fa:	c8 01       	movw	r24, r16
    12fc:	0e 94 1c 02 	call	0x438	; 0x438 <send_joystick_possition>
    1300:	89 ef       	ldi	r24, 0xF9	; 249
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	f1 f7       	brne	.-4      	; 0x1304 <interface_playing+0x36>
    1308:	00 c0       	rjmp	.+0      	; 0x130a <interface_playing+0x3c>
    130a:	00 00       	nop
		_delay_ms(1);
		
		if(CAN_receive_message(&canMessageNode2) != SUCCESS)
    130c:	ce 01       	movw	r24, r28
    130e:	01 96       	adiw	r24, 0x01	; 1
    1310:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <CAN_receive_message>
    1314:	88 23       	and	r24, r24
    1316:	11 f0       	breq	.+4      	; 0x131c <interface_playing+0x4e>
		{
			canMessageNode2.ID = 0xFF;	
    1318:	f9 82       	std	Y+1, r15	; 0x01
    131a:	e8 cf       	rjmp	.-48     	; 0x12ec <interface_playing+0x1e>
		}
		
	} while(canMessageNode2.ID != 0x05);
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	85 30       	cpi	r24, 0x05	; 5
    1320:	29 f7       	brne	.-54     	; 0x12ec <interface_playing+0x1e>
	
	return State_Endgame; 
    1322:	8c e0       	ldi	r24, 0x0C	; 12
    1324:	2a 96       	adiw	r28, 0x0a	; 10
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	1f 91       	pop	r17
    1336:	0f 91       	pop	r16
    1338:	ff 90       	pop	r15
    133a:	08 95       	ret

0000133c <interface_state_machine>:
****************************************************************************/
void interface_state_machine()
{	
	static InterfaceState state = State_Username;

	clear_oled();
    133c:	0e 94 b2 03 	call	0x764	; 0x764 <clear_oled>
	
	switch(state)
    1340:	80 91 44 02 	lds	r24, 0x0244
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	8d 30       	cpi	r24, 0x0D	; 13
    1348:	91 05       	cpc	r25, r1
    134a:	08 f0       	brcs	.+2      	; 0x134e <interface_state_machine+0x12>
    134c:	57 c0       	rjmp	.+174    	; 0x13fc <interface_state_machine+0xc0>
    134e:	fc 01       	movw	r30, r24
    1350:	e8 5c       	subi	r30, 0xC8	; 200
    1352:	ff 4f       	sbci	r31, 0xFF	; 255
    1354:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <__tablejump2__>
	{
		case State_Username :
			state = interface_username();
    1358:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <interface_username>
    135c:	80 93 44 02 	sts	0x0244, r24
			break;
    1360:	08 95       	ret
		
		case State_NewGame :
			state = interface_new_game();
    1362:	0e 94 b6 05 	call	0xb6c	; 0xb6c <interface_new_game>
    1366:	80 93 44 02 	sts	0x0244, r24
			break;
    136a:	08 95       	ret
		
		case State_Tutorial :
			send_game_mode(Tutorial);
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
			state = interface_tutorial();
    1372:	0e 94 7f 08 	call	0x10fe	; 0x10fe <interface_tutorial>
    1376:	80 93 44 02 	sts	0x0244, r24
			break;
    137a:	08 95       	ret
		
		case State_Easy :
			send_game_mode(Easy);
    137c:	82 e0       	ldi	r24, 0x02	; 2
    137e:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
			state = interface_print_mode(Easy);
    1382:	82 e0       	ldi	r24, 0x02	; 2
    1384:	0e 94 2a 09 	call	0x1254	; 0x1254 <interface_print_mode>
    1388:	80 93 44 02 	sts	0x0244, r24
			break;
    138c:	08 95       	ret
		
		case State_Normal :
			send_game_mode(Normal);
    138e:	83 e0       	ldi	r24, 0x03	; 3
    1390:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
			state = interface_print_mode(Normal);
    1394:	83 e0       	ldi	r24, 0x03	; 3
    1396:	0e 94 2a 09 	call	0x1254	; 0x1254 <interface_print_mode>
    139a:	80 93 44 02 	sts	0x0244, r24
			break;
    139e:	08 95       	ret
		
		case State_Hard :
			send_game_mode(Hard);
    13a0:	84 e0       	ldi	r24, 0x04	; 4
    13a2:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
			state = interface_print_mode(Hard);
    13a6:	84 e0       	ldi	r24, 0x04	; 4
    13a8:	0e 94 2a 09 	call	0x1254	; 0x1254 <interface_print_mode>
    13ac:	80 93 44 02 	sts	0x0244, r24
			break;
    13b0:	08 95       	ret
		
		case State_Insane :
			send_game_mode(Insane);
    13b2:	85 e0       	ldi	r24, 0x05	; 5
    13b4:	0e 94 3b 02 	call	0x476	; 0x476 <send_game_mode>
			state = interface_print_mode(Insane);
    13b8:	85 e0       	ldi	r24, 0x05	; 5
    13ba:	0e 94 2a 09 	call	0x1254	; 0x1254 <interface_print_mode>
    13be:	80 93 44 02 	sts	0x0244, r24
			break;
    13c2:	08 95       	ret
		
		case State_HighScores :
			state = interface_high_scores();
    13c4:	0e 94 93 06 	call	0xd26	; 0xd26 <interface_high_scores>
    13c8:	80 93 44 02 	sts	0x0244, r24
			break;
    13cc:	08 95       	ret
		
		case State_Options :
			state = interface_options();
    13ce:	0e 94 b7 06 	call	0xd6e	; 0xd6e <interface_options>
    13d2:	80 93 44 02 	sts	0x0244, r24
			break;
    13d6:	08 95       	ret
		
		case State_Sound :
			state = interface_sound();
    13d8:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <interface_sound>
    13dc:	80 93 44 02 	sts	0x0244, r24
			break;
    13e0:	08 95       	ret
		
		case  State_Mode :
			state = interface_mode();
    13e2:	0e 94 60 07 	call	0xec0	; 0xec0 <interface_mode>
    13e6:	80 93 44 02 	sts	0x0244, r24
			break;
    13ea:	08 95       	ret
		
		case State_Playing:

			state = interface_playing();
    13ec:	0e 94 67 09 	call	0x12ce	; 0x12ce <interface_playing>
    13f0:	80 93 44 02 	sts	0x0244, r24
			break;
    13f4:	08 95       	ret
		
		case State_Endgame:
		//Ending animation, probably return to highscore
		//after some time
			state = State_HighScores;
    13f6:	88 e0       	ldi	r24, 0x08	; 8
    13f8:	80 93 44 02 	sts	0x0244, r24
    13fc:	08 95       	ret

000013fe <__divmodhi4>:
    13fe:	97 fb       	bst	r25, 7
    1400:	07 2e       	mov	r0, r23
    1402:	16 f4       	brtc	.+4      	; 0x1408 <__divmodhi4+0xa>
    1404:	00 94       	com	r0
    1406:	07 d0       	rcall	.+14     	; 0x1416 <__divmodhi4_neg1>
    1408:	77 fd       	sbrc	r23, 7
    140a:	09 d0       	rcall	.+18     	; 0x141e <__divmodhi4_neg2>
    140c:	0e 94 19 0a 	call	0x1432	; 0x1432 <__udivmodhi4>
    1410:	07 fc       	sbrc	r0, 7
    1412:	05 d0       	rcall	.+10     	; 0x141e <__divmodhi4_neg2>
    1414:	3e f4       	brtc	.+14     	; 0x1424 <__divmodhi4_exit>

00001416 <__divmodhi4_neg1>:
    1416:	90 95       	com	r25
    1418:	81 95       	neg	r24
    141a:	9f 4f       	sbci	r25, 0xFF	; 255
    141c:	08 95       	ret

0000141e <__divmodhi4_neg2>:
    141e:	70 95       	com	r23
    1420:	61 95       	neg	r22
    1422:	7f 4f       	sbci	r23, 0xFF	; 255

00001424 <__divmodhi4_exit>:
    1424:	08 95       	ret

00001426 <__tablejump2__>:
    1426:	ee 0f       	add	r30, r30
    1428:	ff 1f       	adc	r31, r31

0000142a <__tablejump__>:
    142a:	05 90       	lpm	r0, Z+
    142c:	f4 91       	lpm	r31, Z
    142e:	e0 2d       	mov	r30, r0
    1430:	09 94       	ijmp

00001432 <__udivmodhi4>:
    1432:	aa 1b       	sub	r26, r26
    1434:	bb 1b       	sub	r27, r27
    1436:	51 e1       	ldi	r21, 0x11	; 17
    1438:	07 c0       	rjmp	.+14     	; 0x1448 <__udivmodhi4_ep>

0000143a <__udivmodhi4_loop>:
    143a:	aa 1f       	adc	r26, r26
    143c:	bb 1f       	adc	r27, r27
    143e:	a6 17       	cp	r26, r22
    1440:	b7 07       	cpc	r27, r23
    1442:	10 f0       	brcs	.+4      	; 0x1448 <__udivmodhi4_ep>
    1444:	a6 1b       	sub	r26, r22
    1446:	b7 0b       	sbc	r27, r23

00001448 <__udivmodhi4_ep>:
    1448:	88 1f       	adc	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	5a 95       	dec	r21
    144e:	a9 f7       	brne	.-22     	; 0x143a <__udivmodhi4_loop>
    1450:	80 95       	com	r24
    1452:	90 95       	com	r25
    1454:	bc 01       	movw	r22, r24
    1456:	cd 01       	movw	r24, r26
    1458:	08 95       	ret

0000145a <fdevopen>:
    145a:	0f 93       	push	r16
    145c:	1f 93       	push	r17
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
    1462:	ec 01       	movw	r28, r24
    1464:	8b 01       	movw	r16, r22
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	31 f4       	brne	.+12     	; 0x1476 <fdevopen+0x1c>
    146a:	61 15       	cp	r22, r1
    146c:	71 05       	cpc	r23, r1
    146e:	19 f4       	brne	.+6      	; 0x1476 <fdevopen+0x1c>
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	38 c0       	rjmp	.+112    	; 0x14e6 <fdevopen+0x8c>
    1476:	6e e0       	ldi	r22, 0x0E	; 14
    1478:	70 e0       	ldi	r23, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	0e 94 a5 0a 	call	0x154a	; 0x154a <calloc>
    1482:	fc 01       	movw	r30, r24
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	a1 f3       	breq	.-24     	; 0x1470 <fdevopen+0x16>
    1488:	80 e8       	ldi	r24, 0x80	; 128
    148a:	83 83       	std	Z+3, r24	; 0x03
    148c:	01 15       	cp	r16, r1
    148e:	11 05       	cpc	r17, r1
    1490:	71 f0       	breq	.+28     	; 0x14ae <fdevopen+0x54>
    1492:	13 87       	std	Z+11, r17	; 0x0b
    1494:	02 87       	std	Z+10, r16	; 0x0a
    1496:	81 e8       	ldi	r24, 0x81	; 129
    1498:	83 83       	std	Z+3, r24	; 0x03
    149a:	80 91 45 02 	lds	r24, 0x0245
    149e:	90 91 46 02 	lds	r25, 0x0246
    14a2:	89 2b       	or	r24, r25
    14a4:	21 f4       	brne	.+8      	; 0x14ae <fdevopen+0x54>
    14a6:	f0 93 46 02 	sts	0x0246, r31
    14aa:	e0 93 45 02 	sts	0x0245, r30
    14ae:	20 97       	sbiw	r28, 0x00	; 0
    14b0:	c9 f0       	breq	.+50     	; 0x14e4 <fdevopen+0x8a>
    14b2:	d1 87       	std	Z+9, r29	; 0x09
    14b4:	c0 87       	std	Z+8, r28	; 0x08
    14b6:	83 81       	ldd	r24, Z+3	; 0x03
    14b8:	82 60       	ori	r24, 0x02	; 2
    14ba:	83 83       	std	Z+3, r24	; 0x03
    14bc:	80 91 47 02 	lds	r24, 0x0247
    14c0:	90 91 48 02 	lds	r25, 0x0248
    14c4:	89 2b       	or	r24, r25
    14c6:	71 f4       	brne	.+28     	; 0x14e4 <fdevopen+0x8a>
    14c8:	f0 93 48 02 	sts	0x0248, r31
    14cc:	e0 93 47 02 	sts	0x0247, r30
    14d0:	80 91 49 02 	lds	r24, 0x0249
    14d4:	90 91 4a 02 	lds	r25, 0x024A
    14d8:	89 2b       	or	r24, r25
    14da:	21 f4       	brne	.+8      	; 0x14e4 <fdevopen+0x8a>
    14dc:	f0 93 4a 02 	sts	0x024A, r31
    14e0:	e0 93 49 02 	sts	0x0249, r30
    14e4:	cf 01       	movw	r24, r30
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	1f 91       	pop	r17
    14ec:	0f 91       	pop	r16
    14ee:	08 95       	ret

000014f0 <puts>:
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	e0 91 47 02 	lds	r30, 0x0247
    14fc:	f0 91 48 02 	lds	r31, 0x0248
    1500:	23 81       	ldd	r18, Z+3	; 0x03
    1502:	21 ff       	sbrs	r18, 1
    1504:	1b c0       	rjmp	.+54     	; 0x153c <puts+0x4c>
    1506:	ec 01       	movw	r28, r24
    1508:	00 e0       	ldi	r16, 0x00	; 0
    150a:	10 e0       	ldi	r17, 0x00	; 0
    150c:	89 91       	ld	r24, Y+
    150e:	60 91 47 02 	lds	r22, 0x0247
    1512:	70 91 48 02 	lds	r23, 0x0248
    1516:	db 01       	movw	r26, r22
    1518:	18 96       	adiw	r26, 0x08	; 8
    151a:	ed 91       	ld	r30, X+
    151c:	fc 91       	ld	r31, X
    151e:	19 97       	sbiw	r26, 0x09	; 9
    1520:	88 23       	and	r24, r24
    1522:	31 f0       	breq	.+12     	; 0x1530 <puts+0x40>
    1524:	09 95       	icall
    1526:	89 2b       	or	r24, r25
    1528:	89 f3       	breq	.-30     	; 0x150c <puts+0x1c>
    152a:	0f ef       	ldi	r16, 0xFF	; 255
    152c:	1f ef       	ldi	r17, 0xFF	; 255
    152e:	ee cf       	rjmp	.-36     	; 0x150c <puts+0x1c>
    1530:	8a e0       	ldi	r24, 0x0A	; 10
    1532:	09 95       	icall
    1534:	89 2b       	or	r24, r25
    1536:	11 f4       	brne	.+4      	; 0x153c <puts+0x4c>
    1538:	c8 01       	movw	r24, r16
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <puts+0x50>
    153c:	8f ef       	ldi	r24, 0xFF	; 255
    153e:	9f ef       	ldi	r25, 0xFF	; 255
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	08 95       	ret

0000154a <calloc>:
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	86 9f       	mul	r24, r22
    1554:	80 01       	movw	r16, r0
    1556:	87 9f       	mul	r24, r23
    1558:	10 0d       	add	r17, r0
    155a:	96 9f       	mul	r25, r22
    155c:	10 0d       	add	r17, r0
    155e:	11 24       	eor	r1, r1
    1560:	c8 01       	movw	r24, r16
    1562:	0e 94 c1 0a 	call	0x1582	; 0x1582 <malloc>
    1566:	ec 01       	movw	r28, r24
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	29 f0       	breq	.+10     	; 0x1576 <calloc+0x2c>
    156c:	a8 01       	movw	r20, r16
    156e:	60 e0       	ldi	r22, 0x00	; 0
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <memset>
    1576:	ce 01       	movw	r24, r28
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	1f 91       	pop	r17
    157e:	0f 91       	pop	r16
    1580:	08 95       	ret

00001582 <malloc>:
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
    1586:	82 30       	cpi	r24, 0x02	; 2
    1588:	91 05       	cpc	r25, r1
    158a:	10 f4       	brcc	.+4      	; 0x1590 <malloc+0xe>
    158c:	82 e0       	ldi	r24, 0x02	; 2
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	e0 91 4d 02 	lds	r30, 0x024D
    1594:	f0 91 4e 02 	lds	r31, 0x024E
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	a0 e0       	ldi	r26, 0x00	; 0
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	30 97       	sbiw	r30, 0x00	; 0
    15a2:	39 f1       	breq	.+78     	; 0x15f2 <malloc+0x70>
    15a4:	40 81       	ld	r20, Z
    15a6:	51 81       	ldd	r21, Z+1	; 0x01
    15a8:	48 17       	cp	r20, r24
    15aa:	59 07       	cpc	r21, r25
    15ac:	b8 f0       	brcs	.+46     	; 0x15dc <malloc+0x5a>
    15ae:	48 17       	cp	r20, r24
    15b0:	59 07       	cpc	r21, r25
    15b2:	71 f4       	brne	.+28     	; 0x15d0 <malloc+0x4e>
    15b4:	82 81       	ldd	r24, Z+2	; 0x02
    15b6:	93 81       	ldd	r25, Z+3	; 0x03
    15b8:	10 97       	sbiw	r26, 0x00	; 0
    15ba:	29 f0       	breq	.+10     	; 0x15c6 <malloc+0x44>
    15bc:	13 96       	adiw	r26, 0x03	; 3
    15be:	9c 93       	st	X, r25
    15c0:	8e 93       	st	-X, r24
    15c2:	12 97       	sbiw	r26, 0x02	; 2
    15c4:	2c c0       	rjmp	.+88     	; 0x161e <malloc+0x9c>
    15c6:	90 93 4e 02 	sts	0x024E, r25
    15ca:	80 93 4d 02 	sts	0x024D, r24
    15ce:	27 c0       	rjmp	.+78     	; 0x161e <malloc+0x9c>
    15d0:	21 15       	cp	r18, r1
    15d2:	31 05       	cpc	r19, r1
    15d4:	31 f0       	breq	.+12     	; 0x15e2 <malloc+0x60>
    15d6:	42 17       	cp	r20, r18
    15d8:	53 07       	cpc	r21, r19
    15da:	18 f0       	brcs	.+6      	; 0x15e2 <malloc+0x60>
    15dc:	a9 01       	movw	r20, r18
    15de:	db 01       	movw	r26, r22
    15e0:	01 c0       	rjmp	.+2      	; 0x15e4 <malloc+0x62>
    15e2:	ef 01       	movw	r28, r30
    15e4:	9a 01       	movw	r18, r20
    15e6:	bd 01       	movw	r22, r26
    15e8:	df 01       	movw	r26, r30
    15ea:	02 80       	ldd	r0, Z+2	; 0x02
    15ec:	f3 81       	ldd	r31, Z+3	; 0x03
    15ee:	e0 2d       	mov	r30, r0
    15f0:	d7 cf       	rjmp	.-82     	; 0x15a0 <malloc+0x1e>
    15f2:	21 15       	cp	r18, r1
    15f4:	31 05       	cpc	r19, r1
    15f6:	f9 f0       	breq	.+62     	; 0x1636 <malloc+0xb4>
    15f8:	28 1b       	sub	r18, r24
    15fa:	39 0b       	sbc	r19, r25
    15fc:	24 30       	cpi	r18, 0x04	; 4
    15fe:	31 05       	cpc	r19, r1
    1600:	80 f4       	brcc	.+32     	; 0x1622 <malloc+0xa0>
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	9b 81       	ldd	r25, Y+3	; 0x03
    1606:	61 15       	cp	r22, r1
    1608:	71 05       	cpc	r23, r1
    160a:	21 f0       	breq	.+8      	; 0x1614 <malloc+0x92>
    160c:	fb 01       	movw	r30, r22
    160e:	93 83       	std	Z+3, r25	; 0x03
    1610:	82 83       	std	Z+2, r24	; 0x02
    1612:	04 c0       	rjmp	.+8      	; 0x161c <malloc+0x9a>
    1614:	90 93 4e 02 	sts	0x024E, r25
    1618:	80 93 4d 02 	sts	0x024D, r24
    161c:	fe 01       	movw	r30, r28
    161e:	32 96       	adiw	r30, 0x02	; 2
    1620:	44 c0       	rjmp	.+136    	; 0x16aa <malloc+0x128>
    1622:	fe 01       	movw	r30, r28
    1624:	e2 0f       	add	r30, r18
    1626:	f3 1f       	adc	r31, r19
    1628:	81 93       	st	Z+, r24
    162a:	91 93       	st	Z+, r25
    162c:	22 50       	subi	r18, 0x02	; 2
    162e:	31 09       	sbc	r19, r1
    1630:	39 83       	std	Y+1, r19	; 0x01
    1632:	28 83       	st	Y, r18
    1634:	3a c0       	rjmp	.+116    	; 0x16aa <malloc+0x128>
    1636:	20 91 4b 02 	lds	r18, 0x024B
    163a:	30 91 4c 02 	lds	r19, 0x024C
    163e:	23 2b       	or	r18, r19
    1640:	41 f4       	brne	.+16     	; 0x1652 <malloc+0xd0>
    1642:	20 91 02 01 	lds	r18, 0x0102
    1646:	30 91 03 01 	lds	r19, 0x0103
    164a:	30 93 4c 02 	sts	0x024C, r19
    164e:	20 93 4b 02 	sts	0x024B, r18
    1652:	20 91 00 01 	lds	r18, 0x0100
    1656:	30 91 01 01 	lds	r19, 0x0101
    165a:	21 15       	cp	r18, r1
    165c:	31 05       	cpc	r19, r1
    165e:	41 f4       	brne	.+16     	; 0x1670 <malloc+0xee>
    1660:	2d b7       	in	r18, 0x3d	; 61
    1662:	3e b7       	in	r19, 0x3e	; 62
    1664:	40 91 04 01 	lds	r20, 0x0104
    1668:	50 91 05 01 	lds	r21, 0x0105
    166c:	24 1b       	sub	r18, r20
    166e:	35 0b       	sbc	r19, r21
    1670:	e0 91 4b 02 	lds	r30, 0x024B
    1674:	f0 91 4c 02 	lds	r31, 0x024C
    1678:	e2 17       	cp	r30, r18
    167a:	f3 07       	cpc	r31, r19
    167c:	a0 f4       	brcc	.+40     	; 0x16a6 <malloc+0x124>
    167e:	2e 1b       	sub	r18, r30
    1680:	3f 0b       	sbc	r19, r31
    1682:	28 17       	cp	r18, r24
    1684:	39 07       	cpc	r19, r25
    1686:	78 f0       	brcs	.+30     	; 0x16a6 <malloc+0x124>
    1688:	ac 01       	movw	r20, r24
    168a:	4e 5f       	subi	r20, 0xFE	; 254
    168c:	5f 4f       	sbci	r21, 0xFF	; 255
    168e:	24 17       	cp	r18, r20
    1690:	35 07       	cpc	r19, r21
    1692:	48 f0       	brcs	.+18     	; 0x16a6 <malloc+0x124>
    1694:	4e 0f       	add	r20, r30
    1696:	5f 1f       	adc	r21, r31
    1698:	50 93 4c 02 	sts	0x024C, r21
    169c:	40 93 4b 02 	sts	0x024B, r20
    16a0:	81 93       	st	Z+, r24
    16a2:	91 93       	st	Z+, r25
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <malloc+0x128>
    16a6:	e0 e0       	ldi	r30, 0x00	; 0
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	cf 01       	movw	r24, r30
    16ac:	df 91       	pop	r29
    16ae:	cf 91       	pop	r28
    16b0:	08 95       	ret

000016b2 <free>:
    16b2:	cf 93       	push	r28
    16b4:	df 93       	push	r29
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	09 f4       	brne	.+2      	; 0x16bc <free+0xa>
    16ba:	87 c0       	rjmp	.+270    	; 0x17ca <free+0x118>
    16bc:	fc 01       	movw	r30, r24
    16be:	32 97       	sbiw	r30, 0x02	; 2
    16c0:	13 82       	std	Z+3, r1	; 0x03
    16c2:	12 82       	std	Z+2, r1	; 0x02
    16c4:	c0 91 4d 02 	lds	r28, 0x024D
    16c8:	d0 91 4e 02 	lds	r29, 0x024E
    16cc:	20 97       	sbiw	r28, 0x00	; 0
    16ce:	81 f4       	brne	.+32     	; 0x16f0 <free+0x3e>
    16d0:	20 81       	ld	r18, Z
    16d2:	31 81       	ldd	r19, Z+1	; 0x01
    16d4:	28 0f       	add	r18, r24
    16d6:	39 1f       	adc	r19, r25
    16d8:	80 91 4b 02 	lds	r24, 0x024B
    16dc:	90 91 4c 02 	lds	r25, 0x024C
    16e0:	82 17       	cp	r24, r18
    16e2:	93 07       	cpc	r25, r19
    16e4:	79 f5       	brne	.+94     	; 0x1744 <free+0x92>
    16e6:	f0 93 4c 02 	sts	0x024C, r31
    16ea:	e0 93 4b 02 	sts	0x024B, r30
    16ee:	6d c0       	rjmp	.+218    	; 0x17ca <free+0x118>
    16f0:	de 01       	movw	r26, r28
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	ae 17       	cp	r26, r30
    16f8:	bf 07       	cpc	r27, r31
    16fa:	50 f4       	brcc	.+20     	; 0x1710 <free+0x5e>
    16fc:	12 96       	adiw	r26, 0x02	; 2
    16fe:	4d 91       	ld	r20, X+
    1700:	5c 91       	ld	r21, X
    1702:	13 97       	sbiw	r26, 0x03	; 3
    1704:	9d 01       	movw	r18, r26
    1706:	41 15       	cp	r20, r1
    1708:	51 05       	cpc	r21, r1
    170a:	09 f1       	breq	.+66     	; 0x174e <free+0x9c>
    170c:	da 01       	movw	r26, r20
    170e:	f3 cf       	rjmp	.-26     	; 0x16f6 <free+0x44>
    1710:	b3 83       	std	Z+3, r27	; 0x03
    1712:	a2 83       	std	Z+2, r26	; 0x02
    1714:	40 81       	ld	r20, Z
    1716:	51 81       	ldd	r21, Z+1	; 0x01
    1718:	84 0f       	add	r24, r20
    171a:	95 1f       	adc	r25, r21
    171c:	8a 17       	cp	r24, r26
    171e:	9b 07       	cpc	r25, r27
    1720:	71 f4       	brne	.+28     	; 0x173e <free+0x8c>
    1722:	8d 91       	ld	r24, X+
    1724:	9c 91       	ld	r25, X
    1726:	11 97       	sbiw	r26, 0x01	; 1
    1728:	84 0f       	add	r24, r20
    172a:	95 1f       	adc	r25, r21
    172c:	02 96       	adiw	r24, 0x02	; 2
    172e:	91 83       	std	Z+1, r25	; 0x01
    1730:	80 83       	st	Z, r24
    1732:	12 96       	adiw	r26, 0x02	; 2
    1734:	8d 91       	ld	r24, X+
    1736:	9c 91       	ld	r25, X
    1738:	13 97       	sbiw	r26, 0x03	; 3
    173a:	93 83       	std	Z+3, r25	; 0x03
    173c:	82 83       	std	Z+2, r24	; 0x02
    173e:	21 15       	cp	r18, r1
    1740:	31 05       	cpc	r19, r1
    1742:	29 f4       	brne	.+10     	; 0x174e <free+0x9c>
    1744:	f0 93 4e 02 	sts	0x024E, r31
    1748:	e0 93 4d 02 	sts	0x024D, r30
    174c:	3e c0       	rjmp	.+124    	; 0x17ca <free+0x118>
    174e:	d9 01       	movw	r26, r18
    1750:	13 96       	adiw	r26, 0x03	; 3
    1752:	fc 93       	st	X, r31
    1754:	ee 93       	st	-X, r30
    1756:	12 97       	sbiw	r26, 0x02	; 2
    1758:	4d 91       	ld	r20, X+
    175a:	5d 91       	ld	r21, X+
    175c:	a4 0f       	add	r26, r20
    175e:	b5 1f       	adc	r27, r21
    1760:	ea 17       	cp	r30, r26
    1762:	fb 07       	cpc	r31, r27
    1764:	79 f4       	brne	.+30     	; 0x1784 <free+0xd2>
    1766:	80 81       	ld	r24, Z
    1768:	91 81       	ldd	r25, Z+1	; 0x01
    176a:	84 0f       	add	r24, r20
    176c:	95 1f       	adc	r25, r21
    176e:	02 96       	adiw	r24, 0x02	; 2
    1770:	d9 01       	movw	r26, r18
    1772:	11 96       	adiw	r26, 0x01	; 1
    1774:	9c 93       	st	X, r25
    1776:	8e 93       	st	-X, r24
    1778:	82 81       	ldd	r24, Z+2	; 0x02
    177a:	93 81       	ldd	r25, Z+3	; 0x03
    177c:	13 96       	adiw	r26, 0x03	; 3
    177e:	9c 93       	st	X, r25
    1780:	8e 93       	st	-X, r24
    1782:	12 97       	sbiw	r26, 0x02	; 2
    1784:	e0 e0       	ldi	r30, 0x00	; 0
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	9b 81       	ldd	r25, Y+3	; 0x03
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	19 f0       	breq	.+6      	; 0x1796 <free+0xe4>
    1790:	fe 01       	movw	r30, r28
    1792:	ec 01       	movw	r28, r24
    1794:	f9 cf       	rjmp	.-14     	; 0x1788 <free+0xd6>
    1796:	ce 01       	movw	r24, r28
    1798:	02 96       	adiw	r24, 0x02	; 2
    179a:	28 81       	ld	r18, Y
    179c:	39 81       	ldd	r19, Y+1	; 0x01
    179e:	82 0f       	add	r24, r18
    17a0:	93 1f       	adc	r25, r19
    17a2:	20 91 4b 02 	lds	r18, 0x024B
    17a6:	30 91 4c 02 	lds	r19, 0x024C
    17aa:	28 17       	cp	r18, r24
    17ac:	39 07       	cpc	r19, r25
    17ae:	69 f4       	brne	.+26     	; 0x17ca <free+0x118>
    17b0:	30 97       	sbiw	r30, 0x00	; 0
    17b2:	29 f4       	brne	.+10     	; 0x17be <free+0x10c>
    17b4:	10 92 4e 02 	sts	0x024E, r1
    17b8:	10 92 4d 02 	sts	0x024D, r1
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <free+0x110>
    17be:	13 82       	std	Z+3, r1	; 0x03
    17c0:	12 82       	std	Z+2, r1	; 0x02
    17c2:	d0 93 4c 02 	sts	0x024C, r29
    17c6:	c0 93 4b 02 	sts	0x024B, r28
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	08 95       	ret

000017d0 <memset>:
    17d0:	dc 01       	movw	r26, r24
    17d2:	01 c0       	rjmp	.+2      	; 0x17d6 <memset+0x6>
    17d4:	6d 93       	st	X+, r22
    17d6:	41 50       	subi	r20, 0x01	; 1
    17d8:	50 40       	sbci	r21, 0x00	; 0
    17da:	e0 f7       	brcc	.-8      	; 0x17d4 <memset+0x4>
    17dc:	08 95       	ret

000017de <_exit>:
    17de:	f8 94       	cli

000017e0 <__stop_program>:
    17e0:	ff cf       	rjmp	.-2      	; 0x17e0 <__stop_program>
